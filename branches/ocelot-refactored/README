Introduction
	The emergence of GPGPU programming models such as CUDA and OpenCL 
	provide avenues for general purpose application developers to leverage the 
	computation capabilities of highly parallel SIMD GPU architectures. PTX 
	defines a machine model and virtual ISA for these architectures that is 
	used commercially by NVIDIA GPUs, but is also representative of other 
	SIMD machine models. Ocelot seeks to develop a set of tools that enable 
	the low level analysis of GPGPU applications as well a providing a JIT 
	compiler for generic architectures. We have completed control and dataflow 
	analysis modules for PTX as well as an emulator for the PTX 1.3-1.4 
	virtual machine compatible with CUDA 2.1-2.2 applications. We are 
	currently working on a back end binary translator from PTX to various 
	architectures. 

Requirements

	Compiler Tools

		The following compiler tools are required (tested):

			* C++ Compiler (GCC 4.3.2)
			* Lex Lexer Generator (Flex 2.5.35)
			* YACC Parser Generator (Bison 2.3)
			* Autoconf (2.63)
			* Automake (1.10.2)
			* Cuda toolkit (2.2)
			* Libtool (2.2.6) 

	Libraries

		The following libraries are required to be installed:

			* boost_system
			* boost_filesystem
			* boost_serialization
			* GLEW
			* rt 

	Library Headers

		The following external library headers are required to be on your 
		search path:

			* hydrazine (http://code.google.com/p/hydrazine/)
			* boost (http://www.boost.org/) 

Comments

	We require a compiler that supports parts of the upcoming C++0x standard.

	Ocelot is rigorously tested on Ubuntu 9.04 using GCC-4.3.3. We strive to be 
	ANSI C++ compliant, but only the specified systems is actively tested.

Installing
	Instructions

	Follow the standard autotools flow.

		* libtoolize; aclocal; autoconf; automake; ./configure; make 

	This will generate the following libtool libraries:

		* libir.la
		* libparser.la
		* libhydrazine.la
		* libexecutive.la
		* libtrace.la
		* libcudart.la 

	These libraries can be used to access the tools within ocelot or linked 
	against a CUDA application compiled with NVCC to emulate a CUDA device. 
