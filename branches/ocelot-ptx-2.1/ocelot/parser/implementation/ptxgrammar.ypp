/*! \file ptx1_4grammar.ypp
	\author Gregory Diamos <gregory.diamos@gatech.edu>
	\date Monday June 15, 2009
	\brief The YACC grammar file for PTX
*/

%{
	#include <iostream>
	#include <ocelot/parser/interface/PTXParser.h>
	#include <ocelot/parser/interface/PTXLexer.h>
	#include <hydrazine/implementation/debug.h>
	#include <cassert>
	#include <cstring>

	#define YYERROR_VERBOSE 0

	#ifdef REPORT_BASE
	#undef REPORT_BASE
	#endif

	#define REPORT_BASE 0

	namespace ptx
	{
	
	int yylex( YYSTYPE* token, YYLTYPE* location, parser::PTXLexer& lexer );
	void yyerror( YYLTYPE* location, parser::PTXLexer& lexer, 
		parser::PTXParser::State& state, char const* message );
	
	std::string yyTypeToString( int );
	
%}

%union
{
	char text[1024];
	long long int value;
	long long unsigned int uvalue;

	double doubleFloat;
	float singleFloat;
}

%parse-param {parser::PTXLexer& lexer}
%parse-param {parser::PTXParser::State& state}
%lex-param {parser::PTXLexer& lexer}
%pure-parser

%token<text> TOKEN_LABEL TOKEN_IDENTIFIER TOKEN_STRING
%token<text> TOKEN_INV_PREDICATE_IDENTIFIER TOKEN_PREDICATE_IDENTIFIER

%token<text> OPCODE_COS OPCODE_SQRT OPCODE_ADD OPCODE_RSQRT OPCODE_ADDC
%token<text> OPCODE_MUL OPCODE_SAD OPCODE_SUB OPCODE_EX2 OPCODE_LG2
%token<text> OPCODE_RCP OPCODE_SIN OPCODE_REM OPCODE_MUL24 OPCODE_MAD24
%token<text> OPCODE_DIV OPCODE_ABS OPCODE_NEG OPCODE_MIN OPCODE_MAX
%token<text> OPCODE_MAD OPCODE_SET OPCODE_SETP OPCODE_SELP OPCODE_SLCT
%token<text> OPCODE_MOV OPCODE_ST OPCODE_CVT OPCODE_AND OPCODE_XOR OPCODE_OR
%token<text> OPCODE_BRA OPCODE_CALL OPCODE_RET OPCODE_EXIT OPCODE_TRAP 
%token<text> OPCODE_BRKPT OPCODE_SUBC OPCODE_TEX OPCODE_LD OPCODE_BARSYNC 
%token<text> OPCODE_ATOM OPCODE_RED OPCODE_NOT OPCODE_CNOT OPCODE_VOTE
%token<text> OPCODE_SHR OPCODE_SHL OPCODE_FMA OPCODE_MEMBAR OPCODE_PMEVENT
%token<text> OPCODE_POPC OPCODE_PRMT OPCODE_CLZ OPCODE_BFIND OPCODE_BREV 
%token<text> OPCODE_BFI

%token<value> PREPROCESSOR_INCLUDE PREPROCESSOR_DEFINE PREPROCESSOR_IF 
%token<value> PREPROCESSOR_IFDEF PREPROCESSOR_ELSE PREPROCESSOR_ENDIF 
%token<value> PREPROCESSOR_LINE PREPROCESSOR_FILE

%token<value> TOKEN_ENTRY TOKEN_EXTERN TOKEN_FILE TOKEN_VISIBLE TOKEN_LOC
%token<value> TOKEN_FUNCTION TOKEN_STRUCT TOKEN_UNION TOKEN_TARGET TOKEN_VERSION
%token<value> TOKEN_SECTION

%token<value> TOKEN_MAXNREG TOKEN_MAXNTID TOKEN_MAXNCTAPERSM TOKEN_SM10
%token<value> TOKEN_MINNCTAPERSM
%token<value> TOKEN_SM11 TOKEN_SM12 TOKEN_SM13 TOKEN_SM20 TOKEN_MAP_F64_TO_F32
%token<value> TOKEN_SM21

%token<value> TOKEN_CONST TOKEN_GLOBAL TOKEN_LOCAL TOKEN_PARAM TOKEN_PRAGMA 
%token<value> TOKEN_REG TOKEN_SHARED TOKEN_SREG TOKEN_TEX TOKEN_SURF TOKEN_CTA
%token<value> TOKEN_GL TOKEN_SYS

%token<value> TOKEN_U32 TOKEN_S32 TOKEN_S8 TOKEN_S16 TOKEN_S64 TOKEN_U8 
%token<value> TOKEN_U16 TOKEN_U64 TOKEN_B8 TOKEN_B16 TOKEN_B32 TOKEN_B64 
%token<value> TOKEN_F16 TOKEN_F64 TOKEN_F32 TOKEN_PRED

%token<value> TOKEN_EQ TOKEN_NE TOKEN_LT TOKEN_LE TOKEN_GT TOKEN_GE
%token<value> TOKEN_LS TOKEN_HS TOKEN_EQU TOKEN_NEU TOKEN_LTU TOKEN_LEU
%token<value> TOKEN_GTU TOKEN_GEU TOKEN_NUM TOKEN_NAN

%token<value> TOKEN_HI TOKEN_LO TOKEN_AND TOKEN_OR TOKEN_XOR
%token<value> TOKEN_RN TOKEN_RM TOKEN_RZ TOKEN_RP TOKEN_SAT TOKEN_VOLATILE
%token<value> TOKEN_UNI TOKEN_ALIGN TOKEN_BYTE TOKEN_WIDE TOKEN_CARRY
%token<value> TOKEN_RNI TOKEN_RMI TOKEN_RZI TOKEN_RPI
%token<value> TOKEN_FTZ TOKEN_APPROX TOKEN_FULL TOKEN_SHIFT_AMOUNT

%token<value> TOKEN_V2 TOKEN_V4
%token<value> TOKEN_X TOKEN_Y TOKEN_Z TOKEN_W

%token<value> TOKEN_ANY TOKEN_ALL

%token<value> TOKEN_MIN TOKEN_MAX TOKEN_DEC TOKEN_INC TOKEN_ADD TOKEN_CAS
%token<value> TOKEN_EXCH

%token<value> TOKEN_1D TOKEN_2D TOKEN_3D

%token<value> TOKEN_CA TOKEN_WB TOKEN_CG TOKEN_CS TOKEN_LU TOKEN_CV TOKEN_WT

%token<value> TOKEN_L1 TOKEN_L2

%token<value> TOKEN_WIDTH TOKEN_DEPTH TOKEN_HEIGHT TOKEN_NORMALIZED_COORDS
%token<value> TOKEN_FILTER_MODE TOKEN_ADDR_MODE_0 TOKEN_ADDR_MODE_1
%token<value> TOKEN_ADDR_MODE_2

%token<value> TOKEN_TRAP TOKEN_CLAMP TOKEN_ZERO

%token<value> TOKEN_ARRIVE TOKEN_RED TOKEN_POPC

%token<value> TOKEN_BALLOT

%token<value> TOKEN_F4E TOKEN_B4E TOKEN_RC8 TOKEN_ECL TOKEN_ECR TOKEN_RC16

%token<value> TOKEN_DECIMAL_CONSTANT

%token<uvalue> TOKEN_UNSIGNED_DECIMAL_CONSTANT

%token<singleFloat> TOKEN_SINGLE_CONSTANT

%token<doubleFloat> TOKEN_DOUBLE_CONSTANT

%start statements

%%

nonEntryStatements : version | target | registerDeclaration | fileDeclaration | 
	initializableDeclaration | uninitializableDeclaration | unsupported | 
	preprocessor;

nonEntryStatement : nonEntryStatements
{
	state.statementEnd( @1 );
};

statement : nonEntryStatement | entry;

statements : statement | statements statement;

preprocessorCommand : PREPROCESSOR_INCLUDE | PREPROCESSOR_DEFINE | PREPROCESSOR_IF 
	| PREPROCESSOR_IFDEF | PREPROCESSOR_ELSE | PREPROCESSOR_ENDIF 
	| PREPROCESSOR_LINE | PREPROCESSOR_FILE;


preprocessor : preprocessorCommand
{
	state.preprocessor( $<value>1 );
};

version : TOKEN_VERSION TOKEN_DOUBLE_CONSTANT 
{ 
	state.version( $<doubleFloat>2, @2 );
};

identifier : '_' | TOKEN_IDENTIFIER | opcode;

identifierList : identifier
{
	state.identifierList( $<text>1 );
};

identifierList : identifierList ',' identifier
{
	state.identifierList2( $<text>3 );
};

decimalListSingle : TOKEN_DECIMAL_CONSTANT
{
	state.decimalListSingle( $<value>1 );
};

decimalListSingle : decimalListSingle ',' TOKEN_DECIMAL_CONSTANT
{
	state.decimalListSingle2( $<value>3 );
};

decimalList : '{' decimalList '}' ',' '{' decimalList '}';
decimalList : '{' decimalListSingle '}' ',' '{' decimalListSingle '}';

decimalInitializer : decimalList | '{' decimalList '}' | 
	'{' decimalListSingle '}' | decimalListSingle;

floatListSingle : TOKEN_DOUBLE_CONSTANT
{
	state.floatList( $<doubleFloat>1 );
};

floatListSingle : floatListSingle ',' TOKEN_DOUBLE_CONSTANT
{
	state.floatList1( $<doubleFloat>3 );
};

floatList : '{' floatList '}' ',' '{' floatList '}';
floatList : '{' floatListSingle '}' ',' '{' floatListSingle '}';

floatInitializer : floatList |  '{' floatList '}' | '{' floatListSingle '}' 
	| floatListSingle;

singleListSingle : TOKEN_SINGLE_CONSTANT
{
	state.singleList( $<singleFloat>1 );
};

singleListSingle : singleListSingle ',' TOKEN_SINGLE_CONSTANT
{
	state.singleList1( $<singleFloat>3 );
};

singleList : '{' singleList '}' ',' '{' singleList '}';
singleList : '{' singleListSingle '}' ',' '{' singleListSingle '}';

singleInitializer : singleList |  '{' singleList '}' | '{' singleListSingle '}' 
	| singleListSingle;

shaderModel : TOKEN_SM10 | TOKEN_SM11 | TOKEN_SM12 | TOKEN_SM13 | TOKEN_SM20;
floatingPointOption : TOKEN_MAP_F64_TO_F32;

targetOption : shaderModel | floatingPointOption;
targetElement : targetOption
{
	state.targetElement( $<value>1 );
};

targetElementList : /* empty string */ | targetElement 
	| targetElementList ',' targetElement;

target : TOKEN_TARGET targetElementList
{
	state.target();
};

addressSpaceIdentifier : TOKEN_REG | TOKEN_SREG | TOKEN_TEX | TOKEN_CONST 
	| TOKEN_GLOBAL | TOKEN_LOCAL | TOKEN_PARAM | TOKEN_SHARED;

addressSpace : addressSpaceIdentifier
{
	state.addressSpace( $<value>1 );
};

dataTypeId : TOKEN_U8 | TOKEN_U16 | TOKEN_U32 | TOKEN_U64 | TOKEN_S8 
	| TOKEN_S16 | TOKEN_S32 | TOKEN_S64 | TOKEN_B8 | TOKEN_B16 | TOKEN_B32 
	| TOKEN_B64 | TOKEN_F16 | TOKEN_F32 | TOKEN_F64 | TOKEN_PRED;

dataType : dataTypeId
{
	state.dataType( $<value>1 );
};

vectorToken : TOKEN_V2 | TOKEN_V4;

statementVectorType : vectorToken
{
	state.statementVectorType( $<value>1 );
};

instructionVectorType : vectorToken
{
	state.instructionVectorType( $<value>1 );
};

alignment : TOKEN_ALIGN TOKEN_DECIMAL_CONSTANT { state.alignment = $<value>2; };

addressableVariablePrefix : dataType statementVectorType { state.alignment = 1; };
addressableVariablePrefix : statementVectorType dataType { state.alignment = 1; };
addressableVariablePrefix : dataType { state.alignment = 1; };
addressableVariablePrefix : alignment dataType statementVectorType;
addressableVariablePrefix : alignment statementVectorType dataType;
addressableVariablePrefix : dataType alignment statementVectorType;
addressableVariablePrefix : dataType statementVectorType alignment;
addressableVariablePrefix : statementVectorType dataType alignment;
addressableVariablePrefix : statementVectorType alignment dataType;
addressableVariablePrefix : dataType alignment;
addressableVariablePrefix : alignment dataType;

arrayDimensionSet : '[' TOKEN_DECIMAL_CONSTANT ']'
{
	state.arrayDimensionSet( $<value>2, @2, false );
};

arrayDimensionSet : arrayDimensionSet '[' TOKEN_DECIMAL_CONSTANT ']'
{
	state.arrayDimensionSet( $<value>3, @3, true );
};

arrayDimensionSet : '[' ']'
{
	state.arrayDimensionSet( );
};

arrayDimensions : /* empty string */
{
	state.arrayDimensions();
};

arrayDimensions : arrayDimensionSet;

initializer : /* empty string */;

assignment : '='
{
	state.assignment();
};

initializer : assignment decimalInitializer | assignment floatInitializer 
	| assignment singleInitializer;

registerIdentifierList : identifier
{
	state.registerDeclaration( $<text>1, @1 );
};

registerIdentifierList : identifier '<' TOKEN_DECIMAL_CONSTANT '>'
{
	state.registerDeclaration( $<text>1, @1, $<value>3 );
};

registerSeperator : ','
{
	state.registerSeperator( @1 );
};

registerIdentifierList : registerIdentifierList registerSeperator identifier
{
	state.registerDeclaration( $<text>3, @3 );
};

registerPrefix : statementVectorType dataType;
registerPrefix : dataType;

registerDeclaration : TOKEN_REG registerPrefix registerIdentifierList ';';

fileDeclaration : TOKEN_FILE TOKEN_DECIMAL_CONSTANT TOKEN_STRING
{
	state.fileDeclaration( $<value>2, $<text>3 );
};

initializableDeclaration : initializable addressableVariablePrefix 
	identifier arrayDimensions initializer ';'
{
	state.initializableDeclaration( $<text>3, @3, @5 );
};

parameter : TOKEN_PARAM
{
	state.locationAddress( $<value>1 );
};

parameterDeclaration : parameter addressableVariablePrefix identifier 
	arrayDimensions
{
	state.statement.attribute = ir::PTXStatement::NoAttribute;
	state.uninitializableDeclaration( $<text>3 );	
	state.statementEnd( @1 );
};

parameterList : parameterDeclaration;
parameterList : /* empty string */;
parameterList : parameterList ',' parameterDeclaration;

entryStart1 : TOKEN_ENTRY identifier
{
	state.entry( $<text>2, @1, true );
};

entryStart2 : TOKEN_ENTRY identifier
{
	state.entry( $<text>2, @1, false );
};

entryMid1 : '(' parameterList ')' performanceDirectives '{'
{
	state.entryMid( @4, true );
};

entryMid2 : performanceDirectives '{'
{
	state.entryMid( @1, false );
};

entry : entryStart1 entryMid1 entryDeclarations '}'
{
	state.entryEnd( @4 );
};

entry : entryStart2 entryMid2 entryDeclarations '}'
{
	state.entryEnd( @4 );
};

entryStatement : registerDeclaration | uninitializableDeclaration 
	| location | label;

entryDeclaration : entryStatement
{
	state.statementEnd( @1 );
};

entryDeclaration : guard instruction
{
	state.entryDeclaration( @2 );
	state.instruction();
};

entryDeclarations : entryDeclaration;

entryDeclarations : entryDeclarations entryDeclaration;

maxnreg : TOKEN_MAXNREG TOKEN_DECIMAL_CONSTANT
{
	state.maxnreg( $<value>2 );
};

maxntid : TOKEN_MAXNTID TOKEN_DECIMAL_CONSTANT
{
	state.maxntid( $<value>2 );
};

maxntid : TOKEN_MAXNTID TOKEN_DECIMAL_CONSTANT ',' TOKEN_DECIMAL_CONSTANT
{
	state.maxntid( $<value>2, $<value>4 );
};

maxntid : TOKEN_MAXNTID TOKEN_DECIMAL_CONSTANT ',' TOKEN_DECIMAL_CONSTANT ',' 
	TOKEN_DECIMAL_CONSTANT
{
	state.maxntid( $<value>2, $<value>4, $<value>6 );
};

ctapersm : shaderModel ':' TOKEN_DECIMAL_CONSTANT
{
	state.ctapersm( $<value>1, $<value>3 );
};

ctapersmList : ctapersm | ctapersmList ',' ctapersm;

maxnctapersm : TOKEN_MAXNCTAPERSM TOKEN_DECIMAL_CONSTANT
{
	state.maxnctapersm( $<value>2 );
};

maxnctapersm : TOKEN_MAXNCTAPERSM ctapersmList
{
	state.maxnctapersm();
};

performanceDirective : maxnreg | maxntid | maxnctapersm;
performanceDirectiveList : performanceDirective
	| performanceDirectiveList performanceDirective;
performanceDirectives : /* empty string */ | performanceDirectiveList;

externOrVisible : TOKEN_EXTERN
{
	state.attribute( false, true );
};

externOrVisible : TOKEN_VISIBLE
{
	state.attribute( true, false );
};

externOrVisible : /* empty string */
{
	state.attribute( false, false );
};

uninitializableAddress : TOKEN_LOCAL | TOKEN_SHARED;
initializableAddress : TOKEN_CONST | TOKEN_TEX | TOKEN_GLOBAL;

uninitializable : externOrVisible uninitializableAddress
{
	state.locationAddress( $<value>2 );
};

initializable : externOrVisible initializableAddress
{
	state.locationAddress( $<value>2 );
};

opcode : OPCODE_COS | OPCODE_SQRT | OPCODE_ADD | OPCODE_RSQRT | OPCODE_ADDC
	| OPCODE_MUL | OPCODE_SAD | OPCODE_SUB | OPCODE_EX2 | OPCODE_LG2
	| OPCODE_RCP | OPCODE_SIN | OPCODE_REM | OPCODE_MUL24 | OPCODE_MAD24
	| OPCODE_DIV | OPCODE_ABS | OPCODE_NEG | OPCODE_MIN | OPCODE_MAX
	| OPCODE_MAD | OPCODE_SET | OPCODE_SETP | OPCODE_SELP | OPCODE_SLCT
	| OPCODE_MOV | OPCODE_ST | OPCODE_CVT | OPCODE_AND | OPCODE_XOR | OPCODE_OR
	| OPCODE_BRA | OPCODE_CALL | OPCODE_RET | OPCODE_EXIT | OPCODE_TRAP 
	| OPCODE_BRKPT | OPCODE_SUBC | OPCODE_TEX | OPCODE_LD | OPCODE_BARSYNC 
	| OPCODE_ATOM | OPCODE_RED | OPCODE_NOT | OPCODE_CNOT | OPCODE_VOTE
	| OPCODE_SHR | OPCODE_SHL | OPCODE_MEMBAR | OPCODE_FMA | OPCODE_PMEVENT
	| OPCODE_POPC | OPCODE_CLZ | OPCODE_BFIND | OPCODE_BREV | OPCODE_BFI;

uninitializableDeclaration : uninitializable addressableVariablePrefix 
	identifier arrayDimensions ';'
{
	state.uninitializableDeclaration( $<text>3 );
};

location : TOKEN_LOC TOKEN_DECIMAL_CONSTANT TOKEN_DECIMAL_CONSTANT 
	TOKEN_DECIMAL_CONSTANT
{
	state.location( $<value>2, $<value>3, $<value>4 );
};

label : TOKEN_LABEL
{
	state.label( $<text>1 );
};

labelOperand : identifier
{
	state.labelOperand( $<text>1 );
};

vectorIndex : TOKEN_X | TOKEN_Y | TOKEN_Z | TOKEN_W;

optionalVectorIndex : vectorIndex
{
	state.vectorIndex( $<value>1 );
};

optionalVectorIndex : /* empty string */
{

};

nonLabelOperand : identifier optionalVectorIndex
{
	state.nonLabelOperand( $<text>1, @1, false );
};

nonLabelOperand : '!' identifier
{
	state.nonLabelOperand( $<text>2, @1, true );
};

baseOperand : TOKEN_DECIMAL_CONSTANT
{
	state.baseOperand( $<value>1 );
};

baseOperand : TOKEN_UNSIGNED_DECIMAL_CONSTANT
{
	state.baseOperand( $<uvalue>1 );
};

baseOperand : TOKEN_DOUBLE_CONSTANT
{
	state.baseOperand( $<doubleFloat>1 );
};

baseOperand : TOKEN_SINGLE_CONSTANT
{
	state.baseOperand( $<singleFloat>1 );
};

addressableOperand : identifier
{
	state.addressableOperand( $<text>1, 0, @1, false );
};

offsetAddressableOperand : identifier '+' TOKEN_DECIMAL_CONSTANT
{
	state.addressableOperand( $<text>1, $<value>3, @1, false );
};

offsetAddressableOperand : identifier '-' TOKEN_DECIMAL_CONSTANT
{
	state.addressableOperand( $<text>1, $<value>3, @1, true );
};

operand : baseOperand | nonLabelOperand;

memoryOperand : baseOperand | addressableOperand | offsetAddressableOperand;

branchOperand : baseOperand | labelOperand;

arrayOperand : operand;
arrayOperand : '{' identifierList '}'
{
	state.arrayOperand( @1 );
};

guard : TOKEN_PREDICATE_IDENTIFIER
{
	state.guard( $<text>1, @1, false );
};

guard : TOKEN_INV_PREDICATE_IDENTIFIER
{
	state.guard( $<text>1, @1, true );
};

guard : /* empty string */
{
	state.guard();
}

floatRounding : TOKEN_RN | TOKEN_RM | TOKEN_RP | TOKEN_RZ;
intRounding : TOKEN_RNI | TOKEN_RMI | TOKEN_RPI | TOKEN_RZI;

instruction : ftzInstruction2 | ftzInstruction3 | approxInstruction2 
	| basicInstruction3 | bfi | bfind | brev | branch | addOrSub | addCOrSubC 
	| atom | bar | brkpt | clz | cvt | div | exit | ld | mad | mad24 | membar 
	| mov | mul24 | mul | notInstruction | pmevent | popc | prmt 
	| rcpSqrtInstruction | red | ret | sad | selp | set | setp | slct | st 
	| tex | trap | vote;

basicInstruction3Opcode : OPCODE_AND | OPCODE_OR 
	| OPCODE_REM | OPCODE_SHL | OPCODE_SHR | OPCODE_XOR;

basicInstruction3 : basicInstruction3Opcode dataType operand ',' operand ',' 
	operand ';'
{
	state.instruction( $<text>1, $<value>2, 4 );
};

approxInstruction2Opcode : OPCODE_RSQRT | OPCODE_SIN | OPCODE_COS | OPCODE_LG2 
	| OPCODE_EX2;

approximate : TOKEN_APPROX
{
	state.modifier( $<value>1 );
};

approxInstruction2 : approxInstruction2Opcode approximate optionalFtz dataType 
	operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>4, 3 );
};

optionalFtz : TOKEN_FTZ
{
	state.modifier( $<value>1 );
};

optionalFtz : /* empty string */;

optionalSaturate : TOKEN_SAT
{
	state.modifier( $<value>1 );
};

optionalSaturate : /* empty string */;

ftzInstruction2Opcode : OPCODE_ABS | OPCODE_NEG;

ftzInstruction2 : ftzInstruction2Opcode optionalFtz dataType operand ',' 
	operand ';'
{
	state.instruction( $<text>1, $<value>3, 3 );
};

ftzInstruction3Opcode : OPCODE_ADD | OPCODE_MAX | OPCODE_MIN | OPCODE_SUB;

ftzInstruction3 : ftzInstruction3Opcode optionalFtz dataType operand ',' 
	operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 4 );
};

optionalUni : /* empty string */
{
	state.uni( false );
};

optionalUni : TOKEN_UNI
{
	state.uni( true );
};

branch : OPCODE_BRA optionalUni branchOperand ';'
{
	state.instruction( $<text>1, 2 );
};

branch : OPCODE_CALL branchOperand ';'
{
	state.instruction( $<text>1, 2 );
};

addModifier : TOKEN_CARRY
{
	state.carry( true );
};

addModifier : TOKEN_SAT
{
	state.modifier( $<value>1 );
};

addModifier : floatRounding optionalFtz optionalSaturate
{
	state.carry( false );
};

addOrSubOpcode : OPCODE_ADD | OPCODE_SUB;

addOrSub : addOrSubOpcode addModifier dataType operand ',' operand ',' 
	operand ';'
{
	state.instruction( $<text>1, $<value>3, 4 );
};

addCModifier : TOKEN_CARRY
{
	state.carry( true );
};

addCModifier : /* empty string */
{
	state.carry( false );
};

addCOrSubCOpcode : OPCODE_ADDC | OPCODE_SUBC;

addCOrSubC : addCOrSubCOpcode addCModifier dataType operand ',' operand 
	',' operand ';'
{
	state.carryIn();
	state.instruction( $<text>1, $<value>3, 5 );
};

atomicOperationId : TOKEN_AND | TOKEN_OR | TOKEN_XOR | TOKEN_CAS | TOKEN_EXCH 
	| TOKEN_ADD | TOKEN_INC | TOKEN_DEC | TOKEN_MIN | TOKEN_MAX;

atomicOperation : atomicOperationId
{
	state.atomic( $<value>1 );
};

atom : OPCODE_ATOM addressSpace atomicOperation dataType operand ',' '[' 
	memoryOperand ']' ',' operand ';'
{
	state.instruction( $<text>1, $<value>4, 4 );
};

atom : OPCODE_ATOM addressSpace atomicOperation dataType operand ',' '[' 
	memoryOperand ']' ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>4, 5 );
};

shiftAmount : TOKEN_SHIFT_AMOUNT
{
	state.shiftAmount( true );
};

shiftAmount : /* empty string */
{
	state.shiftAmount( false );
};

bfi : OPCODE_BFI dataType operand ',' operand ',' operand 
	',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>2, 6 );
};

bfind : OPCODE_BFIND shiftAmount dataType operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 3 );
};

bar : OPCODE_BARSYNC operand ';'
{
	state.instruction( $<text>1, 2 );
};

brev : OPCODE_BREV dataType operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>2, 3 );
};

brkpt : OPCODE_BRKPT ';'
{
	state.instruction( $<text>1, 1 );
};

clz : OPCODE_CLZ dataType operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>2, 3 );
};

cvtModifier1 : floatRounding | intRounding;

cvtModifier : optionalSaturate;

cvtModifier : cvtModifier1 optionalFtz optionalSaturate
{
	state.modifier( $<value>1 );
};

cvt : OPCODE_CVT cvtModifier dataType dataType operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 3 );
	state.convert( $<value>4, @1 );
};

divFullModifier : TOKEN_FULL optionalFtz
{
	state.full();
}

divApproxModifier : TOKEN_APPROX optionalFtz
{
	state.modifier($<value>1);
};

divRnModifier : TOKEN_RN
{
	state.modifier($<value>1);
};

divModifier : divFullModifier | divApproxModifier 
	| divRnModifier | /* empty string */;

div : OPCODE_DIV divModifier dataType operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 4 );
};

exit : OPCODE_EXIT ';'
{
	state.instruction( $<text>1, 1 );
};

ldModifier : TOKEN_VOLATILE addressSpace
{
	state.volatileFlag( true );
};

ldModifier : TOKEN_VOLATILE addressSpace instructionVectorType
{
	state.volatileFlag( true );
};

ldModifier : addressSpace instructionVectorType
{
	state.volatileFlag( false );
};

ldModifier : addressSpace
{
	state.volatileFlag( false );		
};

ld : OPCODE_LD ldModifier dataType arrayOperand ',' '[' memoryOperand ']' ';'
{
	state.instruction( $<text>1, $<value>3, 3 );
};

hiOrLo : TOKEN_HI | TOKEN_LO;

roundHiLoWide : floatRounding | hiOrLo | TOKEN_WIDE;

mulModifier : roundHiLoWide optionalFtz optionalSaturate
{
	state.modifier( $<value>1 );
};

mulModifier : optionalFtz optionalSaturate;;

madOpcode : OPCODE_MAD | OPCODE_FMA;

mad : madOpcode mulModifier dataType operand ',' operand 
	',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 5 );
};

mad24Modifier : optionalSaturate;

mad24Modifier : hiOrLo optionalSaturate
{
	state.modifier( $<value>1 );
};

mad24 : OPCODE_MAD24 mad24Modifier dataType operand ',' operand 
	',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 5 );
};

membarSpaceType : TOKEN_GL | TOKEN_CTA;

membarSpace : membarSpaceType
{
	state.level( $<value>1 );
};

membar : OPCODE_MEMBAR membarSpace ';'
{
	state.instruction( $<text>1, 1 );
};

movSourceOperand : arrayOperand | offsetAddressableOperand;

mov : OPCODE_MOV dataType arrayOperand ',' movSourceOperand ';'
{
	state.instruction( $<text>1, $<value>2, 3 );
};

mul24Modifier : /* empty string */;

mul24Modifier : hiOrLo
{
	state.modifier( $<value>1 );
};

mul24 : OPCODE_MUL24 mul24Modifier dataType operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 4 );
};

mul : OPCODE_MUL mulModifier dataType operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 4 );
};

notOpcode : OPCODE_CNOT | OPCODE_NOT;

notInstruction : notOpcode dataType operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>2, 3 );
};

pmevent : OPCODE_PMEVENT operand
{
	state.instruction( $<text>1, 2 );
};

popc : OPCODE_POPC dataType operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>2, 3 );
};

permuteModeType : TOKEN_F4E | TOKEN_B4E | TOKEN_RC8 
	| TOKEN_ECL | TOKEN_ECR | TOKEN_RC16;

permuteMode : permuteModeType
{
	state.permute( $<value>1 );
};

permuteMode : /* empty string */
{
	state.defaultPermute();
};

prmt : OPCODE_PRMT dataType permuteMode operand ',' operand 
	',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>2, 5 );
};

rcpSqrtModifier : TOKEN_APPROX optionalFtz
{
	state.modifier( $<value>1 );
};

rcpSqrtModifier : /* empty string */;
rcpSqrtModifier : TOKEN_RN
{
	state.modifier( $<value>1 );
};

rcpSqrtOpcode : OPCODE_RCP | OPCODE_SQRT;

rcpSqrtInstruction : rcpSqrtOpcode rcpSqrtModifier dataType operand ',' 
	operand ';'
{
	state.instruction( $<text>1, $<value>3, 3 );
};

reductionOperationId : TOKEN_AND | TOKEN_XOR | TOKEN_OR | TOKEN_ADD | TOKEN_INC
	| TOKEN_DEC | TOKEN_MIN | TOKEN_MAX;
	
reductionOperation : reductionOperationId
{
	state.reduction( $<value>1 );
};

red : OPCODE_RED addressSpace reductionOperation dataType operand ',' 
	operand ';'
{
	state.instruction( $<text>1, $<value>4, 3 );
};

ret : OPCODE_RET optionalUni ';'
{
	state.instruction( $<text>1, 1 );
};

ret : OPCODE_RET optionalUni operand ';'
{
	state.instruction( $<text>1, 2 );
};

comparisonId : TOKEN_EQ | TOKEN_NE | TOKEN_LT | TOKEN_LE | TOKEN_GT | TOKEN_GE
	| TOKEN_LS | TOKEN_HS | TOKEN_EQU | TOKEN_NEU | TOKEN_LTU | TOKEN_LEU
	| TOKEN_GTU | TOKEN_GEU | TOKEN_NUM | TOKEN_NAN;

comparison : comparisonId
{
	state.comparison( $<value>1 );
};

boolOperatorId : TOKEN_AND | TOKEN_OR | TOKEN_XOR;

boolOperator : boolOperatorId
{
	state.boolean( $<value>1 );
};

sad : OPCODE_SAD dataType operand ',' operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>2, 5 );
};

selp : OPCODE_SELP dataType operand ',' operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>2, 5 );
};

set : OPCODE_SET comparison optionalFtz dataType dataType operand ',' 
	operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>4, 4 );
	state.convert( $<value>5, @1 );
};

set : OPCODE_SET comparison boolOperator optionalFtz dataType dataType operand 
	',' operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>5, 5 );
	state.convert( $<value>6, @1 );
};

setp : OPCODE_SETP comparison optionalFtz dataType operand ',' operand ',' 
	operand ';'
{
	state.instruction( $<text>1, $<value>4, 4 );
};

setp : OPCODE_SETP comparison boolOperator optionalFtz dataType operand ',' 
	operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>5, 5 );
};

setp : OPCODE_SETP comparison boolOperator optionalFtz dataType operand '|' 
	operand ',' operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>5, 6 );
}; 

slct : OPCODE_SLCT optionalFtz dataType dataType operand ',' operand ',' 
	operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 5 );
	state.convertC( $<value>4, @1 );
};

st : OPCODE_ST ldModifier dataType '[' memoryOperand ']' ',' arrayOperand ';'
{
	state.instruction( $<text>1, $<value>3, 3 );
};

geometryId : TOKEN_1D | TOKEN_2D | TOKEN_3D;

geometry : geometryId
{
	state.geometry( $<value>1 );
};

tex : OPCODE_TEX geometry TOKEN_V4 dataType dataType arrayOperand ',' '[' 
	operand ',' arrayOperand ']' ';'
{
	state.tex( $<value>5 );
	state.convertD( $<value>4, @1 );
};

trap : OPCODE_TRAP ';'
{
	state.instruction( $<text>1, 1 );
};

voteOperationId : TOKEN_ANY | TOKEN_ALL | TOKEN_UNI;

voteOperation : voteOperationId
{
	state.vote( $<value>1 );
};

vote : OPCODE_VOTE voteOperation TOKEN_PRED operand ',' operand ';'
{
	state.instruction( $<text>1, TOKEN_PRED, 3 );
};

unsupported: TOKEN_STRUCT
{
	state.structure( @1 );
};

unsupported: TOKEN_UNION
{
	state.aUnion( @1 );
};

unsupported: TOKEN_FUNCTION
{
	state.function( @1 );
};

%%

int yylex( YYSTYPE* token, YYLTYPE* location, parser::PTXLexer& lexer )
{
	lexer.yylval = token;
	
	int tokenValue = lexer.yylexPosition();
	location->first_line = lexer.lineno();
	location->first_column = lexer.column;
	
	report( " Lexer (" << location->first_line << "," << location->first_column 
		<< "): " << parser::PTXLexer::toString( tokenValue ) << " \"" 
		<< lexer.YYText() << "\"" );
	
	return tokenValue;
}

void yyerror( YYLTYPE* location, parser::PTXLexer& lexer, 
	parser::PTXParser::State& state, char const* message )
{
	parser::PTXParser::Exception exception;
	std::stringstream stream;
	stream << parser::PTXParser::toString( *location, state ) 
		<< " " << message;
	exception.message = stream.str();
	exception.error = parser::PTXParser::State::SyntaxError;
	throw exception;
}

}

