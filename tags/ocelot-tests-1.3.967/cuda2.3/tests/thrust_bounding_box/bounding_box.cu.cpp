# 1 "/tmp/tmpxft_00005e37_00000000-1_bounding_box.cudafe1.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/tmp/tmpxft_00005e37_00000000-1_bounding_box.cudafe1.cpp"
# 1 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
# 46 "/usr/local/cuda/bin/../include/device_types.h"
# 149 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stddef.h" 3
typedef int ptrdiff_t;
# 211 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stddef.h" 3
typedef unsigned size_t;
# 1 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 1 3
# 108 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 3
# 1 "/usr/local/cuda/bin/../include/cuda_runtime_api.h" 1 3
# 53 "/usr/local/cuda/bin/../include/cuda_runtime_api.h" 3
# 1 "/usr/local/cuda/bin/../include/host_defines.h" 1 3
# 54 "/usr/local/cuda/bin/../include/cuda_runtime_api.h" 2 3
# 1 "/usr/local/cuda/bin/../include/builtin_types.h" 1 3
# 42 "/usr/local/cuda/bin/../include/builtin_types.h" 3
# 1 "/usr/local/cuda/bin/../include/device_types.h" 1 3
# 46 "/usr/local/cuda/bin/../include/device_types.h" 3
enum cudaRoundMode
{
  cudaRoundNearest,
  cudaRoundZero,
  cudaRoundPosInf,
  cudaRoundMinInf
};
# 43 "/usr/local/cuda/bin/../include/builtin_types.h" 2 3
# 1 "/usr/local/cuda/bin/../include/driver_types.h" 1 3
# 92 "/usr/local/cuda/bin/../include/driver_types.h" 3
enum cudaError
{
  cudaSuccess = 0,
  cudaErrorMissingConfiguration = 1,
  cudaErrorMemoryAllocation = 2,
  cudaErrorInitializationError = 3,
  cudaErrorLaunchFailure = 4,
  cudaErrorPriorLaunchFailure = 5,
  cudaErrorLaunchTimeout = 6,
  cudaErrorLaunchOutOfResources = 7,
  cudaErrorInvalidDeviceFunction = 8,
  cudaErrorInvalidConfiguration = 9,
  cudaErrorInvalidDevice = 10,
  cudaErrorInvalidValue = 11,
  cudaErrorInvalidPitchValue = 12,
  cudaErrorInvalidSymbol = 13,
  cudaErrorMapBufferObjectFailed = 14,
  cudaErrorUnmapBufferObjectFailed = 15,
  cudaErrorInvalidHostPointer = 16,
  cudaErrorInvalidDevicePointer = 17,
  cudaErrorInvalidTexture = 18,
  cudaErrorInvalidTextureBinding = 19,
  cudaErrorInvalidChannelDescriptor = 20,
  cudaErrorInvalidMemcpyDirection = 21,
  cudaErrorAddressOfConstant = 22,
  cudaErrorTextureFetchFailed = 23,
  cudaErrorTextureNotBound = 24,
  cudaErrorSynchronizationError = 25,
  cudaErrorInvalidFilterSetting = 26,
  cudaErrorInvalidNormSetting = 27,
  cudaErrorMixedDeviceExecution = 28,
  cudaErrorCudartUnloading = 29,
  cudaErrorUnknown = 30,
  cudaErrorNotYetImplemented = 31,
  cudaErrorMemoryValueTooLarge = 32,
  cudaErrorInvalidResourceHandle = 33,
  cudaErrorNotReady = 34,
  cudaErrorInsufficientDriver = 35,
  cudaErrorSetOnActiveProcess = 36,
  cudaErrorNoDevice = 38,
  cudaErrorECCUncorrectable = 39,
  cudaErrorStartupFailure = 0x7f,
  cudaErrorApiFailureBase = 10000
};





enum cudaChannelFormatKind
{
  cudaChannelFormatKindSigned = 0,
  cudaChannelFormatKindUnsigned = 1,
  cudaChannelFormatKindFloat = 2,
  cudaChannelFormatKindNone = 3
};





struct cudaChannelFormatDesc
{
  int x;
  int y;
  int z;
  int w;
  enum cudaChannelFormatKind f;
};





struct cudaArray;





enum cudaMemcpyKind
{
  cudaMemcpyHostToHost = 0,
  cudaMemcpyHostToDevice = 1,
  cudaMemcpyDeviceToHost = 2,
  cudaMemcpyDeviceToDevice = 3
};






struct cudaPitchedPtr
{
  void *ptr;
  size_t pitch;
  size_t xsize;
  size_t ysize;
};






struct cudaExtent
{
  size_t width;
  size_t height;
  size_t depth;
};






struct cudaPos
{
  size_t x;
  size_t y;
  size_t z;
};





struct cudaMemcpy3DParms
{
  struct cudaArray *srcArray;
  struct cudaPos srcPos;
  struct cudaPitchedPtr srcPtr;

  struct cudaArray *dstArray;
  struct cudaPos dstPos;
  struct cudaPitchedPtr dstPtr;

  struct cudaExtent extent;
  enum cudaMemcpyKind kind;
};





struct cudaGraphicsResource;





enum cudaGraphicsRegisterFlags
{
  cudaGraphicsRegisterFlagsNone = 0,
};





enum cudaGraphicsMapFlags
{
  cudaGraphicsMapFlagsNone = 0,
  cudaGraphicsMapFlagsReadOnly = 1,
  cudaGraphicsMapFlagsWriteDiscard = 2,
};





enum cudaGraphicsCubeFace {
  cudaGraphicsCubeFacePositiveX = 0x00,
  cudaGraphicsCubeFaceNegativeX = 0x01,
  cudaGraphicsCubeFacePositiveY = 0x02,
  cudaGraphicsCubeFaceNegativeY = 0x03,
  cudaGraphicsCubeFacePositiveZ = 0x04,
  cudaGraphicsCubeFaceNegativeZ = 0x05,
};





struct cudaFuncAttributes
{
   size_t sharedSizeBytes;
   size_t constSizeBytes;
   size_t localSizeBytes;
   int maxThreadsPerBlock;
   int numRegs;





   int ptxVersion;





   int binaryVersion;
   int __cudaReserved[6];
};





enum cudaFuncCache
{
  cudaFuncCachePreferNone = 0,
  cudaFuncCachePreferShared = 1,
  cudaFuncCachePreferL1 = 2
};





enum cudaComputeMode
{
  cudaComputeModeDefault = 0,
  cudaComputeModeExclusive = 1,
  cudaComputeModeProhibited = 2
};





struct cudaDeviceProp
{
  char name[256];
  size_t totalGlobalMem;
  size_t sharedMemPerBlock;
  int regsPerBlock;
  int warpSize;
  size_t memPitch;
  int maxThreadsPerBlock;
  int maxThreadsDim[3];
  int maxGridSize[3];
  int clockRate;
  size_t totalConstMem;
  int major;
  int minor;
  size_t textureAlignment;
  int deviceOverlap;
  int multiProcessorCount;
  int kernelExecTimeoutEnabled;
  int integrated;
  int canMapHostMemory;
  int computeMode;
  int maxTexture1D;
  int maxTexture2D[2];
  int maxTexture3D[3];
  int maxTexture2DArray[3];
  int concurrentKernels;
  int __cudaReserved[26];
};
# 395 "/usr/local/cuda/bin/../include/driver_types.h" 3
typedef enum cudaError cudaError_t;





typedef int cudaStream_t;





typedef int cudaEvent_t;
# 44 "/usr/local/cuda/bin/../include/builtin_types.h" 2 3
# 1 "/usr/local/cuda/bin/../include/texture_types.h" 1 3
# 54 "/usr/local/cuda/bin/../include/texture_types.h" 3
enum cudaTextureAddressMode
{
  cudaAddressModeWrap,
  cudaAddressModeClamp,
  cudaAddressModeMirror
};


enum cudaTextureFilterMode
{
  cudaFilterModePoint,
  cudaFilterModeLinear
};


enum cudaTextureReadMode
{
  cudaReadModeElementType,
  cudaReadModeNormalizedFloat
};


struct textureReference
{
  int normalized;
  enum cudaTextureFilterMode filterMode;
  enum cudaTextureAddressMode addressMode[3];
  struct cudaChannelFormatDesc channelDesc;
  int __cudaReserved[16];
};
# 45 "/usr/local/cuda/bin/../include/builtin_types.h" 2 3
# 1 "/usr/local/cuda/bin/../include/vector_types.h" 1 3
# 82 "/usr/local/cuda/bin/../include/vector_types.h" 3
struct char1
{
  signed char x;
 
};


struct uchar1
{
  unsigned char x;
 
};


struct __attribute__((aligned(2))) char2
{
  signed char x, y;
 
};


struct __attribute__((aligned(2))) uchar2
{
  unsigned char x, y;
 
};


struct char3
{
  signed char x, y, z;
 
};


struct uchar3
{
  unsigned char x, y, z;
 
};


struct __attribute__((aligned(4))) char4
{
  signed char x, y, z, w;
 
};


struct __attribute__((aligned(4))) uchar4
{
  unsigned char x, y, z, w;
 
};


struct short1
{
  short x;
 
};


struct ushort1
{
  unsigned short x;
 
};


struct __attribute__((aligned(4))) short2
{
  short x, y;
 
};


struct __attribute__((aligned(4))) ushort2
{
  unsigned short x, y;
 
};


struct short3
{
  short x, y, z;
 
};


struct ushort3
{
  unsigned short x, y, z;
 
};


struct __attribute__((aligned(8))) short4 { short x, y, z, w; };


struct __attribute__((aligned(8))) ushort4 { unsigned short x, y, z, w; };


struct int1
{
  int x;
 
};


struct uint1
{
  unsigned int x;
 
};


struct __attribute__((aligned(8))) int2 { int x, y; };


struct __attribute__((aligned(8))) uint2 { unsigned int x, y; };


struct int3
{
  int x, y, z;
 
};


struct uint3
{
  unsigned int x, y, z;
 
};


struct __attribute__((aligned(16))) int4
{
  int x, y, z, w;
 
};


struct __attribute__((aligned(16))) uint4
{
  unsigned int x, y, z, w;
 
};


struct long1
{
  long int x;
 
};


struct ulong1
{
  unsigned long x;
 
};
# 258 "/usr/local/cuda/bin/../include/vector_types.h" 3
struct __attribute__((aligned(2*sizeof(long int)))) long2
{
  long int x, y;
 
};


struct __attribute__((aligned(2*sizeof(unsigned long int)))) ulong2
{
  unsigned long int x, y;
 
};




struct long3
{
  long int x, y, z;
 
};


struct ulong3
{
  unsigned long int x, y, z;
 
};


struct __attribute__((aligned(16))) long4
{
  long int x, y, z, w;
 
};


struct __attribute__((aligned(16))) ulong4
{
  unsigned long int x, y, z, w;
 
};


struct float1
{
  float x;
 
};


struct __attribute__((aligned(8))) float2 { float x, y; };


struct float3
{
  float x, y, z;
 
};


struct __attribute__((aligned(16))) float4
{
  float x, y, z, w;
 
};


struct longlong1
{
  long long int x;
 
};


struct ulonglong1
{
  unsigned long long int x;
 
};


struct __attribute__((aligned(16))) longlong2
{
  long long int x, y;
 
};


struct __attribute__((aligned(16))) ulonglong2
{
  unsigned long long int x, y;
 
};


struct longlong3
{
  long long int x, y, z;
 
};


struct ulonglong3
{
  unsigned long long int x, y, z;
 
};


struct __attribute__((aligned(16))) longlong4
{
  long long int x, y, z ,w;
 
};


struct __attribute__((aligned(16))) ulonglong4
{
  unsigned long long int x, y, z, w;
 
};


struct double1
{
  double x;
 
};


struct __attribute__((aligned(16))) double2
{
  double x, y;
 
};


struct double3
{
  double x, y, z;
 
};


struct __attribute__((aligned(16))) double4
{
  double x, y, z, w;
 
};
# 416 "/usr/local/cuda/bin/../include/vector_types.h" 3
typedef struct char1 char1;

typedef struct uchar1 uchar1;

typedef struct char2 char2;

typedef struct uchar2 uchar2;

typedef struct char3 char3;

typedef struct uchar3 uchar3;

typedef struct char4 char4;

typedef struct uchar4 uchar4;

typedef struct short1 short1;

typedef struct ushort1 ushort1;

typedef struct short2 short2;

typedef struct ushort2 ushort2;

typedef struct short3 short3;

typedef struct ushort3 ushort3;

typedef struct short4 short4;

typedef struct ushort4 ushort4;

typedef struct int1 int1;

typedef struct uint1 uint1;

typedef struct int2 int2;

typedef struct uint2 uint2;

typedef struct int3 int3;

typedef struct uint3 uint3;

typedef struct int4 int4;

typedef struct uint4 uint4;

typedef struct long1 long1;

typedef struct ulong1 ulong1;

typedef struct long2 long2;

typedef struct ulong2 ulong2;

typedef struct long3 long3;

typedef struct ulong3 ulong3;

typedef struct long4 long4;

typedef struct ulong4 ulong4;

typedef struct float1 float1;

typedef struct float2 float2;

typedef struct float3 float3;

typedef struct float4 float4;

typedef struct longlong1 longlong1;

typedef struct ulonglong1 ulonglong1;

typedef struct longlong2 longlong2;

typedef struct ulonglong2 ulonglong2;

typedef struct longlong3 longlong3;

typedef struct ulonglong3 ulonglong3;

typedef struct longlong4 longlong4;

typedef struct ulonglong4 ulonglong4;

typedef struct double1 double1;

typedef struct double2 double2;

typedef struct double3 double3;

typedef struct double4 double4;
# 519 "/usr/local/cuda/bin/../include/vector_types.h" 3
struct dim3
{
    unsigned int x, y, z;

    dim3(unsigned int x = 1, unsigned int y = 1, unsigned int z = 1) : x(x), y(y), z(z) {}
    dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }

};


typedef struct dim3 dim3;
# 45 "/usr/local/cuda/bin/../include/builtin_types.h" 2 3
# 55 "/usr/local/cuda/bin/../include/cuda_runtime_api.h" 2 3
# 80 "/usr/local/cuda/bin/../include/cuda_runtime_api.h" 3
extern "C" {
# 89 "/usr/local/cuda/bin/../include/cuda_runtime_api.h" 3
extern cudaError_t cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);
extern cudaError_t cudaMalloc3DArray(struct cudaArray** arrayPtr, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent);
extern cudaError_t cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);
extern cudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms *p);
extern cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream );







extern cudaError_t cudaMalloc(void **devPtr, size_t size);
extern cudaError_t cudaMallocHost(void **ptr, size_t size);
extern cudaError_t cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);
extern cudaError_t cudaMallocArray(struct cudaArray **array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height );
extern cudaError_t cudaFree(void *devPtr);
extern cudaError_t cudaFreeHost(void *ptr);
extern cudaError_t cudaFreeArray(struct cudaArray *array);

extern cudaError_t cudaHostAlloc(void **pHost, size_t bytes, unsigned int flags);
extern cudaError_t cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);
extern cudaError_t cudaHostGetFlags(unsigned int *pFlags, void *pHost);







extern cudaError_t cudaMemGetInfo(size_t *free, size_t *total);
extern cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);
extern cudaError_t cudaMemcpyToArray(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);
extern cudaError_t cudaMemcpyFromArray(void *dst, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);
extern cudaError_t cudaMemcpyArrayToArray(struct cudaArray *dst, size_t wOffsetDst, size_t hOffsetDst, const struct cudaArray *src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind );
extern cudaError_t cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
extern cudaError_t cudaMemcpy2DToArray(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
extern cudaError_t cudaMemcpy2DFromArray(void *dst, size_t dpitch, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);
extern cudaError_t cudaMemcpy2DArrayToArray(struct cudaArray *dst, size_t wOffsetDst, size_t hOffsetDst, const struct cudaArray *src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind );
extern cudaError_t cudaMemcpyToSymbol(const char *symbol, const void *src, size_t count, size_t offset , enum cudaMemcpyKind kind );
extern cudaError_t cudaMemcpyFromSymbol(void *dst, const char *symbol, size_t count, size_t offset , enum cudaMemcpyKind kind );







extern cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream );
extern cudaError_t cudaMemcpyToArrayAsync(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream );
extern cudaError_t cudaMemcpyFromArrayAsync(void *dst, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream );
extern cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream );
extern cudaError_t cudaMemcpy2DToArrayAsync(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream );
extern cudaError_t cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream );
extern cudaError_t cudaMemcpyToSymbolAsync(const char *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream );
extern cudaError_t cudaMemcpyFromSymbolAsync(void *dst, const char *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream );







extern cudaError_t cudaMemset(void *devPtr, int value, size_t count);
extern cudaError_t cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);







extern cudaError_t cudaGetSymbolAddress(void **devPtr, const char *symbol);
extern cudaError_t cudaGetSymbolSize(size_t *size, const char *symbol);







extern cudaError_t cudaGetDeviceCount(int *count);
extern cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);
extern cudaError_t cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);
extern cudaError_t cudaSetDevice(int device);
extern cudaError_t cudaGetDevice(int *device);
extern cudaError_t cudaSetValidDevices(int *device_arr, int len);
extern cudaError_t cudaSetDeviceFlags( int flags );







extern cudaError_t cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size );
extern cudaError_t cudaBindTexture2D(size_t *offset,const struct textureReference *texref,const void *devPtr, const struct cudaChannelFormatDesc *desc,size_t width, size_t height, size_t pitch);
extern cudaError_t cudaBindTextureToArray(const struct textureReference *texref, const struct cudaArray *array, const struct cudaChannelFormatDesc *desc);
extern cudaError_t cudaUnbindTexture(const struct textureReference *texref);
extern cudaError_t cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);
extern cudaError_t cudaGetTextureReference(const struct textureReference **texref, const char *symbol);







extern cudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, const struct cudaArray *array);
extern struct cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);







extern cudaError_t cudaGetLastError(void);
extern const char* cudaGetErrorString(cudaError_t error);







extern cudaError_t cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem , cudaStream_t stream );
extern cudaError_t cudaSetupArgument(const void *arg, size_t size, size_t offset);
extern cudaError_t cudaFuncSetCacheConfig(const char *func, enum cudaFuncCache cacheConfig);
extern cudaError_t cudaLaunch(const char *entry);
extern cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const char *func);







extern cudaError_t cudaStreamCreate(cudaStream_t *pStream);
extern cudaError_t cudaStreamDestroy(cudaStream_t stream);
extern cudaError_t cudaStreamSynchronize(cudaStream_t stream);
extern cudaError_t cudaStreamQuery(cudaStream_t stream);







extern cudaError_t cudaEventCreate(cudaEvent_t *event);
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, int flags);
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream );
extern cudaError_t cudaEventQuery(cudaEvent_t event);
extern cudaError_t cudaEventSynchronize(cudaEvent_t event);
extern cudaError_t cudaEventDestroy(cudaEvent_t event);
extern cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);







extern cudaError_t cudaSetDoubleForDevice(double *d);
extern cudaError_t cudaSetDoubleForHost(double *d);







extern cudaError_t cudaThreadExit(void);
extern cudaError_t cudaThreadSynchronize(void);







extern cudaError_t cudaDriverGetVersion(int *driverVersion);
extern cudaError_t cudaRuntimeGetVersion(int *runtimeVersion);







extern cudaError_t cudaGraphicsUnregisterResource(struct cudaGraphicsResource *resource);
extern cudaError_t cudaGraphicsResourceSetMapFlags(struct cudaGraphicsResource *resource, unsigned int flags);
extern cudaError_t cudaGraphicsMapResources(int count, struct cudaGraphicsResource **resources, cudaStream_t stream );
extern cudaError_t cudaGraphicsUnmapResources(int count, struct cudaGraphicsResource **resources, cudaStream_t stream );
extern cudaError_t cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, struct cudaGraphicsResource *resource);
extern cudaError_t cudaGraphicsSubResourceGetMappedArray(struct cudaArray **arrayPtr, struct cudaGraphicsResource *resource, unsigned int arrayIndex, unsigned int mipLevel);


}
# 109 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 2 3
# 1 "/usr/local/cuda/bin/../include/crt/storage_class.h" 1 3
# 110 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 2 3
# 213 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stddef.h" 2 3
# 92 "/usr/local/cuda/bin/../include/driver_types.h"
# 141 "/usr/local/cuda/bin/../include/driver_types.h"
# 153 "/usr/local/cuda/bin/../include/driver_types.h"
# 166 "/usr/local/cuda/bin/../include/driver_types.h"
# 172 "/usr/local/cuda/bin/../include/driver_types.h"
# 185 "/usr/local/cuda/bin/../include/driver_types.h"
# 198 "/usr/local/cuda/bin/../include/driver_types.h"
# 210 "/usr/local/cuda/bin/../include/driver_types.h"
# 221 "/usr/local/cuda/bin/../include/driver_types.h"
# 239 "/usr/local/cuda/bin/../include/driver_types.h"
# 245 "/usr/local/cuda/bin/../include/driver_types.h"
# 254 "/usr/local/cuda/bin/../include/driver_types.h"
# 265 "/usr/local/cuda/bin/../include/driver_types.h"
# 278 "/usr/local/cuda/bin/../include/driver_types.h"
# 304 "/usr/local/cuda/bin/../include/driver_types.h"
# 315 "/usr/local/cuda/bin/../include/driver_types.h"
# 326 "/usr/local/cuda/bin/../include/driver_types.h"
# 395 "/usr/local/cuda/bin/../include/driver_types.h"
# 401 "/usr/local/cuda/bin/../include/driver_types.h"
# 407 "/usr/local/cuda/bin/../include/driver_types.h"
# 54 "/usr/local/cuda/bin/../include/texture_types.h"
# 62 "/usr/local/cuda/bin/../include/texture_types.h"
# 69 "/usr/local/cuda/bin/../include/texture_types.h"
# 76 "/usr/local/cuda/bin/../include/texture_types.h"
# 82 "/usr/local/cuda/bin/../include/vector_types.h"
# 89 "/usr/local/cuda/bin/../include/vector_types.h"
# 96 "/usr/local/cuda/bin/../include/vector_types.h"
# 103 "/usr/local/cuda/bin/../include/vector_types.h"
# 110 "/usr/local/cuda/bin/../include/vector_types.h"
# 117 "/usr/local/cuda/bin/../include/vector_types.h"
# 124 "/usr/local/cuda/bin/../include/vector_types.h"
# 131 "/usr/local/cuda/bin/../include/vector_types.h"
# 138 "/usr/local/cuda/bin/../include/vector_types.h"
# 145 "/usr/local/cuda/bin/../include/vector_types.h"
# 152 "/usr/local/cuda/bin/../include/vector_types.h"
# 159 "/usr/local/cuda/bin/../include/vector_types.h"
# 166 "/usr/local/cuda/bin/../include/vector_types.h"
# 173 "/usr/local/cuda/bin/../include/vector_types.h"
# 180 "/usr/local/cuda/bin/../include/vector_types.h"
# 183 "/usr/local/cuda/bin/../include/vector_types.h"
# 186 "/usr/local/cuda/bin/../include/vector_types.h"
# 193 "/usr/local/cuda/bin/../include/vector_types.h"
# 200 "/usr/local/cuda/bin/../include/vector_types.h"
# 203 "/usr/local/cuda/bin/../include/vector_types.h"
# 206 "/usr/local/cuda/bin/../include/vector_types.h"
# 213 "/usr/local/cuda/bin/../include/vector_types.h"
# 220 "/usr/local/cuda/bin/../include/vector_types.h"
# 227 "/usr/local/cuda/bin/../include/vector_types.h"
# 234 "/usr/local/cuda/bin/../include/vector_types.h"
# 241 "/usr/local/cuda/bin/../include/vector_types.h"
# 258 "/usr/local/cuda/bin/../include/vector_types.h"
# 265 "/usr/local/cuda/bin/../include/vector_types.h"
# 274 "/usr/local/cuda/bin/../include/vector_types.h"
# 281 "/usr/local/cuda/bin/../include/vector_types.h"
# 288 "/usr/local/cuda/bin/../include/vector_types.h"
# 295 "/usr/local/cuda/bin/../include/vector_types.h"
# 302 "/usr/local/cuda/bin/../include/vector_types.h"
# 309 "/usr/local/cuda/bin/../include/vector_types.h"
# 312 "/usr/local/cuda/bin/../include/vector_types.h"
# 319 "/usr/local/cuda/bin/../include/vector_types.h"
# 326 "/usr/local/cuda/bin/../include/vector_types.h"
# 333 "/usr/local/cuda/bin/../include/vector_types.h"
# 340 "/usr/local/cuda/bin/../include/vector_types.h"
# 347 "/usr/local/cuda/bin/../include/vector_types.h"
# 354 "/usr/local/cuda/bin/../include/vector_types.h"
# 361 "/usr/local/cuda/bin/../include/vector_types.h"
# 368 "/usr/local/cuda/bin/../include/vector_types.h"
# 375 "/usr/local/cuda/bin/../include/vector_types.h"
# 382 "/usr/local/cuda/bin/../include/vector_types.h"
# 389 "/usr/local/cuda/bin/../include/vector_types.h"
# 396 "/usr/local/cuda/bin/../include/vector_types.h"
# 403 "/usr/local/cuda/bin/../include/vector_types.h"
# 416 "/usr/local/cuda/bin/../include/vector_types.h"
# 418 "/usr/local/cuda/bin/../include/vector_types.h"
# 420 "/usr/local/cuda/bin/../include/vector_types.h"
# 422 "/usr/local/cuda/bin/../include/vector_types.h"
# 424 "/usr/local/cuda/bin/../include/vector_types.h"
# 426 "/usr/local/cuda/bin/../include/vector_types.h"
# 428 "/usr/local/cuda/bin/../include/vector_types.h"
# 430 "/usr/local/cuda/bin/../include/vector_types.h"
# 432 "/usr/local/cuda/bin/../include/vector_types.h"
# 434 "/usr/local/cuda/bin/../include/vector_types.h"
# 436 "/usr/local/cuda/bin/../include/vector_types.h"
# 438 "/usr/local/cuda/bin/../include/vector_types.h"
# 440 "/usr/local/cuda/bin/../include/vector_types.h"
# 442 "/usr/local/cuda/bin/../include/vector_types.h"
# 444 "/usr/local/cuda/bin/../include/vector_types.h"
# 446 "/usr/local/cuda/bin/../include/vector_types.h"
# 448 "/usr/local/cuda/bin/../include/vector_types.h"
# 450 "/usr/local/cuda/bin/../include/vector_types.h"
# 452 "/usr/local/cuda/bin/../include/vector_types.h"
# 454 "/usr/local/cuda/bin/../include/vector_types.h"
# 456 "/usr/local/cuda/bin/../include/vector_types.h"
# 458 "/usr/local/cuda/bin/../include/vector_types.h"
# 460 "/usr/local/cuda/bin/../include/vector_types.h"
# 462 "/usr/local/cuda/bin/../include/vector_types.h"
# 464 "/usr/local/cuda/bin/../include/vector_types.h"
# 466 "/usr/local/cuda/bin/../include/vector_types.h"
# 468 "/usr/local/cuda/bin/../include/vector_types.h"
# 470 "/usr/local/cuda/bin/../include/vector_types.h"
# 472 "/usr/local/cuda/bin/../include/vector_types.h"
# 474 "/usr/local/cuda/bin/../include/vector_types.h"
# 476 "/usr/local/cuda/bin/../include/vector_types.h"
# 478 "/usr/local/cuda/bin/../include/vector_types.h"
# 480 "/usr/local/cuda/bin/../include/vector_types.h"
# 482 "/usr/local/cuda/bin/../include/vector_types.h"
# 484 "/usr/local/cuda/bin/../include/vector_types.h"
# 486 "/usr/local/cuda/bin/../include/vector_types.h"
# 488 "/usr/local/cuda/bin/../include/vector_types.h"
# 490 "/usr/local/cuda/bin/../include/vector_types.h"
# 492 "/usr/local/cuda/bin/../include/vector_types.h"
# 494 "/usr/local/cuda/bin/../include/vector_types.h"
# 496 "/usr/local/cuda/bin/../include/vector_types.h"
# 498 "/usr/local/cuda/bin/../include/vector_types.h"
# 500 "/usr/local/cuda/bin/../include/vector_types.h"
# 502 "/usr/local/cuda/bin/../include/vector_types.h"
# 504 "/usr/local/cuda/bin/../include/vector_types.h"
# 506 "/usr/local/cuda/bin/../include/vector_types.h"
# 508 "/usr/local/cuda/bin/../include/vector_types.h"
# 510 "/usr/local/cuda/bin/../include/vector_types.h"
# 519 "/usr/local/cuda/bin/../include/vector_types.h"
# 530 "/usr/local/cuda/bin/../include/vector_types.h"
# 89 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc3D(cudaPitchedPtr *, cudaExtent);
# 90 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc3DArray(cudaArray **, const cudaChannelFormatDesc *, cudaExtent);
# 91 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset3D(cudaPitchedPtr, int, cudaExtent);
# 92 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms *);
# 93 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms *, cudaStream_t = 0);
# 101 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc(void **, size_t);
# 102 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocHost(void **, size_t);
# 103 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocPitch(void **, size_t *, size_t, size_t);
# 104 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocArray(cudaArray **, const cudaChannelFormatDesc *, size_t, size_t = (1));
# 105 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFree(void *);
# 106 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeHost(void *);
# 107 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeArray(cudaArray *);
# 109 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostAlloc(void **, size_t, unsigned);
# 110 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostGetDevicePointer(void **, void *, unsigned);
# 111 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostGetFlags(unsigned *, void *);
# 119 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemGetInfo(size_t *, size_t *);
# 120 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy(void *, const void *, size_t, cudaMemcpyKind);
# 121 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToArray(cudaArray *, size_t, size_t, const void *, size_t, cudaMemcpyKind);
# 122 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromArray(void *, const cudaArray *, size_t, size_t, size_t, cudaMemcpyKind);
# 123 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyArrayToArray(cudaArray *, size_t, size_t, const cudaArray *, size_t, size_t, size_t, cudaMemcpyKind = cudaMemcpyDeviceToDevice);
# 124 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2D(void *, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind);
# 125 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DToArray(cudaArray *, size_t, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind);
# 126 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DFromArray(void *, size_t, const cudaArray *, size_t, size_t, size_t, size_t, cudaMemcpyKind);
# 127 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DArrayToArray(cudaArray *, size_t, size_t, const cudaArray *, size_t, size_t, size_t, size_t, cudaMemcpyKind = cudaMemcpyDeviceToDevice);
# 128 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToSymbol(const char *, const void *, size_t, size_t = (0), cudaMemcpyKind = cudaMemcpyHostToDevice);
# 129 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromSymbol(void *, const char *, size_t, size_t = (0), cudaMemcpyKind = cudaMemcpyDeviceToHost);
# 137 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyAsync(void *, const void *, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 138 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToArrayAsync(cudaArray *, size_t, size_t, const void *, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 139 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromArrayAsync(void *, const cudaArray *, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 140 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DAsync(void *, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 141 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DToArrayAsync(cudaArray *, size_t, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 142 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DFromArrayAsync(void *, size_t, const cudaArray *, size_t, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 143 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToSymbolAsync(const char *, const void *, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 144 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromSymbolAsync(void *, const char *, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 152 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset(void *, int, size_t);
# 153 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset2D(void *, size_t, int, size_t, size_t);
# 161 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSymbolAddress(void **, const char *);
# 162 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSymbolSize(size_t *, const char *);
# 170 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDeviceCount(int *);
# 171 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDeviceProperties(cudaDeviceProp *, int);
# 172 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaChooseDevice(int *, const cudaDeviceProp *);
# 173 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDevice(int);
# 174 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDevice(int *);
# 175 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetValidDevices(int *, int);
# 176 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDeviceFlags(int);
# 184 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTexture(size_t *, const textureReference *, const void *, const cudaChannelFormatDesc *, size_t = (((2147483647) * 2U) + 1U));
# 185 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTexture2D(size_t *, const textureReference *, const void *, const cudaChannelFormatDesc *, size_t, size_t, size_t);
# 186 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTextureToArray(const textureReference *, const cudaArray *, const cudaChannelFormatDesc *);
# 187 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaUnbindTexture(const textureReference *);
# 188 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureAlignmentOffset(size_t *, const textureReference *);
# 189 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureReference(const textureReference **, const char *);
# 197 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc *, const cudaArray *);
# 198 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaChannelFormatDesc cudaCreateChannelDesc(int, int, int, int, cudaChannelFormatKind);
# 206 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetLastError();
# 207 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" const char *cudaGetErrorString(cudaError_t);
# 215 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaConfigureCall(dim3, dim3, size_t = (0), cudaStream_t = 0);
# 216 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetupArgument(const void *, size_t, size_t);
# 217 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFuncSetCacheConfig(const char *, cudaFuncCache);
# 218 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaLaunch(const char *);
# 219 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFuncGetAttributes(cudaFuncAttributes *, const char *);
# 227 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamCreate(cudaStream_t *);
# 228 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamDestroy(cudaStream_t);
# 229 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamSynchronize(cudaStream_t);
# 230 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamQuery(cudaStream_t);
# 238 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventCreate(cudaEvent_t *);
# 239 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventCreateWithFlags(cudaEvent_t *, int);
# 240 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventRecord(cudaEvent_t, cudaStream_t = 0);
# 241 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventQuery(cudaEvent_t);
# 242 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventSynchronize(cudaEvent_t);
# 243 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventDestroy(cudaEvent_t);
# 244 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventElapsedTime(float *, cudaEvent_t, cudaEvent_t);
# 252 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDoubleForDevice(double *);
# 253 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDoubleForHost(double *);
# 261 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadExit();
# 262 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSynchronize();
# 270 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDriverGetVersion(int *);
# 271 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaRuntimeGetVersion(int *);
# 279 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource *);
# 280 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource *, unsigned);
# 281 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsMapResources(int, cudaGraphicsResource **, cudaStream_t = 0);
# 282 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsUnmapResources(int, cudaGraphicsResource **, cudaStream_t = 0);
# 283 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsResourceGetMappedPointer(void **, size_t *, cudaGraphicsResource *);
# 284 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray **, cudaGraphicsResource *, unsigned, unsigned);
# 93 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<class T> inline cudaChannelFormatDesc cudaCreateChannelDesc()
# 94 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 95 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
# 96 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 98 "/usr/local/cuda/bin/../include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf()
# 99 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 100 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 102 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 103 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 105 "/usr/local/cuda/bin/../include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1()
# 106 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 107 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 109 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 110 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 112 "/usr/local/cuda/bin/../include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2()
# 113 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 114 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 116 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
# 117 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 119 "/usr/local/cuda/bin/../include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4()
# 120 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 121 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 123 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
# 124 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 126 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> ()
# 127 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 128 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(char)) * 8);
# 133 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 135 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 137 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> ()
# 138 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 139 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 141 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 142 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 144 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> ()
# 145 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 146 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 148 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 149 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 151 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> ()
# 152 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 153 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 155 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 156 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 158 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> ()
# 159 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 160 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 162 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 163 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 165 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> ()
# 166 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 167 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 169 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 170 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 172 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> ()
# 173 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 174 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 176 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 177 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 179 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> ()
# 180 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 181 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 183 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 184 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 186 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> ()
# 187 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 188 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 190 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 191 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 193 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> ()
# 194 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 195 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 197 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 198 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 200 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> ()
# 201 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 202 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 204 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 205 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 207 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> ()
# 208 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 209 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 211 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 212 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 214 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> ()
# 215 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 216 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 218 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 219 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 221 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> ()
# 222 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 223 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 225 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 226 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 228 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> ()
# 229 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 230 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 232 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 233 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 235 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> ()
# 236 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 237 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 239 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 240 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 242 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> ()
# 243 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 244 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 246 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 247 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 249 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> ()
# 250 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 251 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 253 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 254 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 256 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> ()
# 257 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 258 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 260 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 261 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 263 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> ()
# 264 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 265 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 267 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 268 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 270 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> ()
# 271 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 272 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 274 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 275 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 277 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> ()
# 278 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 279 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 281 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 282 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 284 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> ()
# 285 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 286 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 288 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 289 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 291 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> ()
# 292 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 293 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 295 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 296 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 298 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> ()
# 299 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 300 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 302 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 303 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 307 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< long> ()
# 308 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 309 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(long)) * 8);
# 311 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 312 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 314 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned long> ()
# 315 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 316 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8);
# 318 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 319 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 321 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< long1> ()
# 322 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 323 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(long)) * 8);
# 325 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 326 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 328 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong1> ()
# 329 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 330 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8);
# 332 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 333 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 335 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< long2> ()
# 336 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 337 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(long)) * 8);
# 339 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 340 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 342 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong2> ()
# 343 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 344 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8);
# 346 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 347 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 349 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< long4> ()
# 350 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 351 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(long)) * 8);
# 353 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 354 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 356 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong4> ()
# 357 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 358 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8);
# 360 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 361 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 365 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> ()
# 366 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 367 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 369 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 370 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 372 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> ()
# 373 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 374 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 376 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 377 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 379 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> ()
# 380 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 381 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 383 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
# 384 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 386 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> ()
# 387 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 388 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 390 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
# 391 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 54 "/usr/local/cuda/bin/../include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz)
# 55 "/usr/local/cuda/bin/../include/driver_functions.h"
{
# 56 "/usr/local/cuda/bin/../include/driver_functions.h"
cudaPitchedPtr s;
# 58 "/usr/local/cuda/bin/../include/driver_functions.h"
(s.ptr) = d;
# 59 "/usr/local/cuda/bin/../include/driver_functions.h"
(s.pitch) = p;
# 60 "/usr/local/cuda/bin/../include/driver_functions.h"
(s.xsize) = xsz;
# 61 "/usr/local/cuda/bin/../include/driver_functions.h"
(s.ysize) = ysz;
# 63 "/usr/local/cuda/bin/../include/driver_functions.h"
return s;
# 64 "/usr/local/cuda/bin/../include/driver_functions.h"
}
# 66 "/usr/local/cuda/bin/../include/driver_functions.h"
static inline cudaPos make_cudaPos(size_t x, size_t y, size_t z)
# 67 "/usr/local/cuda/bin/../include/driver_functions.h"
{
# 68 "/usr/local/cuda/bin/../include/driver_functions.h"
cudaPos p;
# 70 "/usr/local/cuda/bin/../include/driver_functions.h"
(p.x) = x;
# 71 "/usr/local/cuda/bin/../include/driver_functions.h"
(p.y) = y;
# 72 "/usr/local/cuda/bin/../include/driver_functions.h"
(p.z) = z;
# 74 "/usr/local/cuda/bin/../include/driver_functions.h"
return p;
# 75 "/usr/local/cuda/bin/../include/driver_functions.h"
}
# 77 "/usr/local/cuda/bin/../include/driver_functions.h"
static inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d)
# 78 "/usr/local/cuda/bin/../include/driver_functions.h"
{
# 79 "/usr/local/cuda/bin/../include/driver_functions.h"
cudaExtent e;
# 81 "/usr/local/cuda/bin/../include/driver_functions.h"
(e.width) = w;
# 82 "/usr/local/cuda/bin/../include/driver_functions.h"
(e.height) = h;
# 83 "/usr/local/cuda/bin/../include/driver_functions.h"
(e.depth) = d;
# 85 "/usr/local/cuda/bin/../include/driver_functions.h"
return e;
# 86 "/usr/local/cuda/bin/../include/driver_functions.h"
}
# 54 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline char1 make_char1(signed char x)
# 55 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 56 "/usr/local/cuda/bin/../include/vector_functions.h"
char1 t; (t.x) = x; return t;
# 57 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 59 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uchar1 make_uchar1(unsigned char x)
# 60 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 61 "/usr/local/cuda/bin/../include/vector_functions.h"
uchar1 t; (t.x) = x; return t;
# 62 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 64 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline char2 make_char2(signed char x, signed char y)
# 65 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 66 "/usr/local/cuda/bin/../include/vector_functions.h"
char2 t; (t.x) = x; (t.y) = y; return t;
# 67 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 69 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uchar2 make_uchar2(unsigned char x, unsigned char y)
# 70 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 71 "/usr/local/cuda/bin/../include/vector_functions.h"
uchar2 t; (t.x) = x; (t.y) = y; return t;
# 72 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 74 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline char3 make_char3(signed char x, signed char y, signed char z)
# 75 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 76 "/usr/local/cuda/bin/../include/vector_functions.h"
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 77 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 79 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
# 80 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 81 "/usr/local/cuda/bin/../include/vector_functions.h"
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 82 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 84 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w)
# 85 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 86 "/usr/local/cuda/bin/../include/vector_functions.h"
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 87 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 89 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
# 90 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 91 "/usr/local/cuda/bin/../include/vector_functions.h"
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 92 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 94 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline short1 make_short1(short x)
# 95 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 96 "/usr/local/cuda/bin/../include/vector_functions.h"
short1 t; (t.x) = x; return t;
# 97 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 99 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ushort1 make_ushort1(unsigned short x)
# 100 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 101 "/usr/local/cuda/bin/../include/vector_functions.h"
ushort1 t; (t.x) = x; return t;
# 102 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 104 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline short2 make_short2(short x, short y)
# 105 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 106 "/usr/local/cuda/bin/../include/vector_functions.h"
short2 t; (t.x) = x; (t.y) = y; return t;
# 107 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 109 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ushort2 make_ushort2(unsigned short x, unsigned short y)
# 110 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 111 "/usr/local/cuda/bin/../include/vector_functions.h"
ushort2 t; (t.x) = x; (t.y) = y; return t;
# 112 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 114 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline short3 make_short3(short x, short y, short z)
# 115 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 116 "/usr/local/cuda/bin/../include/vector_functions.h"
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 117 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 119 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
# 120 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 121 "/usr/local/cuda/bin/../include/vector_functions.h"
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 122 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 124 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline short4 make_short4(short x, short y, short z, short w)
# 125 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 126 "/usr/local/cuda/bin/../include/vector_functions.h"
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 127 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 129 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
# 130 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 131 "/usr/local/cuda/bin/../include/vector_functions.h"
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 132 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 134 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline int1 make_int1(int x)
# 135 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 136 "/usr/local/cuda/bin/../include/vector_functions.h"
int1 t; (t.x) = x; return t;
# 137 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 139 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uint1 make_uint1(unsigned x)
# 140 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 141 "/usr/local/cuda/bin/../include/vector_functions.h"
uint1 t; (t.x) = x; return t;
# 142 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 144 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline int2 make_int2(int x, int y)
# 145 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 146 "/usr/local/cuda/bin/../include/vector_functions.h"
int2 t; (t.x) = x; (t.y) = y; return t;
# 147 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 149 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uint2 make_uint2(unsigned x, unsigned y)
# 150 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 151 "/usr/local/cuda/bin/../include/vector_functions.h"
uint2 t; (t.x) = x; (t.y) = y; return t;
# 152 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 154 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline int3 make_int3(int x, int y, int z)
# 155 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 156 "/usr/local/cuda/bin/../include/vector_functions.h"
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 157 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 159 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z)
# 160 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 161 "/usr/local/cuda/bin/../include/vector_functions.h"
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 162 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 164 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline int4 make_int4(int x, int y, int z, int w)
# 165 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 166 "/usr/local/cuda/bin/../include/vector_functions.h"
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 167 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 169 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w)
# 170 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 171 "/usr/local/cuda/bin/../include/vector_functions.h"
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 172 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 174 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline long1 make_long1(long x)
# 175 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 176 "/usr/local/cuda/bin/../include/vector_functions.h"
long1 t; (t.x) = x; return t;
# 177 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 179 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulong1 make_ulong1(unsigned long x)
# 180 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 181 "/usr/local/cuda/bin/../include/vector_functions.h"
ulong1 t; (t.x) = x; return t;
# 182 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 184 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline long2 make_long2(long x, long y)
# 185 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 186 "/usr/local/cuda/bin/../include/vector_functions.h"
long2 t; (t.x) = x; (t.y) = y; return t;
# 187 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 189 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulong2 make_ulong2(unsigned long x, unsigned long y)
# 190 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 191 "/usr/local/cuda/bin/../include/vector_functions.h"
ulong2 t; (t.x) = x; (t.y) = y; return t;
# 192 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 194 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline long3 make_long3(long x, long y, long z)
# 195 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 196 "/usr/local/cuda/bin/../include/vector_functions.h"
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 197 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 199 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z)
# 200 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 201 "/usr/local/cuda/bin/../include/vector_functions.h"
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 202 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 204 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline long4 make_long4(long x, long y, long z, long w)
# 205 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 206 "/usr/local/cuda/bin/../include/vector_functions.h"
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 207 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 209 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w)
# 210 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 211 "/usr/local/cuda/bin/../include/vector_functions.h"
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 212 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 214 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline float1 make_float1(float x)
# 215 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 216 "/usr/local/cuda/bin/../include/vector_functions.h"
float1 t; (t.x) = x; return t;
# 217 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 219 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline float2 make_float2(float x, float y)
# 220 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 221 "/usr/local/cuda/bin/../include/vector_functions.h"
float2 t; (t.x) = x; (t.y) = y; return t;
# 222 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 224 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline float3 make_float3(float x, float y, float z)
# 225 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 226 "/usr/local/cuda/bin/../include/vector_functions.h"
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 227 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 229 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline float4 make_float4(float x, float y, float z, float w)
# 230 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 231 "/usr/local/cuda/bin/../include/vector_functions.h"
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 232 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 234 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline longlong1 make_longlong1(long long x)
# 235 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 236 "/usr/local/cuda/bin/../include/vector_functions.h"
longlong1 t; (t.x) = x; return t;
# 237 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 239 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulonglong1 make_ulonglong1(unsigned long long x)
# 240 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 241 "/usr/local/cuda/bin/../include/vector_functions.h"
ulonglong1 t; (t.x) = x; return t;
# 242 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 244 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline longlong2 make_longlong2(long long x, long long y)
# 245 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 246 "/usr/local/cuda/bin/../include/vector_functions.h"
longlong2 t; (t.x) = x; (t.y) = y; return t;
# 247 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 249 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y)
# 250 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 251 "/usr/local/cuda/bin/../include/vector_functions.h"
ulonglong2 t; (t.x) = x; (t.y) = y; return t;
# 252 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 254 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline longlong3 make_longlong3(long long x, long long y, long long z)
# 255 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 256 "/usr/local/cuda/bin/../include/vector_functions.h"
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 257 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 259 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z)
# 260 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 261 "/usr/local/cuda/bin/../include/vector_functions.h"
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 262 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 264 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w)
# 265 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 266 "/usr/local/cuda/bin/../include/vector_functions.h"
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 267 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 269 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w)
# 270 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 271 "/usr/local/cuda/bin/../include/vector_functions.h"
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 272 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 274 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline double1 make_double1(double x)
# 275 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 276 "/usr/local/cuda/bin/../include/vector_functions.h"
double1 t; (t.x) = x; return t;
# 277 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 279 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline double2 make_double2(double x, double y)
# 280 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 281 "/usr/local/cuda/bin/../include/vector_functions.h"
double2 t; (t.x) = x; (t.y) = y; return t;
# 282 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 284 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline double3 make_double3(double x, double y, double z)
# 285 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 286 "/usr/local/cuda/bin/../include/vector_functions.h"
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 287 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 289 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline double4 make_double4(double x, double y, double z, double w)
# 290 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 291 "/usr/local/cuda/bin/../include/vector_functions.h"
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 292 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 31 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned char __u_char; }
# 32 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned short __u_short; }
# 33 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __u_int; }
# 34 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __u_long; }
# 37 "/usr/include/bits/types.h" 3
extern "C" { typedef signed char __int8_t; }
# 38 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned char __uint8_t; }
# 39 "/usr/include/bits/types.h" 3
extern "C" { typedef signed short __int16_t; }
# 40 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned short __uint16_t; }
# 41 "/usr/include/bits/types.h" 3
extern "C" { typedef signed int __int32_t; }
# 42 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __uint32_t; }
# 47 "/usr/include/bits/types.h" 3
extern "C" { typedef signed long long __int64_t; }
# 48 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long long __uint64_t; }
# 56 "/usr/include/bits/types.h" 3
extern "C" { typedef long long __quad_t; }
# 57 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long long __u_quad_t; }
# 134 "/usr/include/bits/types.h" 3
extern "C" { typedef __u_quad_t __dev_t; }
# 135 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __uid_t; }
# 136 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __gid_t; }
# 137 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __ino_t; }
# 138 "/usr/include/bits/types.h" 3
extern "C" { typedef __u_quad_t __ino64_t; }
# 139 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __mode_t; }
# 140 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __nlink_t; }
# 141 "/usr/include/bits/types.h" 3
extern "C" { typedef long __off_t; }
# 142 "/usr/include/bits/types.h" 3
extern "C" { typedef __quad_t __off64_t; }
# 143 "/usr/include/bits/types.h" 3
extern "C" { typedef int __pid_t; }
# 144 "/usr/include/bits/types.h" 3
extern "C" { typedef struct { int __val[2]; } __fsid_t; }
# 145 "/usr/include/bits/types.h" 3
extern "C" { typedef long __clock_t; }
# 146 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __rlim_t; }
# 147 "/usr/include/bits/types.h" 3
extern "C" { typedef __u_quad_t __rlim64_t; }
# 148 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __id_t; }
# 149 "/usr/include/bits/types.h" 3
extern "C" { typedef long __time_t; }
# 150 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __useconds_t; }
# 151 "/usr/include/bits/types.h" 3
extern "C" { typedef long __suseconds_t; }
# 153 "/usr/include/bits/types.h" 3
extern "C" { typedef int __daddr_t; }
# 154 "/usr/include/bits/types.h" 3
extern "C" { typedef long __swblk_t; }
# 155 "/usr/include/bits/types.h" 3
extern "C" { typedef int __key_t; }
# 158 "/usr/include/bits/types.h" 3
extern "C" { typedef int __clockid_t; }
# 161 "/usr/include/bits/types.h" 3
extern "C" { typedef void *__timer_t; }
# 164 "/usr/include/bits/types.h" 3
extern "C" { typedef long __blksize_t; }
# 169 "/usr/include/bits/types.h" 3
extern "C" { typedef long __blkcnt_t; }
# 170 "/usr/include/bits/types.h" 3
extern "C" { typedef __quad_t __blkcnt64_t; }
# 173 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __fsblkcnt_t; }
# 174 "/usr/include/bits/types.h" 3
extern "C" { typedef __u_quad_t __fsblkcnt64_t; }
# 177 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned long __fsfilcnt_t; }
# 178 "/usr/include/bits/types.h" 3
extern "C" { typedef __u_quad_t __fsfilcnt64_t; }
# 180 "/usr/include/bits/types.h" 3
extern "C" { typedef int __ssize_t; }
# 184 "/usr/include/bits/types.h" 3
extern "C" { typedef __off64_t __loff_t; }
# 185 "/usr/include/bits/types.h" 3
extern "C" { typedef __quad_t *__qaddr_t; }
# 186 "/usr/include/bits/types.h" 3
extern "C" { typedef char *__caddr_t; }
# 189 "/usr/include/bits/types.h" 3
extern "C" { typedef int __intptr_t; }
# 192 "/usr/include/bits/types.h" 3
extern "C" { typedef unsigned __socklen_t; }
# 60 "/usr/include/time.h" 3
extern "C" { typedef __clock_t clock_t; }
# 76 "/usr/include/time.h" 3
extern "C" { typedef __time_t time_t; }
# 92 "/usr/include/time.h" 3
extern "C" { typedef __clockid_t clockid_t; }
# 104 "/usr/include/time.h" 3
extern "C" { typedef __timer_t timer_t; }
# 120 "/usr/include/time.h" 3
extern "C" { struct __attribute__((visibility("default"))) timespec {
# 122 "/usr/include/time.h" 3
__time_t tv_sec;
# 123 "/usr/include/time.h" 3
long tv_nsec;
# 124 "/usr/include/time.h" 3
}; }
# 133 "/usr/include/time.h" 3
extern "C" { struct tm {
# 135 "/usr/include/time.h" 3
int tm_sec;
# 136 "/usr/include/time.h" 3
int tm_min;
# 137 "/usr/include/time.h" 3
int tm_hour;
# 138 "/usr/include/time.h" 3
int tm_mday;
# 139 "/usr/include/time.h" 3
int tm_mon;
# 140 "/usr/include/time.h" 3
int tm_year;
# 141 "/usr/include/time.h" 3
int tm_wday;
# 142 "/usr/include/time.h" 3
int tm_yday;
# 143 "/usr/include/time.h" 3
int tm_isdst;
# 146 "/usr/include/time.h" 3
long tm_gmtoff;
# 147 "/usr/include/time.h" 3
const char *tm_zone;
# 152 "/usr/include/time.h" 3
}; }
# 161 "/usr/include/time.h" 3
extern "C" { struct itimerspec {
# 163 "/usr/include/time.h" 3
timespec it_interval;
# 164 "/usr/include/time.h" 3
timespec it_value;
# 165 "/usr/include/time.h" 3
}; }
# 168 "/usr/include/time.h" 3
struct sigevent;
# 174 "/usr/include/time.h" 3
extern "C" { typedef __pid_t pid_t; }
# 183 "/usr/include/time.h" 3
extern "C" __attribute__((__weak__)) clock_t clock() throw();
# 186 "/usr/include/time.h" 3
extern "C" time_t time(time_t *) throw();
# 189 "/usr/include/time.h" 3
extern "C" double difftime(time_t, time_t) throw() __attribute__((__const__));
# 193 "/usr/include/time.h" 3
extern "C" time_t mktime(tm *) throw();
# 199 "/usr/include/time.h" 3
extern "C" size_t strftime(char *__restrict__, size_t, const char *__restrict__, const tm *__restrict__) throw();
# 207 "/usr/include/time.h" 3
extern "C" char *strptime(const char *__restrict__, const char *__restrict__, tm *) throw();
# 40 "/usr/include/xlocale.h" 3
extern "C" { typedef
# 28 "/usr/include/xlocale.h" 3
struct __locale_struct {
# 31 "/usr/include/xlocale.h" 3
struct locale_data *__locales[13];
# 34 "/usr/include/xlocale.h" 3
const unsigned short *__ctype_b;
# 35 "/usr/include/xlocale.h" 3
const int *__ctype_tolower;
# 36 "/usr/include/xlocale.h" 3
const int *__ctype_toupper;
# 39 "/usr/include/xlocale.h" 3
const char *__names[13];
# 40 "/usr/include/xlocale.h" 3
} *__locale_t; }
# 43 "/usr/include/xlocale.h" 3
extern "C" { typedef __locale_t locale_t; }
# 217 "/usr/include/time.h" 3
extern "C" size_t strftime_l(char *__restrict__, size_t, const char *__restrict__, const tm *__restrict__, __locale_t) throw();
# 224 "/usr/include/time.h" 3
extern "C" char *strptime_l(const char *__restrict__, const char *__restrict__, tm *, __locale_t) throw();
# 233 "/usr/include/time.h" 3
extern "C" tm *gmtime(const time_t *) throw();
# 237 "/usr/include/time.h" 3
extern "C" tm *localtime(const time_t *) throw();
# 243 "/usr/include/time.h" 3
extern "C" tm *gmtime_r(const time_t *__restrict__, tm *__restrict__) throw();
# 248 "/usr/include/time.h" 3
extern "C" tm *localtime_r(const time_t *__restrict__, tm *__restrict__) throw();
# 255 "/usr/include/time.h" 3
extern "C" char *asctime(const tm *) throw();
# 258 "/usr/include/time.h" 3
extern "C" char *ctime(const time_t *) throw();
# 266 "/usr/include/time.h" 3
extern "C" char *asctime_r(const tm *__restrict__, char *__restrict__) throw();
# 270 "/usr/include/time.h" 3
extern "C" char *ctime_r(const time_t *__restrict__, char *__restrict__) throw();
# 276 "/usr/include/time.h" 3
extern "C" { extern char *__tzname[2]; }
# 277 "/usr/include/time.h" 3
extern "C" { extern int __daylight; }
# 278 "/usr/include/time.h" 3
extern "C" { extern long __timezone; }
# 283 "/usr/include/time.h" 3
extern "C" { extern char *tzname[2]; }
# 287 "/usr/include/time.h" 3
extern "C" void tzset() throw();
# 291 "/usr/include/time.h" 3
extern "C" { extern int daylight; }
# 292 "/usr/include/time.h" 3
extern "C" { extern long timezone; }
# 298 "/usr/include/time.h" 3
extern "C" int stime(const time_t *) throw();
# 313 "/usr/include/time.h" 3
extern "C" time_t timegm(tm *) throw();
# 316 "/usr/include/time.h" 3
extern "C" time_t timelocal(tm *) throw();
# 319 "/usr/include/time.h" 3
extern "C" int dysize(int) throw() __attribute__((__const__));
# 328 "/usr/include/time.h" 3
extern "C" int nanosleep(const timespec *, timespec *);
# 333 "/usr/include/time.h" 3
extern "C" int clock_getres(clockid_t, timespec *) throw();
# 336 "/usr/include/time.h" 3
extern "C" int clock_gettime(clockid_t, timespec *) throw();
# 339 "/usr/include/time.h" 3
extern "C" int clock_settime(clockid_t, const timespec *) throw();
# 347 "/usr/include/time.h" 3
extern "C" int clock_nanosleep(clockid_t, int, const timespec *, timespec *);
# 352 "/usr/include/time.h" 3
extern "C" int clock_getcpuclockid(pid_t, clockid_t *) throw();
# 357 "/usr/include/time.h" 3
extern "C" int timer_create(clockid_t, sigevent *__restrict__, timer_t *__restrict__) throw();
# 362 "/usr/include/time.h" 3
extern "C" int timer_delete(timer_t) throw();
# 365 "/usr/include/time.h" 3
extern "C" int timer_settime(timer_t, int, const itimerspec *__restrict__, itimerspec *__restrict__) throw();
# 370 "/usr/include/time.h" 3
extern "C" int timer_gettime(timer_t, itimerspec *) throw();
# 374 "/usr/include/time.h" 3
extern "C" int timer_getoverrun(timer_t) throw();
# 390 "/usr/include/time.h" 3
extern "C" { extern int getdate_err; }
# 399 "/usr/include/time.h" 3
extern "C" tm *getdate(const char *);
# 413 "/usr/include/time.h" 3
extern "C" int getdate_r(const char *__restrict__, tm *__restrict__);
# 43 "/usr/include/string.h" 3
extern "C" __attribute__((__weak__)) void *memcpy(void *__restrict__, const void *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 48 "/usr/include/string.h" 3
extern "C" void *memmove(void *, const void *, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 56 "/usr/include/string.h" 3
extern "C" void *memccpy(void *__restrict__, const void *__restrict__, int, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 64 "/usr/include/string.h" 3
extern "C" __attribute__((__weak__)) void *memset(void *, int, size_t) throw() __attribute__((nonnull(1)));
# 67 "/usr/include/string.h" 3
extern "C" int memcmp(const void *, const void *, size_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 74 "/usr/include/string.h" 3
extern void *memchr(void *, int, size_t) throw() __asm__("memchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 76 "/usr/include/string.h" 3
extern const void *memchr(const void *, int, size_t) throw() __asm__("memchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 103 "/usr/include/string.h" 3
void *rawmemchr(void *, int) throw() __asm__("rawmemchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 105 "/usr/include/string.h" 3
const void *rawmemchr(const void *, int) throw() __asm__("rawmemchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 114 "/usr/include/string.h" 3
void *memrchr(void *, int, size_t) throw() __asm__("memrchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 116 "/usr/include/string.h" 3
const void *memrchr(const void *, int, size_t) throw() __asm__("memrchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 127 "/usr/include/string.h" 3
extern "C" char *strcpy(char *__restrict__, const char *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 130 "/usr/include/string.h" 3
extern "C" char *strncpy(char *__restrict__, const char *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 135 "/usr/include/string.h" 3
extern "C" char *strcat(char *__restrict__, const char *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 138 "/usr/include/string.h" 3
extern "C" char *strncat(char *__restrict__, const char *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 142 "/usr/include/string.h" 3
extern "C" int strcmp(const char *, const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 145 "/usr/include/string.h" 3
extern "C" int strncmp(const char *, const char *, size_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 149 "/usr/include/string.h" 3
extern "C" int strcoll(const char *, const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 152 "/usr/include/string.h" 3
extern "C" size_t strxfrm(char *__restrict__, const char *__restrict__, size_t) throw() __attribute__((nonnull(2)));
# 164 "/usr/include/string.h" 3
extern "C" int strcoll_l(const char *, const char *, __locale_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(3)));
# 167 "/usr/include/string.h" 3
extern "C" size_t strxfrm_l(char *, const char *, size_t, __locale_t) throw() __attribute__((nonnull(2))) __attribute__((nonnull(4)));
# 173 "/usr/include/string.h" 3
extern "C" char *strdup(const char *) throw() __attribute__((__malloc__)) __attribute__((nonnull(1)));
# 181 "/usr/include/string.h" 3
extern "C" char *strndup(const char *, size_t) throw() __attribute__((__malloc__)) __attribute__((nonnull(1)));
# 213 "/usr/include/string.h" 3
extern char *strchr(char *, int) throw() __asm__("strchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 215 "/usr/include/string.h" 3
extern const char *strchr(const char *, int) throw() __asm__("strchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 240 "/usr/include/string.h" 3
extern char *strrchr(char *, int) throw() __asm__("strrchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 242 "/usr/include/string.h" 3
extern const char *strrchr(const char *, int) throw() __asm__("strrchr") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 269 "/usr/include/string.h" 3
char *strchrnul(char *, int) throw() __asm__("strchrnul") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 271 "/usr/include/string.h" 3
const char *strchrnul(const char *, int) throw() __asm__("strchrnul") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 282 "/usr/include/string.h" 3
extern "C" size_t strcspn(const char *, const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 286 "/usr/include/string.h" 3
extern "C" size_t strspn(const char *, const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 292 "/usr/include/string.h" 3
extern char *strpbrk(char *, const char *) throw() __asm__("strpbrk") __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 294 "/usr/include/string.h" 3
extern const char *strpbrk(const char *, const char *) throw() __asm__("strpbrk") __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 319 "/usr/include/string.h" 3
extern char *strstr(char *, const char *) throw() __asm__("strstr") __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 321 "/usr/include/string.h" 3
extern const char *strstr(const char *, const char *) throw() __asm__("strstr") __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 346 "/usr/include/string.h" 3
extern "C" char *strtok(char *__restrict__, const char *__restrict__) throw() __attribute__((nonnull(2)));
# 352 "/usr/include/string.h" 3
extern "C" char *__strtok_r(char *__restrict__, const char *__restrict__, char **__restrict__) throw() __attribute__((nonnull(2))) __attribute__((nonnull(3)));
# 357 "/usr/include/string.h" 3
extern "C" char *strtok_r(char *__restrict__, const char *__restrict__, char **__restrict__) throw() __attribute__((nonnull(2))) __attribute__((nonnull(3)));
# 365 "/usr/include/string.h" 3
char *strcasestr(char *, const char *) throw() __asm__("strcasestr") __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 367 "/usr/include/string.h" 3
const char *strcasestr(const char *, const char *) throw() __asm__("strcasestr") __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 380 "/usr/include/string.h" 3
extern "C" void *memmem(const void *, size_t, const void *, size_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(3)));
# 386 "/usr/include/string.h" 3
extern "C" void *__mempcpy(void *__restrict__, const void *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 389 "/usr/include/string.h" 3
extern "C" void *mempcpy(void *__restrict__, const void *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 397 "/usr/include/string.h" 3
extern "C" size_t strlen(const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1)));
# 404 "/usr/include/string.h" 3
extern "C" size_t strnlen(const char *, size_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1)));
# 411 "/usr/include/string.h" 3
extern "C" char *strerror(int) throw();
# 436 "/usr/include/string.h" 3
extern "C" char *strerror_r(int, char *, size_t) throw() __attribute__((nonnull(2)));
# 443 "/usr/include/string.h" 3
extern "C" char *strerror_l(int, __locale_t) throw();
# 449 "/usr/include/string.h" 3
extern "C" void __bzero(void *, size_t) throw() __attribute__((nonnull(1)));
# 453 "/usr/include/string.h" 3
extern "C" void bcopy(const void *, void *, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 457 "/usr/include/string.h" 3
extern "C" void bzero(void *, size_t) throw() __attribute__((nonnull(1)));
# 460 "/usr/include/string.h" 3
extern "C" int bcmp(const void *, const void *, size_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 467 "/usr/include/string.h" 3
extern char *index(char *, int) throw() __asm__("index") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 469 "/usr/include/string.h" 3
extern const char *index(const char *, int) throw() __asm__("index") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 495 "/usr/include/string.h" 3
extern char *rindex(char *, int) throw() __asm__("rindex") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 497 "/usr/include/string.h" 3
extern const char *rindex(const char *, int) throw() __asm__("rindex") __attribute__((__pure__)) __attribute__((nonnull(1)));
# 521 "/usr/include/string.h" 3
extern "C" int ffs(int) throw() __attribute__((__const__));
# 526 "/usr/include/string.h" 3
extern "C" int ffsl(long) throw() __attribute__((__const__));
# 528 "/usr/include/string.h" 3
extern "C" int ffsll(long long) throw() __attribute__((__const__));
# 534 "/usr/include/string.h" 3
extern "C" int strcasecmp(const char *, const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 538 "/usr/include/string.h" 3
extern "C" int strncasecmp(const char *, const char *, size_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 545 "/usr/include/string.h" 3
extern "C" int strcasecmp_l(const char *, const char *, __locale_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(3)));
# 549 "/usr/include/string.h" 3
extern "C" int strncasecmp_l(const char *, const char *, size_t, __locale_t) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(4)));
# 557 "/usr/include/string.h" 3
extern "C" char *strsep(char **__restrict__, const char *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 564 "/usr/include/string.h" 3
extern "C" char *strsignal(int) throw();
# 567 "/usr/include/string.h" 3
extern "C" char *__stpcpy(char *__restrict__, const char *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 569 "/usr/include/string.h" 3
extern "C" char *stpcpy(char *__restrict__, const char *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 574 "/usr/include/string.h" 3
extern "C" char *__stpncpy(char *__restrict__, const char *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 577 "/usr/include/string.h" 3
extern "C" char *stpncpy(char *__restrict__, const char *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 584 "/usr/include/string.h" 3
extern "C" int strverscmp(const char *, const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 588 "/usr/include/string.h" 3
extern "C" char *strfry(char *) throw() __attribute__((nonnull(1)));
# 591 "/usr/include/string.h" 3
extern "C" void *memfrob(void *, size_t) throw() __attribute__((nonnull(1)));
# 599 "/usr/include/string.h" 3
char *basename(char *) throw() __asm__("basename") __attribute__((nonnull(1)));
# 601 "/usr/include/string.h" 3
const char *basename(const char *) throw() __asm__("basename") __attribute__((nonnull(1)));
# 56 "/usr/local/cuda/bin/../include/common_functions.h"
extern "C" __attribute__((__weak__)) clock_t clock() throw();
# 59 "/usr/local/cuda/bin/../include/common_functions.h"
extern "C" __attribute__((__weak__)) void *memset(void *, int, size_t) throw() __attribute__((nonnull(1)));
# 62 "/usr/local/cuda/bin/../include/common_functions.h"
extern "C" __attribute__((__weak__)) void *memcpy(void *, const void *, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 65 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int abs(int) throw() __attribute__((__const__));
# 67 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long labs(long) throw() __attribute__((__const__));
# 69 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long long llabs(long long) throw() __attribute__((__const__));
# 71 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double fabs(double) throw() __attribute__((__const__));
# 73 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float fabsf(float) throw() __attribute__((__const__));
# 76 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int min(int, int);
# 78 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) unsigned umin(unsigned, unsigned);
# 80 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long long llmin(long long, long long);
# 82 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) unsigned long long ullmin(unsigned long long, unsigned long long);
# 84 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float fminf(float, float) throw();
# 86 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double fmin(double, double) throw();
# 89 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int max(int, int);
# 91 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) unsigned umax(unsigned, unsigned);
# 93 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long long llmax(long long, long long);
# 95 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) unsigned long long ullmax(unsigned long long, unsigned long long);
# 97 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float fmaxf(float, float) throw();
# 99 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double fmax(double, double) throw();
# 102 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double sin(double) throw();
# 104 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float sinf(float) throw();
# 107 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double cos(double) throw();
# 109 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float cosf(float) throw();
# 112 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) void sincos(double, double *, double *) throw();
# 114 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) void sincosf(float, float *, float *) throw();
# 117 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double tan(double) throw();
# 119 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float tanf(float) throw();
# 122 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double sqrt(double) throw();
# 124 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float sqrtf(float) throw();
# 127 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double rsqrt(double);
# 129 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float rsqrtf(float);
# 132 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double exp2(double) throw();
# 134 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float exp2f(float) throw();
# 137 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double exp10(double) throw();
# 139 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float exp10f(float) throw();
# 142 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double expm1(double) throw();
# 144 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float expm1f(float) throw();
# 147 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double log2(double) throw();
# 149 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float log2f(float) throw();
# 152 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double log10(double) throw();
# 154 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float log10f(float) throw();
# 157 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double log(double) throw();
# 159 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float logf(float) throw();
# 162 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double log1p(double) throw();
# 164 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float log1pf(float) throw();
# 167 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double floor(double) throw() __attribute__((__const__));
# 169 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float floorf(float) throw() __attribute__((__const__));
# 172 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double exp(double) throw();
# 174 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float expf(float) throw();
# 177 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double cosh(double) throw();
# 179 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float coshf(float) throw();
# 182 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double sinh(double) throw();
# 184 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float sinhf(float) throw();
# 187 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double tanh(double) throw();
# 189 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float tanhf(float) throw();
# 192 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double acosh(double) throw();
# 194 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float acoshf(float) throw();
# 197 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double asinh(double) throw();
# 199 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float asinhf(float) throw();
# 202 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double atanh(double) throw();
# 204 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float atanhf(float) throw();
# 207 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double ldexp(double, int) throw();
# 209 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float ldexpf(float, int) throw();
# 212 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double logb(double) throw();
# 214 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float logbf(float) throw();
# 217 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int ilogb(double) throw();
# 219 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int ilogbf(float) throw();
# 222 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double scalbn(double, int) throw();
# 224 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float scalbnf(float, int) throw();
# 227 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double scalbln(double, long) throw();
# 229 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float scalblnf(float, long) throw();
# 232 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double frexp(double, int *) throw();
# 234 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float frexpf(float, int *) throw();
# 237 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double round(double) throw() __attribute__((__const__));
# 239 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float roundf(float) throw() __attribute__((__const__));
# 242 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long lround(double) throw();
# 244 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long lroundf(float) throw();
# 247 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long long llround(double) throw();
# 249 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long long llroundf(float) throw();
# 252 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double rint(double) throw();
# 254 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float rintf(float) throw();
# 257 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long lrint(double) throw();
# 259 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long lrintf(float) throw();
# 262 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long long llrint(double) throw();
# 264 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) long long llrintf(float) throw();
# 267 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double nearbyint(double) throw();
# 269 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float nearbyintf(float) throw();
# 272 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double ceil(double) throw() __attribute__((__const__));
# 274 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float ceilf(float) throw() __attribute__((__const__));
# 277 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double trunc(double) throw() __attribute__((__const__));
# 279 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float truncf(float) throw() __attribute__((__const__));
# 282 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double fdim(double, double) throw();
# 284 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float fdimf(float, float) throw();
# 287 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double atan2(double, double) throw();
# 289 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float atan2f(float, float) throw();
# 292 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double atan(double) throw();
# 294 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float atanf(float) throw();
# 297 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double asin(double) throw();
# 299 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float asinf(float) throw();
# 302 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double acos(double) throw();
# 304 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float acosf(float) throw();
# 307 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double hypot(double, double) throw();
# 309 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float hypotf(float, float) throw();
# 312 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double cbrt(double) throw();
# 314 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float cbrtf(float) throw();
# 317 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double rcbrt(double);
# 319 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float rcbrtf(float);
# 322 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double sinpi(double);
# 324 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float sinpif(float);
# 327 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double pow(double, double) throw();
# 329 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float powf(float, float) throw();
# 332 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double modf(double, double *) throw();
# 334 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float modff(float, float *) throw();
# 337 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double fmod(double, double) throw();
# 339 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float fmodf(float, float) throw();
# 342 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double remainder(double, double) throw();
# 344 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float remainderf(float, float) throw();
# 347 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double remquo(double, double, int *) throw();
# 349 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float remquof(float, float, int *) throw();
# 352 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double erf(double) throw();
# 354 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float erff(float) throw();
# 357 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double erfinv(double);
# 359 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float erfinvf(float);
# 362 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double erfc(double) throw();
# 364 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float erfcf(float) throw();
# 367 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double erfcinv(double);
# 369 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float erfcinvf(float);
# 372 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double lgamma(double) throw();
# 374 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float lgammaf(float) throw();
# 377 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double tgamma(double) throw();
# 379 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float tgammaf(float) throw();
# 382 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double copysign(double, double) throw() __attribute__((__const__));
# 384 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float copysignf(float, float) throw() __attribute__((__const__));
# 387 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double nextafter(double, double) throw() __attribute__((__const__));
# 389 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float nextafterf(float, float) throw() __attribute__((__const__));
# 392 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double nan(const char *) throw() __attribute__((__const__));
# 394 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float nanf(const char *) throw() __attribute__((__const__));
# 397 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __isinf(double) throw() __attribute__((__const__));
# 399 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __isinff(float) throw() __attribute__((__const__));
# 402 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __isnan(double) throw() __attribute__((__const__));
# 404 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __isnanf(float) throw() __attribute__((__const__));
# 418 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __finite(double) throw() __attribute__((__const__));
# 420 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __finitef(float) throw() __attribute__((__const__));
# 422 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __signbit(double) throw() __attribute__((__const__));
# 427 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __signbitf(float) throw() __attribute__((__const__));
# 430 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) double fma(double, double, double) throw();
# 432 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) float fmaf(float, float, float) throw();
# 440 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __signbitl(long double) throw() __attribute__((__const__));
# 442 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __isinfl(long double) throw() __attribute__((__const__));
# 444 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __isnanl(long double) throw() __attribute__((__const__));
# 454 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((__weak__)) int __finitel(long double) throw() __attribute__((__const__));
# 38 "/usr/include/bits/mathdef.h" 3
extern "C" { typedef long double float_t; }
# 40 "/usr/include/bits/mathdef.h" 3
extern "C" { typedef long double double_t; }
# 55 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double acos(double) throw(); extern "C" double __acos(double) throw();
# 57 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double asin(double) throw(); extern "C" double __asin(double) throw();
# 59 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double atan(double) throw(); extern "C" double __atan(double) throw();
# 61 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double atan2(double, double) throw(); extern "C" double __atan2(double, double) throw();
# 64 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double cos(double) throw(); extern "C" double __cos(double) throw();
# 66 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double sin(double) throw(); extern "C" double __sin(double) throw();
# 68 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double tan(double) throw(); extern "C" double __tan(double) throw();
# 73 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double cosh(double) throw(); extern "C" double __cosh(double) throw();
# 75 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double sinh(double) throw(); extern "C" double __sinh(double) throw();
# 77 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double tanh(double) throw(); extern "C" double __tanh(double) throw();
# 82 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) void sincos(double, double *, double *) throw(); extern "C" void __sincos(double, double *, double *) throw();
# 89 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double acosh(double) throw(); extern "C" double __acosh(double) throw();
# 91 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double asinh(double) throw(); extern "C" double __asinh(double) throw();
# 93 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double atanh(double) throw(); extern "C" double __atanh(double) throw();
# 101 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double exp(double) throw(); extern "C" double __exp(double) throw();
# 104 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double frexp(double, int *) throw(); extern "C" double __frexp(double, int *) throw();
# 107 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double ldexp(double, int) throw(); extern "C" double __ldexp(double, int) throw();
# 110 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double log(double) throw(); extern "C" double __log(double) throw();
# 113 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double log10(double) throw(); extern "C" double __log10(double) throw();
# 116 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double modf(double, double *) throw(); extern "C" double __modf(double, double *) throw();
# 121 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double exp10(double) throw(); extern "C" double __exp10(double) throw();
# 123 "/usr/include/bits/mathcalls.h" 3
extern "C" double pow10(double) throw(); extern "C" double __pow10(double) throw();
# 129 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double expm1(double) throw(); extern "C" double __expm1(double) throw();
# 132 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double log1p(double) throw(); extern "C" double __log1p(double) throw();
# 135 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double logb(double) throw(); extern "C" double __logb(double) throw();
# 142 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double exp2(double) throw(); extern "C" double __exp2(double) throw();
# 145 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double log2(double) throw(); extern "C" double __log2(double) throw();
# 154 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double pow(double, double) throw(); extern "C" double __pow(double, double) throw();
# 157 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double sqrt(double) throw(); extern "C" double __sqrt(double) throw();
# 163 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double hypot(double, double) throw(); extern "C" double __hypot(double, double) throw();
# 170 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double cbrt(double) throw(); extern "C" double __cbrt(double) throw();
# 179 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double ceil(double) throw() __attribute__((__const__)); extern "C" double __ceil(double) throw() __attribute__((__const__));
# 182 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double fabs(double) throw() __attribute__((__const__)); extern "C" double __fabs(double) throw() __attribute__((__const__));
# 185 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double floor(double) throw() __attribute__((__const__)); extern "C" double __floor(double) throw() __attribute__((__const__));
# 188 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double fmod(double, double) throw(); extern "C" double __fmod(double, double) throw();
# 193 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) int __isinf(double) throw() __attribute__((__const__));
# 196 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) int __finite(double) throw() __attribute__((__const__));
# 202 "/usr/include/bits/mathcalls.h" 3
extern "C" int isinf(double) throw() __attribute__((__const__));
# 205 "/usr/include/bits/mathcalls.h" 3
extern "C" int finite(double) throw() __attribute__((__const__));
# 208 "/usr/include/bits/mathcalls.h" 3
extern "C" double drem(double, double) throw(); extern "C" double __drem(double, double) throw();
# 212 "/usr/include/bits/mathcalls.h" 3
extern "C" double significand(double) throw(); extern "C" double __significand(double) throw();
# 218 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double copysign(double, double) throw() __attribute__((__const__)); extern "C" double __copysign(double, double) throw() __attribute__((__const__));
# 225 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double nan(const char *) throw() __attribute__((__const__)); extern "C" double __nan(const char *) throw() __attribute__((__const__));
# 231 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) int __isnan(double) throw() __attribute__((__const__));
# 235 "/usr/include/bits/mathcalls.h" 3
extern "C" int isnan(double) throw() __attribute__((__const__));
# 238 "/usr/include/bits/mathcalls.h" 3
extern "C" double j0(double) throw(); extern "C" double __j0(double) throw();
# 239 "/usr/include/bits/mathcalls.h" 3
extern "C" double j1(double) throw(); extern "C" double __j1(double) throw();
# 240 "/usr/include/bits/mathcalls.h" 3
extern "C" double jn(int, double) throw(); extern "C" double __jn(int, double) throw();
# 241 "/usr/include/bits/mathcalls.h" 3
extern "C" double y0(double) throw(); extern "C" double __y0(double) throw();
# 242 "/usr/include/bits/mathcalls.h" 3
extern "C" double y1(double) throw(); extern "C" double __y1(double) throw();
# 243 "/usr/include/bits/mathcalls.h" 3
extern "C" double yn(int, double) throw(); extern "C" double __yn(int, double) throw();
# 250 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double erf(double) throw(); extern "C" double __erf(double) throw();
# 251 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double erfc(double) throw(); extern "C" double __erfc(double) throw();
# 252 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double lgamma(double) throw(); extern "C" double __lgamma(double) throw();
# 259 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double tgamma(double) throw(); extern "C" double __tgamma(double) throw();
# 265 "/usr/include/bits/mathcalls.h" 3
extern "C" double gamma(double) throw(); extern "C" double __gamma(double) throw();
# 272 "/usr/include/bits/mathcalls.h" 3
extern "C" double lgamma_r(double, int *) throw(); extern "C" double __lgamma_r(double, int *) throw();
# 280 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double rint(double) throw(); extern "C" double __rint(double) throw();
# 283 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double nextafter(double, double) throw() __attribute__((__const__)); extern "C" double __nextafter(double, double) throw() __attribute__((__const__));
# 285 "/usr/include/bits/mathcalls.h" 3
extern "C" double nexttoward(double, long double) throw() __attribute__((__const__)); extern "C" double __nexttoward(double, long double) throw() __attribute__((__const__));
# 289 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double remainder(double, double) throw(); extern "C" double __remainder(double, double) throw();
# 293 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double scalbn(double, int) throw(); extern "C" double __scalbn(double, int) throw();
# 297 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) int ilogb(double) throw(); extern "C" int __ilogb(double) throw();
# 302 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double scalbln(double, long) throw(); extern "C" double __scalbln(double, long) throw();
# 306 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double nearbyint(double) throw(); extern "C" double __nearbyint(double) throw();
# 310 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double round(double) throw() __attribute__((__const__)); extern "C" double __round(double) throw() __attribute__((__const__));
# 314 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double trunc(double) throw() __attribute__((__const__)); extern "C" double __trunc(double) throw() __attribute__((__const__));
# 319 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double remquo(double, double, int *) throw(); extern "C" double __remquo(double, double, int *) throw();
# 326 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) long lrint(double) throw(); extern "C" long __lrint(double) throw();
# 327 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) long long llrint(double) throw(); extern "C" long long __llrint(double) throw();
# 331 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) long lround(double) throw(); extern "C" long __lround(double) throw();
# 332 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) long long llround(double) throw(); extern "C" long long __llround(double) throw();
# 336 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double fdim(double, double) throw(); extern "C" double __fdim(double, double) throw();
# 339 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double fmax(double, double) throw(); extern "C" double __fmax(double, double) throw();
# 342 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double fmin(double, double) throw(); extern "C" double __fmin(double, double) throw();
# 346 "/usr/include/bits/mathcalls.h" 3
extern "C" int __fpclassify(double) throw() __attribute__((__const__));
# 350 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) int __signbit(double) throw() __attribute__((__const__));
# 355 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) double fma(double, double, double) throw(); extern "C" double __fma(double, double, double) throw();
# 364 "/usr/include/bits/mathcalls.h" 3
extern "C" double scalb(double, double) throw(); extern "C" double __scalb(double, double) throw();
# 55 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float acosf(float) throw(); extern "C" float __acosf(float) throw();
# 57 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float asinf(float) throw(); extern "C" float __asinf(float) throw();
# 59 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float atanf(float) throw(); extern "C" float __atanf(float) throw();
# 61 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float atan2f(float, float) throw(); extern "C" float __atan2f(float, float) throw();
# 64 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float cosf(float) throw();
# 66 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float sinf(float) throw();
# 68 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float tanf(float) throw();
# 73 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float coshf(float) throw(); extern "C" float __coshf(float) throw();
# 75 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float sinhf(float) throw(); extern "C" float __sinhf(float) throw();
# 77 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float tanhf(float) throw(); extern "C" float __tanhf(float) throw();
# 82 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) void sincosf(float, float *, float *) throw();
# 89 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float acoshf(float) throw(); extern "C" float __acoshf(float) throw();
# 91 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float asinhf(float) throw(); extern "C" float __asinhf(float) throw();
# 93 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float atanhf(float) throw(); extern "C" float __atanhf(float) throw();
# 101 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float expf(float) throw();
# 104 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float frexpf(float, int *) throw(); extern "C" float __frexpf(float, int *) throw();
# 107 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float ldexpf(float, int) throw(); extern "C" float __ldexpf(float, int) throw();
# 110 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float logf(float) throw();
# 113 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float log10f(float) throw();
# 116 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float modff(float, float *) throw(); extern "C" float __modff(float, float *) throw();
# 121 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float exp10f(float) throw();
# 123 "/usr/include/bits/mathcalls.h" 3
extern "C" float pow10f(float) throw(); extern "C" float __pow10f(float) throw();
# 129 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float expm1f(float) throw(); extern "C" float __expm1f(float) throw();
# 132 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float log1pf(float) throw(); extern "C" float __log1pf(float) throw();
# 135 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float logbf(float) throw(); extern "C" float __logbf(float) throw();
# 142 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float exp2f(float) throw(); extern "C" float __exp2f(float) throw();
# 145 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float log2f(float) throw();
# 154 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float powf(float, float) throw();
# 157 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float sqrtf(float) throw(); extern "C" float __sqrtf(float) throw();
# 163 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float hypotf(float, float) throw(); extern "C" float __hypotf(float, float) throw();
# 170 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float cbrtf(float) throw(); extern "C" float __cbrtf(float) throw();
# 179 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float ceilf(float) throw() __attribute__((__const__)); extern "C" float __ceilf(float) throw() __attribute__((__const__));
# 182 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float fabsf(float) throw() __attribute__((__const__)); extern "C" float __fabsf(float) throw() __attribute__((__const__));
# 185 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float floorf(float) throw() __attribute__((__const__)); extern "C" float __floorf(float) throw() __attribute__((__const__));
# 188 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float fmodf(float, float) throw(); extern "C" float __fmodf(float, float) throw();
# 193 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) int __isinff(float) throw() __attribute__((__const__));
# 196 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) int __finitef(float) throw() __attribute__((__const__));
# 202 "/usr/include/bits/mathcalls.h" 3
extern "C" int isinff(float) throw() __attribute__((__const__));
# 205 "/usr/include/bits/mathcalls.h" 3
extern "C" int finitef(float) throw() __attribute__((__const__));
# 208 "/usr/include/bits/mathcalls.h" 3
extern "C" float dremf(float, float) throw(); extern "C" float __dremf(float, float) throw();
# 212 "/usr/include/bits/mathcalls.h" 3
extern "C" float significandf(float) throw(); extern "C" float __significandf(float) throw();
# 218 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float copysignf(float, float) throw() __attribute__((__const__)); extern "C" float __copysignf(float, float) throw() __attribute__((__const__));
# 225 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float nanf(const char *) throw() __attribute__((__const__)); extern "C" float __nanf(const char *) throw() __attribute__((__const__));
# 231 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) int __isnanf(float) throw() __attribute__((__const__));
# 235 "/usr/include/bits/mathcalls.h" 3
extern "C" int isnanf(float) throw() __attribute__((__const__));
# 238 "/usr/include/bits/mathcalls.h" 3
extern "C" float j0f(float) throw(); extern "C" float __j0f(float) throw();
# 239 "/usr/include/bits/mathcalls.h" 3
extern "C" float j1f(float) throw(); extern "C" float __j1f(float) throw();
# 240 "/usr/include/bits/mathcalls.h" 3
extern "C" float jnf(int, float) throw(); extern "C" float __jnf(int, float) throw();
# 241 "/usr/include/bits/mathcalls.h" 3
extern "C" float y0f(float) throw(); extern "C" float __y0f(float) throw();
# 242 "/usr/include/bits/mathcalls.h" 3
extern "C" float y1f(float) throw(); extern "C" float __y1f(float) throw();
# 243 "/usr/include/bits/mathcalls.h" 3
extern "C" float ynf(int, float) throw(); extern "C" float __ynf(int, float) throw();
# 250 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float erff(float) throw(); extern "C" float __erff(float) throw();
# 251 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float erfcf(float) throw(); extern "C" float __erfcf(float) throw();
# 252 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float lgammaf(float) throw(); extern "C" float __lgammaf(float) throw();
# 259 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float tgammaf(float) throw(); extern "C" float __tgammaf(float) throw();
# 265 "/usr/include/bits/mathcalls.h" 3
extern "C" float gammaf(float) throw(); extern "C" float __gammaf(float) throw();
# 272 "/usr/include/bits/mathcalls.h" 3
extern "C" float lgammaf_r(float, int *) throw(); extern "C" float __lgammaf_r(float, int *) throw();
# 280 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float rintf(float) throw(); extern "C" float __rintf(float) throw();
# 283 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float nextafterf(float, float) throw() __attribute__((__const__)); extern "C" float __nextafterf(float, float) throw() __attribute__((__const__));
# 285 "/usr/include/bits/mathcalls.h" 3
extern "C" float nexttowardf(float, long double) throw() __attribute__((__const__)); extern "C" float __nexttowardf(float, long double) throw() __attribute__((__const__));
# 289 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float remainderf(float, float) throw(); extern "C" float __remainderf(float, float) throw();
# 293 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float scalbnf(float, int) throw(); extern "C" float __scalbnf(float, int) throw();
# 297 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) int ilogbf(float) throw(); extern "C" int __ilogbf(float) throw();
# 302 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float scalblnf(float, long) throw(); extern "C" float __scalblnf(float, long) throw();
# 306 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float nearbyintf(float) throw(); extern "C" float __nearbyintf(float) throw();
# 310 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float roundf(float) throw() __attribute__((__const__)); extern "C" float __roundf(float) throw() __attribute__((__const__));
# 314 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float truncf(float) throw() __attribute__((__const__)); extern "C" float __truncf(float) throw() __attribute__((__const__));
# 319 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float remquof(float, float, int *) throw(); extern "C" float __remquof(float, float, int *) throw();
# 326 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) long lrintf(float) throw(); extern "C" long __lrintf(float) throw();
# 327 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) long long llrintf(float) throw(); extern "C" long long __llrintf(float) throw();
# 331 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) long lroundf(float) throw(); extern "C" long __lroundf(float) throw();
# 332 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) long long llroundf(float) throw(); extern "C" long long __llroundf(float) throw();
# 336 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float fdimf(float, float) throw(); extern "C" float __fdimf(float, float) throw();
# 339 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float fmaxf(float, float) throw(); extern "C" float __fmaxf(float, float) throw();
# 342 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float fminf(float, float) throw(); extern "C" float __fminf(float, float) throw();
# 346 "/usr/include/bits/mathcalls.h" 3
extern "C" int __fpclassifyf(float) throw() __attribute__((__const__));
# 350 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) int __signbitf(float) throw() __attribute__((__const__));
# 355 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) float fmaf(float, float, float) throw(); extern "C" float __fmaf(float, float, float) throw();
# 364 "/usr/include/bits/mathcalls.h" 3
extern "C" float scalbf(float, float) throw(); extern "C" float __scalbf(float, float) throw();
# 55 "/usr/include/bits/mathcalls.h" 3
extern "C" long double acosl(long double) throw(); extern "C" long double __acosl(long double) throw();
# 57 "/usr/include/bits/mathcalls.h" 3
extern "C" long double asinl(long double) throw(); extern "C" long double __asinl(long double) throw();
# 59 "/usr/include/bits/mathcalls.h" 3
extern "C" long double atanl(long double) throw(); extern "C" long double __atanl(long double) throw();
# 61 "/usr/include/bits/mathcalls.h" 3
extern "C" long double atan2l(long double, long double) throw(); extern "C" long double __atan2l(long double, long double) throw();
# 64 "/usr/include/bits/mathcalls.h" 3
extern "C" long double cosl(long double) throw(); extern "C" long double __cosl(long double) throw();
# 66 "/usr/include/bits/mathcalls.h" 3
extern "C" long double sinl(long double) throw(); extern "C" long double __sinl(long double) throw();
# 68 "/usr/include/bits/mathcalls.h" 3
extern "C" long double tanl(long double) throw(); extern "C" long double __tanl(long double) throw();
# 73 "/usr/include/bits/mathcalls.h" 3
extern "C" long double coshl(long double) throw(); extern "C" long double __coshl(long double) throw();
# 75 "/usr/include/bits/mathcalls.h" 3
extern "C" long double sinhl(long double) throw(); extern "C" long double __sinhl(long double) throw();
# 77 "/usr/include/bits/mathcalls.h" 3
extern "C" long double tanhl(long double) throw(); extern "C" long double __tanhl(long double) throw();
# 82 "/usr/include/bits/mathcalls.h" 3
extern "C" void sincosl(long double, long double *, long double *) throw(); extern "C" void __sincosl(long double, long double *, long double *) throw();
# 89 "/usr/include/bits/mathcalls.h" 3
extern "C" long double acoshl(long double) throw(); extern "C" long double __acoshl(long double) throw();
# 91 "/usr/include/bits/mathcalls.h" 3
extern "C" long double asinhl(long double) throw(); extern "C" long double __asinhl(long double) throw();
# 93 "/usr/include/bits/mathcalls.h" 3
extern "C" long double atanhl(long double) throw(); extern "C" long double __atanhl(long double) throw();
# 101 "/usr/include/bits/mathcalls.h" 3
extern "C" long double expl(long double) throw(); extern "C" long double __expl(long double) throw();
# 104 "/usr/include/bits/mathcalls.h" 3
extern "C" long double frexpl(long double, int *) throw(); extern "C" long double __frexpl(long double, int *) throw();
# 107 "/usr/include/bits/mathcalls.h" 3
extern "C" long double ldexpl(long double, int) throw(); extern "C" long double __ldexpl(long double, int) throw();
# 110 "/usr/include/bits/mathcalls.h" 3
extern "C" long double logl(long double) throw(); extern "C" long double __logl(long double) throw();
# 113 "/usr/include/bits/mathcalls.h" 3
extern "C" long double log10l(long double) throw(); extern "C" long double __log10l(long double) throw();
# 116 "/usr/include/bits/mathcalls.h" 3
extern "C" long double modfl(long double, long double *) throw(); extern "C" long double __modfl(long double, long double *) throw();
# 121 "/usr/include/bits/mathcalls.h" 3
extern "C" long double exp10l(long double) throw(); extern "C" long double __exp10l(long double) throw();
# 123 "/usr/include/bits/mathcalls.h" 3
extern "C" long double pow10l(long double) throw(); extern "C" long double __pow10l(long double) throw();
# 129 "/usr/include/bits/mathcalls.h" 3
extern "C" long double expm1l(long double) throw(); extern "C" long double __expm1l(long double) throw();
# 132 "/usr/include/bits/mathcalls.h" 3
extern "C" long double log1pl(long double) throw(); extern "C" long double __log1pl(long double) throw();
# 135 "/usr/include/bits/mathcalls.h" 3
extern "C" long double logbl(long double) throw(); extern "C" long double __logbl(long double) throw();
# 142 "/usr/include/bits/mathcalls.h" 3
extern "C" long double exp2l(long double) throw(); extern "C" long double __exp2l(long double) throw();
# 145 "/usr/include/bits/mathcalls.h" 3
extern "C" long double log2l(long double) throw(); extern "C" long double __log2l(long double) throw();
# 154 "/usr/include/bits/mathcalls.h" 3
extern "C" long double powl(long double, long double) throw(); extern "C" long double __powl(long double, long double) throw();
# 157 "/usr/include/bits/mathcalls.h" 3
extern "C" long double sqrtl(long double) throw(); extern "C" long double __sqrtl(long double) throw();
# 163 "/usr/include/bits/mathcalls.h" 3
extern "C" long double hypotl(long double, long double) throw(); extern "C" long double __hypotl(long double, long double) throw();
# 170 "/usr/include/bits/mathcalls.h" 3
extern "C" long double cbrtl(long double) throw(); extern "C" long double __cbrtl(long double) throw();
# 179 "/usr/include/bits/mathcalls.h" 3
extern "C" long double ceill(long double) throw() __attribute__((__const__)); extern "C" long double __ceill(long double) throw() __attribute__((__const__));
# 182 "/usr/include/bits/mathcalls.h" 3
extern "C" long double fabsl(long double) throw() __attribute__((__const__)); extern "C" long double __fabsl(long double) throw() __attribute__((__const__));
# 185 "/usr/include/bits/mathcalls.h" 3
extern "C" long double floorl(long double) throw() __attribute__((__const__)); extern "C" long double __floorl(long double) throw() __attribute__((__const__));
# 188 "/usr/include/bits/mathcalls.h" 3
extern "C" long double fmodl(long double, long double) throw(); extern "C" long double __fmodl(long double, long double) throw();
# 193 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) int __isinfl(long double) throw() __attribute__((__const__));
# 196 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) int __finitel(long double) throw() __attribute__((__const__));
# 202 "/usr/include/bits/mathcalls.h" 3
extern "C" int isinfl(long double) throw() __attribute__((__const__));
# 205 "/usr/include/bits/mathcalls.h" 3
extern "C" int finitel(long double) throw() __attribute__((__const__));
# 208 "/usr/include/bits/mathcalls.h" 3
extern "C" long double dreml(long double, long double) throw(); extern "C" long double __dreml(long double, long double) throw();
# 212 "/usr/include/bits/mathcalls.h" 3
extern "C" long double significandl(long double) throw(); extern "C" long double __significandl(long double) throw();
# 218 "/usr/include/bits/mathcalls.h" 3
extern "C" long double copysignl(long double, long double) throw() __attribute__((__const__)); extern "C" long double __copysignl(long double, long double) throw() __attribute__((__const__));
# 225 "/usr/include/bits/mathcalls.h" 3
extern "C" long double nanl(const char *) throw() __attribute__((__const__)); extern "C" long double __nanl(const char *) throw() __attribute__((__const__));
# 231 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) int __isnanl(long double) throw() __attribute__((__const__));
# 235 "/usr/include/bits/mathcalls.h" 3
extern "C" int isnanl(long double) throw() __attribute__((__const__));
# 238 "/usr/include/bits/mathcalls.h" 3
extern "C" long double j0l(long double) throw(); extern "C" long double __j0l(long double) throw();
# 239 "/usr/include/bits/mathcalls.h" 3
extern "C" long double j1l(long double) throw(); extern "C" long double __j1l(long double) throw();
# 240 "/usr/include/bits/mathcalls.h" 3
extern "C" long double jnl(int, long double) throw(); extern "C" long double __jnl(int, long double) throw();
# 241 "/usr/include/bits/mathcalls.h" 3
extern "C" long double y0l(long double) throw(); extern "C" long double __y0l(long double) throw();
# 242 "/usr/include/bits/mathcalls.h" 3
extern "C" long double y1l(long double) throw(); extern "C" long double __y1l(long double) throw();
# 243 "/usr/include/bits/mathcalls.h" 3
extern "C" long double ynl(int, long double) throw(); extern "C" long double __ynl(int, long double) throw();
# 250 "/usr/include/bits/mathcalls.h" 3
extern "C" long double erfl(long double) throw(); extern "C" long double __erfl(long double) throw();
# 251 "/usr/include/bits/mathcalls.h" 3
extern "C" long double erfcl(long double) throw(); extern "C" long double __erfcl(long double) throw();
# 252 "/usr/include/bits/mathcalls.h" 3
extern "C" long double lgammal(long double) throw(); extern "C" long double __lgammal(long double) throw();
# 259 "/usr/include/bits/mathcalls.h" 3
extern "C" long double tgammal(long double) throw(); extern "C" long double __tgammal(long double) throw();
# 265 "/usr/include/bits/mathcalls.h" 3
extern "C" long double gammal(long double) throw(); extern "C" long double __gammal(long double) throw();
# 272 "/usr/include/bits/mathcalls.h" 3
extern "C" long double lgammal_r(long double, int *) throw(); extern "C" long double __lgammal_r(long double, int *) throw();
# 280 "/usr/include/bits/mathcalls.h" 3
extern "C" long double rintl(long double) throw(); extern "C" long double __rintl(long double) throw();
# 283 "/usr/include/bits/mathcalls.h" 3
extern "C" long double nextafterl(long double, long double) throw() __attribute__((__const__)); extern "C" long double __nextafterl(long double, long double) throw() __attribute__((__const__));
# 285 "/usr/include/bits/mathcalls.h" 3
extern "C" long double nexttowardl(long double, long double) throw() __attribute__((__const__)); extern "C" long double __nexttowardl(long double, long double) throw() __attribute__((__const__));
# 289 "/usr/include/bits/mathcalls.h" 3
extern "C" long double remainderl(long double, long double) throw(); extern "C" long double __remainderl(long double, long double) throw();
# 293 "/usr/include/bits/mathcalls.h" 3
extern "C" long double scalbnl(long double, int) throw(); extern "C" long double __scalbnl(long double, int) throw();
# 297 "/usr/include/bits/mathcalls.h" 3
extern "C" int ilogbl(long double) throw(); extern "C" int __ilogbl(long double) throw();
# 302 "/usr/include/bits/mathcalls.h" 3
extern "C" long double scalblnl(long double, long) throw(); extern "C" long double __scalblnl(long double, long) throw();
# 306 "/usr/include/bits/mathcalls.h" 3
extern "C" long double nearbyintl(long double) throw(); extern "C" long double __nearbyintl(long double) throw();
# 310 "/usr/include/bits/mathcalls.h" 3
extern "C" long double roundl(long double) throw() __attribute__((__const__)); extern "C" long double __roundl(long double) throw() __attribute__((__const__));
# 314 "/usr/include/bits/mathcalls.h" 3
extern "C" long double truncl(long double) throw() __attribute__((__const__)); extern "C" long double __truncl(long double) throw() __attribute__((__const__));
# 319 "/usr/include/bits/mathcalls.h" 3
extern "C" long double remquol(long double, long double, int *) throw(); extern "C" long double __remquol(long double, long double, int *) throw();
# 326 "/usr/include/bits/mathcalls.h" 3
extern "C" long lrintl(long double) throw(); extern "C" long __lrintl(long double) throw();
# 327 "/usr/include/bits/mathcalls.h" 3
extern "C" long long llrintl(long double) throw(); extern "C" long long __llrintl(long double) throw();
# 331 "/usr/include/bits/mathcalls.h" 3
extern "C" long lroundl(long double) throw(); extern "C" long __lroundl(long double) throw();
# 332 "/usr/include/bits/mathcalls.h" 3
extern "C" long long llroundl(long double) throw(); extern "C" long long __llroundl(long double) throw();
# 336 "/usr/include/bits/mathcalls.h" 3
extern "C" long double fdiml(long double, long double) throw(); extern "C" long double __fdiml(long double, long double) throw();
# 339 "/usr/include/bits/mathcalls.h" 3
extern "C" long double fmaxl(long double, long double) throw(); extern "C" long double __fmaxl(long double, long double) throw();
# 342 "/usr/include/bits/mathcalls.h" 3
extern "C" long double fminl(long double, long double) throw(); extern "C" long double __fminl(long double, long double) throw();
# 346 "/usr/include/bits/mathcalls.h" 3
extern "C" int __fpclassifyl(long double) throw() __attribute__((__const__));
# 350 "/usr/include/bits/mathcalls.h" 3
extern "C" __attribute__((__weak__)) int __signbitl(long double) throw() __attribute__((__const__));
# 355 "/usr/include/bits/mathcalls.h" 3
extern "C" long double fmal(long double, long double, long double) throw(); extern "C" long double __fmal(long double, long double, long double) throw();
# 364 "/usr/include/bits/mathcalls.h" 3
extern "C" long double scalbl(long double, long double) throw(); extern "C" long double __scalbl(long double, long double) throw();
# 161 "/usr/include/math.h" 3
extern "C" { extern int signgam; }
# 203 "/usr/include/math.h" 3
enum {
# 204 "/usr/include/math.h" 3
FP_NAN,
# 206 "/usr/include/math.h" 3
FP_INFINITE,
# 208 "/usr/include/math.h" 3
FP_ZERO,
# 210 "/usr/include/math.h" 3
FP_SUBNORMAL,
# 212 "/usr/include/math.h" 3
FP_NORMAL
# 214 "/usr/include/math.h" 3
};
# 302 "/usr/include/math.h" 3
extern "C" { typedef
# 296 "/usr/include/math.h" 3
enum {
# 297 "/usr/include/math.h" 3
_IEEE_ = (-1),
# 298 "/usr/include/math.h" 3
_SVID_,
# 299 "/usr/include/math.h" 3
_XOPEN_,
# 300 "/usr/include/math.h" 3
_POSIX_,
# 301 "/usr/include/math.h" 3
_ISOC_
# 302 "/usr/include/math.h" 3
} _LIB_VERSION_TYPE; }
# 307 "/usr/include/math.h" 3
extern "C" { extern _LIB_VERSION_TYPE _LIB_VERSION; }
# 318 "/usr/include/math.h" 3
extern "C" { struct __exception {
# 323 "/usr/include/math.h" 3
int type;
# 324 "/usr/include/math.h" 3
char *name;
# 325 "/usr/include/math.h" 3
double arg1;
# 326 "/usr/include/math.h" 3
double arg2;
# 327 "/usr/include/math.h" 3
double retval;
# 328 "/usr/include/math.h" 3
}; }
# 331 "/usr/include/math.h" 3
extern "C" int matherr(__exception *) throw();
# 67 "/usr/include/bits/waitstatus.h" 3
extern "C" { union wait {
# 69 "/usr/include/bits/waitstatus.h" 3
int w_status;
# 71 "/usr/include/bits/waitstatus.h" 3
struct {
# 73 "/usr/include/bits/waitstatus.h" 3
unsigned __w_termsig:7;
# 74 "/usr/include/bits/waitstatus.h" 3
unsigned __w_coredump:1;
# 75 "/usr/include/bits/waitstatus.h" 3
unsigned __w_retcode:8;
# 76 "/usr/include/bits/waitstatus.h" 3
unsigned:16;
# 84 "/usr/include/bits/waitstatus.h" 3
} __wait_terminated;
# 86 "/usr/include/bits/waitstatus.h" 3
struct {
# 88 "/usr/include/bits/waitstatus.h" 3
unsigned __w_stopval:8;
# 89 "/usr/include/bits/waitstatus.h" 3
unsigned __w_stopsig:8;
# 90 "/usr/include/bits/waitstatus.h" 3
unsigned:16;
# 97 "/usr/include/bits/waitstatus.h" 3
} __wait_stopped;
# 98 "/usr/include/bits/waitstatus.h" 3
}; }
# 102 "/usr/include/stdlib.h" 3
extern "C" { typedef
# 99 "/usr/include/stdlib.h" 3
struct {
# 100 "/usr/include/stdlib.h" 3
int quot;
# 101 "/usr/include/stdlib.h" 3
int rem;
# 102 "/usr/include/stdlib.h" 3
} div_t; }
# 110 "/usr/include/stdlib.h" 3
extern "C" { typedef
# 107 "/usr/include/stdlib.h" 3
struct {
# 108 "/usr/include/stdlib.h" 3
long quot;
# 109 "/usr/include/stdlib.h" 3
long rem;
# 110 "/usr/include/stdlib.h" 3
} ldiv_t; }
# 122 "/usr/include/stdlib.h" 3
extern "C" { typedef
# 119 "/usr/include/stdlib.h" 3
struct {
# 120 "/usr/include/stdlib.h" 3
long long quot;
# 121 "/usr/include/stdlib.h" 3
long long rem;
# 122 "/usr/include/stdlib.h" 3
} lldiv_t; }
# 140 "/usr/include/stdlib.h" 3
extern "C" size_t __ctype_get_mb_cur_max() throw();
# 145 "/usr/include/stdlib.h" 3
extern "C" double atof(const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1)));
# 148 "/usr/include/stdlib.h" 3
extern "C" int atoi(const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1)));
# 151 "/usr/include/stdlib.h" 3
extern "C" long atol(const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1)));
# 158 "/usr/include/stdlib.h" 3
extern "C" long long atoll(const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1)));
# 165 "/usr/include/stdlib.h" 3
extern "C" double strtod(const char *__restrict__, char **__restrict__) throw() __attribute__((nonnull(1)));
# 173 "/usr/include/stdlib.h" 3
extern "C" float strtof(const char *__restrict__, char **__restrict__) throw() __attribute__((nonnull(1)));
# 176 "/usr/include/stdlib.h" 3
extern "C" long double strtold(const char *__restrict__, char **__restrict__) throw() __attribute__((nonnull(1)));
# 184 "/usr/include/stdlib.h" 3
extern "C" long strtol(const char *__restrict__, char **__restrict__, int) throw() __attribute__((nonnull(1)));
# 188 "/usr/include/stdlib.h" 3
extern "C" unsigned long strtoul(const char *__restrict__, char **__restrict__, int) throw() __attribute__((nonnull(1)));
# 196 "/usr/include/stdlib.h" 3
extern "C" long long strtoq(const char *__restrict__, char **__restrict__, int) throw() __attribute__((nonnull(1)));
# 201 "/usr/include/stdlib.h" 3
extern "C" unsigned long long strtouq(const char *__restrict__, char **__restrict__, int) throw() __attribute__((nonnull(1)));
# 210 "/usr/include/stdlib.h" 3
extern "C" long long strtoll(const char *__restrict__, char **__restrict__, int) throw() __attribute__((nonnull(1)));
# 215 "/usr/include/stdlib.h" 3
extern "C" unsigned long long strtoull(const char *__restrict__, char **__restrict__, int) throw() __attribute__((nonnull(1)));
# 240 "/usr/include/stdlib.h" 3
extern "C" long strtol_l(const char *__restrict__, char **__restrict__, int, __locale_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(4)));
# 244 "/usr/include/stdlib.h" 3
extern "C" unsigned long strtoul_l(const char *__restrict__, char **__restrict__, int, __locale_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(4)));
# 250 "/usr/include/stdlib.h" 3
extern "C" long long strtoll_l(const char *__restrict__, char **__restrict__, int, __locale_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(4)));
# 256 "/usr/include/stdlib.h" 3
extern "C" unsigned long long strtoull_l(const char *__restrict__, char **__restrict__, int, __locale_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(4)));
# 261 "/usr/include/stdlib.h" 3
extern "C" double strtod_l(const char *__restrict__, char **__restrict__, __locale_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3)));
# 265 "/usr/include/stdlib.h" 3
extern "C" float strtof_l(const char *__restrict__, char **__restrict__, __locale_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3)));
# 269 "/usr/include/stdlib.h" 3
extern "C" long double strtold_l(const char *__restrict__, char **__restrict__, __locale_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3)));
# 311 "/usr/include/stdlib.h" 3
extern "C" char *l64a(long) throw();
# 314 "/usr/include/stdlib.h" 3
extern "C" long a64l(const char *) throw() __attribute__((__pure__)) __attribute__((nonnull(1)));
# 35 "/usr/include/sys/types.h" 3
extern "C" { typedef __u_char u_char; }
# 36 "/usr/include/sys/types.h" 3
extern "C" { typedef __u_short u_short; }
# 37 "/usr/include/sys/types.h" 3
extern "C" { typedef __u_int u_int; }
# 38 "/usr/include/sys/types.h" 3
extern "C" { typedef __u_long u_long; }
# 39 "/usr/include/sys/types.h" 3
extern "C" { typedef __quad_t quad_t; }
# 40 "/usr/include/sys/types.h" 3
extern "C" { typedef __u_quad_t u_quad_t; }
# 41 "/usr/include/sys/types.h" 3
extern "C" { typedef __fsid_t fsid_t; }
# 46 "/usr/include/sys/types.h" 3
extern "C" { typedef __loff_t loff_t; }
# 50 "/usr/include/sys/types.h" 3
extern "C" { typedef __ino_t ino_t; }
# 57 "/usr/include/sys/types.h" 3
extern "C" { typedef __ino64_t ino64_t; }
# 62 "/usr/include/sys/types.h" 3
extern "C" { typedef __dev_t dev_t; }
# 67 "/usr/include/sys/types.h" 3
extern "C" { typedef __gid_t gid_t; }
# 72 "/usr/include/sys/types.h" 3
extern "C" { typedef __mode_t mode_t; }
# 77 "/usr/include/sys/types.h" 3
extern "C" { typedef __nlink_t nlink_t; }
# 82 "/usr/include/sys/types.h" 3
extern "C" { typedef __uid_t uid_t; }
# 88 "/usr/include/sys/types.h" 3
extern "C" { typedef __off_t off_t; }
# 95 "/usr/include/sys/types.h" 3
extern "C" { typedef __off64_t off64_t; }
# 105 "/usr/include/sys/types.h" 3
extern "C" { typedef __id_t id_t; }
# 110 "/usr/include/sys/types.h" 3
extern "C" { typedef __ssize_t ssize_t; }
# 116 "/usr/include/sys/types.h" 3
extern "C" { typedef __daddr_t daddr_t; }
# 117 "/usr/include/sys/types.h" 3
extern "C" { typedef __caddr_t caddr_t; }
# 123 "/usr/include/sys/types.h" 3
extern "C" { typedef __key_t key_t; }
# 137 "/usr/include/sys/types.h" 3
extern "C" { typedef __useconds_t useconds_t; }
# 141 "/usr/include/sys/types.h" 3
extern "C" { typedef __suseconds_t suseconds_t; }
# 151 "/usr/include/sys/types.h" 3
extern "C" { typedef unsigned long ulong; }
# 152 "/usr/include/sys/types.h" 3
extern "C" { typedef unsigned short ushort; }
# 153 "/usr/include/sys/types.h" 3
extern "C" { typedef unsigned uint; }
# 195 "/usr/include/sys/types.h" 3
extern "C" { typedef signed char int8_t; }
# 196 "/usr/include/sys/types.h" 3
extern "C" { typedef short int16_t; }
# 197 "/usr/include/sys/types.h" 3
extern "C" { typedef int int32_t; }
# 198 "/usr/include/sys/types.h" 3
extern "C" { typedef long long int64_t; }
# 201 "/usr/include/sys/types.h" 3
extern "C" { typedef unsigned char u_int8_t; }
# 202 "/usr/include/sys/types.h" 3
extern "C" { typedef unsigned short u_int16_t; }
# 203 "/usr/include/sys/types.h" 3
extern "C" { typedef unsigned u_int32_t; }
# 204 "/usr/include/sys/types.h" 3
extern "C" { typedef unsigned long long u_int64_t; }
# 206 "/usr/include/sys/types.h" 3
extern "C" { typedef int register_t; }
# 24 "/usr/include/bits/sigset.h" 3
extern "C" { typedef int __sig_atomic_t; }
# 32 "/usr/include/bits/sigset.h" 3
extern "C" { typedef
# 30 "/usr/include/bits/sigset.h" 3
struct {
# 31 "/usr/include/bits/sigset.h" 3
unsigned long __val[((1024) / ((8) * sizeof(unsigned long)))];
# 32 "/usr/include/bits/sigset.h" 3
} __sigset_t; }
# 38 "/usr/include/sys/select.h" 3
extern "C" { typedef __sigset_t sigset_t; }
# 69 "/usr/include/bits/time.h" 3
extern "C" { struct timeval {
# 71 "/usr/include/bits/time.h" 3
__time_t tv_sec;
# 72 "/usr/include/bits/time.h" 3
__suseconds_t tv_usec;
# 73 "/usr/include/bits/time.h" 3
}; }
# 55 "/usr/include/sys/select.h" 3
extern "C" { typedef long __fd_mask; }
# 78 "/usr/include/sys/select.h" 3
extern "C" { typedef
# 68 "/usr/include/sys/select.h" 3
struct {
# 72 "/usr/include/sys/select.h" 3
__fd_mask fds_bits[(1024 / (8 * ((int)sizeof(__fd_mask))))];
# 78 "/usr/include/sys/select.h" 3
} fd_set; }
# 85 "/usr/include/sys/select.h" 3
extern "C" { typedef __fd_mask fd_mask; }
# 109 "/usr/include/sys/select.h" 3
extern "C" int select(int, fd_set *__restrict__, fd_set *__restrict__, fd_set *__restrict__, timeval *__restrict__);
# 121 "/usr/include/sys/select.h" 3
extern "C" int pselect(int, fd_set *__restrict__, fd_set *__restrict__, fd_set *__restrict__, const timespec *__restrict__, const __sigset_t *__restrict__);
# 31 "/usr/include/sys/sysmacros.h" 3
extern "C" unsigned gnu_dev_major(unsigned long long) throw();
# 34 "/usr/include/sys/sysmacros.h" 3
extern "C" unsigned gnu_dev_minor(unsigned long long) throw();
# 37 "/usr/include/sys/sysmacros.h" 3
extern "C" unsigned long long gnu_dev_makedev(unsigned, unsigned) throw();
# 228 "/usr/include/sys/types.h" 3
extern "C" { typedef __blksize_t blksize_t; }
# 235 "/usr/include/sys/types.h" 3
extern "C" { typedef __blkcnt_t blkcnt_t; }
# 239 "/usr/include/sys/types.h" 3
extern "C" { typedef __fsblkcnt_t fsblkcnt_t; }
# 243 "/usr/include/sys/types.h" 3
extern "C" { typedef __fsfilcnt_t fsfilcnt_t; }
# 262 "/usr/include/sys/types.h" 3
extern "C" { typedef __blkcnt64_t blkcnt64_t; }
# 263 "/usr/include/sys/types.h" 3
extern "C" { typedef __fsblkcnt64_t fsblkcnt64_t; }
# 264 "/usr/include/sys/types.h" 3
extern "C" { typedef __fsfilcnt64_t fsfilcnt64_t; }
# 50 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef unsigned long pthread_t; }
# 57 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 54 "/usr/include/bits/pthreadtypes.h" 3
union {
# 55 "/usr/include/bits/pthreadtypes.h" 3
char __size[36];
# 56 "/usr/include/bits/pthreadtypes.h" 3
long __align;
# 57 "/usr/include/bits/pthreadtypes.h" 3
} pthread_attr_t; }
# 70 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 67 "/usr/include/bits/pthreadtypes.h" 3
struct __pthread_internal_slist {
# 69 "/usr/include/bits/pthreadtypes.h" 3
__pthread_internal_slist *__next;
# 70 "/usr/include/bits/pthreadtypes.h" 3
} __pthread_slist_t; }
# 104 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 77 "/usr/include/bits/pthreadtypes.h" 3
union {
# 78 "/usr/include/bits/pthreadtypes.h" 3
struct __pthread_mutex_s {
# 80 "/usr/include/bits/pthreadtypes.h" 3
int __lock;
# 81 "/usr/include/bits/pthreadtypes.h" 3
unsigned __count;
# 82 "/usr/include/bits/pthreadtypes.h" 3
int __owner;
# 88 "/usr/include/bits/pthreadtypes.h" 3
int __kind;
# 94 "/usr/include/bits/pthreadtypes.h" 3
unsigned __nusers;
# 96 "/usr/include/bits/pthreadtypes.h" 3
union {
# 97 "/usr/include/bits/pthreadtypes.h" 3
int __spins;
# 98 "/usr/include/bits/pthreadtypes.h" 3
__pthread_slist_t __list;
# 99 "/usr/include/bits/pthreadtypes.h" 3
};
# 101 "/usr/include/bits/pthreadtypes.h" 3
} __data;
# 102 "/usr/include/bits/pthreadtypes.h" 3
char __size[24];
# 103 "/usr/include/bits/pthreadtypes.h" 3
long __align;
# 104 "/usr/include/bits/pthreadtypes.h" 3
} pthread_mutex_t; }
# 110 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 107 "/usr/include/bits/pthreadtypes.h" 3
union {
# 108 "/usr/include/bits/pthreadtypes.h" 3
char __size[4];
# 109 "/usr/include/bits/pthreadtypes.h" 3
int __align;
# 110 "/usr/include/bits/pthreadtypes.h" 3
} pthread_mutexattr_t; }
# 130 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 116 "/usr/include/bits/pthreadtypes.h" 3
union {
# 118 "/usr/include/bits/pthreadtypes.h" 3
struct {
# 119 "/usr/include/bits/pthreadtypes.h" 3
int __lock;
# 120 "/usr/include/bits/pthreadtypes.h" 3
unsigned __futex;
# 121 "/usr/include/bits/pthreadtypes.h" 3
__extension__ unsigned long long __total_seq;
# 122 "/usr/include/bits/pthreadtypes.h" 3
__extension__ unsigned long long __wakeup_seq;
# 123 "/usr/include/bits/pthreadtypes.h" 3
__extension__ unsigned long long __woken_seq;
# 124 "/usr/include/bits/pthreadtypes.h" 3
void *__mutex;
# 125 "/usr/include/bits/pthreadtypes.h" 3
unsigned __nwaiters;
# 126 "/usr/include/bits/pthreadtypes.h" 3
unsigned __broadcast_seq;
# 127 "/usr/include/bits/pthreadtypes.h" 3
} __data;
# 128 "/usr/include/bits/pthreadtypes.h" 3
char __size[48];
# 129 "/usr/include/bits/pthreadtypes.h" 3
__extension__ long long __align;
# 130 "/usr/include/bits/pthreadtypes.h" 3
} pthread_cond_t; }
# 136 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 133 "/usr/include/bits/pthreadtypes.h" 3
union {
# 134 "/usr/include/bits/pthreadtypes.h" 3
char __size[4];
# 135 "/usr/include/bits/pthreadtypes.h" 3
int __align;
# 136 "/usr/include/bits/pthreadtypes.h" 3
} pthread_condattr_t; }
# 140 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef unsigned pthread_key_t; }
# 144 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef int pthread_once_t; }
# 189 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 151 "/usr/include/bits/pthreadtypes.h" 3
union {
# 171 "/usr/include/bits/pthreadtypes.h" 3
struct {
# 172 "/usr/include/bits/pthreadtypes.h" 3
int __lock;
# 173 "/usr/include/bits/pthreadtypes.h" 3
unsigned __nr_readers;
# 174 "/usr/include/bits/pthreadtypes.h" 3
unsigned __readers_wakeup;
# 175 "/usr/include/bits/pthreadtypes.h" 3
unsigned __writer_wakeup;
# 176 "/usr/include/bits/pthreadtypes.h" 3
unsigned __nr_readers_queued;
# 177 "/usr/include/bits/pthreadtypes.h" 3
unsigned __nr_writers_queued;
# 180 "/usr/include/bits/pthreadtypes.h" 3
unsigned char __flags;
# 181 "/usr/include/bits/pthreadtypes.h" 3
unsigned char __shared;
# 182 "/usr/include/bits/pthreadtypes.h" 3
unsigned char __pad1;
# 183 "/usr/include/bits/pthreadtypes.h" 3
unsigned char __pad2;
# 184 "/usr/include/bits/pthreadtypes.h" 3
int __writer;
# 185 "/usr/include/bits/pthreadtypes.h" 3
} __data;
# 187 "/usr/include/bits/pthreadtypes.h" 3
char __size[32];
# 188 "/usr/include/bits/pthreadtypes.h" 3
long __align;
# 189 "/usr/include/bits/pthreadtypes.h" 3
} pthread_rwlock_t; }
# 195 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 192 "/usr/include/bits/pthreadtypes.h" 3
union {
# 193 "/usr/include/bits/pthreadtypes.h" 3
char __size[8];
# 194 "/usr/include/bits/pthreadtypes.h" 3
long __align;
# 195 "/usr/include/bits/pthreadtypes.h" 3
} pthread_rwlockattr_t; }
# 201 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef volatile int pthread_spinlock_t; }
# 210 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 207 "/usr/include/bits/pthreadtypes.h" 3
union {
# 208 "/usr/include/bits/pthreadtypes.h" 3
char __size[20];
# 209 "/usr/include/bits/pthreadtypes.h" 3
long __align;
# 210 "/usr/include/bits/pthreadtypes.h" 3
} pthread_barrier_t; }
# 216 "/usr/include/bits/pthreadtypes.h" 3
extern "C" { typedef
# 213 "/usr/include/bits/pthreadtypes.h" 3
union {
# 214 "/usr/include/bits/pthreadtypes.h" 3
char __size[4];
# 215 "/usr/include/bits/pthreadtypes.h" 3
int __align;
# 216 "/usr/include/bits/pthreadtypes.h" 3
} pthread_barrierattr_t; }
# 327 "/usr/include/stdlib.h" 3
extern "C" long random() throw();
# 330 "/usr/include/stdlib.h" 3
extern "C" void srandom(unsigned) throw();
# 336 "/usr/include/stdlib.h" 3
extern "C" char *initstate(unsigned, char *, size_t) throw() __attribute__((nonnull(2)));
# 341 "/usr/include/stdlib.h" 3
extern "C" char *setstate(char *) throw() __attribute__((nonnull(1)));
# 349 "/usr/include/stdlib.h" 3
extern "C" { struct random_data {
# 351 "/usr/include/stdlib.h" 3
int32_t *fptr;
# 352 "/usr/include/stdlib.h" 3
int32_t *rptr;
# 353 "/usr/include/stdlib.h" 3
int32_t *state;
# 354 "/usr/include/stdlib.h" 3
int rand_type;
# 355 "/usr/include/stdlib.h" 3
int rand_deg;
# 356 "/usr/include/stdlib.h" 3
int rand_sep;
# 357 "/usr/include/stdlib.h" 3
int32_t *end_ptr;
# 358 "/usr/include/stdlib.h" 3
}; }
# 360 "/usr/include/stdlib.h" 3
extern "C" int random_r(random_data *__restrict__, int32_t *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 363 "/usr/include/stdlib.h" 3
extern "C" int srandom_r(unsigned, random_data *) throw() __attribute__((nonnull(2)));
# 366 "/usr/include/stdlib.h" 3
extern "C" int initstate_r(unsigned, char *__restrict__, size_t, random_data *__restrict__) throw() __attribute__((nonnull(2))) __attribute__((nonnull(4)));
# 371 "/usr/include/stdlib.h" 3
extern "C" int setstate_r(char *__restrict__, random_data *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 380 "/usr/include/stdlib.h" 3
extern "C" int rand() throw();
# 382 "/usr/include/stdlib.h" 3
extern "C" void srand(unsigned) throw();
# 387 "/usr/include/stdlib.h" 3
extern "C" int rand_r(unsigned *) throw();
# 395 "/usr/include/stdlib.h" 3
extern "C" double drand48() throw();
# 396 "/usr/include/stdlib.h" 3
extern "C" double erand48(unsigned short [3]) throw() __attribute__((nonnull(1)));
# 399 "/usr/include/stdlib.h" 3
extern "C" long lrand48() throw();
# 400 "/usr/include/stdlib.h" 3
extern "C" long nrand48(unsigned short [3]) throw() __attribute__((nonnull(1)));
# 404 "/usr/include/stdlib.h" 3
extern "C" long mrand48() throw();
# 405 "/usr/include/stdlib.h" 3
extern "C" long jrand48(unsigned short [3]) throw() __attribute__((nonnull(1)));
# 409 "/usr/include/stdlib.h" 3
extern "C" void srand48(long) throw();
# 410 "/usr/include/stdlib.h" 3
extern "C" unsigned short *seed48(unsigned short [3]) throw() __attribute__((nonnull(1)));
# 412 "/usr/include/stdlib.h" 3
extern "C" void lcong48(unsigned short [7]) throw() __attribute__((nonnull(1)));
# 418 "/usr/include/stdlib.h" 3
extern "C" { struct drand48_data {
# 420 "/usr/include/stdlib.h" 3
unsigned short __x[3];
# 421 "/usr/include/stdlib.h" 3
unsigned short __old_x[3];
# 422 "/usr/include/stdlib.h" 3
unsigned short __c;
# 423 "/usr/include/stdlib.h" 3
unsigned short __init;
# 424 "/usr/include/stdlib.h" 3
unsigned long long __a;
# 425 "/usr/include/stdlib.h" 3
}; }
# 428 "/usr/include/stdlib.h" 3
extern "C" int drand48_r(drand48_data *__restrict__, double *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 430 "/usr/include/stdlib.h" 3
extern "C" int erand48_r(unsigned short [3], drand48_data *__restrict__, double *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 435 "/usr/include/stdlib.h" 3
extern "C" int lrand48_r(drand48_data *__restrict__, long *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 438 "/usr/include/stdlib.h" 3
extern "C" int nrand48_r(unsigned short [3], drand48_data *__restrict__, long *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 444 "/usr/include/stdlib.h" 3
extern "C" int mrand48_r(drand48_data *__restrict__, long *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 447 "/usr/include/stdlib.h" 3
extern "C" int jrand48_r(unsigned short [3], drand48_data *__restrict__, long *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 453 "/usr/include/stdlib.h" 3
extern "C" int srand48_r(long, drand48_data *) throw() __attribute__((nonnull(2)));
# 456 "/usr/include/stdlib.h" 3
extern "C" int seed48_r(unsigned short [3], drand48_data *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 459 "/usr/include/stdlib.h" 3
extern "C" int lcong48_r(unsigned short [7], drand48_data *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2)));
# 471 "/usr/include/stdlib.h" 3
extern "C" void *malloc(size_t) throw() __attribute__((__malloc__));
# 473 "/usr/include/stdlib.h" 3
extern "C" void *calloc(size_t, size_t) throw() __attribute__((__malloc__));
# 485 "/usr/include/stdlib.h" 3
extern "C" void *realloc(void *, size_t) throw() __attribute__((__warn_unused_result__));
# 488 "/usr/include/stdlib.h" 3
extern "C" void free(void *) throw();
# 493 "/usr/include/stdlib.h" 3
extern "C" void cfree(void *) throw();
# 33 "/usr/include/alloca.h" 3
extern "C" void *alloca(size_t) throw();
# 502 "/usr/include/stdlib.h" 3
extern "C" void *valloc(size_t) throw() __attribute__((__malloc__));
# 507 "/usr/include/stdlib.h" 3
extern "C" int posix_memalign(void **, size_t, size_t) throw() __attribute__((nonnull(1)));
# 513 "/usr/include/stdlib.h" 3
extern "C" void abort() throw() __attribute__((__noreturn__));
# 517 "/usr/include/stdlib.h" 3
extern "C" int atexit(void (*)(void)) throw() __attribute__((nonnull(1)));
# 524 "/usr/include/stdlib.h" 3
int at_quick_exit(void (*)(void)) throw() __asm__("at_quick_exit") __attribute__((nonnull(1)));
# 535 "/usr/include/stdlib.h" 3
extern "C" int on_exit(void (*)(int, void *), void *) throw() __attribute__((nonnull(1)));
# 543 "/usr/include/stdlib.h" 3
extern "C" void exit(int) throw() __attribute__((__noreturn__));
# 551 "/usr/include/stdlib.h" 3
extern "C" void quick_exit(int) throw() __attribute__((__noreturn__));
# 559 "/usr/include/stdlib.h" 3
extern "C" void _Exit(int) throw() __attribute__((__noreturn__));
# 566 "/usr/include/stdlib.h" 3
extern "C" char *getenv(const char *) throw() __attribute__((nonnull(1)));
# 571 "/usr/include/stdlib.h" 3
extern "C" char *__secure_getenv(const char *) throw() __attribute__((nonnull(1)));
# 578 "/usr/include/stdlib.h" 3
extern "C" int putenv(char *) throw() __attribute__((nonnull(1)));
# 584 "/usr/include/stdlib.h" 3
extern "C" int setenv(const char *, const char *, int) throw() __attribute__((nonnull(2)));
# 588 "/usr/include/stdlib.h" 3
extern "C" int unsetenv(const char *) throw();
# 595 "/usr/include/stdlib.h" 3
extern "C" int clearenv() throw();
# 604 "/usr/include/stdlib.h" 3
extern "C" char *mktemp(char *) throw() __attribute__((nonnull(1)));
# 615 "/usr/include/stdlib.h" 3
extern "C" int mkstemp(char *) __attribute__((nonnull(1)));
# 625 "/usr/include/stdlib.h" 3
extern "C" int mkstemp64(char *) __attribute__((nonnull(1)));
# 637 "/usr/include/stdlib.h" 3
extern "C" int mkstemps(char *, int) __attribute__((nonnull(1)));
# 647 "/usr/include/stdlib.h" 3
extern "C" int mkstemps64(char *, int) __attribute__((nonnull(1)));
# 658 "/usr/include/stdlib.h" 3
extern "C" char *mkdtemp(char *) throw() __attribute__((nonnull(1)));
# 669 "/usr/include/stdlib.h" 3
extern "C" int mkostemp(char *, int) __attribute__((nonnull(1)));
# 679 "/usr/include/stdlib.h" 3
extern "C" int mkostemp64(char *, int) __attribute__((nonnull(1)));
# 689 "/usr/include/stdlib.h" 3
extern "C" int mkostemps(char *, int, int) __attribute__((nonnull(1)));
# 701 "/usr/include/stdlib.h" 3
extern "C" int mkostemps64(char *, int, int) __attribute__((nonnull(1)));
# 712 "/usr/include/stdlib.h" 3
extern "C" int system(const char *);
# 719 "/usr/include/stdlib.h" 3
extern "C" char *canonicalize_file_name(const char *) throw() __attribute__((nonnull(1)));
# 729 "/usr/include/stdlib.h" 3
extern "C" char *realpath(const char *__restrict__, char *__restrict__) throw();
# 737 "/usr/include/stdlib.h" 3
extern "C" { typedef int (*__compar_fn_t)(const void *, const void *); }
# 740 "/usr/include/stdlib.h" 3
extern "C" { typedef __compar_fn_t comparison_fn_t; }
# 744 "/usr/include/stdlib.h" 3
extern "C" { typedef int (*__compar_d_fn_t)(const void *, const void *, void *); }
# 750 "/usr/include/stdlib.h" 3
extern "C" void *bsearch(const void *, const void *, size_t, size_t, __compar_fn_t) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(5)));
# 756 "/usr/include/stdlib.h" 3
extern "C" void qsort(void *, size_t, size_t, __compar_fn_t) __attribute__((nonnull(1))) __attribute__((nonnull(4)));
# 759 "/usr/include/stdlib.h" 3
extern "C" void qsort_r(void *, size_t, size_t, __compar_d_fn_t, void *) __attribute__((nonnull(1))) __attribute__((nonnull(4)));
# 766 "/usr/include/stdlib.h" 3
extern "C" __attribute__((__weak__)) int abs(int) throw() __attribute__((__const__));
# 767 "/usr/include/stdlib.h" 3
extern "C" __attribute__((__weak__)) long labs(long) throw() __attribute__((__const__));
# 771 "/usr/include/stdlib.h" 3
extern "C" __attribute__((__weak__)) long long llabs(long long) throw() __attribute__((__const__));
# 780 "/usr/include/stdlib.h" 3
extern "C" div_t div(int, int) throw() __attribute__((__const__));
# 782 "/usr/include/stdlib.h" 3
extern "C" ldiv_t ldiv(long, long) throw() __attribute__((__const__));
# 788 "/usr/include/stdlib.h" 3
extern "C" lldiv_t lldiv(long long, long long) throw() __attribute__((__const__));
# 802 "/usr/include/stdlib.h" 3
extern "C" char *ecvt(double, int, int *__restrict__, int *__restrict__) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4)));
# 808 "/usr/include/stdlib.h" 3
extern "C" char *fcvt(double, int, int *__restrict__, int *__restrict__) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4)));
# 814 "/usr/include/stdlib.h" 3
extern "C" char *gcvt(double, int, char *) throw() __attribute__((nonnull(3)));
# 820 "/usr/include/stdlib.h" 3
extern "C" char *qecvt(long double, int, int *__restrict__, int *__restrict__) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4)));
# 823 "/usr/include/stdlib.h" 3
extern "C" char *qfcvt(long double, int, int *__restrict__, int *__restrict__) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4)));
# 826 "/usr/include/stdlib.h" 3
extern "C" char *qgcvt(long double, int, char *) throw() __attribute__((nonnull(3)));
# 832 "/usr/include/stdlib.h" 3
extern "C" int ecvt_r(double, int, int *__restrict__, int *__restrict__, char *__restrict__, size_t) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4))) __attribute__((nonnull(5)));
# 835 "/usr/include/stdlib.h" 3
extern "C" int fcvt_r(double, int, int *__restrict__, int *__restrict__, char *__restrict__, size_t) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4))) __attribute__((nonnull(5)));
# 839 "/usr/include/stdlib.h" 3
extern "C" int qecvt_r(long double, int, int *__restrict__, int *__restrict__, char *__restrict__, size_t) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4))) __attribute__((nonnull(5)));
# 843 "/usr/include/stdlib.h" 3
extern "C" int qfcvt_r(long double, int, int *__restrict__, int *__restrict__, char *__restrict__, size_t) throw() __attribute__((nonnull(3))) __attribute__((nonnull(4))) __attribute__((nonnull(5)));
# 854 "/usr/include/stdlib.h" 3
extern "C" int mblen(const char *, size_t) throw();
# 857 "/usr/include/stdlib.h" 3
extern "C" int mbtowc(wchar_t *__restrict__, const char *__restrict__, size_t) throw();
# 861 "/usr/include/stdlib.h" 3
extern "C" int wctomb(char *, wchar_t) throw();
# 865 "/usr/include/stdlib.h" 3
extern "C" size_t mbstowcs(wchar_t *__restrict__, const char *__restrict__, size_t) throw();
# 868 "/usr/include/stdlib.h" 3
extern "C" size_t wcstombs(char *__restrict__, const wchar_t *__restrict__, size_t) throw();
# 879 "/usr/include/stdlib.h" 3
extern "C" int rpmatch(const char *) throw() __attribute__((nonnull(1)));
# 890 "/usr/include/stdlib.h" 3
extern "C" int getsubopt(char **__restrict__, char *const *__restrict__, char **__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(3)));
# 899 "/usr/include/stdlib.h" 3
extern "C" void setkey(const char *) throw() __attribute__((nonnull(1)));
# 907 "/usr/include/stdlib.h" 3
extern "C" int posix_openpt(int);
# 915 "/usr/include/stdlib.h" 3
extern "C" int grantpt(int) throw();
# 919 "/usr/include/stdlib.h" 3
extern "C" int unlockpt(int) throw();
# 924 "/usr/include/stdlib.h" 3
extern "C" char *ptsname(int) throw();
# 931 "/usr/include/stdlib.h" 3
extern "C" int ptsname_r(int, char *, size_t) throw() __attribute__((nonnull(2)));
# 935 "/usr/include/stdlib.h" 3
extern "C" int getpt();
# 942 "/usr/include/stdlib.h" 3
extern "C" int getloadavg(double [], int) throw() __attribute__((nonnull(1)));
# 69 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 71 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template < typename _Iterator, typename _Container >
    class __normal_iterator;
# 74 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
}
# 76 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
namespace std __attribute__((visibility("default"))) {
# 78 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __true_type { };
# 79 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __false_type { };
# 81 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<bool __T0>
# 82 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __truth_type {
# 83 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type; };
# 86 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __truth_type< true> {
# 87 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type; };
# 91 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class _Sp, class _Tp>
# 92 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __traitor {
# 94 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = (((bool)_Sp::__value) || ((bool)_Tp::__value))};
# 95 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef typename __truth_type< __value> ::__type __type;
# 96 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 99 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class , class >
# 100 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __are_same {
# 102 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 103 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 104 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 106 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class _Tp>
# 107 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __are_same< _Tp, _Tp> {
# 109 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 110 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 111 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 114 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class _Tp>
# 115 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_void {
# 117 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 118 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 119 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 122 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_void< void> {
# 124 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 125 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 126 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 131 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class _Tp>
# 132 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_integer {
# 134 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 135 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 136 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 142 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< bool> {
# 144 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 145 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 146 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 149 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< char> {
# 151 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 152 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 153 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 156 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< signed char> {
# 158 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 159 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 160 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 163 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned char> {
# 165 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 166 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 167 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 171 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< wchar_t> {
# 173 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 174 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 175 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 195 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< short> {
# 197 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 198 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 199 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 202 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned short> {
# 204 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 205 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 206 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 209 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< int> {
# 211 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 212 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 213 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 216 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned> {
# 218 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 219 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 220 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 223 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< long> {
# 225 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 226 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 227 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 230 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned long> {
# 232 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 233 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 234 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 237 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< long long> {
# 239 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 240 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 241 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 244 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned long long> {
# 246 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 247 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 248 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 253 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class _Tp>
# 254 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_floating {
# 256 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 257 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 258 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 262 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_floating< float> {
# 264 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 265 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 266 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 269 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_floating< double> {
# 271 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 272 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 273 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 276 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_floating< long double> {
# 278 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 279 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 280 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 285 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class _Tp>
# 286 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_pointer {
# 288 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 289 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 290 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 292 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class _Tp>
# 293 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_pointer< _Tp *> {
# 295 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 296 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 297 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 302 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class _Tp>
# 303 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_normal_iterator {
# 305 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 306 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 307 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 309 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class _Iterator, class _Container>
# 310 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_normal_iterator< __gnu_cxx::__normal_iterator< _Iterator, _Container> > {
# 313 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 314 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 315 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 320 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class _Tp>
# 321 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> > {
# 323 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 328 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class _Tp>
# 329 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_fundamental : public __traitor< __is_void< _Tp> , __is_arithmetic< _Tp> > {
# 331 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 336 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class _Tp>
# 337 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> > {
# 339 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 344 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class _Tp>
# 345 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_char {
# 347 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 348 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 349 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 352 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_char< char> {
# 354 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 355 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 356 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 360 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_char< wchar_t> {
# 362 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 363 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 364 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 367 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class _Tp>
# 368 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_byte {
# 370 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 371 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 372 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 375 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_byte< char> {
# 377 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 378 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 379 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 382 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_byte< signed char> {
# 384 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 385 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 386 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 389 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<> struct __is_byte< unsigned char> {
# 391 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 392 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 393 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 398 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
template<class _Tp>
# 399 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
struct __is_move_iterator {
# 401 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
enum { __value};
# 402 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 403 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
};
# 417 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
}
# 37 "/usr/include/c++/4.4/ext/type_traits.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 40 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<bool __T1, class >
# 41 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __enable_if {
# 42 "/usr/include/c++/4.4/ext/type_traits.h" 3
};
# 44 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<class _Tp>
# 45 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __enable_if< true, _Tp> {
# 46 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef _Tp __type; };
# 50 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<bool _Cond, class _Iftrue, class _Iffalse>
# 51 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __conditional_type {
# 52 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef _Iftrue __type; };
# 54 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<class _Iftrue, class _Iffalse>
# 55 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __conditional_type< false, _Iftrue, _Iffalse> {
# 56 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef _Iffalse __type; };
# 60 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<class _Tp>
# 61 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __add_unsigned {
# 64 "/usr/include/c++/4.4/ext/type_traits.h" 3
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp> __if_type;
# 67 "/usr/include/c++/4.4/ext/type_traits.h" 3
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type;
# 68 "/usr/include/c++/4.4/ext/type_traits.h" 3
};
# 71 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< char> {
# 72 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef unsigned char __type; };
# 75 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< signed char> {
# 76 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef unsigned char __type; };
# 79 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< short> {
# 80 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef unsigned short __type; };
# 83 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< int> {
# 84 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef unsigned __type; };
# 87 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< long> {
# 88 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef unsigned long __type; };
# 91 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< long long> {
# 92 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef unsigned long long __type; };
# 96 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< bool> ;
# 99 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __add_unsigned< wchar_t> ;
# 103 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<class _Tp>
# 104 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __remove_unsigned {
# 107 "/usr/include/c++/4.4/ext/type_traits.h" 3
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp> __if_type;
# 110 "/usr/include/c++/4.4/ext/type_traits.h" 3
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type;
# 111 "/usr/include/c++/4.4/ext/type_traits.h" 3
};
# 114 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< char> {
# 115 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef signed char __type; };
# 118 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned char> {
# 119 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef signed char __type; };
# 122 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned short> {
# 123 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef short __type; };
# 126 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned> {
# 127 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef int __type; };
# 130 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned long> {
# 131 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef long __type; };
# 134 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned long long> {
# 135 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef long long __type; };
# 139 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< bool> ;
# 142 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<> struct __remove_unsigned< wchar_t> ;
# 146 "/usr/include/c++/4.4/ext/type_traits.h" 3
template < typename _Type >
    inline bool
    __is_null_pointer ( _Type * __ptr )
    { return __ptr == 0; }
# 151 "/usr/include/c++/4.4/ext/type_traits.h" 3
template < typename _Type >
    inline bool
    __is_null_pointer ( _Type )
    { return false; }
# 158 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<class _Tp, bool __T2 = std::__is_integer< _Tp> ::__value>
# 159 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __promote {
# 160 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef double __type; };
# 162 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<class _Tp>
# 163 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __promote< _Tp, false> {
# 164 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef _Tp __type; };
# 166 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<class _Tp, class _Up>
# 167 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __promote_2 {
# 170 "/usr/include/c++/4.4/ext/type_traits.h" 3
private: typedef typename __promote< _Tp, std::__is_integer< _Tp> ::__value> ::__type __type1;
# 171 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef typename __promote< _Up, std::__is_integer< _Up> ::__value> ::__type __type2;
# 174 "/usr/include/c++/4.4/ext/type_traits.h" 3
public: typedef __typeof__(__type1() + __type2()) __type;
# 175 "/usr/include/c++/4.4/ext/type_traits.h" 3
};
# 177 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<class _Tp, class _Up, class _Vp>
# 178 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __promote_3 {
# 181 "/usr/include/c++/4.4/ext/type_traits.h" 3
private: typedef typename __promote< _Tp, std::__is_integer< _Tp> ::__value> ::__type __type1;
# 182 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef typename __promote< _Up, std::__is_integer< _Up> ::__value> ::__type __type2;
# 183 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef typename __promote< _Vp, std::__is_integer< _Vp> ::__value> ::__type __type3;
# 186 "/usr/include/c++/4.4/ext/type_traits.h" 3
public: typedef __typeof__((__type1() + __type2()) + __type3()) __type;
# 187 "/usr/include/c++/4.4/ext/type_traits.h" 3
};
# 189 "/usr/include/c++/4.4/ext/type_traits.h" 3
template<class _Tp, class _Up, class _Vp, class _Wp>
# 190 "/usr/include/c++/4.4/ext/type_traits.h" 3
struct __promote_4 {
# 193 "/usr/include/c++/4.4/ext/type_traits.h" 3
private: typedef typename __promote< _Tp, std::__is_integer< _Tp> ::__value> ::__type __type1;
# 194 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef typename __promote< _Up, std::__is_integer< _Up> ::__value> ::__type __type2;
# 195 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef typename __promote< _Vp, std::__is_integer< _Vp> ::__value> ::__type __type3;
# 196 "/usr/include/c++/4.4/ext/type_traits.h" 3
typedef typename __promote< _Wp, std::__is_integer< _Wp> ::__value> ::__type __type4;
# 199 "/usr/include/c++/4.4/ext/type_traits.h" 3
public: typedef __typeof__(((__type1() + __type2()) + __type3()) + __type4()) __type;
# 200 "/usr/include/c++/4.4/ext/type_traits.h" 3
};
# 202 "/usr/include/c++/4.4/ext/type_traits.h" 3
}
# 77 "/usr/include/c++/4.4/cmath" 3
namespace std __attribute__((visibility("default"))) {
# 81 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    _Tp __cmath_power ( _Tp, unsigned int );
# 84 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline _Tp
    __pow_helper ( _Tp __x, int __n )
    {
      return __n < 0
        ? _Tp ( 1 ) / __cmath_power ( __x, - __n )
        : __cmath_power ( __x, __n );
    }
# 94 "/usr/include/c++/4.4/cmath" 3
inline double abs(double __x)
# 95 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_fabs(__x); }
# 98 "/usr/include/c++/4.4/cmath" 3
inline float abs(float __x)
# 99 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_fabsf(__x); }
# 102 "/usr/include/c++/4.4/cmath" 3
inline long double abs(long double __x)
# 103 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_fabsl(__x); }
# 105 "/usr/include/c++/4.4/cmath" 3
using ::acos;
# 108 "/usr/include/c++/4.4/cmath" 3
inline float acos(float __x)
# 109 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_acosf(__x); }
# 112 "/usr/include/c++/4.4/cmath" 3
inline long double acos(long double __x)
# 113 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_acosl(__x); }
# 115 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    acos ( _Tp __x )
    { return __builtin_acos ( __x ); }
# 121 "/usr/include/c++/4.4/cmath" 3
using ::asin;
# 124 "/usr/include/c++/4.4/cmath" 3
inline float asin(float __x)
# 125 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_asinf(__x); }
# 128 "/usr/include/c++/4.4/cmath" 3
inline long double asin(long double __x)
# 129 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_asinl(__x); }
# 131 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    asin ( _Tp __x )
    { return __builtin_asin ( __x ); }
# 137 "/usr/include/c++/4.4/cmath" 3
using ::atan;
# 140 "/usr/include/c++/4.4/cmath" 3
inline float atan(float __x)
# 141 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_atanf(__x); }
# 144 "/usr/include/c++/4.4/cmath" 3
inline long double atan(long double __x)
# 145 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_atanl(__x); }
# 147 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    atan ( _Tp __x )
    { return __builtin_atan ( __x ); }
# 153 "/usr/include/c++/4.4/cmath" 3
using ::atan2;
# 156 "/usr/include/c++/4.4/cmath" 3
inline float atan2(float __y, float __x)
# 157 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_atan2f(__y, __x); }
# 160 "/usr/include/c++/4.4/cmath" 3
inline long double atan2(long double __y, long double __x)
# 161 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_atan2l(__y, __x); }
# 163 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp, typename _Up >
    inline
    typename __gnu_cxx :: __promote_2 <
    typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value
        && __is_arithmetic < _Up > :: __value,
        _Tp > :: __type, _Up > :: __type
    atan2 ( _Tp __y, _Up __x )
    {
      typedef typename __gnu_cxx :: __promote_2 < _Tp, _Up > :: __type __type;
      return atan2 ( __type ( __y ), __type ( __x ) );
    }
# 175 "/usr/include/c++/4.4/cmath" 3
using ::ceil;
# 178 "/usr/include/c++/4.4/cmath" 3
inline float ceil(float __x)
# 179 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_ceilf(__x); }
# 182 "/usr/include/c++/4.4/cmath" 3
inline long double ceil(long double __x)
# 183 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_ceill(__x); }
# 185 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    ceil ( _Tp __x )
    { return __builtin_ceil ( __x ); }
# 191 "/usr/include/c++/4.4/cmath" 3
using ::cos;
# 194 "/usr/include/c++/4.4/cmath" 3
inline float cos(float __x)
# 195 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_cosf(__x); }
# 198 "/usr/include/c++/4.4/cmath" 3
inline long double cos(long double __x)
# 199 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_cosl(__x); }
# 201 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    cos ( _Tp __x )
    { return __builtin_cos ( __x ); }
# 207 "/usr/include/c++/4.4/cmath" 3
using ::cosh;
# 210 "/usr/include/c++/4.4/cmath" 3
inline float cosh(float __x)
# 211 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_coshf(__x); }
# 214 "/usr/include/c++/4.4/cmath" 3
inline long double cosh(long double __x)
# 215 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_coshl(__x); }
# 217 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    cosh ( _Tp __x )
    { return __builtin_cosh ( __x ); }
# 223 "/usr/include/c++/4.4/cmath" 3
using ::exp;
# 226 "/usr/include/c++/4.4/cmath" 3
inline float exp(float __x)
# 227 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_expf(__x); }
# 230 "/usr/include/c++/4.4/cmath" 3
inline long double exp(long double __x)
# 231 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_expl(__x); }
# 233 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    exp ( _Tp __x )
    { return __builtin_exp ( __x ); }
# 239 "/usr/include/c++/4.4/cmath" 3
using ::fabs;
# 242 "/usr/include/c++/4.4/cmath" 3
inline float fabs(float __x)
# 243 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_fabsf(__x); }
# 246 "/usr/include/c++/4.4/cmath" 3
inline long double fabs(long double __x)
# 247 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_fabsl(__x); }
# 249 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    fabs ( _Tp __x )
    { return __builtin_fabs ( __x ); }
# 255 "/usr/include/c++/4.4/cmath" 3
using ::floor;
# 258 "/usr/include/c++/4.4/cmath" 3
inline float floor(float __x)
# 259 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_floorf(__x); }
# 262 "/usr/include/c++/4.4/cmath" 3
inline long double floor(long double __x)
# 263 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_floorl(__x); }
# 265 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    floor ( _Tp __x )
    { return __builtin_floor ( __x ); }
# 271 "/usr/include/c++/4.4/cmath" 3
using ::fmod;
# 274 "/usr/include/c++/4.4/cmath" 3
inline float fmod(float __x, float __y)
# 275 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_fmodf(__x, __y); }
# 278 "/usr/include/c++/4.4/cmath" 3
inline long double fmod(long double __x, long double __y)
# 279 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_fmodl(__x, __y); }
# 281 "/usr/include/c++/4.4/cmath" 3
using ::frexp;
# 284 "/usr/include/c++/4.4/cmath" 3
inline float frexp(float __x, int *__exp)
# 285 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_frexpf(__x, __exp); }
# 288 "/usr/include/c++/4.4/cmath" 3
inline long double frexp(long double __x, int *__exp)
# 289 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_frexpl(__x, __exp); }
# 291 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    frexp ( _Tp __x, int * __exp )
    { return __builtin_frexp ( __x, __exp ); }
# 297 "/usr/include/c++/4.4/cmath" 3
using ::ldexp;
# 300 "/usr/include/c++/4.4/cmath" 3
inline float ldexp(float __x, int __exp)
# 301 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_ldexpf(__x, __exp); }
# 304 "/usr/include/c++/4.4/cmath" 3
inline long double ldexp(long double __x, int __exp)
# 305 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_ldexpl(__x, __exp); }
# 307 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
  ldexp ( _Tp __x, int __exp )
  { return __builtin_ldexp ( __x, __exp ); }
# 313 "/usr/include/c++/4.4/cmath" 3
using ::log;
# 316 "/usr/include/c++/4.4/cmath" 3
inline float log(float __x)
# 317 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_logf(__x); }
# 320 "/usr/include/c++/4.4/cmath" 3
inline long double log(long double __x)
# 321 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_logl(__x); }
# 323 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    log ( _Tp __x )
    { return __builtin_log ( __x ); }
# 329 "/usr/include/c++/4.4/cmath" 3
using ::log10;
# 332 "/usr/include/c++/4.4/cmath" 3
inline float log10(float __x)
# 333 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_log10f(__x); }
# 336 "/usr/include/c++/4.4/cmath" 3
inline long double log10(long double __x)
# 337 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_log10l(__x); }
# 339 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    log10 ( _Tp __x )
    { return __builtin_log10 ( __x ); }
# 345 "/usr/include/c++/4.4/cmath" 3
using ::modf;
# 348 "/usr/include/c++/4.4/cmath" 3
inline float modf(float __x, float *__iptr)
# 349 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_modff(__x, __iptr); }
# 352 "/usr/include/c++/4.4/cmath" 3
inline long double modf(long double __x, long double *__iptr)
# 353 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_modfl(__x, __iptr); }
# 355 "/usr/include/c++/4.4/cmath" 3
using ::pow;
# 358 "/usr/include/c++/4.4/cmath" 3
inline float pow(float __x, float __y)
# 359 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_powf(__x, __y); }
# 362 "/usr/include/c++/4.4/cmath" 3
inline long double pow(long double __x, long double __y)
# 363 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_powl(__x, __y); }
# 369 "/usr/include/c++/4.4/cmath" 3
inline double pow(double __x, int __i)
# 370 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_powi(__x, __i); }
# 373 "/usr/include/c++/4.4/cmath" 3
inline float pow(float __x, int __n)
# 374 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_powif(__x, __n); }
# 377 "/usr/include/c++/4.4/cmath" 3
inline long double pow(long double __x, int __n)
# 378 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_powil(__x, __n); }
# 381 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp, typename _Up >
    inline
    typename __gnu_cxx :: __promote_2 <
    typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value
        && __is_arithmetic < _Up > :: __value,
        _Tp > :: __type, _Up > :: __type
    pow ( _Tp __x, _Up __y )
    {
      typedef typename __gnu_cxx :: __promote_2 < _Tp, _Up > :: __type __type;
      return pow ( __type ( __x ), __type ( __y ) );
    }
# 393 "/usr/include/c++/4.4/cmath" 3
using ::sin;
# 396 "/usr/include/c++/4.4/cmath" 3
inline float sin(float __x)
# 397 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_sinf(__x); }
# 400 "/usr/include/c++/4.4/cmath" 3
inline long double sin(long double __x)
# 401 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_sinl(__x); }
# 403 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    sin ( _Tp __x )
    { return __builtin_sin ( __x ); }
# 409 "/usr/include/c++/4.4/cmath" 3
using ::sinh;
# 412 "/usr/include/c++/4.4/cmath" 3
inline float sinh(float __x)
# 413 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_sinhf(__x); }
# 416 "/usr/include/c++/4.4/cmath" 3
inline long double sinh(long double __x)
# 417 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_sinhl(__x); }
# 419 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    sinh ( _Tp __x )
    { return __builtin_sinh ( __x ); }
# 425 "/usr/include/c++/4.4/cmath" 3
using ::sqrt;
# 428 "/usr/include/c++/4.4/cmath" 3
inline float sqrt(float __x)
# 429 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_sqrtf(__x); }
# 432 "/usr/include/c++/4.4/cmath" 3
inline long double sqrt(long double __x)
# 433 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_sqrtl(__x); }
# 435 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    sqrt ( _Tp __x )
    { return __builtin_sqrt ( __x ); }
# 441 "/usr/include/c++/4.4/cmath" 3
using ::tan;
# 444 "/usr/include/c++/4.4/cmath" 3
inline float tan(float __x)
# 445 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_tanf(__x); }
# 448 "/usr/include/c++/4.4/cmath" 3
inline long double tan(long double __x)
# 449 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_tanl(__x); }
# 451 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    tan ( _Tp __x )
    { return __builtin_tan ( __x ); }
# 457 "/usr/include/c++/4.4/cmath" 3
using ::tanh;
# 460 "/usr/include/c++/4.4/cmath" 3
inline float tanh(float __x)
# 461 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_tanhf(__x); }
# 464 "/usr/include/c++/4.4/cmath" 3
inline long double tanh(long double __x)
# 465 "/usr/include/c++/4.4/cmath" 3
{ return __builtin_tanhl(__x); }
# 467 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    tanh ( _Tp __x )
    { return __builtin_tanh ( __x ); }
# 473 "/usr/include/c++/4.4/cmath" 3
}
# 492 "/usr/include/c++/4.4/cmath" 3
namespace std __attribute__((visibility("default"))) {
# 494 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    fpclassify ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_fpclassify ( FP_NAN, FP_INFINITE, FP_NORMAL,
      FP_SUBNORMAL, FP_ZERO, __type ( __f ) );
    }
# 504 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isfinite ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isfinite ( __type ( __f ) );
    }
# 513 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isinf ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isinf ( __type ( __f ) );
    }
# 522 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isnan ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isnan ( __type ( __f ) );
    }
# 531 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isnormal ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isnormal ( __type ( __f ) );
    }
# 540 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    signbit ( _Tp __f )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_signbit ( __type ( __f ) );
    }
# 549 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isgreater ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isgreater ( __type ( __f1 ), __type ( __f2 ) );
    }
# 558 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isgreaterequal ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isgreaterequal ( __type ( __f1 ), __type ( __f2 ) );
    }
# 567 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isless ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isless ( __type ( __f1 ), __type ( __f2 ) );
    }
# 576 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    islessequal ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_islessequal ( __type ( __f1 ), __type ( __f2 ) );
    }
# 585 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    islessgreater ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_islessgreater ( __type ( __f1 ), __type ( __f2 ) );
    }
# 594 "/usr/include/c++/4.4/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_arithmetic < _Tp > :: __value,
        int > :: __type
    isunordered ( _Tp __f1, _Tp __f2 )
    {
      typedef typename __gnu_cxx :: __promote < _Tp > :: __type __type;
      return __builtin_isunordered ( __type ( __f1 ), __type ( __f2 ) );
    }
# 603 "/usr/include/c++/4.4/cmath" 3
}
# 35 "/usr/include/c++/4.4/bits/cmath.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 37 "/usr/include/c++/4.4/bits/cmath.tcc" 3
template < typename _Tp >
    inline _Tp
    __cmath_power ( _Tp __x, unsigned int __n )
    {
      _Tp __y = __n % 2 ? __x : _Tp ( 1 );

      while ( __n >>= 1 )
        {
          __x = __x * __x;
          if ( __n % 2 )
            __y = __y * __x;
        }

      return __y;
    }
# 53 "/usr/include/c++/4.4/bits/cmath.tcc" 3
}
# 49 "/usr/include/c++/4.4/cstddef" 3
namespace std __attribute__((visibility("default"))) {
# 51 "/usr/include/c++/4.4/cstddef" 3
using ::ptrdiff_t;
# 52 "/usr/include/c++/4.4/cstddef" 3
using ::size_t;
# 54 "/usr/include/c++/4.4/cstddef" 3
}
# 100 "/usr/include/c++/4.4/cstdlib" 3
namespace std __attribute__((visibility("default"))) {
# 102 "/usr/include/c++/4.4/cstdlib" 3
using ::div_t;
# 103 "/usr/include/c++/4.4/cstdlib" 3
using ::ldiv_t;
# 105 "/usr/include/c++/4.4/cstdlib" 3
using ::abort;
# 106 "/usr/include/c++/4.4/cstdlib" 3
using ::abs;
# 107 "/usr/include/c++/4.4/cstdlib" 3
using ::atexit;
# 108 "/usr/include/c++/4.4/cstdlib" 3
using ::atof;
# 109 "/usr/include/c++/4.4/cstdlib" 3
using ::atoi;
# 110 "/usr/include/c++/4.4/cstdlib" 3
using ::atol;
# 111 "/usr/include/c++/4.4/cstdlib" 3
using ::bsearch;
# 112 "/usr/include/c++/4.4/cstdlib" 3
using ::calloc;
# 113 "/usr/include/c++/4.4/cstdlib" 3
using ::div;
# 114 "/usr/include/c++/4.4/cstdlib" 3
using ::exit;
# 115 "/usr/include/c++/4.4/cstdlib" 3
using ::free;
# 116 "/usr/include/c++/4.4/cstdlib" 3
using ::getenv;
# 117 "/usr/include/c++/4.4/cstdlib" 3
using ::labs;
# 118 "/usr/include/c++/4.4/cstdlib" 3
using ::ldiv;
# 119 "/usr/include/c++/4.4/cstdlib" 3
using ::malloc;
# 121 "/usr/include/c++/4.4/cstdlib" 3
using ::mblen;
# 122 "/usr/include/c++/4.4/cstdlib" 3
using ::mbstowcs;
# 123 "/usr/include/c++/4.4/cstdlib" 3
using ::mbtowc;
# 125 "/usr/include/c++/4.4/cstdlib" 3
using ::qsort;
# 126 "/usr/include/c++/4.4/cstdlib" 3
using ::rand;
# 127 "/usr/include/c++/4.4/cstdlib" 3
using ::realloc;
# 128 "/usr/include/c++/4.4/cstdlib" 3
using ::srand;
# 129 "/usr/include/c++/4.4/cstdlib" 3
using ::strtod;
# 130 "/usr/include/c++/4.4/cstdlib" 3
using ::strtol;
# 131 "/usr/include/c++/4.4/cstdlib" 3
using ::strtoul;
# 132 "/usr/include/c++/4.4/cstdlib" 3
using ::system;
# 134 "/usr/include/c++/4.4/cstdlib" 3
using ::wcstombs;
# 135 "/usr/include/c++/4.4/cstdlib" 3
using ::wctomb;
# 139 "/usr/include/c++/4.4/cstdlib" 3
inline long abs(long __i) { return labs(__i); }
# 142 "/usr/include/c++/4.4/cstdlib" 3
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); }
# 144 "/usr/include/c++/4.4/cstdlib" 3
}
# 157 "/usr/include/c++/4.4/cstdlib" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 160 "/usr/include/c++/4.4/cstdlib" 3
using ::lldiv_t;
# 166 "/usr/include/c++/4.4/cstdlib" 3
using ::_Exit;
# 170 "/usr/include/c++/4.4/cstdlib" 3
inline long long abs(long long __x) { return (__x >= (0)) ? __x : (-__x); }
# 173 "/usr/include/c++/4.4/cstdlib" 3
using ::llabs;
# 176 "/usr/include/c++/4.4/cstdlib" 3
inline lldiv_t div(long long __n, long long __d)
# 177 "/usr/include/c++/4.4/cstdlib" 3
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; }
# 179 "/usr/include/c++/4.4/cstdlib" 3
using ::lldiv;
# 190 "/usr/include/c++/4.4/cstdlib" 3
using ::atoll;
# 191 "/usr/include/c++/4.4/cstdlib" 3
using ::strtoll;
# 192 "/usr/include/c++/4.4/cstdlib" 3
using ::strtoull;
# 194 "/usr/include/c++/4.4/cstdlib" 3
using ::strtof;
# 195 "/usr/include/c++/4.4/cstdlib" 3
using ::strtold;
# 197 "/usr/include/c++/4.4/cstdlib" 3
}
# 199 "/usr/include/c++/4.4/cstdlib" 3
namespace std __attribute__((visibility("default"))) {
# 202 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::lldiv_t;
# 204 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::_Exit;
# 205 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::abs;
# 207 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::llabs;
# 208 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::div;
# 209 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::lldiv;
# 211 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::atoll;
# 212 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::strtof;
# 213 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::strtoll;
# 214 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::strtoull;
# 215 "/usr/include/c++/4.4/cstdlib" 3
using __gnu_cxx::strtold;
# 217 "/usr/include/c++/4.4/cstdlib" 3
}
# 496 "/usr/local/cuda/bin/../include/math_functions.h"
namespace __gnu_cxx {
# 498 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline long long abs(long long) __attribute__((visibility("default")));
# 499 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 501 "/usr/local/cuda/bin/../include/math_functions.h"
namespace std {
# 503 "/usr/local/cuda/bin/../include/math_functions.h"
template<class T> extern inline T __pow_helper(T, int);
# 504 "/usr/local/cuda/bin/../include/math_functions.h"
template<class T> extern inline T __cmath_power(T, unsigned);
# 505 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 507 "/usr/local/cuda/bin/../include/math_functions.h"
using std::abs;
# 508 "/usr/local/cuda/bin/../include/math_functions.h"
using std::fabs;
# 509 "/usr/local/cuda/bin/../include/math_functions.h"
using std::ceil;
# 510 "/usr/local/cuda/bin/../include/math_functions.h"
using std::floor;
# 511 "/usr/local/cuda/bin/../include/math_functions.h"
using std::sqrt;
# 512 "/usr/local/cuda/bin/../include/math_functions.h"
using std::pow;
# 513 "/usr/local/cuda/bin/../include/math_functions.h"
using std::log;
# 514 "/usr/local/cuda/bin/../include/math_functions.h"
using std::log10;
# 515 "/usr/local/cuda/bin/../include/math_functions.h"
using std::fmod;
# 516 "/usr/local/cuda/bin/../include/math_functions.h"
using std::modf;
# 517 "/usr/local/cuda/bin/../include/math_functions.h"
using std::exp;
# 518 "/usr/local/cuda/bin/../include/math_functions.h"
using std::frexp;
# 519 "/usr/local/cuda/bin/../include/math_functions.h"
using std::ldexp;
# 520 "/usr/local/cuda/bin/../include/math_functions.h"
using std::asin;
# 521 "/usr/local/cuda/bin/../include/math_functions.h"
using std::sin;
# 522 "/usr/local/cuda/bin/../include/math_functions.h"
using std::sinh;
# 523 "/usr/local/cuda/bin/../include/math_functions.h"
using std::acos;
# 524 "/usr/local/cuda/bin/../include/math_functions.h"
using std::cos;
# 525 "/usr/local/cuda/bin/../include/math_functions.h"
using std::cosh;
# 526 "/usr/local/cuda/bin/../include/math_functions.h"
using std::atan;
# 527 "/usr/local/cuda/bin/../include/math_functions.h"
using std::atan2;
# 528 "/usr/local/cuda/bin/../include/math_functions.h"
using std::tan;
# 529 "/usr/local/cuda/bin/../include/math_functions.h"
using std::tanh;
# 583 "/usr/local/cuda/bin/../include/math_functions.h"
namespace std {
# 586 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline long abs(long) __attribute__((visibility("default")));
# 587 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float abs(float) __attribute__((visibility("default")));
# 588 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline double abs(double) __attribute__((visibility("default")));
# 589 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float fabs(float) __attribute__((visibility("default")));
# 590 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float ceil(float) __attribute__((visibility("default")));
# 591 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float floor(float) __attribute__((visibility("default")));
# 592 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float sqrt(float) __attribute__((visibility("default")));
# 593 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float pow(float, float) __attribute__((visibility("default")));
# 594 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float pow(float, int) __attribute__((visibility("default")));
# 595 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline double pow(double, int) __attribute__((visibility("default")));
# 596 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float log(float) __attribute__((visibility("default")));
# 597 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float log10(float) __attribute__((visibility("default")));
# 598 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float fmod(float, float) __attribute__((visibility("default")));
# 599 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float modf(float, float *) __attribute__((visibility("default")));
# 600 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float exp(float) __attribute__((visibility("default")));
# 601 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float frexp(float, int *) __attribute__((visibility("default")));
# 602 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float ldexp(float, int) __attribute__((visibility("default")));
# 603 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float asin(float) __attribute__((visibility("default")));
# 604 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float sin(float) __attribute__((visibility("default")));
# 605 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float sinh(float) __attribute__((visibility("default")));
# 606 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float acos(float) __attribute__((visibility("default")));
# 607 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float cos(float) __attribute__((visibility("default")));
# 608 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float cosh(float) __attribute__((visibility("default")));
# 609 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float atan(float) __attribute__((visibility("default")));
# 610 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float atan2(float, float) __attribute__((visibility("default")));
# 611 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float tan(float) __attribute__((visibility("default")));
# 612 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float tanh(float) __attribute__((visibility("default")));
# 615 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 618 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float logb(float a)
# 619 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 620 "/usr/local/cuda/bin/../include/math_functions.h"
return logbf(a);
# 621 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 623 "/usr/local/cuda/bin/../include/math_functions.h"
static inline int ilogb(float a)
# 624 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 625 "/usr/local/cuda/bin/../include/math_functions.h"
return ilogbf(a);
# 626 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 628 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float scalbn(float a, int b)
# 629 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 630 "/usr/local/cuda/bin/../include/math_functions.h"
return scalbnf(a, b);
# 631 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 633 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float scalbln(float a, long b)
# 634 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 635 "/usr/local/cuda/bin/../include/math_functions.h"
return scalblnf(a, b);
# 636 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 638 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float exp2(float a)
# 639 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 640 "/usr/local/cuda/bin/../include/math_functions.h"
return exp2f(a);
# 641 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 643 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float exp10(float a)
# 644 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 645 "/usr/local/cuda/bin/../include/math_functions.h"
return exp10f(a);
# 646 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 648 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float expm1(float a)
# 649 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 650 "/usr/local/cuda/bin/../include/math_functions.h"
return expm1f(a);
# 651 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 653 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float log2(float a)
# 654 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 655 "/usr/local/cuda/bin/../include/math_functions.h"
return log2f(a);
# 656 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 658 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float log1p(float a)
# 659 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 660 "/usr/local/cuda/bin/../include/math_functions.h"
return log1pf(a);
# 661 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 663 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float rsqrt(float a)
# 664 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 665 "/usr/local/cuda/bin/../include/math_functions.h"
return rsqrtf(a);
# 666 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 668 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float acosh(float a)
# 669 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 670 "/usr/local/cuda/bin/../include/math_functions.h"
return acoshf(a);
# 671 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 673 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float asinh(float a)
# 674 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 675 "/usr/local/cuda/bin/../include/math_functions.h"
return asinhf(a);
# 676 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 678 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float atanh(float a)
# 679 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 680 "/usr/local/cuda/bin/../include/math_functions.h"
return atanhf(a);
# 681 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 683 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float hypot(float a, float b)
# 684 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 685 "/usr/local/cuda/bin/../include/math_functions.h"
return hypotf(a, b);
# 686 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 688 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float cbrt(float a)
# 689 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 690 "/usr/local/cuda/bin/../include/math_functions.h"
return cbrtf(a);
# 691 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 693 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float rcbrt(float a)
# 694 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 695 "/usr/local/cuda/bin/../include/math_functions.h"
return rcbrtf(a);
# 696 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 698 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float sinpi(float a)
# 699 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 700 "/usr/local/cuda/bin/../include/math_functions.h"
return sinpif(a);
# 701 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 703 "/usr/local/cuda/bin/../include/math_functions.h"
static inline void sincos(float a, float *sptr, float *cptr)
# 704 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 705 "/usr/local/cuda/bin/../include/math_functions.h"
sincosf(a, sptr, cptr);
# 706 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 708 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float erf(float a)
# 709 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 710 "/usr/local/cuda/bin/../include/math_functions.h"
return erff(a);
# 711 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 713 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float erfinv(float a)
# 714 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 715 "/usr/local/cuda/bin/../include/math_functions.h"
return erfinvf(a);
# 716 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 718 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float erfc(float a)
# 719 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 720 "/usr/local/cuda/bin/../include/math_functions.h"
return erfcf(a);
# 721 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 723 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float erfcinv(float a)
# 724 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 725 "/usr/local/cuda/bin/../include/math_functions.h"
return erfcinvf(a);
# 726 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 728 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float lgamma(float a)
# 729 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 730 "/usr/local/cuda/bin/../include/math_functions.h"
return lgammaf(a);
# 731 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 733 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float tgamma(float a)
# 734 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 735 "/usr/local/cuda/bin/../include/math_functions.h"
return tgammaf(a);
# 736 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 738 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float copysign(float a, float b)
# 739 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 740 "/usr/local/cuda/bin/../include/math_functions.h"
return copysignf(a, b);
# 741 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 743 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double copysign(double a, float b)
# 744 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 745 "/usr/local/cuda/bin/../include/math_functions.h"
return copysign(a, (double)b);
# 746 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 748 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float copysign(float a, double b)
# 749 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 750 "/usr/local/cuda/bin/../include/math_functions.h"
return copysignf(a, (float)b);
# 751 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 753 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float nextafter(float a, float b)
# 754 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 755 "/usr/local/cuda/bin/../include/math_functions.h"
return nextafterf(a, b);
# 756 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 758 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float remainder(float a, float b)
# 759 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 760 "/usr/local/cuda/bin/../include/math_functions.h"
return remainderf(a, b);
# 761 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 763 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float remquo(float a, float b, int *quo)
# 764 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 765 "/usr/local/cuda/bin/../include/math_functions.h"
return remquof(a, b, quo);
# 766 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 768 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float round(float a)
# 769 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 770 "/usr/local/cuda/bin/../include/math_functions.h"
return roundf(a);
# 771 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 773 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long lround(float a)
# 774 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 775 "/usr/local/cuda/bin/../include/math_functions.h"
return lroundf(a);
# 776 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 778 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long long llround(float a)
# 779 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 780 "/usr/local/cuda/bin/../include/math_functions.h"
return llroundf(a);
# 781 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 783 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float trunc(float a)
# 784 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 785 "/usr/local/cuda/bin/../include/math_functions.h"
return truncf(a);
# 786 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 788 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float rint(float a)
# 789 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 790 "/usr/local/cuda/bin/../include/math_functions.h"
return rintf(a);
# 791 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 793 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long lrint(float a)
# 794 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 795 "/usr/local/cuda/bin/../include/math_functions.h"
return lrintf(a);
# 796 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 798 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long long llrint(float a)
# 799 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 800 "/usr/local/cuda/bin/../include/math_functions.h"
return llrintf(a);
# 801 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 803 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float nearbyint(float a)
# 804 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 805 "/usr/local/cuda/bin/../include/math_functions.h"
return nearbyintf(a);
# 806 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 808 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float fdim(float a, float b)
# 809 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 810 "/usr/local/cuda/bin/../include/math_functions.h"
return fdimf(a, b);
# 811 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 813 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float fma(float a, float b, float c)
# 814 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 815 "/usr/local/cuda/bin/../include/math_functions.h"
return fmaf(a, b, c);
# 816 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 818 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float fmax(float a, float b)
# 819 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 820 "/usr/local/cuda/bin/../include/math_functions.h"
return fmaxf(a, b);
# 821 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 823 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float fmin(float a, float b)
# 824 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 825 "/usr/local/cuda/bin/../include/math_functions.h"
return fminf(a, b);
# 826 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 828 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned min(unsigned a, unsigned b)
# 829 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 830 "/usr/local/cuda/bin/../include/math_functions.h"
return umin(a, b);
# 831 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 833 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned min(int a, unsigned b)
# 834 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 835 "/usr/local/cuda/bin/../include/math_functions.h"
return umin((unsigned)a, b);
# 836 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 838 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned min(unsigned a, int b)
# 839 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 840 "/usr/local/cuda/bin/../include/math_functions.h"
return umin(a, (unsigned)b);
# 841 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 843 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long long min(long long a, long long b)
# 844 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 845 "/usr/local/cuda/bin/../include/math_functions.h"
return llmin(a, b);
# 846 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 848 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned long long min(unsigned long long a, unsigned long long b)
# 849 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 850 "/usr/local/cuda/bin/../include/math_functions.h"
return ullmin(a, b);
# 851 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 853 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned long long min(long long a, unsigned long long b)
# 854 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 855 "/usr/local/cuda/bin/../include/math_functions.h"
return ullmin((unsigned long long)a, b);
# 856 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 858 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned long long min(unsigned long long a, long long b)
# 859 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 860 "/usr/local/cuda/bin/../include/math_functions.h"
return ullmin(a, (unsigned long long)b);
# 861 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 863 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float min(float a, float b)
# 864 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 865 "/usr/local/cuda/bin/../include/math_functions.h"
return fminf(a, b);
# 866 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 868 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double min(double a, double b)
# 869 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 870 "/usr/local/cuda/bin/../include/math_functions.h"
return fmin(a, b);
# 871 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 873 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double min(float a, double b)
# 874 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 875 "/usr/local/cuda/bin/../include/math_functions.h"
return fmin((double)a, b);
# 876 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 878 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double min(double a, float b)
# 879 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 880 "/usr/local/cuda/bin/../include/math_functions.h"
return fmin(a, (double)b);
# 881 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 883 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned max(unsigned a, unsigned b)
# 884 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 885 "/usr/local/cuda/bin/../include/math_functions.h"
return umax(a, b);
# 886 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 888 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned max(int a, unsigned b)
# 889 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 890 "/usr/local/cuda/bin/../include/math_functions.h"
return umax((unsigned)a, b);
# 891 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 893 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned max(unsigned a, int b)
# 894 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 895 "/usr/local/cuda/bin/../include/math_functions.h"
return umax(a, (unsigned)b);
# 896 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 898 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long long max(long long a, long long b)
# 899 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 900 "/usr/local/cuda/bin/../include/math_functions.h"
return llmax(a, b);
# 901 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 903 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned long long max(unsigned long long a, unsigned long long b)
# 904 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 905 "/usr/local/cuda/bin/../include/math_functions.h"
return ullmax(a, b);
# 906 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 908 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned long long max(long long a, unsigned long long b)
# 909 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 910 "/usr/local/cuda/bin/../include/math_functions.h"
return ullmax((unsigned long long)a, b);
# 911 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 913 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned long long max(unsigned long long a, long long b)
# 914 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 915 "/usr/local/cuda/bin/../include/math_functions.h"
return ullmax(a, (unsigned long long)b);
# 916 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 918 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float max(float a, float b)
# 919 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 920 "/usr/local/cuda/bin/../include/math_functions.h"
return fmaxf(a, b);
# 921 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 923 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double max(double a, double b)
# 924 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 925 "/usr/local/cuda/bin/../include/math_functions.h"
return fmax(a, b);
# 926 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 928 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double max(float a, double b)
# 929 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 930 "/usr/local/cuda/bin/../include/math_functions.h"
return fmax((double)a, b);
# 931 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 933 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double max(double a, float b)
# 934 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 935 "/usr/local/cuda/bin/../include/math_functions.h"
return fmax(a, (double)b);
# 936 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 59 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
template<class T, int dim = 1, cudaTextureReadMode mode = cudaReadModeElementType>
# 60 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
struct texture : public textureReference {
# 62 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
texture(int norm = 0, cudaTextureFilterMode
# 63 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
fMode = cudaFilterModePoint, cudaTextureAddressMode
# 64 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
aMode = cudaAddressModeClamp)
# 65 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
{
# 66 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
(normalized) = norm;
# 67 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
(filterMode) = fMode;
# 68 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[0]) = aMode;
# 69 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[1]) = aMode;
# 70 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[2]) = aMode;
# 71 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
(channelDesc) = cudaCreateChannelDesc< T> ();
# 72 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
}
# 74 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
texture(int norm, cudaTextureFilterMode
# 75 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
fMode, cudaTextureAddressMode
# 76 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
aMode, cudaChannelFormatDesc
# 77 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
desc)
# 78 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
{
# 79 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
(normalized) = norm;
# 80 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
(filterMode) = fMode;
# 81 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[0]) = aMode;
# 82 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[1]) = aMode;
# 83 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[2]) = aMode;
# 84 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
(channelDesc) = desc;
# 85 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
}
# 86 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
};
# 312 "/usr/local/cuda/bin/../include/device_functions.h"
static inline int mulhi(int a, int b)
# 313 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 315 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 317 "/usr/local/cuda/bin/../include/device_functions.h"
static inline unsigned mulhi(unsigned a, unsigned b)
# 318 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 320 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 322 "/usr/local/cuda/bin/../include/device_functions.h"
static inline unsigned mulhi(int a, unsigned b)
# 323 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 325 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 327 "/usr/local/cuda/bin/../include/device_functions.h"
static inline unsigned mulhi(unsigned a, int b)
# 328 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 330 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 332 "/usr/local/cuda/bin/../include/device_functions.h"
static inline long long mul64hi(long long a, long long b)
# 333 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 335 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 337 "/usr/local/cuda/bin/../include/device_functions.h"
static inline unsigned long long mul64hi(unsigned long long a, unsigned long long b)
# 338 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 340 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 342 "/usr/local/cuda/bin/../include/device_functions.h"
static inline unsigned long long mul64hi(long long a, unsigned long long b)
# 343 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 345 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 347 "/usr/local/cuda/bin/../include/device_functions.h"
static inline unsigned long long mul64hi(unsigned long long a, long long b)
# 348 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 350 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 352 "/usr/local/cuda/bin/../include/device_functions.h"
static inline int float_as_int(float a)
# 353 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 355 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 357 "/usr/local/cuda/bin/../include/device_functions.h"
static inline float int_as_float(int a)
# 358 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 360 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 362 "/usr/local/cuda/bin/../include/device_functions.h"
static inline float saturate(float a)
# 363 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 365 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 367 "/usr/local/cuda/bin/../include/device_functions.h"
static inline int mul24(int a, int b)
# 368 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 370 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 372 "/usr/local/cuda/bin/../include/device_functions.h"
static inline unsigned umul24(unsigned a, unsigned b)
# 373 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 375 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 377 "/usr/local/cuda/bin/../include/device_functions.h"
static inline void trap()
# 378 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 380 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 382 "/usr/local/cuda/bin/../include/device_functions.h"
static inline void brkpt(int c)
# 383 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 385 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 387 "/usr/local/cuda/bin/../include/device_functions.h"
static inline void syncthreads()
# 388 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 390 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 392 "/usr/local/cuda/bin/../include/device_functions.h"
static inline void prof_trigger(int e)
# 393 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 410 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 412 "/usr/local/cuda/bin/../include/device_functions.h"
static inline void threadfence(bool global = true)
# 413 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 415 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 417 "/usr/local/cuda/bin/../include/device_functions.h"
static inline int float2int(float a, cudaRoundMode mode = cudaRoundZero)
# 418 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 423 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 425 "/usr/local/cuda/bin/../include/device_functions.h"
static inline unsigned float2uint(float a, cudaRoundMode mode = cudaRoundZero)
# 426 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 431 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 433 "/usr/local/cuda/bin/../include/device_functions.h"
static inline float int2float(int a, cudaRoundMode mode = cudaRoundNearest)
# 434 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 439 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 441 "/usr/local/cuda/bin/../include/device_functions.h"
static inline float uint2float(unsigned a, cudaRoundMode mode = cudaRoundNearest)
# 442 "/usr/local/cuda/bin/../include/device_functions.h"
{volatile int ___ = 1;
# 447 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 101 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline int atomicAdd(int *address, int val)
# 102 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 104 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 106 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline unsigned atomicAdd(unsigned *address, unsigned val)
# 107 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 109 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 111 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline int atomicSub(int *address, int val)
# 112 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 114 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 116 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline unsigned atomicSub(unsigned *address, unsigned val)
# 117 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 119 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 121 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline int atomicExch(int *address, int val)
# 122 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 124 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 126 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline unsigned atomicExch(unsigned *address, unsigned val)
# 127 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 129 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 131 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline float atomicExch(float *address, float val)
# 132 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 134 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 136 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline int atomicMin(int *address, int val)
# 137 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 139 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 141 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline unsigned atomicMin(unsigned *address, unsigned val)
# 142 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 144 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 146 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline int atomicMax(int *address, int val)
# 147 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 149 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 151 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline unsigned atomicMax(unsigned *address, unsigned val)
# 152 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 154 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 156 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline unsigned atomicInc(unsigned *address, unsigned val)
# 157 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 159 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 161 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline unsigned atomicDec(unsigned *address, unsigned val)
# 162 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 164 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 166 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline int atomicAnd(int *address, int val)
# 167 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 169 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 171 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline unsigned atomicAnd(unsigned *address, unsigned val)
# 172 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 174 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 176 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline int atomicOr(int *address, int val)
# 177 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 179 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 181 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline unsigned atomicOr(unsigned *address, unsigned val)
# 182 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 184 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 186 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline int atomicXor(int *address, int val)
# 187 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 189 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 191 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline unsigned atomicXor(unsigned *address, unsigned val)
# 192 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 194 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 196 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline int atomicCAS(int *address, int compare, int val)
# 197 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 199 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 201 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val)
# 202 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{volatile int ___ = 1;
# 204 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 74 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val)
# 75 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
{volatile int ___ = 1;
# 77 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
exit(___);}
# 79 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val)
# 80 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
{volatile int ___ = 1;
# 82 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
exit(___);}
# 84 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val)
# 85 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
{volatile int ___ = 1;
# 87 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
exit(___);}
# 89 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
static inline bool any(bool cond)
# 90 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
{volatile int ___ = 1;
# 92 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
exit(___);}
# 94 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
static inline bool all(bool cond)
# 95 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
{volatile int ___ = 1;
# 97 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
exit(___);}
# 169 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
static inline double fma(double a, double b, double c, cudaRoundMode mode)
# 170 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{volatile int ___ = 1;
# 175 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 177 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest)
# 178 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{volatile int ___ = 1;
# 183 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 185 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest)
# 186 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{volatile int ___ = 1;
# 191 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 193 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero)
# 194 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{volatile int ___ = 1;
# 199 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 201 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero)
# 202 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{volatile int ___ = 1;
# 207 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 209 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero)
# 210 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{volatile int ___ = 1;
# 215 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 217 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero)
# 218 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{volatile int ___ = 1;
# 223 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 225 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest)
# 226 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{volatile int ___ = 1;
# 231 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 233 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest)
# 234 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{volatile int ___ = 1;
# 239 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 241 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest)
# 242 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{volatile int ___ = 1;
# 244 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 246 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest)
# 247 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{volatile int ___ = 1;
# 249 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 251 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest)
# 252 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{volatile int ___ = 1;
# 254 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 65 "/usr/local/cuda/bin/../include/sm_20_atomic_functions.h"
static inline float atomicAdd(float *address, float val)
# 66 "/usr/local/cuda/bin/../include/sm_20_atomic_functions.h"
{volatile int ___ = 1;
# 68 "/usr/local/cuda/bin/../include/sm_20_atomic_functions.h"
exit(___);}
# 120 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
static inline unsigned ballot(bool pred)
# 121 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
{volatile int ___ = 1;
# 123 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
exit(___);}
# 125 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
static inline int syncthreads_count(bool pred)
# 126 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
{volatile int ___ = 1;
# 128 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
exit(___);}
# 130 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
static inline bool syncthreads_and(bool pred)
# 131 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
{volatile int ___ = 1;
# 133 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
exit(___);}
# 135 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
static inline bool syncthreads_or(bool pred)
# 136 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
{volatile int ___ = 1;
# 138 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
exit(___);}
# 60 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
template<class T, cudaTextureReadMode readMode> static uint4 __utexfetchi(texture< T, 1, readMode> , int4);
# 62 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
template<class T, cudaTextureReadMode readMode> static int4 __itexfetchi(texture< T, 1, readMode> , int4);
# 64 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
template<class T, cudaTextureReadMode readMode> static float4 __ftexfetchi(texture< T, 1, readMode> , int4);
# 67 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
template<class T, int dim, cudaTextureReadMode readMode> static uint4 __utexfetch(texture< T, dim, readMode> , float4, int = dim);
# 69 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
template<class T, int dim, cudaTextureReadMode readMode> static int4 __itexfetch(texture< T, dim, readMode> , float4, int = dim);
# 71 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
template<class T, int dim, cudaTextureReadMode readMode> static float4 __ftexfetch(texture< T, dim, readMode> , float4, int = dim);
# 79 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char tex1Dfetch(texture< char, 1, cudaReadModeElementType> t, int x)
# 80 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 88 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 90 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline signed char tex1Dfetch(texture< signed char, 1, cudaReadModeElementType> t, int x)
# 91 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 95 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 97 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned char tex1Dfetch(texture< unsigned char, 1, cudaReadModeElementType> t, int x)
# 98 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 102 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 104 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char1 tex1Dfetch(texture< char1, 1, cudaReadModeElementType> t, int x)
# 105 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 109 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 111 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uchar1 tex1Dfetch(texture< uchar1, 1, cudaReadModeElementType> t, int x)
# 112 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 116 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 118 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char2 tex1Dfetch(texture< char2, 1, cudaReadModeElementType> t, int x)
# 119 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 123 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 125 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uchar2 tex1Dfetch(texture< uchar2, 1, cudaReadModeElementType> t, int x)
# 126 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 130 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 132 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char4 tex1Dfetch(texture< char4, 1, cudaReadModeElementType> t, int x)
# 133 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 137 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 139 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uchar4 tex1Dfetch(texture< uchar4, 1, cudaReadModeElementType> t, int x)
# 140 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 144 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 152 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short tex1Dfetch(texture< short, 1, cudaReadModeElementType> t, int x)
# 153 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 157 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 159 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned short tex1Dfetch(texture< unsigned short, 1, cudaReadModeElementType> t, int x)
# 160 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 164 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 166 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short1 tex1Dfetch(texture< short1, 1, cudaReadModeElementType> t, int x)
# 167 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 171 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 173 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ushort1 tex1Dfetch(texture< ushort1, 1, cudaReadModeElementType> t, int x)
# 174 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 178 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 180 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short2 tex1Dfetch(texture< short2, 1, cudaReadModeElementType> t, int x)
# 181 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 185 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 187 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ushort2 tex1Dfetch(texture< ushort2, 1, cudaReadModeElementType> t, int x)
# 188 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 192 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 194 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short4 tex1Dfetch(texture< short4, 1, cudaReadModeElementType> t, int x)
# 195 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 199 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 201 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ushort4 tex1Dfetch(texture< ushort4, 1, cudaReadModeElementType> t, int x)
# 202 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 206 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 214 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int tex1Dfetch(texture< int, 1, cudaReadModeElementType> t, int x)
# 215 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 219 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 221 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned tex1Dfetch(texture< unsigned, 1, cudaReadModeElementType> t, int x)
# 222 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 226 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 228 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int1 tex1Dfetch(texture< int1, 1, cudaReadModeElementType> t, int x)
# 229 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 233 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 235 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uint1 tex1Dfetch(texture< uint1, 1, cudaReadModeElementType> t, int x)
# 236 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 240 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 242 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int2 tex1Dfetch(texture< int2, 1, cudaReadModeElementType> t, int x)
# 243 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 247 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 249 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uint2 tex1Dfetch(texture< uint2, 1, cudaReadModeElementType> t, int x)
# 250 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 254 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 256 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int4 tex1Dfetch(texture< int4, 1, cudaReadModeElementType> t, int x)
# 257 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 261 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 263 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uint4 tex1Dfetch(texture< uint4, 1, cudaReadModeElementType> t, int x)
# 264 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 268 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 278 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long tex1Dfetch(texture< long, 1, cudaReadModeElementType> t, int x)
# 279 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 283 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 285 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned long tex1Dfetch(texture< unsigned long, 1, cudaReadModeElementType> t, int x)
# 286 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 290 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 292 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long1 tex1Dfetch(texture< long1, 1, cudaReadModeElementType> t, int x)
# 293 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 297 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 299 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ulong1 tex1Dfetch(texture< ulong1, 1, cudaReadModeElementType> t, int x)
# 300 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 304 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 306 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long2 tex1Dfetch(texture< long2, 1, cudaReadModeElementType> t, int x)
# 307 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 311 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 313 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ulong2 tex1Dfetch(texture< ulong2, 1, cudaReadModeElementType> t, int x)
# 314 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 318 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 320 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long4 tex1Dfetch(texture< long4, 1, cudaReadModeElementType> t, int x)
# 321 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 325 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 327 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ulong4 tex1Dfetch(texture< ulong4, 1, cudaReadModeElementType> t, int x)
# 328 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 332 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 342 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex1Dfetch(texture< float, 1, cudaReadModeElementType> t, int x)
# 343 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 347 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 349 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex1Dfetch(texture< float1, 1, cudaReadModeElementType> t, int x)
# 350 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 354 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 356 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex1Dfetch(texture< float2, 1, cudaReadModeElementType> t, int x)
# 357 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 361 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 363 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex1Dfetch(texture< float4, 1, cudaReadModeElementType> t, int x)
# 364 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 368 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 376 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex1Dfetch(texture< char, 1, cudaReadModeNormalizedFloat> t, int x)
# 377 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 386 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 388 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex1Dfetch(texture< signed char, 1, cudaReadModeNormalizedFloat> t, int x)
# 389 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 394 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 396 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex1Dfetch(texture< unsigned char, 1, cudaReadModeNormalizedFloat> t, int x)
# 397 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 402 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 404 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex1Dfetch(texture< char1, 1, cudaReadModeNormalizedFloat> t, int x)
# 405 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 410 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 412 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex1Dfetch(texture< uchar1, 1, cudaReadModeNormalizedFloat> t, int x)
# 413 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 418 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 420 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex1Dfetch(texture< char2, 1, cudaReadModeNormalizedFloat> t, int x)
# 421 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 426 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 428 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex1Dfetch(texture< uchar2, 1, cudaReadModeNormalizedFloat> t, int x)
# 429 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 434 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 436 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex1Dfetch(texture< char4, 1, cudaReadModeNormalizedFloat> t, int x)
# 437 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 442 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 444 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex1Dfetch(texture< uchar4, 1, cudaReadModeNormalizedFloat> t, int x)
# 445 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 450 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 458 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex1Dfetch(texture< short, 1, cudaReadModeNormalizedFloat> t, int x)
# 459 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 464 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 466 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex1Dfetch(texture< unsigned short, 1, cudaReadModeNormalizedFloat> t, int x)
# 467 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 472 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 474 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex1Dfetch(texture< short1, 1, cudaReadModeNormalizedFloat> t, int x)
# 475 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 480 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 482 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex1Dfetch(texture< ushort1, 1, cudaReadModeNormalizedFloat> t, int x)
# 483 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 488 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 490 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex1Dfetch(texture< short2, 1, cudaReadModeNormalizedFloat> t, int x)
# 491 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 496 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 498 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex1Dfetch(texture< ushort2, 1, cudaReadModeNormalizedFloat> t, int x)
# 499 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 504 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 506 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex1Dfetch(texture< short4, 1, cudaReadModeNormalizedFloat> t, int x)
# 507 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 512 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 514 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex1Dfetch(texture< ushort4, 1, cudaReadModeNormalizedFloat> t, int x)
# 515 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 520 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 528 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char tex1D(texture< char, 1, cudaReadModeElementType> t, float x)
# 529 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 537 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 539 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline signed char tex1D(texture< signed char, 1, cudaReadModeElementType> t, float x)
# 540 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 544 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 546 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned char tex1D(texture< unsigned char, 1, cudaReadModeElementType> t, float x)
# 547 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 551 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 553 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char1 tex1D(texture< char1, 1, cudaReadModeElementType> t, float x)
# 554 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 558 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 560 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uchar1 tex1D(texture< uchar1, 1, cudaReadModeElementType> t, float x)
# 561 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 565 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 567 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char2 tex1D(texture< char2, 1, cudaReadModeElementType> t, float x)
# 568 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 572 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 574 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uchar2 tex1D(texture< uchar2, 1, cudaReadModeElementType> t, float x)
# 575 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 579 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 581 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char4 tex1D(texture< char4, 1, cudaReadModeElementType> t, float x)
# 582 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 586 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 588 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uchar4 tex1D(texture< uchar4, 1, cudaReadModeElementType> t, float x)
# 589 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 593 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 601 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short tex1D(texture< short, 1, cudaReadModeElementType> t, float x)
# 602 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 606 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 608 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned short tex1D(texture< unsigned short, 1, cudaReadModeElementType> t, float x)
# 609 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 613 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 615 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short1 tex1D(texture< short1, 1, cudaReadModeElementType> t, float x)
# 616 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 620 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 622 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ushort1 tex1D(texture< ushort1, 1, cudaReadModeElementType> t, float x)
# 623 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 627 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 629 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short2 tex1D(texture< short2, 1, cudaReadModeElementType> t, float x)
# 630 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 634 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 636 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ushort2 tex1D(texture< ushort2, 1, cudaReadModeElementType> t, float x)
# 637 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 641 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 643 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short4 tex1D(texture< short4, 1, cudaReadModeElementType> t, float x)
# 644 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 648 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 650 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ushort4 tex1D(texture< ushort4, 1, cudaReadModeElementType> t, float x)
# 651 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 655 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 663 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int tex1D(texture< int, 1, cudaReadModeElementType> t, float x)
# 664 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 668 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 670 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned tex1D(texture< unsigned, 1, cudaReadModeElementType> t, float x)
# 671 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 675 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 677 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int1 tex1D(texture< int1, 1, cudaReadModeElementType> t, float x)
# 678 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 682 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 684 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uint1 tex1D(texture< uint1, 1, cudaReadModeElementType> t, float x)
# 685 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 689 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 691 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int2 tex1D(texture< int2, 1, cudaReadModeElementType> t, float x)
# 692 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 696 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 698 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uint2 tex1D(texture< uint2, 1, cudaReadModeElementType> t, float x)
# 699 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 703 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 705 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int4 tex1D(texture< int4, 1, cudaReadModeElementType> t, float x)
# 706 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 710 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 712 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uint4 tex1D(texture< uint4, 1, cudaReadModeElementType> t, float x)
# 713 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 717 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 733 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long tex1D(texture< long, 1, cudaReadModeElementType> t, float x)
# 734 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 738 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 740 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned long tex1D(texture< unsigned long, 1, cudaReadModeElementType> t, float x)
# 741 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 745 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 747 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long1 tex1D(texture< long1, 1, cudaReadModeElementType> t, float x)
# 748 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 752 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 754 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ulong1 tex1D(texture< ulong1, 1, cudaReadModeElementType> t, float x)
# 755 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 759 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 761 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long2 tex1D(texture< long2, 1, cudaReadModeElementType> t, float x)
# 762 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 766 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 768 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ulong2 tex1D(texture< ulong2, 1, cudaReadModeElementType> t, float x)
# 769 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 773 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 775 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long4 tex1D(texture< long4, 1, cudaReadModeElementType> t, float x)
# 776 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 780 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 782 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ulong4 tex1D(texture< ulong4, 1, cudaReadModeElementType> t, float x)
# 783 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 787 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 797 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex1D(texture< float, 1, cudaReadModeElementType> t, float x)
# 798 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 802 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 804 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex1D(texture< float1, 1, cudaReadModeElementType> t, float x)
# 805 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 809 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 811 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex1D(texture< float2, 1, cudaReadModeElementType> t, float x)
# 812 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 816 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 818 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex1D(texture< float4, 1, cudaReadModeElementType> t, float x)
# 819 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 823 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 831 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex1D(texture< char, 1, cudaReadModeNormalizedFloat> t, float x)
# 832 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 841 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 843 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex1D(texture< signed char, 1, cudaReadModeNormalizedFloat> t, float x)
# 844 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 849 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 851 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex1D(texture< unsigned char, 1, cudaReadModeNormalizedFloat> t, float x)
# 852 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 857 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 859 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex1D(texture< char1, 1, cudaReadModeNormalizedFloat> t, float x)
# 860 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 865 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 867 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex1D(texture< uchar1, 1, cudaReadModeNormalizedFloat> t, float x)
# 868 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 873 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 875 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex1D(texture< char2, 1, cudaReadModeNormalizedFloat> t, float x)
# 876 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 881 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 883 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex1D(texture< uchar2, 1, cudaReadModeNormalizedFloat> t, float x)
# 884 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 889 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 891 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex1D(texture< char4, 1, cudaReadModeNormalizedFloat> t, float x)
# 892 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 897 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 899 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex1D(texture< uchar4, 1, cudaReadModeNormalizedFloat> t, float x)
# 900 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 905 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 913 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex1D(texture< short, 1, cudaReadModeNormalizedFloat> t, float x)
# 914 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 919 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 921 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex1D(texture< unsigned short, 1, cudaReadModeNormalizedFloat> t, float x)
# 922 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 927 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 929 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex1D(texture< short1, 1, cudaReadModeNormalizedFloat> t, float x)
# 930 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 935 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 937 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex1D(texture< ushort1, 1, cudaReadModeNormalizedFloat> t, float x)
# 938 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 943 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 945 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex1D(texture< short2, 1, cudaReadModeNormalizedFloat> t, float x)
# 946 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 951 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 953 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex1D(texture< ushort2, 1, cudaReadModeNormalizedFloat> t, float x)
# 954 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 959 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 961 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex1D(texture< short4, 1, cudaReadModeNormalizedFloat> t, float x)
# 962 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 967 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 969 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex1D(texture< ushort4, 1, cudaReadModeNormalizedFloat> t, float x)
# 970 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 975 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 983 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char tex2D(texture< char, 2, cudaReadModeElementType> t, float x, float y)
# 984 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 992 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 994 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline signed char tex2D(texture< signed char, 2, cudaReadModeElementType> t, float x, float y)
# 995 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 999 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1001 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned char tex2D(texture< unsigned char, 2, cudaReadModeElementType> t, float x, float y)
# 1002 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1006 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1008 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char1 tex2D(texture< char1, 2, cudaReadModeElementType> t, float x, float y)
# 1009 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1013 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1015 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uchar1 tex2D(texture< uchar1, 2, cudaReadModeElementType> t, float x, float y)
# 1016 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1020 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1022 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char2 tex2D(texture< char2, 2, cudaReadModeElementType> t, float x, float y)
# 1023 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1027 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1029 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uchar2 tex2D(texture< uchar2, 2, cudaReadModeElementType> t, float x, float y)
# 1030 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1034 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1036 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char4 tex2D(texture< char4, 2, cudaReadModeElementType> t, float x, float y)
# 1037 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1041 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1043 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uchar4 tex2D(texture< uchar4, 2, cudaReadModeElementType> t, float x, float y)
# 1044 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1048 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1056 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short tex2D(texture< short, 2, cudaReadModeElementType> t, float x, float y)
# 1057 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1061 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1063 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned short tex2D(texture< unsigned short, 2, cudaReadModeElementType> t, float x, float y)
# 1064 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1068 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1070 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short1 tex2D(texture< short1, 2, cudaReadModeElementType> t, float x, float y)
# 1071 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1075 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1077 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ushort1 tex2D(texture< ushort1, 2, cudaReadModeElementType> t, float x, float y)
# 1078 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1082 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1084 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short2 tex2D(texture< short2, 2, cudaReadModeElementType> t, float x, float y)
# 1085 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1089 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1091 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ushort2 tex2D(texture< ushort2, 2, cudaReadModeElementType> t, float x, float y)
# 1092 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1096 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1098 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short4 tex2D(texture< short4, 2, cudaReadModeElementType> t, float x, float y)
# 1099 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1103 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1105 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ushort4 tex2D(texture< ushort4, 2, cudaReadModeElementType> t, float x, float y)
# 1106 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1110 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1118 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int tex2D(texture< int, 2, cudaReadModeElementType> t, float x, float y)
# 1119 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1123 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1125 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned tex2D(texture< unsigned, 2, cudaReadModeElementType> t, float x, float y)
# 1126 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1130 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1132 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int1 tex2D(texture< int1, 2, cudaReadModeElementType> t, float x, float y)
# 1133 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1137 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1139 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uint1 tex2D(texture< uint1, 2, cudaReadModeElementType> t, float x, float y)
# 1140 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1144 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1146 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int2 tex2D(texture< int2, 2, cudaReadModeElementType> t, float x, float y)
# 1147 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1151 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1153 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uint2 tex2D(texture< uint2, 2, cudaReadModeElementType> t, float x, float y)
# 1154 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1158 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1160 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int4 tex2D(texture< int4, 2, cudaReadModeElementType> t, float x, float y)
# 1161 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1165 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1167 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uint4 tex2D(texture< uint4, 2, cudaReadModeElementType> t, float x, float y)
# 1168 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1172 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1182 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long tex2D(texture< long, 2, cudaReadModeElementType> t, float x, float y)
# 1183 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1187 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1189 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned long tex2D(texture< unsigned long, 2, cudaReadModeElementType> t, float x, float y)
# 1190 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1194 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1196 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long1 tex2D(texture< long1, 2, cudaReadModeElementType> t, float x, float y)
# 1197 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1201 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1203 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ulong1 tex2D(texture< ulong1, 2, cudaReadModeElementType> t, float x, float y)
# 1204 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1208 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1210 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long2 tex2D(texture< long2, 2, cudaReadModeElementType> t, float x, float y)
# 1211 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1215 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1217 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ulong2 tex2D(texture< ulong2, 2, cudaReadModeElementType> t, float x, float y)
# 1218 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1222 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1224 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long4 tex2D(texture< long4, 2, cudaReadModeElementType> t, float x, float y)
# 1225 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1229 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1231 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ulong4 tex2D(texture< ulong4, 2, cudaReadModeElementType> t, float x, float y)
# 1232 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1236 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1246 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex2D(texture< float, 2, cudaReadModeElementType> t, float x, float y)
# 1247 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1251 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1253 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex2D(texture< float1, 2, cudaReadModeElementType> t, float x, float y)
# 1254 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1258 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1260 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex2D(texture< float2, 2, cudaReadModeElementType> t, float x, float y)
# 1261 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1265 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1267 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex2D(texture< float4, 2, cudaReadModeElementType> t, float x, float y)
# 1268 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1272 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1280 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex2D(texture< char, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1281 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1290 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1292 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex2D(texture< signed char, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1293 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1298 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1300 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex2D(texture< unsigned char, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1301 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1306 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1308 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex2D(texture< char1, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1309 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1314 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1316 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex2D(texture< uchar1, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1317 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1322 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1324 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex2D(texture< char2, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1325 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1330 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1332 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex2D(texture< uchar2, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1333 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1338 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1340 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex2D(texture< char4, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1341 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1346 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1348 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex2D(texture< uchar4, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1349 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1354 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1362 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex2D(texture< short, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1363 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1368 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1370 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex2D(texture< unsigned short, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1371 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1376 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1378 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex2D(texture< short1, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1379 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1384 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1386 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex2D(texture< ushort1, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1387 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1392 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1394 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex2D(texture< short2, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1395 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1400 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1402 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex2D(texture< ushort2, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1403 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1408 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1410 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex2D(texture< short4, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1411 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1416 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1418 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex2D(texture< ushort4, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1419 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1424 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1432 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char tex3D(texture< char, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1433 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1441 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1443 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline signed char tex3D(texture< signed char, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1444 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1448 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1450 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned char tex3D(texture< unsigned char, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1451 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1455 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1457 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char1 tex3D(texture< char1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1458 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1462 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1464 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uchar1 tex3D(texture< uchar1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1465 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1469 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1471 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char2 tex3D(texture< char2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1472 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1476 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1478 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uchar2 tex3D(texture< uchar2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1479 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1483 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1485 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline char4 tex3D(texture< char4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1486 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1490 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1492 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uchar4 tex3D(texture< uchar4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1493 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1497 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1505 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short tex3D(texture< short, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1506 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1510 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1512 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned short tex3D(texture< unsigned short, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1513 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1517 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1519 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short1 tex3D(texture< short1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1520 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1524 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1526 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ushort1 tex3D(texture< ushort1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1527 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1531 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1533 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short2 tex3D(texture< short2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1534 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1538 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1540 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ushort2 tex3D(texture< ushort2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1541 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1545 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1547 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline short4 tex3D(texture< short4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1548 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1552 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1554 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ushort4 tex3D(texture< ushort4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1555 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1559 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1567 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int tex3D(texture< int, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1568 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1572 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1574 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned tex3D(texture< unsigned, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1575 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1579 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1581 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int1 tex3D(texture< int1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1582 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1586 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1588 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uint1 tex3D(texture< uint1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1589 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1593 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1595 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int2 tex3D(texture< int2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1596 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1600 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1602 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uint2 tex3D(texture< uint2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1603 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1607 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1609 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline int4 tex3D(texture< int4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1610 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1614 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1616 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline uint4 tex3D(texture< uint4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1617 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1621 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1631 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long tex3D(texture< long, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1632 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1636 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1638 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline unsigned long tex3D(texture< unsigned long, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1639 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1643 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1645 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long1 tex3D(texture< long1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1646 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1650 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1652 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ulong1 tex3D(texture< ulong1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1653 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1657 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1659 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long2 tex3D(texture< long2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1660 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1664 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1666 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ulong2 tex3D(texture< ulong2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1667 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1671 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1673 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline long4 tex3D(texture< long4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1674 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1678 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1680 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline ulong4 tex3D(texture< ulong4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1681 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1685 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1695 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex3D(texture< float, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1696 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1700 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1702 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex3D(texture< float1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1703 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1707 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1709 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex3D(texture< float2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1710 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1714 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1716 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex3D(texture< float4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1717 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1721 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1729 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex3D(texture< char, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1730 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1739 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1741 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex3D(texture< signed char, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1742 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1747 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1749 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex3D(texture< unsigned char, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1750 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1755 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1757 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex3D(texture< char1, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1758 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1763 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1765 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex3D(texture< uchar1, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1766 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1771 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1773 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex3D(texture< char2, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1774 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1779 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1781 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex3D(texture< uchar2, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1782 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1787 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1789 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex3D(texture< char4, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1790 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1795 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1797 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex3D(texture< uchar4, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1798 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1803 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1811 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex3D(texture< short, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1812 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1817 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1819 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float tex3D(texture< unsigned short, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1820 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1825 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1827 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex3D(texture< short1, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1828 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1833 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1835 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float1 tex3D(texture< ushort1, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1836 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1841 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1843 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex3D(texture< short2, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1844 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1849 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1851 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float2 tex3D(texture< ushort2, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1852 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1857 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1859 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex3D(texture< short4, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1860 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1865 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1867 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
static inline float4 tex3D(texture< ushort4, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1868 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{volatile int ___ = 1;
# 1873 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 53 "/usr/local/cuda/bin/../include/device_launch_parameters.h"
# 55 "/usr/local/cuda/bin/../include/device_launch_parameters.h"
# 57 "/usr/local/cuda/bin/../include/device_launch_parameters.h"
# 59 "/usr/local/cuda/bin/../include/device_launch_parameters.h"
# 61 "/usr/local/cuda/bin/../include/device_launch_parameters.h"
# 101 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 102 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaSetupArgument(T
# 103 "/usr/local/cuda/bin/../include/cuda_runtime.h"
arg, size_t
# 104 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset)
# 106 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 107 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaSetupArgument((const void *)(&arg), sizeof(T), offset);
# 108 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 110 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 111 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaHostAlloc(T **
# 112 "/usr/local/cuda/bin/../include/cuda_runtime.h"
ptr, size_t
# 113 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size, unsigned
# 114 "/usr/local/cuda/bin/../include/cuda_runtime.h"
flags)
# 116 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 117 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaHostAlloc((void **)((void *)ptr), size, flags);
# 118 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 120 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 121 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaHostGetDevicePointer(T **
# 122 "/usr/local/cuda/bin/../include/cuda_runtime.h"
pDevice, void *
# 123 "/usr/local/cuda/bin/../include/cuda_runtime.h"
pHost, unsigned
# 124 "/usr/local/cuda/bin/../include/cuda_runtime.h"
flags)
# 126 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 127 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags);
# 128 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 130 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 131 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMalloc(T **
# 132 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, size_t
# 133 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size)
# 135 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 136 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMalloc((void **)((void *)devPtr), size);
# 137 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 139 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 140 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMallocHost(T **
# 141 "/usr/local/cuda/bin/../include/cuda_runtime.h"
ptr, size_t
# 142 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size)
# 144 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 145 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMallocHost((void **)((void *)ptr), size);
# 146 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 148 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 149 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMallocPitch(T **
# 150 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, size_t *
# 151 "/usr/local/cuda/bin/../include/cuda_runtime.h"
pitch, size_t
# 152 "/usr/local/cuda/bin/../include/cuda_runtime.h"
width, size_t
# 153 "/usr/local/cuda/bin/../include/cuda_runtime.h"
height)
# 155 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 156 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMallocPitch((void **)((void *)devPtr), pitch, width, height);
# 157 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 172 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyToSymbol(char *
# 173 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 174 "/usr/local/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 175 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 176 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 177 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice)
# 179 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 180 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbol((const char *)symbol, src, count, offset, kind);
# 181 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 183 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 184 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyToSymbol(const T &
# 185 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 186 "/usr/local/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 187 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 188 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 189 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice)
# 191 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 192 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbol((const char *)(&symbol), src, count, offset, kind);
# 193 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 195 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyToSymbolAsync(char *
# 196 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 197 "/usr/local/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 198 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 199 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 200 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice, cudaStream_t
# 201 "/usr/local/cuda/bin/../include/cuda_runtime.h"
stream = 0)
# 203 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 204 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbolAsync((const char *)symbol, src, count, offset, kind, stream);
# 205 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 207 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 208 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyToSymbolAsync(const T &
# 209 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 210 "/usr/local/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 211 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 212 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 213 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice, cudaStream_t
# 214 "/usr/local/cuda/bin/../include/cuda_runtime.h"
stream = 0)
# 216 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 217 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbolAsync((const char *)(&symbol), src, count, offset, kind, stream);
# 218 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 226 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyFromSymbol(void *
# 227 "/usr/local/cuda/bin/../include/cuda_runtime.h"
dst, char *
# 228 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 229 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 230 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 231 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost)
# 233 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 234 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbol(dst, (const char *)symbol, count, offset, kind);
# 235 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 237 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 238 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyFromSymbol(void *
# 239 "/usr/local/cuda/bin/../include/cuda_runtime.h"
dst, const T &
# 240 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 241 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 242 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 243 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost)
# 245 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 246 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbol(dst, (const char *)(&symbol), count, offset, kind);
# 247 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 249 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyFromSymbolAsync(void *
# 250 "/usr/local/cuda/bin/../include/cuda_runtime.h"
dst, char *
# 251 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 252 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 253 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 254 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost, cudaStream_t
# 255 "/usr/local/cuda/bin/../include/cuda_runtime.h"
stream = 0)
# 257 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 258 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbolAsync(dst, (const char *)symbol, count, offset, kind, stream);
# 259 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 261 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 262 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyFromSymbolAsync(void *
# 263 "/usr/local/cuda/bin/../include/cuda_runtime.h"
dst, const T &
# 264 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 265 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 266 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 267 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost, cudaStream_t
# 268 "/usr/local/cuda/bin/../include/cuda_runtime.h"
stream = 0)
# 270 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 271 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbolAsync(dst, (const char *)(&symbol), count, offset, kind, stream);
# 272 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 274 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaGetSymbolAddress(void **
# 275 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, char *
# 276 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol)
# 278 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 279 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolAddress(devPtr, (const char *)symbol);
# 280 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 304 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 305 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaGetSymbolAddress(void **
# 306 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, const T &
# 307 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol)
# 309 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 310 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolAddress(devPtr, (const char *)(&symbol));
# 311 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 319 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaGetSymbolSize(size_t *
# 320 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size, char *
# 321 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol)
# 323 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 324 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolSize(size, (const char *)symbol);
# 325 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 348 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 349 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaGetSymbolSize(size_t *
# 350 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size, const T &
# 351 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol)
# 353 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 354 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolSize(size, (const char *)(&symbol));
# 355 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 404 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 405 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindTexture(size_t *
# 406 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 407 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex, const void *
# 408 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, const cudaChannelFormatDesc &
# 409 "/usr/local/cuda/bin/../include/cuda_runtime.h"
desc, size_t
# 410 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size = (((2147483647) * 2U) + 1U))
# 412 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 413 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaBindTexture(offset, &tex, devPtr, &desc, size);
# 414 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 448 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 449 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindTexture(size_t *
# 450 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 451 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex, const void *
# 452 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, size_t
# 453 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size = (((2147483647) * 2U) + 1U))
# 455 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 456 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaBindTexture(offset, tex, devPtr, (tex.texture< T, dim, readMode> ::channelDesc), size);
# 457 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 503 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 504 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindTexture2D(size_t *
# 505 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 506 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex, const void *
# 507 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, const cudaChannelFormatDesc &
# 508 "/usr/local/cuda/bin/../include/cuda_runtime.h"
desc, size_t
# 509 "/usr/local/cuda/bin/../include/cuda_runtime.h"
width, size_t
# 510 "/usr/local/cuda/bin/../include/cuda_runtime.h"
height, size_t
# 511 "/usr/local/cuda/bin/../include/cuda_runtime.h"
pitch)
# 513 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 514 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
# 515 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 545 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 546 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode> &
# 547 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex, const cudaArray *
# 548 "/usr/local/cuda/bin/../include/cuda_runtime.h"
array, const cudaChannelFormatDesc &
# 549 "/usr/local/cuda/bin/../include/cuda_runtime.h"
desc)
# 551 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 552 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaBindTextureToArray(&tex, array, &desc);
# 553 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 582 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 583 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode> &
# 584 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex, const cudaArray *
# 585 "/usr/local/cuda/bin/../include/cuda_runtime.h"
array)
# 587 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 588 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaChannelFormatDesc desc;
# 589 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaError_t err = cudaGetChannelDesc(&desc, array);
# 591 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err;
# 592 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 620 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 621 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaUnbindTexture(const texture< T, dim, readMode> &
# 622 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex)
# 624 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 625 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaUnbindTexture(&tex);
# 626 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 659 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 660 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaGetTextureAlignmentOffset(size_t *
# 661 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 662 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex)
# 664 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 665 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaGetTextureAlignmentOffset(offset, &tex);
# 666 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 716 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 717 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaFuncSetCacheConfig(T *
# 718 "/usr/local/cuda/bin/../include/cuda_runtime.h"
func, cudaFuncCache
# 719 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cacheConfig)
# 721 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 722 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaFuncSetCacheConfig((const char *)func, cacheConfig);
# 723 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 758 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 759 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaLaunch(T *
# 760 "/usr/local/cuda/bin/../include/cuda_runtime.h"
entry)
# 762 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 763 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaLaunch((const char *)entry);
# 764 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 795 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template<class T> inline cudaError_t
# 796 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaFuncGetAttributes(cudaFuncAttributes *
# 797 "/usr/local/cuda/bin/../include/cuda_runtime.h"
attr, T *
# 798 "/usr/local/cuda/bin/../include/cuda_runtime.h"
entry)
# 800 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 801 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaFuncGetAttributes(attr, (const char *)entry);
# 802 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 62 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef unsigned CUdeviceptr; }
# 64 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef int CUdevice; }
# 65 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUctx_st *CUcontext; }
# 66 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUmod_st *CUmodule; }
# 67 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUfunc_st *CUfunction; }
# 68 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUarray_st *CUarray; }
# 69 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUtexref_st *CUtexref; }
# 70 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUevent_st *CUevent; }
# 71 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUstream_st *CUstream; }
# 72 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef struct CUgraphicsResource_st *CUgraphicsResource; }
# 76 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 74 "/usr/local/cuda/bin/../include/cuda.h"
struct CUuuid_st {
# 75 "/usr/local/cuda/bin/../include/cuda.h"
char bytes[16];
# 76 "/usr/local/cuda/bin/../include/cuda.h"
} CUuuid; }
# 96 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 87 "/usr/local/cuda/bin/../include/cuda.h"
enum CUctx_flags_enum {
# 88 "/usr/local/cuda/bin/../include/cuda.h"
CU_CTX_SCHED_AUTO,
# 89 "/usr/local/cuda/bin/../include/cuda.h"
CU_CTX_SCHED_SPIN,
# 90 "/usr/local/cuda/bin/../include/cuda.h"
CU_CTX_SCHED_YIELD,
# 91 "/usr/local/cuda/bin/../include/cuda.h"
CU_CTX_SCHED_MASK,
# 92 "/usr/local/cuda/bin/../include/cuda.h"
CU_CTX_BLOCKING_SYNC,
# 93 "/usr/local/cuda/bin/../include/cuda.h"
CU_CTX_MAP_HOST = 8,
# 94 "/usr/local/cuda/bin/../include/cuda.h"
CU_CTX_LMEM_RESIZE_TO_MAX = 16,
# 95 "/usr/local/cuda/bin/../include/cuda.h"
CU_CTX_FLAGS_MASK = 31
# 96 "/usr/local/cuda/bin/../include/cuda.h"
} CUctx_flags; }
# 104 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 101 "/usr/local/cuda/bin/../include/cuda.h"
enum CUevent_flags_enum {
# 102 "/usr/local/cuda/bin/../include/cuda.h"
CU_EVENT_DEFAULT,
# 103 "/usr/local/cuda/bin/../include/cuda.h"
CU_EVENT_BLOCKING_SYNC
# 104 "/usr/local/cuda/bin/../include/cuda.h"
} CUevent_flags; }
# 118 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 109 "/usr/local/cuda/bin/../include/cuda.h"
enum CUarray_format_enum {
# 110 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_UNSIGNED_INT8 = 1,
# 111 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_UNSIGNED_INT16,
# 112 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_UNSIGNED_INT32,
# 113 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_SIGNED_INT8 = 8,
# 114 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_SIGNED_INT16,
# 115 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_SIGNED_INT32,
# 116 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_HALF = 16,
# 117 "/usr/local/cuda/bin/../include/cuda.h"
CU_AD_FORMAT_FLOAT = 32
# 118 "/usr/local/cuda/bin/../include/cuda.h"
} CUarray_format; }
# 127 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 123 "/usr/local/cuda/bin/../include/cuda.h"
enum CUaddress_mode_enum {
# 124 "/usr/local/cuda/bin/../include/cuda.h"
CU_TR_ADDRESS_MODE_WRAP,
# 125 "/usr/local/cuda/bin/../include/cuda.h"
CU_TR_ADDRESS_MODE_CLAMP,
# 126 "/usr/local/cuda/bin/../include/cuda.h"
CU_TR_ADDRESS_MODE_MIRROR
# 127 "/usr/local/cuda/bin/../include/cuda.h"
} CUaddress_mode; }
# 135 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 132 "/usr/local/cuda/bin/../include/cuda.h"
enum CUfilter_mode_enum {
# 133 "/usr/local/cuda/bin/../include/cuda.h"
CU_TR_FILTER_MODE_POINT,
# 134 "/usr/local/cuda/bin/../include/cuda.h"
CU_TR_FILTER_MODE_LINEAR
# 135 "/usr/local/cuda/bin/../include/cuda.h"
} CUfilter_mode; }
# 176 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 140 "/usr/local/cuda/bin/../include/cuda.h"
enum CUdevice_attribute_enum {
# 141 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,
# 142 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X,
# 143 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y,
# 144 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z,
# 145 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X,
# 146 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y,
# 147 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z,
# 148 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK,
# 149 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,
# 150 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY,
# 151 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_WARP_SIZE,
# 152 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_PITCH,
# 153 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK,
# 154 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12,
# 155 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_CLOCK_RATE,
# 156 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT,
# 158 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_GPU_OVERLAP,
# 159 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT,
# 160 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT,
# 161 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_INTEGRATED,
# 162 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY,
# 163 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_COMPUTE_MODE,
# 164 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH,
# 165 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH,
# 166 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT,
# 167 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH,
# 168 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT,
# 169 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH,
# 170 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH,
# 171 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT,
# 172 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES,
# 173 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT,
# 174 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS,
# 175 "/usr/local/cuda/bin/../include/cuda.h"
CU_DEVICE_ATTRIBUTE_ECC_ENABLED
# 176 "/usr/local/cuda/bin/../include/cuda.h"
} CUdevice_attribute; }
# 192 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 181 "/usr/local/cuda/bin/../include/cuda.h"
struct CUdevprop_st {
# 182 "/usr/local/cuda/bin/../include/cuda.h"
int maxThreadsPerBlock;
# 183 "/usr/local/cuda/bin/../include/cuda.h"
int maxThreadsDim[3];
# 184 "/usr/local/cuda/bin/../include/cuda.h"
int maxGridSize[3];
# 185 "/usr/local/cuda/bin/../include/cuda.h"
int sharedMemPerBlock;
# 186 "/usr/local/cuda/bin/../include/cuda.h"
int totalConstantMemory;
# 187 "/usr/local/cuda/bin/../include/cuda.h"
int SIMDWidth;
# 188 "/usr/local/cuda/bin/../include/cuda.h"
int memPitch;
# 189 "/usr/local/cuda/bin/../include/cuda.h"
int regsPerBlock;
# 190 "/usr/local/cuda/bin/../include/cuda.h"
int clockRate;
# 191 "/usr/local/cuda/bin/../include/cuda.h"
int textureAlign;
# 192 "/usr/local/cuda/bin/../include/cuda.h"
} CUdevprop; }
# 239 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 197 "/usr/local/cuda/bin/../include/cuda.h"
enum CUfunction_attribute_enum {
# 203 "/usr/local/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK,
# 210 "/usr/local/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES,
# 216 "/usr/local/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES,
# 221 "/usr/local/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES,
# 226 "/usr/local/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_NUM_REGS,
# 231 "/usr/local/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_PTX_VERSION,
# 236 "/usr/local/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_BINARY_VERSION,
# 238 "/usr/local/cuda/bin/../include/cuda.h"
CU_FUNC_ATTRIBUTE_MAX
# 239 "/usr/local/cuda/bin/../include/cuda.h"
} CUfunction_attribute; }
# 248 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 244 "/usr/local/cuda/bin/../include/cuda.h"
enum CUfunc_cache_enum {
# 245 "/usr/local/cuda/bin/../include/cuda.h"
CU_FUNC_CACHE_PREFER_NONE,
# 246 "/usr/local/cuda/bin/../include/cuda.h"
CU_FUNC_CACHE_PREFER_SHARED,
# 247 "/usr/local/cuda/bin/../include/cuda.h"
CU_FUNC_CACHE_PREFER_L1
# 248 "/usr/local/cuda/bin/../include/cuda.h"
} CUfunc_cache; }
# 257 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 253 "/usr/local/cuda/bin/../include/cuda.h"
enum CUmemorytype_enum {
# 254 "/usr/local/cuda/bin/../include/cuda.h"
CU_MEMORYTYPE_HOST = 1,
# 255 "/usr/local/cuda/bin/../include/cuda.h"
CU_MEMORYTYPE_DEVICE,
# 256 "/usr/local/cuda/bin/../include/cuda.h"
CU_MEMORYTYPE_ARRAY
# 257 "/usr/local/cuda/bin/../include/cuda.h"
} CUmemorytype; }
# 266 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 262 "/usr/local/cuda/bin/../include/cuda.h"
enum CUcomputemode_enum {
# 263 "/usr/local/cuda/bin/../include/cuda.h"
CU_COMPUTEMODE_DEFAULT,
# 264 "/usr/local/cuda/bin/../include/cuda.h"
CU_COMPUTEMODE_EXCLUSIVE,
# 265 "/usr/local/cuda/bin/../include/cuda.h"
CU_COMPUTEMODE_PROHIBITED
# 266 "/usr/local/cuda/bin/../include/cuda.h"
} CUcomputemode; }
# 358 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 271 "/usr/local/cuda/bin/../include/cuda.h"
enum CUjit_option_enum {
# 277 "/usr/local/cuda/bin/../include/cuda.h"
CU_JIT_MAX_REGISTERS,
# 290 "/usr/local/cuda/bin/../include/cuda.h"
CU_JIT_THREADS_PER_BLOCK,
# 297 "/usr/local/cuda/bin/../include/cuda.h"
CU_JIT_WALL_TIME,
# 305 "/usr/local/cuda/bin/../include/cuda.h"
CU_JIT_INFO_LOG_BUFFER,
# 313 "/usr/local/cuda/bin/../include/cuda.h"
CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,
# 321 "/usr/local/cuda/bin/../include/cuda.h"
CU_JIT_ERROR_LOG_BUFFER,
# 329 "/usr/local/cuda/bin/../include/cuda.h"
CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,
# 336 "/usr/local/cuda/bin/../include/cuda.h"
CU_JIT_OPTIMIZATION_LEVEL,
# 343 "/usr/local/cuda/bin/../include/cuda.h"
CU_JIT_TARGET_FROM_CUCONTEXT,
# 349 "/usr/local/cuda/bin/../include/cuda.h"
CU_JIT_TARGET,
# 356 "/usr/local/cuda/bin/../include/cuda.h"
CU_JIT_FALLBACK_STRATEGY
# 358 "/usr/local/cuda/bin/../include/cuda.h"
} CUjit_option; }
# 370 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 363 "/usr/local/cuda/bin/../include/cuda.h"
enum CUjit_target_enum {
# 365 "/usr/local/cuda/bin/../include/cuda.h"
CU_TARGET_COMPUTE_10,
# 366 "/usr/local/cuda/bin/../include/cuda.h"
CU_TARGET_COMPUTE_11,
# 367 "/usr/local/cuda/bin/../include/cuda.h"
CU_TARGET_COMPUTE_12,
# 368 "/usr/local/cuda/bin/../include/cuda.h"
CU_TARGET_COMPUTE_13,
# 369 "/usr/local/cuda/bin/../include/cuda.h"
CU_TARGET_COMPUTE_20
# 370 "/usr/local/cuda/bin/../include/cuda.h"
} CUjit_target; }
# 383 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 375 "/usr/local/cuda/bin/../include/cuda.h"
enum CUjit_fallback_enum {
# 378 "/usr/local/cuda/bin/../include/cuda.h"
CU_PREFER_PTX,
# 381 "/usr/local/cuda/bin/../include/cuda.h"
CU_PREFER_BINARY
# 383 "/usr/local/cuda/bin/../include/cuda.h"
} CUjit_fallback; }
# 390 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 388 "/usr/local/cuda/bin/../include/cuda.h"
enum CUgraphicsRegisterFlags_enum {
# 389 "/usr/local/cuda/bin/../include/cuda.h"
CU_GRAPHICS_REGISTER_FLAGS_NONE
# 390 "/usr/local/cuda/bin/../include/cuda.h"
} CUgraphicsRegisterFlags; }
# 399 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 395 "/usr/local/cuda/bin/../include/cuda.h"
enum CUgraphicsMapResourceFlags_enum {
# 396 "/usr/local/cuda/bin/../include/cuda.h"
CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE,
# 397 "/usr/local/cuda/bin/../include/cuda.h"
CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY,
# 398 "/usr/local/cuda/bin/../include/cuda.h"
CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD
# 399 "/usr/local/cuda/bin/../include/cuda.h"
} CUgraphicsMapResourceFlags; }
# 411 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 404 "/usr/local/cuda/bin/../include/cuda.h"
enum CUarray_cubemap_face_enum {
# 405 "/usr/local/cuda/bin/../include/cuda.h"
CU_CUBEMAP_FACE_POSITIVE_X,
# 406 "/usr/local/cuda/bin/../include/cuda.h"
CU_CUBEMAP_FACE_NEGATIVE_X,
# 407 "/usr/local/cuda/bin/../include/cuda.h"
CU_CUBEMAP_FACE_POSITIVE_Y,
# 408 "/usr/local/cuda/bin/../include/cuda.h"
CU_CUBEMAP_FACE_NEGATIVE_Y,
# 409 "/usr/local/cuda/bin/../include/cuda.h"
CU_CUBEMAP_FACE_POSITIVE_Z,
# 410 "/usr/local/cuda/bin/../include/cuda.h"
CU_CUBEMAP_FACE_NEGATIVE_Z
# 411 "/usr/local/cuda/bin/../include/cuda.h"
} CUarray_cubemap_face; }
# 465 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 422 "/usr/local/cuda/bin/../include/cuda.h"
enum cudaError_enum {
# 424 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_SUCCESS,
# 425 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_VALUE,
# 426 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_OUT_OF_MEMORY,
# 427 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_INITIALIZED,
# 428 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_DEINITIALIZED,
# 430 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_NO_DEVICE = 100,
# 431 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_DEVICE,
# 433 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_IMAGE = 200,
# 434 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_CONTEXT,
# 435 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_CONTEXT_ALREADY_CURRENT,
# 436 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_MAP_FAILED = 205,
# 437 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_UNMAP_FAILED,
# 438 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_ARRAY_IS_MAPPED,
# 439 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_ALREADY_MAPPED,
# 440 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_NO_BINARY_FOR_GPU,
# 441 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_ALREADY_ACQUIRED,
# 442 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_MAPPED,
# 443 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_MAPPED_AS_ARRAY,
# 444 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_MAPPED_AS_POINTER,
# 445 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_ECC_UNCORRECTABLE,
# 447 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_SOURCE = 300,
# 448 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_FILE_NOT_FOUND,
# 450 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_INVALID_HANDLE = 400,
# 452 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_FOUND = 500,
# 454 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_NOT_READY = 600,
# 456 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_LAUNCH_FAILED = 700,
# 457 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES,
# 458 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_LAUNCH_TIMEOUT,
# 459 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING,
# 461 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_POINTER_IS_64BIT = 800,
# 462 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_SIZE_IS_64BIT,
# 464 "/usr/local/cuda/bin/../include/cuda.h"
CUDA_ERROR_UNKNOWN = 999
# 465 "/usr/local/cuda/bin/../include/cuda.h"
} CUresult; }
# 511 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 491 "/usr/local/cuda/bin/../include/cuda.h"
struct CUDA_MEMCPY2D_st {
# 493 "/usr/local/cuda/bin/../include/cuda.h"
unsigned srcXInBytes,
# 494 "/usr/local/cuda/bin/../include/cuda.h"
srcY;
# 495 "/usr/local/cuda/bin/../include/cuda.h"
CUmemorytype srcMemoryType;
# 496 "/usr/local/cuda/bin/../include/cuda.h"
const void *srcHost;
# 497 "/usr/local/cuda/bin/../include/cuda.h"
CUdeviceptr srcDevice;
# 498 "/usr/local/cuda/bin/../include/cuda.h"
CUarray srcArray;
# 499 "/usr/local/cuda/bin/../include/cuda.h"
unsigned srcPitch;
# 501 "/usr/local/cuda/bin/../include/cuda.h"
unsigned dstXInBytes,
# 502 "/usr/local/cuda/bin/../include/cuda.h"
dstY;
# 503 "/usr/local/cuda/bin/../include/cuda.h"
CUmemorytype dstMemoryType;
# 504 "/usr/local/cuda/bin/../include/cuda.h"
void *dstHost;
# 505 "/usr/local/cuda/bin/../include/cuda.h"
CUdeviceptr dstDevice;
# 506 "/usr/local/cuda/bin/../include/cuda.h"
CUarray dstArray;
# 507 "/usr/local/cuda/bin/../include/cuda.h"
unsigned dstPitch;
# 509 "/usr/local/cuda/bin/../include/cuda.h"
unsigned WidthInBytes;
# 510 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Height;
# 511 "/usr/local/cuda/bin/../include/cuda.h"
} CUDA_MEMCPY2D; }
# 545 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 516 "/usr/local/cuda/bin/../include/cuda.h"
struct CUDA_MEMCPY3D_st {
# 518 "/usr/local/cuda/bin/../include/cuda.h"
unsigned srcXInBytes,
# 519 "/usr/local/cuda/bin/../include/cuda.h"
srcY,
# 520 "/usr/local/cuda/bin/../include/cuda.h"
srcZ;
# 521 "/usr/local/cuda/bin/../include/cuda.h"
unsigned srcLOD;
# 522 "/usr/local/cuda/bin/../include/cuda.h"
CUmemorytype srcMemoryType;
# 523 "/usr/local/cuda/bin/../include/cuda.h"
const void *srcHost;
# 524 "/usr/local/cuda/bin/../include/cuda.h"
CUdeviceptr srcDevice;
# 525 "/usr/local/cuda/bin/../include/cuda.h"
CUarray srcArray;
# 526 "/usr/local/cuda/bin/../include/cuda.h"
void *reserved0;
# 527 "/usr/local/cuda/bin/../include/cuda.h"
unsigned srcPitch;
# 528 "/usr/local/cuda/bin/../include/cuda.h"
unsigned srcHeight;
# 530 "/usr/local/cuda/bin/../include/cuda.h"
unsigned dstXInBytes,
# 531 "/usr/local/cuda/bin/../include/cuda.h"
dstY,
# 532 "/usr/local/cuda/bin/../include/cuda.h"
dstZ;
# 533 "/usr/local/cuda/bin/../include/cuda.h"
unsigned dstLOD;
# 534 "/usr/local/cuda/bin/../include/cuda.h"
CUmemorytype dstMemoryType;
# 535 "/usr/local/cuda/bin/../include/cuda.h"
void *dstHost;
# 536 "/usr/local/cuda/bin/../include/cuda.h"
CUdeviceptr dstDevice;
# 537 "/usr/local/cuda/bin/../include/cuda.h"
CUarray dstArray;
# 538 "/usr/local/cuda/bin/../include/cuda.h"
void *reserved1;
# 539 "/usr/local/cuda/bin/../include/cuda.h"
unsigned dstPitch;
# 540 "/usr/local/cuda/bin/../include/cuda.h"
unsigned dstHeight;
# 542 "/usr/local/cuda/bin/../include/cuda.h"
unsigned WidthInBytes;
# 543 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Height;
# 544 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Depth;
# 545 "/usr/local/cuda/bin/../include/cuda.h"
} CUDA_MEMCPY3D; }
# 558 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 551 "/usr/local/cuda/bin/../include/cuda.h"
struct {
# 552 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Width;
# 553 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Height;
# 555 "/usr/local/cuda/bin/../include/cuda.h"
CUarray_format Format;
# 557 "/usr/local/cuda/bin/../include/cuda.h"
unsigned NumChannels;
# 558 "/usr/local/cuda/bin/../include/cuda.h"
} CUDA_ARRAY_DESCRIPTOR; }
# 574 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" { typedef
# 564 "/usr/local/cuda/bin/../include/cuda.h"
struct {
# 565 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Width;
# 566 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Height;
# 567 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Depth;
# 569 "/usr/local/cuda/bin/../include/cuda.h"
CUarray_format Format;
# 571 "/usr/local/cuda/bin/../include/cuda.h"
unsigned NumChannels;
# 573 "/usr/local/cuda/bin/../include/cuda.h"
unsigned Flags;
# 574 "/usr/local/cuda/bin/../include/cuda.h"
} CUDA_ARRAY3D_DESCRIPTOR; }
# 618 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuInit(unsigned);
# 623 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDriverGetVersion(int *);
# 631 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceGet(CUdevice *, int);
# 632 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceGetCount(int *);
# 633 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceGetName(char *, int, CUdevice);
# 634 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceComputeCapability(int *, int *, CUdevice);
# 635 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceTotalMem(unsigned *, CUdevice);
# 636 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceGetProperties(CUdevprop *, CUdevice);
# 637 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuDeviceGetAttribute(int *, CUdevice_attribute, CUdevice);
# 645 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxCreate(CUcontext *, unsigned, CUdevice);
# 646 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxDestroy(CUcontext);
# 647 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxAttach(CUcontext *, unsigned);
# 648 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxDetach(CUcontext);
# 649 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxPushCurrent(CUcontext);
# 650 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxPopCurrent(CUcontext *);
# 651 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxGetDevice(CUdevice *);
# 652 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuCtxSynchronize();
# 661 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleLoad(CUmodule *, const char *);
# 662 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleLoadData(CUmodule *, const void *);
# 663 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleLoadDataEx(CUmodule *, const void *, unsigned, CUjit_option *, void **);
# 664 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleLoadFatBinary(CUmodule *, const void *);
# 665 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleUnload(CUmodule);
# 666 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleGetFunction(CUfunction *, CUmodule, const char *);
# 667 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleGetGlobal(CUdeviceptr *, unsigned *, CUmodule, const char *);
# 668 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuModuleGetTexRef(CUtexref *, CUmodule, const char *);
# 676 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemGetInfo(unsigned *, unsigned *);
# 678 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemAlloc(CUdeviceptr *, unsigned);
# 679 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemAllocPitch(CUdeviceptr *, unsigned *, unsigned, unsigned, unsigned);
# 687 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemFree(CUdeviceptr);
# 688 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemGetAddressRange(CUdeviceptr *, unsigned *, CUdeviceptr);
# 690 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemAllocHost(void **, unsigned);
# 691 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemFreeHost(void *);
# 693 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemHostAlloc(void **, size_t, unsigned);
# 695 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemHostGetDevicePointer(CUdeviceptr *, void *, unsigned);
# 696 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemHostGetFlags(unsigned *, void *);
# 709 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyHtoD(CUdeviceptr, const void *, unsigned);
# 710 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyDtoH(void *, CUdeviceptr, unsigned);
# 713 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyDtoD(CUdeviceptr, CUdeviceptr, unsigned);
# 716 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyDtoA(CUarray, unsigned, CUdeviceptr, unsigned);
# 717 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyAtoD(CUdeviceptr, CUarray, unsigned, unsigned);
# 720 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyHtoA(CUarray, unsigned, const void *, unsigned);
# 721 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyAtoH(void *, CUarray, unsigned, unsigned);
# 724 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyAtoA(CUarray, unsigned, CUarray, unsigned, unsigned);
# 728 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpy2D(const CUDA_MEMCPY2D *);
# 729 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpy2DUnaligned(const CUDA_MEMCPY2D *);
# 733 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpy3D(const CUDA_MEMCPY3D *);
# 748 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyHtoDAsync(CUdeviceptr, const void *, unsigned, CUstream);
# 750 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyDtoHAsync(void *, CUdeviceptr, unsigned, CUstream);
# 754 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyDtoDAsync(CUdeviceptr, CUdeviceptr, unsigned, CUstream);
# 758 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyHtoAAsync(CUarray, unsigned, const void *, unsigned, CUstream);
# 760 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpyAtoHAsync(void *, CUarray, unsigned, unsigned, CUstream);
# 764 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpy2DAsync(const CUDA_MEMCPY2D *, CUstream);
# 767 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemcpy3DAsync(const CUDA_MEMCPY3D *, CUstream);
# 774 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD8(CUdeviceptr, unsigned char, unsigned);
# 775 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD16(CUdeviceptr, unsigned short, unsigned);
# 776 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD32(CUdeviceptr, unsigned, unsigned);
# 778 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD2D8(CUdeviceptr, unsigned, unsigned char, unsigned, unsigned);
# 779 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD2D16(CUdeviceptr, unsigned, unsigned short, unsigned, unsigned);
# 780 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuMemsetD2D32(CUdeviceptr, unsigned, unsigned, unsigned, unsigned);
# 789 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuFuncSetBlockShape(CUfunction, int, int, int);
# 790 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuFuncSetSharedSize(CUfunction, unsigned);
# 791 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuFuncGetAttribute(int *, CUfunction_attribute, CUfunction);
# 792 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuFuncSetCacheConfig(CUfunction, CUfunc_cache);
# 800 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuArrayCreate(CUarray *, const CUDA_ARRAY_DESCRIPTOR *);
# 801 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuArrayGetDescriptor(CUDA_ARRAY_DESCRIPTOR *, CUarray);
# 802 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuArrayDestroy(CUarray);
# 804 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuArray3DCreate(CUarray *, const CUDA_ARRAY3D_DESCRIPTOR *);
# 805 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuArray3DGetDescriptor(CUDA_ARRAY3D_DESCRIPTOR *, CUarray);
# 813 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefCreate(CUtexref *);
# 814 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefDestroy(CUtexref);
# 816 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetArray(CUtexref, CUarray, unsigned);
# 817 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetAddress(unsigned *, CUtexref, CUdeviceptr, unsigned);
# 818 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetAddress2D(CUtexref, const CUDA_ARRAY_DESCRIPTOR *, CUdeviceptr, unsigned);
# 819 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetFormat(CUtexref, CUarray_format, int);
# 820 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetAddressMode(CUtexref, int, CUaddress_mode);
# 821 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetFilterMode(CUtexref, CUfilter_mode);
# 822 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefSetFlags(CUtexref, unsigned);
# 824 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetAddress(CUdeviceptr *, CUtexref);
# 825 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetArray(CUarray *, CUtexref);
# 826 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetAddressMode(CUaddress_mode *, CUtexref, int);
# 827 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetFilterMode(CUfilter_mode *, CUtexref);
# 828 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetFormat(CUarray_format *, int *, CUtexref);
# 829 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuTexRefGetFlags(unsigned *, CUtexref);
# 837 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuParamSetSize(CUfunction, unsigned);
# 838 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuParamSeti(CUfunction, int, unsigned);
# 839 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuParamSetf(CUfunction, int, float);
# 840 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuParamSetv(CUfunction, int, void *, unsigned);
# 841 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuParamSetTexRef(CUfunction, int, CUtexref);
# 849 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuLaunch(CUfunction);
# 850 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuLaunchGrid(CUfunction, int, int);
# 851 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuLaunchGridAsync(CUfunction, int, int, CUstream);
# 858 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventCreate(CUevent *, unsigned);
# 859 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventRecord(CUevent, CUstream);
# 860 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventQuery(CUevent);
# 861 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventSynchronize(CUevent);
# 862 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventDestroy(CUevent);
# 863 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuEventElapsedTime(float *, CUevent, CUevent);
# 870 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuStreamCreate(CUstream *, unsigned);
# 871 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuStreamQuery(CUstream);
# 872 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuStreamSynchronize(CUstream);
# 873 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuStreamDestroy(CUstream);
# 880 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuGraphicsUnregisterResource(CUgraphicsResource);
# 881 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuGraphicsSubResourceGetMappedArray(CUarray *, CUgraphicsResource, unsigned, unsigned);
# 882 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuGraphicsResourceGetMappedPointer(CUdeviceptr *, unsigned *, CUgraphicsResource);
# 883 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuGraphicsResourceSetMapFlags(CUgraphicsResource, unsigned);
# 884 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuGraphicsMapResources(unsigned, CUgraphicsResource *, CUstream);
# 885 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuGraphicsUnmapResources(unsigned, CUgraphicsResource *, CUstream);
# 892 "/usr/local/cuda/bin/../include/cuda.h"
extern "C" CUresult cuGetExportTable(const void **, const CUuuid *);
# 27 "/home/normal/checkout/thrust/thrust/transform_reduce.h"
namespace thrust {
# 86 "/home/normal/checkout/thrust/thrust/transform_reduce.h"
template<class InputIterator, class
# 87 "/home/normal/checkout/thrust/thrust/transform_reduce.h"
UnaryFunction, class
# 88 "/home/normal/checkout/thrust/thrust/transform_reduce.h"
OutputType, class
# 89 "/home/normal/checkout/thrust/thrust/transform_reduce.h"
BinaryFunction> OutputType
# 86 "/home/normal/checkout/thrust/thrust/transform_reduce.h"
transform_reduce(InputIterator, InputIterator, UnaryFunction, OutputType, BinaryFunction);
# 100 "/home/normal/checkout/thrust/thrust/transform_reduce.h"
}
# 67 "/usr/include/c++/4.4/bits/stl_relops.h" 3
namespace std __attribute__((visibility("default"))) {
# 69 "/usr/include/c++/4.4/bits/stl_relops.h" 3
namespace rel_ops {
# 83 "/usr/include/c++/4.4/bits/stl_relops.h" 3
template < class _Tp >
      inline bool
      operator != ( const _Tp & __x, const _Tp & __y )
      { return ! ( __x == __y ); }
# 96 "/usr/include/c++/4.4/bits/stl_relops.h" 3
template < class _Tp >
      inline bool
      operator > ( const _Tp & __x, const _Tp & __y )
      { return __y < __x; }
# 109 "/usr/include/c++/4.4/bits/stl_relops.h" 3
template < class _Tp >
      inline bool
      operator <= ( const _Tp & __x, const _Tp & __y )
      { return ! ( __y < __x ); }
# 122 "/usr/include/c++/4.4/bits/stl_relops.h" 3
template < class _Tp >
      inline bool
      operator >= ( const _Tp & __x, const _Tp & __y )
      { return ! ( __x < __y ); }
# 127 "/usr/include/c++/4.4/bits/stl_relops.h" 3
}
# 129 "/usr/include/c++/4.4/bits/stl_relops.h" 3
}
# 66 "/usr/include/c++/4.4/bits/move.h" 3
namespace std __attribute__((visibility("default"))) {
# 74 "/usr/include/c++/4.4/bits/move.h" 3
template < typename _Tp >
    inline void
    swap ( _Tp & __a, _Tp & __b )
    {



      _Tp __tmp = ( __a );
      __a = ( __b );
      __b = ( __tmp );
    }
# 88 "/usr/include/c++/4.4/bits/move.h" 3
template < typename _Tp, size_t _Nm >
    inline void
    swap ( _Tp ( & __a ) [ _Nm ], _Tp ( & __b ) [ _Nm ] )
    {
      for ( size_t __n = 0; __n < _Nm; ++ __n )
 swap ( __a [ __n ], __b [ __n ] );
    }
# 96 "/usr/include/c++/4.4/bits/move.h" 3
}
# 63 "/usr/include/c++/4.4/bits/stl_pair.h" 3
namespace std __attribute__((visibility("default"))) {
# 66 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      pair ( )
      : first ( ), second ( ) { }


      pair ( const _T1 & __a, const _T2 & __b )
      : first ( __a ), second ( __b ) { }


      template < class _U1, class _U2 >
        pair ( const pair < _U1, _U2 > & __p )
 : first ( __p . first ),
   second ( __p . second ) { }

    };
# 144 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator == ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return __x . first == __y . first && __x . second == __y . second; }
# 150 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator < ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return __x . first < __y . first
      || ( ! ( __y . first < __x . first ) && __x . second < __y . second ); }
# 157 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator != ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return ! ( __x == __y ); }
# 163 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator > ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return __y < __x; }
# 169 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator <= ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return ! ( __y < __x ); }
# 175 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator >= ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return ! ( __x < __y ); }
# 213 "/usr/include/c++/4.4/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline pair < _T1, _T2 >
    make_pair ( _T1 __x, _T2 __y )
    { return pair < _T1, _T2 > ( __x, __y ); }
# 259 "/usr/include/c++/4.4/bits/stl_pair.h" 3
}
# 27 "/home/normal/checkout/thrust/thrust/pair.h"
namespace thrust {
# 45 "/home/normal/checkout/thrust/thrust/pair.h"
template<class T1, class T2>
# 46 "/home/normal/checkout/thrust/thrust/pair.h"
struct pair {
# 50 "/home/normal/checkout/thrust/thrust/pair.h"
typedef T1 first_type;
# 54 "/home/normal/checkout/thrust/thrust/pair.h"
typedef T2 second_type;
# 58 "/home/normal/checkout/thrust/thrust/pair.h"
first_type first;
# 62 "/home/normal/checkout/thrust/thrust/pair.h"
second_type second;
# 68 "/home/normal/checkout/thrust/thrust/pair.h"
inline pair();
# 76 "/home/normal/checkout/thrust/thrust/pair.h"
inline pair(const T1 &, const T2 &);
# 87 "/home/normal/checkout/thrust/thrust/pair.h"
template<class U1, class U2> inline pair(const thrust::pair< U1, U2> &);
# 100 "/home/normal/checkout/thrust/thrust/pair.h"
template<class U1, class U2> inline pair(const std::pair< U1, U2> &);
# 103 "/home/normal/checkout/thrust/thrust/pair.h"
};
# 115 "/home/normal/checkout/thrust/thrust/pair.h"
template<class T1, class T2> inline bool operator==(const pair< T1, T2> &, const pair< T1, T2> &);
# 129 "/home/normal/checkout/thrust/thrust/pair.h"
template<class T1, class T2> inline bool operator<(const pair< T1, T2> &, const pair< T1, T2> &);
# 143 "/home/normal/checkout/thrust/thrust/pair.h"
template<class T1, class T2> inline bool operator!=(const pair< T1, T2> &, const pair< T1, T2> &);
# 157 "/home/normal/checkout/thrust/thrust/pair.h"
template<class T1, class T2> inline bool operator>(const pair< T1, T2> &, const pair< T1, T2> &);
# 171 "/home/normal/checkout/thrust/thrust/pair.h"
template<class T1, class T2> inline bool operator<=(const pair< T1, T2> &, const pair< T1, T2> &);
# 185 "/home/normal/checkout/thrust/thrust/pair.h"
template<class T1, class T2> inline bool operator>=(const pair< T1, T2> &, const pair< T1, T2> &);
# 199 "/home/normal/checkout/thrust/thrust/pair.h"
template<class T1, class T2> inline pair< T1, T2> make_pair(T1, T2);
# 211 "/home/normal/checkout/thrust/thrust/pair.h"
template<int N, class T> struct tuple_element;
# 220 "/home/normal/checkout/thrust/thrust/pair.h"
template<class Pair> struct tuple_size;
# 257 "/home/normal/checkout/thrust/thrust/pair.h"
}
# 19 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
namespace thrust {
# 22 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class T1, class T2> inline
# 24 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
pair< T1, T2> ::pair() : first(), second()
# 26 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 27 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
;
# 28 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 31 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class T1, class T2> inline
# 33 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
pair< T1, T2> ::pair(const T1 &x, const T2 &y) : first(x), second(y)
# 35 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 36 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
;
# 37 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 40 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class T1, class T2>
# 41 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class U1, class U2> inline
# 43 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
pair< T1, T2> ::pair(const thrust::pair< U1, U2> &p) : first((p.thrust::pair< U1, U2> ::first)), second((p.thrust::pair< U1, U2> ::second))
# 45 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 46 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
;
# 47 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 50 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class T1, class T2>
# 51 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class U1, class U2> inline
# 53 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
pair< T1, T2> ::pair(const std::pair< U1, U2> &p) : first((p.std::pair< U1, U2> ::first)), second((p.std::pair< U1, U2> ::second))
# 55 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 56 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
;
# 57 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 60 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class T1, class T2> inline bool
# 62 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
operator==(const pair< T1, T2> &x, const pair< T1, T2> &y)
# 63 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 64 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
return ((x.pair< T1, T2> ::first) == (y.pair< T1, T2> ::first)) && ((x.pair< T1, T2> ::second) == (y.pair< T1, T2> ::second));
# 65 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 68 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class T1, class T2> inline bool
# 70 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
operator<(const pair< T1, T2> &x, const pair< T1, T2> &y)
# 71 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 72 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
return ((x.pair< T1, T2> ::first) < (y.pair< T1, T2> ::first)) || ((!((y.pair< T1, T2> ::first) < (x.pair< T1, T2> ::first))) && ((x.pair< T1, T2> ::second) < (y.pair< T1, T2> ::second)));
# 73 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 76 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class T1, class T2> inline bool
# 78 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
operator!=(const pair< T1, T2> &x, const pair< T1, T2> &y)
# 79 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 80 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
return !(x == y);
# 81 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 84 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class T1, class T2> inline bool
# 86 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
operator>(const pair< T1, T2> &x, const pair< T1, T2> &y)
# 87 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 88 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
return y < x;
# 89 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 92 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class T1, class T2> inline bool
# 94 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
operator<=(const pair< T1, T2> &x, const pair< T1, T2> &y)
# 95 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 96 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
return !(y < x);
# 97 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 100 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class T1, class T2> inline bool
# 102 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
operator>=(const pair< T1, T2> &x, const pair< T1, T2> &y)
# 103 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 104 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
return !(x < y);
# 105 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 108 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class T1, class T2> inline pair< T1, T2>
# 110 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
make_pair(T1 x, T2 y)
# 111 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 112 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
return pair< T1, T2> (x, y);
# 113 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 117 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class T1, class T2>
# 118 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
struct tuple_element< 0, pair< T1, T2> > {
# 120 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
typedef T1 type;
# 121 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
};
# 123 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class T1, class T2>
# 124 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
struct tuple_element< 1, pair< T1, T2> > {
# 126 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
typedef T2 type;
# 127 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
};
# 131 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class T1, class T2>
# 132 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
struct tuple_size< pair< T1, T2> > {
# 134 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
static const unsigned value = (2);
# 135 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
};
# 139 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
namespace detail {
# 143 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<int N, class Pair> struct pair_get { };
# 145 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class Pair>
# 146 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
struct pair_get< 0, Pair> {
# 150 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
const typename tuple_element< 0, Pair> ::type &operator()(const Pair &p) const
# 151 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 152 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
return p.Pair::first;
# 153 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 157 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
typename tuple_element< 0, Pair> ::type &operator()(Pair &p) const
# 158 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 159 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
return p.Pair::first;
# 160 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 161 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
};
# 164 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<class Pair>
# 165 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
struct pair_get< 1, Pair> {
# 169 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
const typename tuple_element< 1, Pair> ::type &operator()(const Pair &p) const
# 170 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 171 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
return p.Pair::second;
# 172 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 176 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
typename tuple_element< 1, Pair> ::type &operator()(Pair &p) const
# 177 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 178 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
return p.Pair::second;
# 179 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 180 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
};
# 182 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 186 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<unsigned N, class T1, class T2> inline typename tuple_element< (N), pair< T1, T2> > ::type &
# 189 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
get(pair< T1, T2> &p)
# 190 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 191 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
return detail::pair_get< N, pair< T1, T2> > ()(p);
# 192 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 194 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
template<unsigned N, class T1, class T2> inline const typename tuple_element< (N), pair< T1, T2> > ::type &
# 197 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
get(const pair< T1, T2> &p)
# 198 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
{
# 199 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
return detail::pair_get< N, pair< T1, T2> > ()(p);
# 200 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 203 "/home/normal/checkout/thrust/thrust/detail/pair.inl"
}
# 68 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
namespace std __attribute__((visibility("default"))) {
# 79 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { };
# 81 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct output_iterator_tag { };
# 83 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct forward_iterator_tag : public input_iterator_tag { };
# 86 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct bidirectional_iterator_tag : public forward_iterator_tag { };
# 89 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 102 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
template<class _Category, class _Tp, class _Distance = ptrdiff_t, class
# 103 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
_Pointer = _Tp *, class _Reference = _Tp &>
# 104 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct iterator {
# 107 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Category iterator_category;
# 109 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Tp value_type;
# 111 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Distance difference_type;
# 113 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Pointer pointer;
# 115 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Reference reference;
# 116 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
};
# 124 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
template<class _Iterator>
# 125 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct iterator_traits {
# 127 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::iterator_category iterator_category;
# 128 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::value_type value_type;
# 129 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::difference_type difference_type;
# 130 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::pointer pointer;
# 131 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::reference reference;
# 132 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
};
# 134 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
template<class _Tp>
# 135 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct iterator_traits< _Tp *> {
# 137 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef random_access_iterator_tag iterator_category;
# 138 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Tp value_type;
# 139 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef ptrdiff_t difference_type;
# 140 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Tp *pointer;
# 141 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Tp &reference;
# 142 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
};
# 144 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
template<class _Tp>
# 145 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
struct iterator_traits< const _Tp *> {
# 147 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef random_access_iterator_tag iterator_category;
# 148 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef _Tp value_type;
# 149 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef ptrdiff_t difference_type;
# 150 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef const _Tp *pointer;
# 151 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
typedef const _Tp &reference;
# 152 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
};
# 158 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
template < typename _Iter >
    inline typename iterator_traits < _Iter > :: iterator_category
    __iterator_category ( const _Iter & )
    { return typename iterator_traits < _Iter > :: iterator_category ( ); }
# 165 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
}
# 66 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
namespace std __attribute__((visibility("default"))) {
# 68 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator >
    inline typename iterator_traits < _InputIterator > :: difference_type
    __distance ( _InputIterator __first, _InputIterator __last,
               input_iterator_tag )
    {



      typename iterator_traits < _InputIterator > :: difference_type __n = 0;
      while ( __first != __last )
 {
   ++ __first;
   ++ __n;
 }
      return __n;
    }
# 85 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _RandomAccessIterator >
    inline typename iterator_traits < _RandomAccessIterator > :: difference_type
    __distance ( _RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag )
    {



      return __last - __first;
    }
# 108 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator >
    inline typename iterator_traits < _InputIterator > :: difference_type
    distance ( _InputIterator __first, _InputIterator __last )
    {

      return std :: __distance ( __first, __last,
        std :: __iterator_category ( __first ) );
    }
# 117 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator, typename _Distance >
    inline void
    __advance ( _InputIterator & __i, _Distance __n, input_iterator_tag )
    {


      while ( __n -- )
 ++ __i;
    }
# 127 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _BidirectionalIterator, typename _Distance >
    inline void
    __advance ( _BidirectionalIterator & __i, _Distance __n,
       bidirectional_iterator_tag )
    {



      if ( __n > 0 )
        while ( __n -- )
   ++ __i;
      else
        while ( __n ++ )
   -- __i;
    }
# 143 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _RandomAccessIterator, typename _Distance >
    inline void
    __advance ( _RandomAccessIterator & __i, _Distance __n,
              random_access_iterator_tag )
    {



      __i += __n;
    }
# 166 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator, typename _Distance >
    inline void
    advance ( _InputIterator & __i, _Distance __n )
    {

      typename iterator_traits < _InputIterator > :: difference_type __d = __n;
      std :: __advance ( __i, __d, std :: __iterator_category ( __i ) );
    }
# 195 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
}
# 68 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
namespace std __attribute__((visibility("default"))) {
# 89 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    class reverse_iterator
    : public iterator < typename iterator_traits < _Iterator > :: iterator_category,
        typename iterator_traits < _Iterator > :: value_type,
        typename iterator_traits < _Iterator > :: difference_type,
        typename iterator_traits < _Iterator > :: pointer,
                      typename iterator_traits < _Iterator > :: reference >
    {
    protected :
      _Iterator current;

    public :
      typedef _Iterator iterator_type;
      typedef typename iterator_traits < _Iterator > :: difference_type
              difference_type;
      typedef typename iterator_traits < _Iterator > :: reference reference;
      typedef typename iterator_traits < _Iterator > :: pointer pointer;

    public :






      reverse_iterator ( ) : current ( ) { }




      explicit
      reverse_iterator ( iterator_type __x ) : current ( __x ) { }




      reverse_iterator ( const reverse_iterator & __x )
      : current ( __x . current ) { }





      template < typename _Iter >
        reverse_iterator ( const reverse_iterator < _Iter > & __x )
 : current ( __x . base ( ) ) { }




      iterator_type
      base ( ) const
      { return current; }






      reference
      operator * ( ) const
      {
 _Iterator __tmp = current;
 return * -- __tmp;
      }






      pointer
      operator -> ( ) const
      { return & ( operator * ( ) ); }






      reverse_iterator &
      operator ++ ( )
      {
 -- current;
 return * this;
      }






      reverse_iterator
      operator ++ ( int )
      {
 reverse_iterator __tmp = * this;
 -- current;
 return __tmp;
      }






      reverse_iterator &
      operator -- ( )
      {
 ++ current;
 return * this;
      }






      reverse_iterator
      operator -- ( int )
      {
 reverse_iterator __tmp = * this;
 ++ current;
 return __tmp;
      }






      reverse_iterator
      operator + ( difference_type __n ) const
      { return reverse_iterator ( current - __n ); }






      reverse_iterator &
      operator += ( difference_type __n )
      {
 current -= __n;
 return * this;
      }






      reverse_iterator
      operator - ( difference_type __n ) const
      { return reverse_iterator ( current + __n ); }






      reverse_iterator &
      operator -= ( difference_type __n )
      {
 current += __n;
 return * this;
      }






      reference
      operator [ ] ( difference_type __n ) const
      { return * ( * this + __n ); }
    };
# 276 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator == ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return __x . base ( ) == __y . base ( ); }
# 282 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator < ( const reverse_iterator < _Iterator > & __x,
       const reverse_iterator < _Iterator > & __y )
    { return __y . base ( ) < __x . base ( ); }
# 288 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator != ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return ! ( __x == __y ); }
# 294 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator > ( const reverse_iterator < _Iterator > & __x,
       const reverse_iterator < _Iterator > & __y )
    { return __y < __x; }
# 300 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator <= ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return ! ( __y < __x ); }
# 306 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator >= ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return ! ( __x < __y ); }
# 312 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline typename reverse_iterator < _Iterator > :: difference_type
    operator - ( const reverse_iterator < _Iterator > & __x,
       const reverse_iterator < _Iterator > & __y )
    { return __y . base ( ) - __x . base ( ); }
# 318 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline reverse_iterator < _Iterator >
    operator + ( typename reverse_iterator < _Iterator > :: difference_type __n,
       const reverse_iterator < _Iterator > & __x )
    { return reverse_iterator < _Iterator > ( __x . base ( ) - __n ); }
# 326 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator == ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return __x . base ( ) == __y . base ( ); }
# 332 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator < ( const reverse_iterator < _IteratorL > & __x,
       const reverse_iterator < _IteratorR > & __y )
    { return __y . base ( ) < __x . base ( ); }
# 338 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator != ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return ! ( __x == __y ); }
# 344 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator > ( const reverse_iterator < _IteratorL > & __x,
       const reverse_iterator < _IteratorR > & __y )
    { return __y < __x; }
# 350 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator <= ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return ! ( __y < __x ); }
# 356 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator >= ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return ! ( __x < __y ); }
# 362 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >







    inline typename reverse_iterator < _IteratorL > :: difference_type
    operator - ( const reverse_iterator < _IteratorL > & __x,
       const reverse_iterator < _IteratorR > & __y )

    { return __y . base ( ) - __x . base ( ); }
# 388 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container >
    class back_insert_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _Container * container;

    public :

      typedef _Container container_type;


      explicit
      back_insert_iterator ( _Container & __x ) : container ( & __x ) { }
# 414 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      back_insert_iterator &
      operator = ( typename _Container :: const_reference __value )
      {
 container -> push_back ( __value );
 return * this;
      }


      back_insert_iterator &
      operator * ( )
      { return * this; }


      back_insert_iterator &
      operator ++ ( )
      { return * this; }


      back_insert_iterator
      operator ++ ( int )
      { return * this; }
    };
# 457 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container >
    inline back_insert_iterator < _Container >
    back_inserter ( _Container & __x )
    { return back_insert_iterator < _Container > ( __x ); }
# 472 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container >
    class front_insert_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _Container * container;

    public :

      typedef _Container container_type;


      explicit front_insert_iterator ( _Container & __x ) : container ( & __x ) { }
# 497 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      front_insert_iterator &
      operator = ( typename _Container :: const_reference __value )
      {
 container -> push_front ( __value );
 return * this;
      }


      front_insert_iterator &
      operator * ( )
      { return * this; }


      front_insert_iterator &
      operator ++ ( )
      { return * this; }


      front_insert_iterator
      operator ++ ( int )
      { return * this; }
    };
# 540 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container >
    inline front_insert_iterator < _Container >
    front_inserter ( _Container & __x )
    { return front_insert_iterator < _Container > ( __x ); }
# 559 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container >
    class insert_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _Container * container;
      typename _Container :: iterator iter;

    public :

      typedef _Container container_type;





      insert_iterator ( _Container & __x, typename _Container :: iterator __i )
      : container ( & __x ), iter ( __i ) { }
# 601 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      insert_iterator &
      operator = ( typename _Container :: const_reference __value )
      {
 iter = container -> insert ( iter, __value );
 ++ iter;
 return * this;
      }


      insert_iterator &
      operator * ( )
      { return * this; }


      insert_iterator &
      operator ++ ( )
      { return * this; }


      insert_iterator &
      operator ++ ( int )
      { return * this; }
    };
# 646 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Container, typename _Iterator >
    inline insert_iterator < _Container >
    inserter ( _Container & __x, _Iterator __i )
    {
      return insert_iterator < _Container > ( __x,
      typename _Container :: iterator ( __i ) );
    }
# 654 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
}
# 656 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 665 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
using std::iterator_traits;
# 666 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
using std::iterator;
# 667 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    class __normal_iterator
    {
    protected :
      _Iterator _M_current;

    public :
      typedef _Iterator iterator_type;
      typedef typename iterator_traits < _Iterator > :: iterator_category
                                                             iterator_category;
      typedef typename iterator_traits < _Iterator > :: value_type value_type;
      typedef typename iterator_traits < _Iterator > :: difference_type
                                                             difference_type;
      typedef typename iterator_traits < _Iterator > :: reference reference;
      typedef typename iterator_traits < _Iterator > :: pointer pointer;

      __normal_iterator ( ) : _M_current ( _Iterator ( ) ) { }

      explicit
      __normal_iterator ( const _Iterator & __i ) : _M_current ( __i ) { }


      template < typename _Iter >
        __normal_iterator ( const __normal_iterator < _Iter,
     typename __enable_if <
              ( std :: __are_same < _Iter, typename _Container :: pointer > :: __value ),
        _Container > :: __type > & __i )
        : _M_current ( __i . base ( ) ) { }


      reference
      operator * ( ) const
      { return * _M_current; }

      pointer
      operator -> ( ) const
      { return _M_current; }

      __normal_iterator &
      operator ++ ( )
      {
 ++ _M_current;
 return * this;
      }

      __normal_iterator
      operator ++ ( int )
      { return __normal_iterator ( _M_current ++ ); }


      __normal_iterator &
      operator -- ( )
      {
 -- _M_current;
 return * this;
      }

      __normal_iterator
      operator -- ( int )
      { return __normal_iterator ( _M_current -- ); }


      reference
      operator [ ] ( const difference_type & __n ) const
      { return _M_current [ __n ]; }

      __normal_iterator &
      operator += ( const difference_type & __n )
      { _M_current += __n; return * this; }

      __normal_iterator
      operator + ( const difference_type & __n ) const
      { return __normal_iterator ( _M_current + __n ); }

      __normal_iterator &
      operator -= ( const difference_type & __n )
      { _M_current -= __n; return * this; }

      __normal_iterator
      operator - ( const difference_type & __n ) const
      { return __normal_iterator ( _M_current - __n ); }

      const _Iterator &
      base ( ) const
      { return _M_current; }
    };
# 763 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator == ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) == __rhs . base ( ); }
# 769 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator == ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) == __rhs . base ( ); }
# 775 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator != ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) != __rhs . base ( ); }
# 781 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator != ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) != __rhs . base ( ); }
# 788 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator < ( const __normal_iterator < _IteratorL, _Container > & __lhs,
       const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) < __rhs . base ( ); }
# 794 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator < ( const __normal_iterator < _Iterator, _Container > & __lhs,
       const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) < __rhs . base ( ); }
# 800 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator > ( const __normal_iterator < _IteratorL, _Container > & __lhs,
       const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) > __rhs . base ( ); }
# 806 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator > ( const __normal_iterator < _Iterator, _Container > & __lhs,
       const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) > __rhs . base ( ); }
# 812 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator <= ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) <= __rhs . base ( ); }
# 818 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator <= ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) <= __rhs . base ( ); }
# 824 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator >= ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) >= __rhs . base ( ); }
# 830 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator >= ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) >= __rhs . base ( ); }
# 840 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >







    inline typename __normal_iterator < _IteratorL, _Container > :: difference_type
    operator - ( const __normal_iterator < _IteratorL, _Container > & __lhs,
       const __normal_iterator < _IteratorR, _Container > & __rhs )

    { return __lhs . base ( ) - __rhs . base ( ); }
# 854 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline typename __normal_iterator < _Iterator, _Container > :: difference_type
    operator - ( const __normal_iterator < _Iterator, _Container > & __lhs,
       const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) - __rhs . base ( ); }
# 860 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline __normal_iterator < _Iterator, _Container >
    operator + ( typename __normal_iterator < _Iterator, _Container > :: difference_type
       __n, const __normal_iterator < _Iterator, _Container > & __i )
    { return __normal_iterator < _Iterator, _Container > ( __i . base ( ) + __n ); }
# 866 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
}
# 42 "/usr/include/c++/4.4/bits/stringfwd.h" 3
namespace std __attribute__((visibility("default"))) {
# 44 "/usr/include/c++/4.4/bits/stringfwd.h" 3
template < typename _Alloc >
    class allocator;
# 47 "/usr/include/c++/4.4/bits/stringfwd.h" 3
template<class _CharT> struct char_traits;
# 50 "/usr/include/c++/4.4/bits/stringfwd.h" 3
template < typename _CharT, typename _Traits = char_traits < _CharT >,
           typename _Alloc = allocator < _CharT > >
    class basic_string;
# 54 "/usr/include/c++/4.4/bits/stringfwd.h" 3
template<> struct char_traits< char> ;
# 56 "/usr/include/c++/4.4/bits/stringfwd.h" 3
typedef basic_string< char, char_traits< char> , allocator< char> > string;
# 59 "/usr/include/c++/4.4/bits/stringfwd.h" 3
template<> struct char_traits< wchar_t> ;
# 61 "/usr/include/c++/4.4/bits/stringfwd.h" 3
typedef basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wstring;
# 75 "/usr/include/c++/4.4/bits/stringfwd.h" 3
}
# 45 "/usr/include/stdio.h" 3
struct _IO_FILE;
# 49 "/usr/include/stdio.h" 3
typedef _IO_FILE FILE;
# 65 "/usr/include/stdio.h" 3
typedef _IO_FILE __FILE;
# 40 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/va.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 352 "/usr/lib/gcc/i486-linux-gnu/4.4.3/include/stddef.h" 3
typedef unsigned wint_t;
# 95 "/usr/include/wchar.h" 3
typedef
# 84 "/usr/include/wchar.h" 3
struct {
# 85 "/usr/include/wchar.h" 3
int __count;
# 87 "/usr/include/wchar.h" 3
union {
# 89 "/usr/include/wchar.h" 3
unsigned __wch;
# 93 "/usr/include/wchar.h" 3
char __wchb[4];
# 94 "/usr/include/wchar.h" 3
} __value;
# 95 "/usr/include/wchar.h" 3
} __mbstate_t;
# 106 "/usr/include/wchar.h" 3
typedef __mbstate_t mbstate_t;
# 134 "/usr/include/wchar.h" 3
struct tm;
# 144 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcscpy(wchar_t *__restrict__, const wchar_t *__restrict__) throw();
# 147 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcsncpy(wchar_t *__restrict__, const wchar_t *__restrict__, size_t) throw();
# 152 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcscat(wchar_t *__restrict__, const wchar_t *__restrict__) throw();
# 155 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcsncat(wchar_t *__restrict__, const wchar_t *__restrict__, size_t) throw();
# 160 "/usr/include/wchar.h" 3
extern "C" int wcscmp(const wchar_t *, const wchar_t *) throw() __attribute__((__pure__));
# 163 "/usr/include/wchar.h" 3
extern "C" int wcsncmp(const wchar_t *, const wchar_t *, size_t) throw() __attribute__((__pure__));
# 169 "/usr/include/wchar.h" 3
extern "C" int wcscasecmp(const wchar_t *, const wchar_t *) throw();
# 172 "/usr/include/wchar.h" 3
extern "C" int wcsncasecmp(const wchar_t *, const wchar_t *, size_t) throw();
# 179 "/usr/include/wchar.h" 3
extern "C" int wcscasecmp_l(const wchar_t *, const wchar_t *, __locale_t) throw();
# 182 "/usr/include/wchar.h" 3
extern "C" int wcsncasecmp_l(const wchar_t *, const wchar_t *, size_t, __locale_t) throw();
# 189 "/usr/include/wchar.h" 3
extern "C" int wcscoll(const wchar_t *, const wchar_t *) throw();
# 193 "/usr/include/wchar.h" 3
extern "C" size_t wcsxfrm(wchar_t *__restrict__, const wchar_t *__restrict__, size_t) throw();
# 203 "/usr/include/wchar.h" 3
extern "C" int wcscoll_l(const wchar_t *, const wchar_t *, __locale_t) throw();
# 209 "/usr/include/wchar.h" 3
extern "C" size_t wcsxfrm_l(wchar_t *, const wchar_t *, size_t, __locale_t) throw();
# 213 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcsdup(const wchar_t *) throw() __attribute__((__malloc__));
# 219 "/usr/include/wchar.h" 3
wchar_t *wcschr(wchar_t *, wchar_t) throw() __asm__("wcschr") __attribute__((__pure__));
# 221 "/usr/include/wchar.h" 3
const wchar_t *wcschr(const wchar_t *, wchar_t) throw() __asm__("wcschr") __attribute__((__pure__));
# 229 "/usr/include/wchar.h" 3
wchar_t *wcsrchr(wchar_t *, wchar_t) throw() __asm__("wcsrchr") __attribute__((__pure__));
# 231 "/usr/include/wchar.h" 3
const wchar_t *wcsrchr(const wchar_t *, wchar_t) throw() __asm__("wcsrchr") __attribute__((__pure__));
# 242 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcschrnul(const wchar_t *, wchar_t) throw() __attribute__((__pure__));
# 249 "/usr/include/wchar.h" 3
extern "C" size_t wcscspn(const wchar_t *, const wchar_t *) throw() __attribute__((__pure__));
# 253 "/usr/include/wchar.h" 3
extern "C" size_t wcsspn(const wchar_t *, const wchar_t *) throw() __attribute__((__pure__));
# 257 "/usr/include/wchar.h" 3
wchar_t *wcspbrk(wchar_t *, const wchar_t *) throw() __asm__("wcspbrk") __attribute__((__pure__));
# 259 "/usr/include/wchar.h" 3
const wchar_t *wcspbrk(const wchar_t *, const wchar_t *) throw() __asm__("wcspbrk") __attribute__((__pure__));
# 268 "/usr/include/wchar.h" 3
wchar_t *wcsstr(wchar_t *, const wchar_t *) throw() __asm__("wcsstr") __attribute__((__pure__));
# 270 "/usr/include/wchar.h" 3
const wchar_t *wcsstr(const wchar_t *, const wchar_t *) throw() __asm__("wcsstr") __attribute__((__pure__));
# 279 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcstok(wchar_t *__restrict__, const wchar_t *__restrict__, wchar_t **__restrict__) throw();
# 284 "/usr/include/wchar.h" 3
extern "C" size_t wcslen(const wchar_t *) throw() __attribute__((__pure__));
# 290 "/usr/include/wchar.h" 3
wchar_t *wcswcs(wchar_t *, const wchar_t *) throw() __asm__("wcswcs") __attribute__((__pure__));
# 292 "/usr/include/wchar.h" 3
const wchar_t *wcswcs(const wchar_t *, const wchar_t *) throw() __asm__("wcswcs") __attribute__((__pure__));
# 303 "/usr/include/wchar.h" 3
extern "C" size_t wcsnlen(const wchar_t *, size_t) throw() __attribute__((__pure__));
# 311 "/usr/include/wchar.h" 3
wchar_t *wmemchr(wchar_t *, wchar_t, size_t) throw() __asm__("wmemchr") __attribute__((__pure__));
# 313 "/usr/include/wchar.h" 3
const wchar_t *wmemchr(const wchar_t *, wchar_t, size_t) throw() __asm__("wmemchr") __attribute__((__pure__));
# 322 "/usr/include/wchar.h" 3
extern "C" int wmemcmp(const wchar_t *__restrict__, const wchar_t *__restrict__, size_t) throw() __attribute__((__pure__));
# 327 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmemcpy(wchar_t *__restrict__, const wchar_t *__restrict__, size_t) throw();
# 332 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmemmove(wchar_t *, const wchar_t *, size_t) throw();
# 336 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmemset(wchar_t *, wchar_t, size_t) throw();
# 342 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmempcpy(wchar_t *__restrict__, const wchar_t *__restrict__, size_t) throw();
# 351 "/usr/include/wchar.h" 3
extern "C" wint_t btowc(int) throw();
# 355 "/usr/include/wchar.h" 3
extern "C" int wctob(wint_t) throw();
# 359 "/usr/include/wchar.h" 3
extern "C" int mbsinit(const mbstate_t *) throw() __attribute__((__pure__));
# 363 "/usr/include/wchar.h" 3
extern "C" size_t mbrtowc(wchar_t *__restrict__, const char *__restrict__, size_t, mbstate_t *) throw();
# 368 "/usr/include/wchar.h" 3
extern "C" size_t wcrtomb(char *__restrict__, wchar_t, mbstate_t *__restrict__) throw();
# 372 "/usr/include/wchar.h" 3
extern "C" size_t __mbrlen(const char *__restrict__, size_t, mbstate_t *__restrict__) throw();
# 374 "/usr/include/wchar.h" 3
extern "C" size_t mbrlen(const char *__restrict__, size_t, mbstate_t *__restrict__) throw();
# 406 "/usr/include/wchar.h" 3
extern "C" size_t mbsrtowcs(wchar_t *__restrict__, const char **__restrict__, size_t, mbstate_t *__restrict__) throw();
# 412 "/usr/include/wchar.h" 3
extern "C" size_t wcsrtombs(char *__restrict__, const wchar_t **__restrict__, size_t, mbstate_t *__restrict__) throw();
# 421 "/usr/include/wchar.h" 3
extern "C" size_t mbsnrtowcs(wchar_t *__restrict__, const char **__restrict__, size_t, size_t, mbstate_t *__restrict__) throw();
# 427 "/usr/include/wchar.h" 3
extern "C" size_t wcsnrtombs(char *__restrict__, const wchar_t **__restrict__, size_t, size_t, mbstate_t *__restrict__) throw();
# 437 "/usr/include/wchar.h" 3
extern "C" int wcwidth(wchar_t) throw();
# 441 "/usr/include/wchar.h" 3
extern "C" int wcswidth(const wchar_t *, size_t) throw();
# 448 "/usr/include/wchar.h" 3
extern "C" double wcstod(const wchar_t *__restrict__, wchar_t **__restrict__) throw();
# 455 "/usr/include/wchar.h" 3
extern "C" float wcstof(const wchar_t *__restrict__, wchar_t **__restrict__) throw();
# 457 "/usr/include/wchar.h" 3
extern "C" long double wcstold(const wchar_t *__restrict__, wchar_t **__restrict__) throw();
# 466 "/usr/include/wchar.h" 3
extern "C" long wcstol(const wchar_t *__restrict__, wchar_t **__restrict__, int) throw();
# 471 "/usr/include/wchar.h" 3
extern "C" unsigned long wcstoul(const wchar_t *__restrict__, wchar_t **__restrict__, int) throw();
# 481 "/usr/include/wchar.h" 3
extern "C" long long wcstoll(const wchar_t *__restrict__, wchar_t **__restrict__, int) throw();
# 488 "/usr/include/wchar.h" 3
extern "C" unsigned long long wcstoull(const wchar_t *__restrict__, wchar_t **__restrict__, int) throw();
# 498 "/usr/include/wchar.h" 3
extern "C" long long wcstoq(const wchar_t *__restrict__, wchar_t **__restrict__, int) throw();
# 505 "/usr/include/wchar.h" 3
extern "C" unsigned long long wcstouq(const wchar_t *__restrict__, wchar_t **__restrict__, int) throw();
# 528 "/usr/include/wchar.h" 3
extern "C" long wcstol_l(const wchar_t *__restrict__, wchar_t **__restrict__, int, __locale_t) throw();
# 532 "/usr/include/wchar.h" 3
extern "C" unsigned long wcstoul_l(const wchar_t *__restrict__, wchar_t **__restrict__, int, __locale_t) throw();
# 537 "/usr/include/wchar.h" 3
extern "C" long long wcstoll_l(const wchar_t *__restrict__, wchar_t **__restrict__, int, __locale_t) throw();
# 542 "/usr/include/wchar.h" 3
extern "C" unsigned long long wcstoull_l(const wchar_t *__restrict__, wchar_t **__restrict__, int, __locale_t) throw();
# 547 "/usr/include/wchar.h" 3
extern "C" double wcstod_l(const wchar_t *__restrict__, wchar_t **__restrict__, __locale_t) throw();
# 551 "/usr/include/wchar.h" 3
extern "C" float wcstof_l(const wchar_t *__restrict__, wchar_t **__restrict__, __locale_t) throw();
# 555 "/usr/include/wchar.h" 3
extern "C" long double wcstold_l(const wchar_t *__restrict__, wchar_t **__restrict__, __locale_t) throw();
# 564 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcpcpy(wchar_t *, const wchar_t *) throw();
# 568 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcpncpy(wchar_t *, const wchar_t *, size_t) throw();
# 578 "/usr/include/wchar.h" 3
extern "C" __FILE *open_wmemstream(wchar_t **, size_t *) throw();
# 585 "/usr/include/wchar.h" 3
extern "C" int fwide(__FILE *, int) throw();
# 592 "/usr/include/wchar.h" 3
extern "C" int fwprintf(__FILE *__restrict__, const wchar_t *__restrict__, ...);
# 599 "/usr/include/wchar.h" 3
extern "C" int wprintf(const wchar_t *__restrict__, ...);
# 602 "/usr/include/wchar.h" 3
extern "C" int swprintf(wchar_t *__restrict__, size_t, const wchar_t *__restrict__, ...) throw();
# 610 "/usr/include/wchar.h" 3
extern "C" int vfwprintf(__FILE *__restrict__, const wchar_t *__restrict__, __gnuc_va_list);
# 618 "/usr/include/wchar.h" 3
extern "C" int vwprintf(const wchar_t *__restrict__, __gnuc_va_list);
# 623 "/usr/include/wchar.h" 3
extern "C" int vswprintf(wchar_t *__restrict__, size_t, const wchar_t *__restrict__, __gnuc_va_list) throw();
# 633 "/usr/include/wchar.h" 3
extern "C" int fwscanf(__FILE *__restrict__, const wchar_t *__restrict__, ...);
# 640 "/usr/include/wchar.h" 3
extern "C" int wscanf(const wchar_t *__restrict__, ...);
# 643 "/usr/include/wchar.h" 3
extern "C" int swscanf(const wchar_t *__restrict__, const wchar_t *__restrict__, ...) throw();
# 687 "/usr/include/wchar.h" 3
extern "C" int vfwscanf(__FILE *__restrict__, const wchar_t *__restrict__, __gnuc_va_list);
# 695 "/usr/include/wchar.h" 3
extern "C" int vwscanf(const wchar_t *__restrict__, __gnuc_va_list);
# 699 "/usr/include/wchar.h" 3
extern "C" int vswscanf(const wchar_t *__restrict__, const wchar_t *__restrict__, __gnuc_va_list) throw();
# 743 "/usr/include/wchar.h" 3
extern "C" wint_t fgetwc(__FILE *);
# 744 "/usr/include/wchar.h" 3
extern "C" wint_t getwc(__FILE *);
# 750 "/usr/include/wchar.h" 3
extern "C" wint_t getwchar();
# 757 "/usr/include/wchar.h" 3
extern "C" wint_t fputwc(wchar_t, __FILE *);
# 758 "/usr/include/wchar.h" 3
extern "C" wint_t putwc(wchar_t, __FILE *);
# 764 "/usr/include/wchar.h" 3
extern "C" wint_t putwchar(wchar_t);
# 772 "/usr/include/wchar.h" 3
extern "C" wchar_t *fgetws(wchar_t *__restrict__, int, __FILE *__restrict__);
# 779 "/usr/include/wchar.h" 3
extern "C" int fputws(const wchar_t *__restrict__, __FILE *__restrict__);
# 787 "/usr/include/wchar.h" 3
extern "C" wint_t ungetwc(wint_t, __FILE *);
# 799 "/usr/include/wchar.h" 3
extern "C" wint_t getwc_unlocked(__FILE *);
# 800 "/usr/include/wchar.h" 3
extern "C" wint_t getwchar_unlocked();
# 808 "/usr/include/wchar.h" 3
extern "C" wint_t fgetwc_unlocked(__FILE *);
# 816 "/usr/include/wchar.h" 3
extern "C" wint_t fputwc_unlocked(wchar_t, __FILE *);
# 825 "/usr/include/wchar.h" 3
extern "C" wint_t putwc_unlocked(wchar_t, __FILE *);
# 826 "/usr/include/wchar.h" 3
extern "C" wint_t putwchar_unlocked(wchar_t);
# 835 "/usr/include/wchar.h" 3
extern "C" wchar_t *fgetws_unlocked(wchar_t *__restrict__, int, __FILE *__restrict__);
# 844 "/usr/include/wchar.h" 3
extern "C" int fputws_unlocked(const wchar_t *__restrict__, __FILE *__restrict__);
# 853 "/usr/include/wchar.h" 3
extern "C" size_t wcsftime(wchar_t *__restrict__, size_t, const wchar_t *__restrict__, const tm *__restrict__) throw();
# 863 "/usr/include/wchar.h" 3
extern "C" size_t wcsftime_l(wchar_t *__restrict__, size_t, const wchar_t *__restrict__, const tm *__restrict__, __locale_t) throw();
# 65 "/usr/include/c++/4.4/cwchar" 3
namespace std __attribute__((visibility("default"))) {
# 67 "/usr/include/c++/4.4/cwchar" 3
using ::mbstate_t;
# 69 "/usr/include/c++/4.4/cwchar" 3
}
# 139 "/usr/include/c++/4.4/cwchar" 3
namespace std __attribute__((visibility("default"))) {
# 141 "/usr/include/c++/4.4/cwchar" 3
using ::wint_t;
# 143 "/usr/include/c++/4.4/cwchar" 3
using ::btowc;
# 144 "/usr/include/c++/4.4/cwchar" 3
using ::fgetwc;
# 145 "/usr/include/c++/4.4/cwchar" 3
using ::fgetws;
# 146 "/usr/include/c++/4.4/cwchar" 3
using ::fputwc;
# 147 "/usr/include/c++/4.4/cwchar" 3
using ::fputws;
# 148 "/usr/include/c++/4.4/cwchar" 3
using ::fwide;
# 149 "/usr/include/c++/4.4/cwchar" 3
using ::fwprintf;
# 150 "/usr/include/c++/4.4/cwchar" 3
using ::fwscanf;
# 151 "/usr/include/c++/4.4/cwchar" 3
using ::getwc;
# 152 "/usr/include/c++/4.4/cwchar" 3
using ::getwchar;
# 153 "/usr/include/c++/4.4/cwchar" 3
using ::mbrlen;
# 154 "/usr/include/c++/4.4/cwchar" 3
using ::mbrtowc;
# 155 "/usr/include/c++/4.4/cwchar" 3
using ::mbsinit;
# 156 "/usr/include/c++/4.4/cwchar" 3
using ::mbsrtowcs;
# 157 "/usr/include/c++/4.4/cwchar" 3
using ::putwc;
# 158 "/usr/include/c++/4.4/cwchar" 3
using ::putwchar;
# 159 "/usr/include/c++/4.4/cwchar" 3
using ::swprintf;
# 160 "/usr/include/c++/4.4/cwchar" 3
using ::swscanf;
# 161 "/usr/include/c++/4.4/cwchar" 3
using ::ungetwc;
# 162 "/usr/include/c++/4.4/cwchar" 3
using ::vfwprintf;
# 164 "/usr/include/c++/4.4/cwchar" 3
using ::vfwscanf;
# 166 "/usr/include/c++/4.4/cwchar" 3
using ::vswprintf;
# 168 "/usr/include/c++/4.4/cwchar" 3
using ::vswscanf;
# 170 "/usr/include/c++/4.4/cwchar" 3
using ::vwprintf;
# 172 "/usr/include/c++/4.4/cwchar" 3
using ::vwscanf;
# 174 "/usr/include/c++/4.4/cwchar" 3
using ::wcrtomb;
# 175 "/usr/include/c++/4.4/cwchar" 3
using ::wcscat;
# 176 "/usr/include/c++/4.4/cwchar" 3
using ::wcscmp;
# 177 "/usr/include/c++/4.4/cwchar" 3
using ::wcscoll;
# 178 "/usr/include/c++/4.4/cwchar" 3
using ::wcscpy;
# 179 "/usr/include/c++/4.4/cwchar" 3
using ::wcscspn;
# 180 "/usr/include/c++/4.4/cwchar" 3
using ::wcsftime;
# 181 "/usr/include/c++/4.4/cwchar" 3
using ::wcslen;
# 182 "/usr/include/c++/4.4/cwchar" 3
using ::wcsncat;
# 183 "/usr/include/c++/4.4/cwchar" 3
using ::wcsncmp;
# 184 "/usr/include/c++/4.4/cwchar" 3
using ::wcsncpy;
# 185 "/usr/include/c++/4.4/cwchar" 3
using ::wcsrtombs;
# 186 "/usr/include/c++/4.4/cwchar" 3
using ::wcsspn;
# 187 "/usr/include/c++/4.4/cwchar" 3
using ::wcstod;
# 189 "/usr/include/c++/4.4/cwchar" 3
using ::wcstof;
# 191 "/usr/include/c++/4.4/cwchar" 3
using ::wcstok;
# 192 "/usr/include/c++/4.4/cwchar" 3
using ::wcstol;
# 193 "/usr/include/c++/4.4/cwchar" 3
using ::wcstoul;
# 194 "/usr/include/c++/4.4/cwchar" 3
using ::wcsxfrm;
# 195 "/usr/include/c++/4.4/cwchar" 3
using ::wctob;
# 196 "/usr/include/c++/4.4/cwchar" 3
using ::wmemcmp;
# 197 "/usr/include/c++/4.4/cwchar" 3
using ::wmemcpy;
# 198 "/usr/include/c++/4.4/cwchar" 3
using ::wmemmove;
# 199 "/usr/include/c++/4.4/cwchar" 3
using ::wmemset;
# 200 "/usr/include/c++/4.4/cwchar" 3
using ::wprintf;
# 201 "/usr/include/c++/4.4/cwchar" 3
using ::wscanf;
# 202 "/usr/include/c++/4.4/cwchar" 3
using ::wcschr;
# 203 "/usr/include/c++/4.4/cwchar" 3
using ::wcspbrk;
# 204 "/usr/include/c++/4.4/cwchar" 3
using ::wcsrchr;
# 205 "/usr/include/c++/4.4/cwchar" 3
using ::wcsstr;
# 206 "/usr/include/c++/4.4/cwchar" 3
using ::wmemchr;
# 230 "/usr/include/c++/4.4/cwchar" 3
}
# 238 "/usr/include/c++/4.4/cwchar" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 245 "/usr/include/c++/4.4/cwchar" 3
using ::wcstold;
# 254 "/usr/include/c++/4.4/cwchar" 3
using ::wcstoll;
# 255 "/usr/include/c++/4.4/cwchar" 3
using ::wcstoull;
# 258 "/usr/include/c++/4.4/cwchar" 3
}
# 260 "/usr/include/c++/4.4/cwchar" 3
namespace std __attribute__((visibility("default"))) {
# 262 "/usr/include/c++/4.4/cwchar" 3
using __gnu_cxx::wcstold;
# 263 "/usr/include/c++/4.4/cwchar" 3
using __gnu_cxx::wcstoll;
# 264 "/usr/include/c++/4.4/cwchar" 3
using __gnu_cxx::wcstoull;
# 266 "/usr/include/c++/4.4/cwchar" 3
}
# 70 "/usr/include/c++/4.4/bits/postypes.h" 3
namespace std __attribute__((visibility("default"))) {
# 90 "/usr/include/c++/4.4/bits/postypes.h" 3
typedef long long streamoff;
# 98 "/usr/include/c++/4.4/bits/postypes.h" 3
typedef ptrdiff_t streamsize;
# 111 "/usr/include/c++/4.4/bits/postypes.h" 3
template < typename _StateT >
    class fpos
    {
    private :
      streamoff _M_off;
      _StateT _M_state;

    public :




      fpos ( )
      : _M_off ( 0 ), _M_state ( ) { }
# 133 "/usr/include/c++/4.4/bits/postypes.h" 3
      fpos ( streamoff __off )
      : _M_off ( __off ), _M_state ( ) { }


      operator streamoff ( ) const { return _M_off; }


      void
      state ( _StateT __st )
      { _M_state = __st; }


      _StateT
      state ( ) const
      { return _M_state; }





      fpos &
      operator += ( streamoff __off )
      {
 _M_off += __off;
 return * this;
      }





      fpos &
      operator -= ( streamoff __off )
      {
 _M_off -= __off;
 return * this;
      }







      fpos
      operator + ( streamoff __off ) const
      {
 fpos __pos ( * this );
 __pos += __off;
 return __pos;
      }







      fpos
      operator - ( streamoff __off ) const
      {
 fpos __pos ( * this );
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator - ( const fpos & __other ) const
      { return _M_off - __other . _M_off; }
    };
# 214 "/usr/include/c++/4.4/bits/postypes.h" 3
template < typename _StateT >
    inline bool
    operator == ( const fpos < _StateT > & __lhs, const fpos < _StateT > & __rhs )
    { return streamoff ( __lhs ) == streamoff ( __rhs ); }
# 219 "/usr/include/c++/4.4/bits/postypes.h" 3
template < typename _StateT >
    inline bool
    operator != ( const fpos < _StateT > & __lhs, const fpos < _StateT > & __rhs )
    { return streamoff ( __lhs ) != streamoff ( __rhs ); }
# 228 "/usr/include/c++/4.4/bits/postypes.h" 3
typedef fpos< __mbstate_t> streampos;
# 230 "/usr/include/c++/4.4/bits/postypes.h" 3
typedef fpos< __mbstate_t> wstreampos;
# 239 "/usr/include/c++/4.4/bits/postypes.h" 3
}
# 44 "/usr/include/c++/4.4/iosfwd" 3
namespace std __attribute__((visibility("default"))) {
# 46 "/usr/include/c++/4.4/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_ios;
# 49 "/usr/include/c++/4.4/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_streambuf;
# 52 "/usr/include/c++/4.4/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_istream;
# 55 "/usr/include/c++/4.4/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_ostream;
# 58 "/usr/include/c++/4.4/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_iostream;
# 61 "/usr/include/c++/4.4/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> , class
# 62 "/usr/include/c++/4.4/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_stringbuf;
# 65 "/usr/include/c++/4.4/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> , class
# 66 "/usr/include/c++/4.4/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_istringstream;
# 69 "/usr/include/c++/4.4/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> , class
# 70 "/usr/include/c++/4.4/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_ostringstream;
# 73 "/usr/include/c++/4.4/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> , class
# 74 "/usr/include/c++/4.4/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_stringstream;
# 77 "/usr/include/c++/4.4/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> > class basic_filebuf;
# 80 "/usr/include/c++/4.4/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> > class basic_ifstream;
# 83 "/usr/include/c++/4.4/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> > class basic_ofstream;
# 86 "/usr/include/c++/4.4/iosfwd" 3
template<class _CharT, class _Traits = char_traits< _CharT> > class basic_fstream;
# 89 "/usr/include/c++/4.4/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class istreambuf_iterator;
# 92 "/usr/include/c++/4.4/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class ostreambuf_iterator;
# 97 "/usr/include/c++/4.4/iosfwd" 3
class ios_base;
# 127 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ios< char, char_traits< char> > ios;
# 128 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_streambuf< char, char_traits< char> > streambuf;
# 129 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_istream< char, char_traits< char> > istream;
# 130 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ostream< char, char_traits< char> > ostream;
# 131 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_iostream< char, char_traits< char> > iostream;
# 132 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_stringbuf< char, char_traits< char> , allocator< char> > stringbuf;
# 133 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_istringstream< char, char_traits< char> , allocator< char> > istringstream;
# 134 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ostringstream< char, char_traits< char> , allocator< char> > ostringstream;
# 135 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_stringstream< char, char_traits< char> , allocator< char> > stringstream;
# 136 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_filebuf< char, char_traits< char> > filebuf;
# 137 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ifstream< char, char_traits< char> > ifstream;
# 138 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ofstream< char, char_traits< char> > ofstream;
# 139 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_fstream< char, char_traits< char> > fstream;
# 142 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ios< wchar_t, char_traits< wchar_t> > wios;
# 143 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_streambuf< wchar_t, char_traits< wchar_t> > wstreambuf;
# 144 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_istream< wchar_t, char_traits< wchar_t> > wistream;
# 145 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ostream< wchar_t, char_traits< wchar_t> > wostream;
# 146 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_iostream< wchar_t, char_traits< wchar_t> > wiostream;
# 147 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_stringbuf< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wstringbuf;
# 148 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_istringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wistringstream;
# 149 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ostringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wostringstream;
# 150 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_stringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wstringstream;
# 151 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_filebuf< wchar_t, char_traits< wchar_t> > wfilebuf;
# 152 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ifstream< wchar_t, char_traits< wchar_t> > wifstream;
# 153 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_ofstream< wchar_t, char_traits< wchar_t> > wofstream;
# 154 "/usr/include/c++/4.4/iosfwd" 3
typedef basic_fstream< wchar_t, char_traits< wchar_t> > wfstream;
# 158 "/usr/include/c++/4.4/iosfwd" 3
}
# 41 "/usr/include/c++/4.4/exception" 3
namespace std {
# 59 "/usr/include/c++/4.4/exception" 3
class __attribute__((visibility("default"))) exception {
# 62 "/usr/include/c++/4.4/exception" 3
public: exception() throw() { }
# 63 "/usr/include/c++/4.4/exception" 3
virtual ~exception() throw();
# 67 "/usr/include/c++/4.4/exception" 3
virtual const char *what() const throw();
# 68 "/usr/include/c++/4.4/exception" 3
};
# 72 "/usr/include/c++/4.4/exception" 3
class __attribute__((visibility("default"))) bad_exception : public exception {
# 75 "/usr/include/c++/4.4/exception" 3
public: bad_exception() throw() { }
# 79 "/usr/include/c++/4.4/exception" 3
virtual ~bad_exception() throw();
# 82 "/usr/include/c++/4.4/exception" 3
virtual const char *what() const throw();
# 83 "/usr/include/c++/4.4/exception" 3
};
# 86 "/usr/include/c++/4.4/exception" 3
typedef void (*terminate_handler)(void);
# 89 "/usr/include/c++/4.4/exception" 3
typedef void (*unexpected_handler)(void);
# 92 "/usr/include/c++/4.4/exception" 3
terminate_handler set_terminate(terminate_handler) throw() __attribute__((visibility("default")));
# 96 "/usr/include/c++/4.4/exception" 3
void terminate() __attribute__((__noreturn__)) __attribute__((visibility("default")));
# 99 "/usr/include/c++/4.4/exception" 3
unexpected_handler set_unexpected(unexpected_handler) throw() __attribute__((visibility("default")));
# 103 "/usr/include/c++/4.4/exception" 3
void unexpected() __attribute__((__noreturn__)) __attribute__((visibility("default")));
# 115 "/usr/include/c++/4.4/exception" 3
bool uncaught_exception() throw() __attribute__((visibility("default")));
# 118 "/usr/include/c++/4.4/exception" 3
}
# 120 "/usr/include/c++/4.4/exception" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 138 "/usr/include/c++/4.4/exception" 3
void __verbose_terminate_handler();
# 140 "/usr/include/c++/4.4/exception" 3
}
# 39 "/usr/include/c++/4.4/bits/functexcept.h" 3
namespace std __attribute__((visibility("default"))) {
# 43 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_bad_exception() __attribute__((__noreturn__));
# 47 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_bad_alloc() __attribute__((__noreturn__));
# 51 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_bad_cast() __attribute__((__noreturn__));
# 54 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_bad_typeid() __attribute__((__noreturn__));
# 58 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_logic_error(const char *) __attribute__((__noreturn__));
# 61 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_domain_error(const char *) __attribute__((__noreturn__));
# 64 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_invalid_argument(const char *) __attribute__((__noreturn__));
# 67 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_length_error(const char *) __attribute__((__noreturn__));
# 70 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_out_of_range(const char *) __attribute__((__noreturn__));
# 73 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_runtime_error(const char *) __attribute__((__noreturn__));
# 76 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_range_error(const char *) __attribute__((__noreturn__));
# 79 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_overflow_error(const char *) __attribute__((__noreturn__));
# 82 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_underflow_error(const char *) __attribute__((__noreturn__));
# 86 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_ios_failure(const char *) __attribute__((__noreturn__));
# 89 "/usr/include/c++/4.4/bits/functexcept.h" 3
void __throw_system_error(int) __attribute__((__noreturn__));
# 91 "/usr/include/c++/4.4/bits/functexcept.h" 3
}
# 37 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 52 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template<class _Value>
# 53 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
struct __numeric_traits_integer {
# 56 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const _Value __min = (((((_Value)(-1)) < 0) ? (((_Value)1) << ((sizeof(_Value) * (8)) - ((((_Value)(-1)) < 0)))) : ((_Value)0)));
# 57 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const _Value __max = (((((_Value)(-1)) < 0) ? ((((((_Value)1) << (((sizeof(_Value) * (8)) - ((((_Value)(-1)) < 0))) - (1))) - 1) << 1) + 1) : (~((_Value)0))));
# 61 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const bool __is_signed = (((_Value)(-1)) < 0);
# 62 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const int __digits = (((sizeof(_Value) * (8)) - ((((_Value)(-1)) < 0))));
# 63 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
};
# 65 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template<class _Value> const _Value
# 66 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_integer< _Value> ::__min;
# 68 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template<class _Value> const _Value
# 69 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_integer< _Value> ::__max;
# 71 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template<class _Value> const bool
# 72 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_integer< _Value> ::__is_signed;
# 74 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template<class _Value> const int
# 75 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_integer< _Value> ::__digits;
# 97 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template<class _Value>
# 98 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
struct __numeric_traits_floating {
# 101 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const int __max_digits10 = (2 + ((((std::__are_same< _Value, float> ::__value) ? 24 : ((std::__are_same< _Value, double> ::__value) ? 53 : 64)) * 3010) / 10000));
# 104 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const bool __is_signed = true;
# 105 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const int __digits10 = ((std::__are_same< _Value, float> ::__value) ? 6 : ((std::__are_same< _Value, double> ::__value) ? 15 : 18));
# 106 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
static const int __max_exponent10 = ((std::__are_same< _Value, float> ::__value) ? 38 : ((std::__are_same< _Value, double> ::__value) ? 308 : 4932));
# 107 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
};
# 109 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template<class _Value> const int
# 110 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_floating< _Value> ::__max_digits10;
# 112 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template<class _Value> const bool
# 113 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_floating< _Value> ::__is_signed;
# 115 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template<class _Value> const int
# 116 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_floating< _Value> ::__digits10;
# 118 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template<class _Value> const int
# 119 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
__numeric_traits_floating< _Value> ::__max_exponent10;
# 121 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
template<class _Value>
# 122 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
struct __numeric_traits : public __conditional_type< std::__is_integer< _Value> ::__value, __numeric_traits_integer< _Value> , __numeric_traits_floating< _Value> > ::__type {
# 126 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
};
# 128 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
}
# 47 "/usr/include/c++/4.4/debug/debug.h" 3
namespace std {
# 49 "/usr/include/c++/4.4/debug/debug.h" 3
namespace __debug { }
# 50 "/usr/include/c++/4.4/debug/debug.h" 3
}
# 55 "/usr/include/c++/4.4/debug/debug.h" 3
namespace __gnu_debug {
# 57 "/usr/include/c++/4.4/debug/debug.h" 3
using namespace std::__debug;
# 58 "/usr/include/c++/4.4/debug/debug.h" 3
}
# 74 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
namespace std __attribute__((visibility("default"))) {
# 79 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<bool _BoolType>
# 80 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __iter_swap {
# 82 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
        static void
        iter_swap ( _ForwardIterator1 __a, _ForwardIterator2 __b )
        {
          typedef typename iterator_traits < _ForwardIterator1 > :: value_type
            _ValueType1;
          _ValueType1 __tmp = ( * __a );
          * __a = ( * __b );
          * __b = ( __tmp );
 }
# 92 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 95 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<> struct __iter_swap< true> {
# 97 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
        static void
        iter_swap ( _ForwardIterator1 __a, _ForwardIterator2 __b )
        {
          swap ( * __a, * __b );
        }
# 103 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 115 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    inline void
    iter_swap ( _ForwardIterator1 __a, _ForwardIterator2 __b )
    {
      typedef typename iterator_traits < _ForwardIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _ForwardIterator2 > :: value_type
 _ValueType2;
# 134 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
      typedef typename iterator_traits < _ForwardIterator1 > :: reference
 _ReferenceType1;
      typedef typename iterator_traits < _ForwardIterator2 > :: reference
 _ReferenceType2;
      std :: __iter_swap < __are_same < _ValueType1, _ValueType2 > :: __value
 && __are_same < _ValueType1 &, _ReferenceType1 > :: __value
 && __are_same < _ValueType2 &, _ReferenceType2 > :: __value > ::
 iter_swap ( __a, __b );
    }
# 156 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    _ForwardIterator2
    swap_ranges ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2 )
    {





      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2 )
 std :: iter_swap ( __first1, __first2 );
      return __first2;
    }
# 184 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp >
    inline const _Tp &
    min ( const _Tp & __a, const _Tp & __b )
    {



      if ( __b < __a )
 return __b;
      return __a;
    }
# 207 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp >
    inline const _Tp &
    max ( const _Tp & __a, const _Tp & __b )
    {



      if ( __a < __b )
 return __b;
      return __a;
    }
# 230 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp, typename _Compare >
    inline const _Tp &
    min ( const _Tp & __a, const _Tp & __b, _Compare __comp )
    {

      if ( __comp ( __b, __a ) )
 return __b;
      return __a;
    }
# 251 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp, typename _Compare >
    inline const _Tp &
    max ( const _Tp & __a, const _Tp & __b, _Compare __comp )
    {

      if ( __comp ( __a, __b ) )
 return __b;
      return __a;
    }
# 264 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Iterator,
    bool _IsNormal = __is_normal_iterator < _Iterator > :: __value >
    struct __niter_base
    {
      static _Iterator
      __b ( _Iterator __it )
      { return __it; }
    };
# 273 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Iterator >
    struct __niter_base < _Iterator, true >
    {
      static typename _Iterator :: iterator_type
      __b ( _Iterator __it )
      { return __it . base ( ); }
    };
# 282 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Iterator,
    bool _IsMove = __is_move_iterator < _Iterator > :: __value >
    struct __miter_base
    {
      static _Iterator
      __b ( _Iterator __it )
      { return __it; }
    };
# 291 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Iterator >
    struct __miter_base < _Iterator, true >
    {
      static typename _Iterator :: iterator_type
      __b ( _Iterator __it )
      { return __it . base ( ); }
    };
# 305 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<bool __T3, bool __T4, class >
# 306 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __copy_move {
# 308 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II, typename _OI >
        static _OI
        __copy_m ( _II __first, _II __last, _OI __result )
        {
   for (; __first != __last; ++ __result, ++ __first )
     * __result = * __first;
   return __result;
 }
# 316 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 334 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<> struct __copy_move< false, false, random_access_iterator_tag> {
# 336 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II, typename _OI >
        static _OI
        __copy_m ( _II __first, _II __last, _OI __result )
        {
   typedef typename iterator_traits < _II > :: difference_type _Distance;
   for ( _Distance __n = __last - __first; __n > 0; -- __n )
     {
       * __result = * __first;
       ++ __first;
       ++ __result;
     }
   return __result;
 }
# 349 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 371 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<bool _IsMove>
# 372 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __copy_move< _IsMove, true, random_access_iterator_tag> {
# 374 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp >
        static _Tp *
        __copy_m ( const _Tp * __first, const _Tp * __last, _Tp * __result )
        {
   __builtin_memmove ( __result, __first,
       sizeof ( _Tp ) * ( __last - __first ) );
   return __result + ( __last - __first );
 }
# 382 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 384 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _IsMove, typename _II, typename _OI >
    inline _OI
    __copy_move_a ( _II __first, _II __last, _OI __result )
    {
      typedef typename iterator_traits < _II > :: value_type _ValueTypeI;
      typedef typename iterator_traits < _OI > :: value_type _ValueTypeO;
      typedef typename iterator_traits < _II > :: iterator_category _Category;
      const bool __simple = ( __is_pod ( _ValueTypeI )
                      && __is_pointer < _II > :: __value
                      && __is_pointer < _OI > :: __value
        && __are_same < _ValueTypeI, _ValueTypeO > :: __value );

      return std :: __copy_move < _IsMove, __simple,
                       _Category > :: __copy_m ( __first, __last, __result );
    }
# 402 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<class _CharT> struct char_traits;
# 405 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<class _CharT, class _Traits> class istreambuf_iterator;
# 408 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<class _CharT, class _Traits> class ostreambuf_iterator;
# 411 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
      ostreambuf_iterator < _CharT, char_traits < _CharT > > > :: __type
    __copy_move_a2 ( _CharT *, _CharT *,
     ostreambuf_iterator < _CharT, char_traits < _CharT > > );
# 417 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
      ostreambuf_iterator < _CharT, char_traits < _CharT > > > :: __type
    __copy_move_a2 ( const _CharT *, const _CharT *,
     ostreambuf_iterator < _CharT, char_traits < _CharT > > );
# 423 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
        _CharT * > :: __type
    __copy_move_a2 ( istreambuf_iterator < _CharT, char_traits < _CharT > >,
     istreambuf_iterator < _CharT, char_traits < _CharT > >, _CharT * );
# 429 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _IsMove, typename _II, typename _OI >
    inline _OI
    __copy_move_a2 ( _II __first, _II __last, _OI __result )
    {
      return _OI ( std :: __copy_move_a < _IsMove >
   ( std :: __niter_base < _II > :: __b ( __first ),
    std :: __niter_base < _II > :: __b ( __last ),
    std :: __niter_base < _OI > :: __b ( __result ) ) );
    }
# 456 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II, typename _OI >
    inline _OI
    copy ( _II __first, _II __last, _OI __result )
    {




      ;

      return ( std :: __copy_move_a2 < __is_move_iterator < _II > :: __value >
       ( std :: __miter_base < _II > :: __b ( __first ),
        std :: __miter_base < _II > :: __b ( __last ), __result ) );
    }
# 509 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<bool __T5, bool __T6, class >
# 510 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __copy_move_backward {
# 512 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
        static _BI2
        __copy_move_b ( _BI1 __first, _BI1 __last, _BI2 __result )
        {
   while ( __first != __last )
     * -- __result = * -- __last;
   return __result;
 }
# 520 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 538 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<> struct __copy_move_backward< false, false, random_access_iterator_tag> {
# 540 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
        static _BI2
        __copy_move_b ( _BI1 __first, _BI1 __last, _BI2 __result )
        {
   typename iterator_traits < _BI1 > :: difference_type __n;
   for ( __n = __last - __first; __n > 0; -- __n )
     * -- __result = * -- __last;
   return __result;
 }
# 549 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 567 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<bool _IsMove>
# 568 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __copy_move_backward< _IsMove, true, random_access_iterator_tag> {
# 570 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp >
        static _Tp *
        __copy_move_b ( const _Tp * __first, const _Tp * __last, _Tp * __result )
        {
   const ptrdiff_t _Num = __last - __first;
   __builtin_memmove ( __result - _Num, __first, sizeof ( _Tp ) * _Num );
   return __result - _Num;
 }
# 578 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 580 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _IsMove, typename _BI1, typename _BI2 >
    inline _BI2
    __copy_move_backward_a ( _BI1 __first, _BI1 __last, _BI2 __result )
    {
      typedef typename iterator_traits < _BI1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _BI2 > :: value_type _ValueType2;
      typedef typename iterator_traits < _BI1 > :: iterator_category _Category;
      const bool __simple = ( __is_pod ( _ValueType1 )
                      && __is_pointer < _BI1 > :: __value
                      && __is_pointer < _BI2 > :: __value
        && __are_same < _ValueType1, _ValueType2 > :: __value );

      return std :: __copy_move_backward < _IsMove, __simple,
                                _Category > :: __copy_move_b ( __first,
         __last,
         __result );
    }
# 598 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _IsMove, typename _BI1, typename _BI2 >
    inline _BI2
    __copy_move_backward_a2 ( _BI1 __first, _BI1 __last, _BI2 __result )
    {
      return _BI2 ( std :: __copy_move_backward_a < _IsMove >
    ( std :: __niter_base < _BI1 > :: __b ( __first ),
     std :: __niter_base < _BI1 > :: __b ( __last ),
     std :: __niter_base < _BI2 > :: __b ( __result ) ) );
    }
# 626 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
    inline _BI2
    copy_backward ( _BI1 __first, _BI1 __last, _BI2 __result )
    {






      ;

      return ( std :: __copy_move_backward_a2 < __is_move_iterator < _BI1 > :: __value >
       ( std :: __miter_base < _BI1 > :: __b ( __first ),
        std :: __miter_base < _BI1 > :: __b ( __last ), __result ) );
    }
# 684 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < ! __is_scalar < _Tp > :: __value, void > :: __type
    __fill_a ( _ForwardIterator __first, _ForwardIterator __last,
       const _Tp & __value )
    {
      for (; __first != __last; ++ __first )
 * __first = __value;
    }
# 694 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_scalar < _Tp > :: __value, void > :: __type
    __fill_a ( _ForwardIterator __first, _ForwardIterator __last,
      const _Tp & __value )
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++ __first )
 * __first = __tmp;
    }
# 706 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_byte < _Tp > :: __value, void > :: __type
    __fill_a ( _Tp * __first, _Tp * __last, const _Tp & __c )
    {
      const _Tp __tmp = __c;
      __builtin_memset ( __first, static_cast < unsigned char > ( __tmp ),
         __last - __first );
    }
# 728 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline void
    fill ( _ForwardIterator __first, _ForwardIterator __last, const _Tp & __value )
    {



      ;

      std :: __fill_a ( std :: __niter_base < _ForwardIterator > :: __b ( __first ),
      std :: __niter_base < _ForwardIterator > :: __b ( __last ), __value );
    }
# 741 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _OutputIterator, typename _Size, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < ! __is_scalar < _Tp > :: __value, _OutputIterator > :: __type
    __fill_n_a ( _OutputIterator __first, _Size __n, const _Tp & __value )
    {
      for (; __n > 0; -- __n, ++ __first )
 * __first = __value;
      return __first;
    }
# 751 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _OutputIterator, typename _Size, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_scalar < _Tp > :: __value, _OutputIterator > :: __type
    __fill_n_a ( _OutputIterator __first, _Size __n, const _Tp & __value )
    {
      const _Tp __tmp = __value;
      for (; __n > 0; -- __n, ++ __first )
 * __first = __tmp;
      return __first;
    }
# 762 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Size, typename _Tp >
    inline typename
    __gnu_cxx :: __enable_if < __is_byte < _Tp > :: __value, _Tp * > :: __type
    __fill_n_a ( _Tp * __first, _Size __n, const _Tp & __c )
    {
      std :: __fill_a ( __first, __first + __n, __c );
      return __first + __n;
    }
# 783 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _OI, typename _Size, typename _Tp >
    inline _OI
    fill_n ( _OI __first, _Size __n, const _Tp & __value )
    {



      return _OI ( std :: __fill_n_a ( std :: __niter_base < _OI > :: __b ( __first ),
     __n, __value ) );
    }
# 794 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<bool _BoolType>
# 795 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __equal {
# 797 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
        static bool
        equal ( _II1 __first1, _II1 __last1, _II2 __first2 )
        {
   for (; __first1 != __last1; ++ __first1, ++ __first2 )
     if ( ! ( * __first1 == * __first2 ) )
       return false;
   return true;
 }
# 806 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 809 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<> struct __equal< true> {
# 811 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp >
        static bool
        equal ( const _Tp * __first1, const _Tp * __last1, const _Tp * __first2 )
        {
   return ! __builtin_memcmp ( __first1, __first2, sizeof ( _Tp )
       * ( __last1 - __first1 ) );
 }
# 818 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 820 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
    inline bool
    __equal_aux ( _II1 __first1, _II1 __last1, _II2 __first2 )
    {
      typedef typename iterator_traits < _II1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _II2 > :: value_type _ValueType2;
      const bool __simple = ( __is_integer < _ValueType1 > :: __value
                      && __is_pointer < _II1 > :: __value
                      && __is_pointer < _II2 > :: __value
        && __are_same < _ValueType1, _ValueType2 > :: __value );

      return std :: __equal < __simple > :: equal ( __first1, __last1, __first2 );
    }
# 835 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<class , class >
# 836 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __lc_rai {
# 838 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
        static _II1
        __newlast1 ( _II1, _II1 __last1, _II2, _II2 )
        { return __last1; }
# 843 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II >
        static bool
        __cnd2 ( _II __first, _II __last )
        { return __first != __last; }
# 847 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 850 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<> struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag> {
# 852 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _RAI1, typename _RAI2 >
        static _RAI1
        __newlast1 ( _RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2 )
        {
   const typename iterator_traits < _RAI1 > :: difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits < _RAI2 > :: difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }
# 864 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _RAI >
        static bool
        __cnd2 ( _RAI, _RAI )
        { return true; }
# 868 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 870 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<bool _BoolType>
# 871 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
struct __lexicographical_compare {
# 873 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
        static bool __lc ( _II1, _II1, _II2, _II2 );
# 875 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 877 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < bool _BoolType >
    template < typename _II1, typename _II2 >
      bool
      __lexicographical_compare < _BoolType > ::
      __lc ( _II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2 )
      {
 typedef typename iterator_traits < _II1 > :: iterator_category _Category1;
 typedef typename iterator_traits < _II2 > :: iterator_category _Category2;
 typedef std :: __lc_rai < _Category1, _Category2 > __rai_type;

 __last1 = __rai_type :: __newlast1 ( __first1, __last1,
      __first2, __last2 );
 for (; __first1 != __last1 && __rai_type :: __cnd2 ( __first2, __last2 );
      ++ __first1, ++ __first2 )
   {
     if ( * __first1 < * __first2 )
       return true;
     if ( * __first2 < * __first1 )
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }
# 901 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template<> struct __lexicographical_compare< true> {
# 903 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _Tp, typename _Up >
        static bool
        __lc ( const _Tp * __first1, const _Tp * __last1,
      const _Up * __first2, const _Up * __last2 )
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp ( __first1, __first2,
      std :: min ( __len1, __len2 ) );
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
# 914 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
};
# 916 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
    inline bool
    __lexicographical_compare_aux ( _II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2 )
    {
      typedef typename iterator_traits < _II1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _II2 > :: value_type _ValueType2;
      const bool __simple =
 ( __is_byte < _ValueType1 > :: __value && __is_byte < _ValueType2 > :: __value
  && ! __gnu_cxx :: __numeric_traits < _ValueType1 > :: __is_signed
  && ! __gnu_cxx :: __numeric_traits < _ValueType2 > :: __is_signed
  && __is_pointer < _II1 > :: __value
  && __is_pointer < _II2 > :: __value );

      return std :: __lexicographical_compare < __simple > :: __lc ( __first1, __last1,
           __first2, __last2 );
    }
# 934 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
}
# 936 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
namespace std __attribute__((visibility("default"))) {
# 950 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
    inline bool
    equal ( _II1 __first1, _II1 __last1, _II2 __first2 )
    {






      ;

      return std :: __equal_aux ( std :: __niter_base < _II1 > :: __b ( __first1 ),
         std :: __niter_base < _II1 > :: __b ( __last1 ),
         std :: __niter_base < _II2 > :: __b ( __first2 ) );
    }
# 982 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _IIter1, typename _IIter2, typename _BinaryPredicate >
    inline bool
    equal ( _IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred )
    {



      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2 )
 if ( ! bool ( __binary_pred ( * __first1, * __first2 ) ) )
   return false;
      return true;
    }
# 1013 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2 >
    inline bool
    lexicographical_compare ( _II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2 )
    {

      typedef typename iterator_traits < _II1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _II2 > :: value_type _ValueType2;




      ;
      ;

      return std :: __lexicographical_compare_aux
 ( std :: __niter_base < _II1 > :: __b ( __first1 ),
  std :: __niter_base < _II1 > :: __b ( __last1 ),
  std :: __niter_base < _II2 > :: __b ( __first2 ),
  std :: __niter_base < _II2 > :: __b ( __last2 ) );
    }
# 1048 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _II1, typename _II2, typename _Compare >
    bool
    lexicographical_compare ( _II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp )
    {
      typedef typename iterator_traits < _II1 > :: iterator_category _Category1;
      typedef typename iterator_traits < _II2 > :: iterator_category _Category2;
      typedef std :: __lc_rai < _Category1, _Category2 > __rai_type;




      ;
      ;

      __last1 = __rai_type :: __newlast1 ( __first1, __last1, __first2, __last2 );
      for (; __first1 != __last1 && __rai_type :: __cnd2 ( __first2, __last2 );
    ++ __first1, ++ __first2 )
 {
   if ( __comp ( * __first1, * __first2 ) )
     return true;
   if ( __comp ( * __first2, * __first1 ) )
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1088 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _InputIterator1, typename _InputIterator2 >
    pair < _InputIterator1, _InputIterator2 >
    mismatch ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2 )
    {






      ;

      while ( __first1 != __last1 && * __first1 == * __first2 )
        {
   ++ __first1;
   ++ __first2;
        }
      return pair < _InputIterator1, _InputIterator2 > ( __first1, __first2 );
    }
# 1125 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate >
    pair < _InputIterator1, _InputIterator2 >
    mismatch ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred )
    {



      ;

      while ( __first1 != __last1 && bool ( __binary_pred ( * __first1, * __first2 ) ) )
        {
   ++ __first1;
   ++ __first2;
        }
      return pair < _InputIterator1, _InputIterator2 > ( __first1, __first2 );
    }
# 1144 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
}
# 52 "/usr/include/c++/4.4/bits/char_traits.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 64 "/usr/include/c++/4.4/bits/char_traits.h" 3
template<class _CharT>
# 65 "/usr/include/c++/4.4/bits/char_traits.h" 3
struct _Char_types {
# 67 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef unsigned long int_type;
# 68 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef std::streampos pos_type;
# 69 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef std::streamoff off_type;
# 70 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef mbstate_t state_type;
# 71 "/usr/include/c++/4.4/bits/char_traits.h" 3
};
# 89 "/usr/include/c++/4.4/bits/char_traits.h" 3
template < typename _CharT >
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types < _CharT > :: int_type int_type;
      typedef typename _Char_types < _CharT > :: pos_type pos_type;
      typedef typename _Char_types < _CharT > :: off_type off_type;
      typedef typename _Char_types < _CharT > :: state_type state_type;

      static void
      assign ( char_type & __c1, const char_type & __c2 )
      { __c1 = __c2; }

      static bool
      eq ( const char_type & __c1, const char_type & __c2 )
      { return __c1 == __c2; }

      static bool
      lt ( const char_type & __c1, const char_type & __c2 )
      { return __c1 < __c2; }

      static int
      compare ( const char_type * __s1, const char_type * __s2, std :: size_t __n );

      static std :: size_t
      length ( const char_type * __s );

      static const char_type *
      find ( const char_type * __s, std :: size_t __n, const char_type & __a );

      static char_type *
      move ( char_type * __s1, const char_type * __s2, std :: size_t __n );

      static char_type *
      copy ( char_type * __s1, const char_type * __s2, std :: size_t __n );

      static char_type *
      assign ( char_type * __s, std :: size_t __n, char_type __a );

      static char_type
      to_char_type ( const int_type & __c )
      { return static_cast < char_type > ( __c ); }

      static int_type
      to_int_type ( const char_type & __c )
      { return static_cast < int_type > ( __c ); }

      static bool
      eq_int_type ( const int_type & __c1, const int_type & __c2 )
      { return __c1 == __c2; }

      static int_type
      eof ( )
      { return static_cast < int_type > ( ( - 1 ) ); }

      static int_type
      not_eof ( const int_type & __c )
      { return ! eq_int_type ( __c, eof ( ) ) ? __c : to_int_type ( char_type ( ) ); }
    };
# 149 "/usr/include/c++/4.4/bits/char_traits.h" 3
template < typename _CharT >
    int
    char_traits < _CharT > ::
    compare ( const char_type * __s1, const char_type * __s2, std :: size_t __n )
    {
      for ( std :: size_t __i = 0; __i < __n; ++ __i )
 if ( lt ( __s1 [ __i ], __s2 [ __i ] ) )
   return - 1;
 else if ( lt ( __s2 [ __i ], __s1 [ __i ] ) )
   return 1;
      return 0;
    }
# 162 "/usr/include/c++/4.4/bits/char_traits.h" 3
template < typename _CharT >
    std :: size_t
    char_traits < _CharT > ::
    length ( const char_type * __p )
    {
      std :: size_t __i = 0;
      while ( ! eq ( __p [ __i ], char_type ( ) ) )
        ++ __i;
      return __i;
    }
# 173 "/usr/include/c++/4.4/bits/char_traits.h" 3
template < typename _CharT >
    const typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    find ( const char_type * __s, std :: size_t __n, const char_type & __a )
    {
      for ( std :: size_t __i = 0; __i < __n; ++ __i )
        if ( eq ( __s [ __i ], __a ) )
          return __s + __i;
      return 0;
    }
# 184 "/usr/include/c++/4.4/bits/char_traits.h" 3
template < typename _CharT >
    typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    move ( char_type * __s1, const char_type * __s2, std :: size_t __n )
    {
      return static_cast < _CharT * > ( __builtin_memmove ( __s1, __s2,
          __n * sizeof ( char_type ) ) );
    }
# 193 "/usr/include/c++/4.4/bits/char_traits.h" 3
template < typename _CharT >
    typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    copy ( char_type * __s1, const char_type * __s2, std :: size_t __n )
    {

      std :: copy ( __s2, __s2 + __n, __s1 );
      return __s1;
    }
# 203 "/usr/include/c++/4.4/bits/char_traits.h" 3
template < typename _CharT >
    typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    assign ( char_type * __s, std :: size_t __n, char_type __a )
    {

      std :: fill_n ( __s, __n, __a );
      return __s;
    }
# 213 "/usr/include/c++/4.4/bits/char_traits.h" 3
}
# 215 "/usr/include/c++/4.4/bits/char_traits.h" 3
namespace std __attribute__((visibility("default"))) {
# 230 "/usr/include/c++/4.4/bits/char_traits.h" 3
template<class _CharT>
# 231 "/usr/include/c++/4.4/bits/char_traits.h" 3
struct char_traits : public __gnu_cxx::char_traits< _CharT> {
# 232 "/usr/include/c++/4.4/bits/char_traits.h" 3
};
# 237 "/usr/include/c++/4.4/bits/char_traits.h" 3
template<> struct char_traits< char> {
# 239 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef char char_type;
# 240 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef int int_type;
# 241 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef streampos pos_type;
# 242 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef streamoff off_type;
# 243 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef mbstate_t state_type;
# 246 "/usr/include/c++/4.4/bits/char_traits.h" 3
static void assign(char_type &__c1, const char_type &__c2)
# 247 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ __c1 = __c2; }
# 250 "/usr/include/c++/4.4/bits/char_traits.h" 3
static bool eq(const char_type &__c1, const char_type &__c2)
# 251 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 254 "/usr/include/c++/4.4/bits/char_traits.h" 3
static bool lt(const char_type &__c1, const char_type &__c2)
# 255 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __c1 < __c2; }
# 258 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int compare(const char_type *__s1, const char_type *__s2, size_t __n)
# 259 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __builtin_memcmp(__s1, __s2, __n); }
# 262 "/usr/include/c++/4.4/bits/char_traits.h" 3
static size_t length(const char_type *__s)
# 263 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __builtin_strlen(__s); }
# 266 "/usr/include/c++/4.4/bits/char_traits.h" 3
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a)
# 267 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< const char_type *>(__builtin_memchr(__s, __a, __n)); }
# 270 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n)
# 271 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n)); }
# 274 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n)
# 275 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n)); }
# 278 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type *assign(char_type *__s, size_t __n, char_type __a)
# 279 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< char_type *>(__builtin_memset(__s, __a, __n)); }
# 282 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type to_char_type(const int_type &__c)
# 283 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< char_type>(__c); }
# 288 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int_type to_int_type(const char_type &__c)
# 289 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< int_type>((static_cast< unsigned char>(__c))); }
# 292 "/usr/include/c++/4.4/bits/char_traits.h" 3
static bool eq_int_type(const int_type &__c1, const int_type &__c2)
# 293 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 296 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int_type eof()
# 297 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< int_type>((-1)); }
# 300 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int_type not_eof(const int_type &__c)
# 301 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return (__c == eof()) ? 0 : __c; }
# 302 "/usr/include/c++/4.4/bits/char_traits.h" 3
};
# 308 "/usr/include/c++/4.4/bits/char_traits.h" 3
template<> struct char_traits< wchar_t> {
# 310 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef wchar_t char_type;
# 311 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef wint_t int_type;
# 312 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef streamoff off_type;
# 313 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef wstreampos pos_type;
# 314 "/usr/include/c++/4.4/bits/char_traits.h" 3
typedef mbstate_t state_type;
# 317 "/usr/include/c++/4.4/bits/char_traits.h" 3
static void assign(char_type &__c1, const char_type &__c2)
# 318 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ __c1 = __c2; }
# 321 "/usr/include/c++/4.4/bits/char_traits.h" 3
static bool eq(const char_type &__c1, const char_type &__c2)
# 322 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 325 "/usr/include/c++/4.4/bits/char_traits.h" 3
static bool lt(const char_type &__c1, const char_type &__c2)
# 326 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __c1 < __c2; }
# 329 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int compare(const char_type *__s1, const char_type *__s2, size_t __n)
# 330 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return wmemcmp(__s1, __s2, __n); }
# 333 "/usr/include/c++/4.4/bits/char_traits.h" 3
static size_t length(const char_type *__s)
# 334 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return wcslen(__s); }
# 337 "/usr/include/c++/4.4/bits/char_traits.h" 3
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a)
# 338 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return wmemchr(__s, __a, __n); }
# 341 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n)
# 342 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return wmemmove(__s1, __s2, __n); }
# 345 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n)
# 346 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return wmemcpy(__s1, __s2, __n); }
# 349 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type *assign(char_type *__s, size_t __n, char_type __a)
# 350 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return wmemset(__s, __a, __n); }
# 353 "/usr/include/c++/4.4/bits/char_traits.h" 3
static char_type to_char_type(const int_type &__c)
# 354 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return (char_type)__c; }
# 357 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int_type to_int_type(const char_type &__c)
# 358 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return (int_type)__c; }
# 361 "/usr/include/c++/4.4/bits/char_traits.h" 3
static bool eq_int_type(const int_type &__c1, const int_type &__c2)
# 362 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 365 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int_type eof()
# 366 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return static_cast< int_type>(4294967295U); }
# 369 "/usr/include/c++/4.4/bits/char_traits.h" 3
static int_type not_eof(const int_type &__c)
# 370 "/usr/include/c++/4.4/bits/char_traits.h" 3
{ return eq_int_type(__c, eof()) ? (0) : __c; }
# 371 "/usr/include/c++/4.4/bits/char_traits.h" 3
};
# 374 "/usr/include/c++/4.4/bits/char_traits.h" 3
}
# 28 "/usr/include/bits/locale.h" 3
enum {
# 29 "/usr/include/bits/locale.h" 3
__LC_CTYPE,
# 30 "/usr/include/bits/locale.h" 3
__LC_NUMERIC,
# 31 "/usr/include/bits/locale.h" 3
__LC_TIME,
# 32 "/usr/include/bits/locale.h" 3
__LC_COLLATE,
# 33 "/usr/include/bits/locale.h" 3
__LC_MONETARY,
# 34 "/usr/include/bits/locale.h" 3
__LC_MESSAGES,
# 35 "/usr/include/bits/locale.h" 3
__LC_ALL,
# 36 "/usr/include/bits/locale.h" 3
__LC_PAPER,
# 37 "/usr/include/bits/locale.h" 3
__LC_NAME,
# 38 "/usr/include/bits/locale.h" 3
__LC_ADDRESS,
# 39 "/usr/include/bits/locale.h" 3
__LC_TELEPHONE,
# 40 "/usr/include/bits/locale.h" 3
__LC_MEASUREMENT,
# 41 "/usr/include/bits/locale.h" 3
__LC_IDENTIFICATION
# 42 "/usr/include/bits/locale.h" 3
};
# 54 "/usr/include/locale.h" 3
extern "C" { struct lconv {
# 58 "/usr/include/locale.h" 3
char *decimal_point;
# 59 "/usr/include/locale.h" 3
char *thousands_sep;
# 65 "/usr/include/locale.h" 3
char *grouping;
# 71 "/usr/include/locale.h" 3
char *int_curr_symbol;
# 72 "/usr/include/locale.h" 3
char *currency_symbol;
# 73 "/usr/include/locale.h" 3
char *mon_decimal_point;
# 74 "/usr/include/locale.h" 3
char *mon_thousands_sep;
# 75 "/usr/include/locale.h" 3
char *mon_grouping;
# 76 "/usr/include/locale.h" 3
char *positive_sign;
# 77 "/usr/include/locale.h" 3
char *negative_sign;
# 78 "/usr/include/locale.h" 3
char int_frac_digits;
# 79 "/usr/include/locale.h" 3
char frac_digits;
# 81 "/usr/include/locale.h" 3
char p_cs_precedes;
# 83 "/usr/include/locale.h" 3
char p_sep_by_space;
# 85 "/usr/include/locale.h" 3
char n_cs_precedes;
# 87 "/usr/include/locale.h" 3
char n_sep_by_space;
# 94 "/usr/include/locale.h" 3
char p_sign_posn;
# 95 "/usr/include/locale.h" 3
char n_sign_posn;
# 98 "/usr/include/locale.h" 3
char int_p_cs_precedes;
# 100 "/usr/include/locale.h" 3
char int_p_sep_by_space;
# 102 "/usr/include/locale.h" 3
char int_n_cs_precedes;
# 104 "/usr/include/locale.h" 3
char int_n_sep_by_space;
# 111 "/usr/include/locale.h" 3
char int_p_sign_posn;
# 112 "/usr/include/locale.h" 3
char int_n_sign_posn;
# 121 "/usr/include/locale.h" 3
}; }
# 125 "/usr/include/locale.h" 3
extern "C" char *setlocale(int, const char *) throw();
# 128 "/usr/include/locale.h" 3
extern "C" lconv *localeconv() throw();
# 152 "/usr/include/locale.h" 3
extern "C" __locale_t newlocale(int, const char *, __locale_t) throw();
# 187 "/usr/include/locale.h" 3
extern "C" __locale_t duplocale(__locale_t) throw();
# 191 "/usr/include/locale.h" 3
extern "C" void freelocale(__locale_t) throw();
# 198 "/usr/include/locale.h" 3
extern "C" __locale_t uselocale(__locale_t) throw();
# 53 "/usr/include/c++/4.4/clocale" 3
namespace std __attribute__((visibility("default"))) {
# 55 "/usr/include/c++/4.4/clocale" 3
using ::lconv;
# 56 "/usr/include/c++/4.4/clocale" 3
using ::setlocale;
# 57 "/usr/include/c++/4.4/clocale" 3
using ::localeconv;
# 59 "/usr/include/c++/4.4/clocale" 3
}
# 50 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 52 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
extern "C" __typeof__(uselocale) __uselocale;
# 54 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
}
# 57 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
namespace std __attribute__((visibility("default"))) {
# 59 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
typedef __locale_t __c_locale;
# 66 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
inline int __convert_from_v(const __c_locale &__cloc __attribute__((__unused__)), char *
# 67 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
__out, const int
# 68 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
__size __attribute__((__unused__)), const char *
# 69 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
__fmt, ...)
# 70 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
{
# 72 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
__c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 85 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
__builtin_va_list __args;
# 86 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
__builtin_va_start(__args,__fmt);
# 89 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);
# 94 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
__builtin_va_end(__args);
# 97 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
__gnu_cxx::__uselocale(__old);
# 105 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
return __ret;
# 106 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
}
# 108 "/usr/include/c++/4.4/i486-linux-gnu/bits/c++locale.h" 3
}
# 49 "/usr/include/ctype.h" 3
enum {
# 50 "/usr/include/ctype.h" 3
_ISupper = 256,
# 51 "/usr/include/ctype.h" 3
_ISlower = 512,
# 52 "/usr/include/ctype.h" 3
_ISalpha = 1024,
# 53 "/usr/include/ctype.h" 3
_ISdigit = 2048,
# 54 "/usr/include/ctype.h" 3
_ISxdigit = 4096,
# 55 "/usr/include/ctype.h" 3
_ISspace = 8192,
# 56 "/usr/include/ctype.h" 3
_ISprint = 16384,
# 57 "/usr/include/ctype.h" 3
_ISgraph = 32768,
# 58 "/usr/include/ctype.h" 3
_ISblank = 1,
# 59 "/usr/include/ctype.h" 3
_IScntrl,
# 60 "/usr/include/ctype.h" 3
_ISpunct = 4,
# 61 "/usr/include/ctype.h" 3
_ISalnum = 8
# 62 "/usr/include/ctype.h" 3
};
# 81 "/usr/include/ctype.h" 3
extern "C" const unsigned short **__ctype_b_loc() throw() __attribute__((__const__));
# 83 "/usr/include/ctype.h" 3
extern "C" const __int32_t **__ctype_tolower_loc() throw() __attribute__((__const__));
# 85 "/usr/include/ctype.h" 3
extern "C" const __int32_t **__ctype_toupper_loc() throw() __attribute__((__const__));
# 102 "/usr/include/ctype.h" 3
extern "C" int isalnum(int) throw();
# 103 "/usr/include/ctype.h" 3
extern "C" int isalpha(int) throw();
# 104 "/usr/include/ctype.h" 3
extern "C" int iscntrl(int) throw();
# 105 "/usr/include/ctype.h" 3
extern "C" int isdigit(int) throw();
# 106 "/usr/include/ctype.h" 3
extern "C" int islower(int) throw();
# 107 "/usr/include/ctype.h" 3
extern "C" int isgraph(int) throw();
# 108 "/usr/include/ctype.h" 3
extern "C" int isprint(int) throw();
# 109 "/usr/include/ctype.h" 3
extern "C" int ispunct(int) throw();
# 110 "/usr/include/ctype.h" 3
extern "C" int isspace(int) throw();
# 111 "/usr/include/ctype.h" 3
extern "C" int isupper(int) throw();
# 112 "/usr/include/ctype.h" 3
extern "C" int isxdigit(int) throw();
# 116 "/usr/include/ctype.h" 3
extern "C" int tolower(int) throw();
# 119 "/usr/include/ctype.h" 3
extern "C" int toupper(int) throw();
# 128 "/usr/include/ctype.h" 3
extern "C" int isblank(int) throw();
# 135 "/usr/include/ctype.h" 3
extern "C" int isctype(int, int) throw();
# 142 "/usr/include/ctype.h" 3
extern "C" int isascii(int) throw();
# 146 "/usr/include/ctype.h" 3
extern "C" int toascii(int) throw();
# 150 "/usr/include/ctype.h" 3
extern "C" int _toupper(int) throw();
# 151 "/usr/include/ctype.h" 3
extern "C" int _tolower(int) throw();
# 247 "/usr/include/ctype.h" 3
extern "C" int isalnum_l(int, __locale_t) throw();
# 248 "/usr/include/ctype.h" 3
extern "C" int isalpha_l(int, __locale_t) throw();
# 249 "/usr/include/ctype.h" 3
extern "C" int iscntrl_l(int, __locale_t) throw();
# 250 "/usr/include/ctype.h" 3
extern "C" int isdigit_l(int, __locale_t) throw();
# 251 "/usr/include/ctype.h" 3
extern "C" int islower_l(int, __locale_t) throw();
# 252 "/usr/include/ctype.h" 3
extern "C" int isgraph_l(int, __locale_t) throw();
# 253 "/usr/include/ctype.h" 3
extern "C" int isprint_l(int, __locale_t) throw();
# 254 "/usr/include/ctype.h" 3
extern "C" int ispunct_l(int, __locale_t) throw();
# 255 "/usr/include/ctype.h" 3
extern "C" int isspace_l(int, __locale_t) throw();
# 256 "/usr/include/ctype.h" 3
extern "C" int isupper_l(int, __locale_t) throw();
# 257 "/usr/include/ctype.h" 3
extern "C" int isxdigit_l(int, __locale_t) throw();
# 259 "/usr/include/ctype.h" 3
extern "C" int isblank_l(int, __locale_t) throw();
# 263 "/usr/include/ctype.h" 3
extern "C" int __tolower_l(int, __locale_t) throw();
# 264 "/usr/include/ctype.h" 3
extern "C" int tolower_l(int, __locale_t) throw();
# 267 "/usr/include/ctype.h" 3
extern "C" int __toupper_l(int, __locale_t) throw();
# 268 "/usr/include/ctype.h" 3
extern "C" int toupper_l(int, __locale_t) throw();
# 64 "/usr/include/c++/4.4/cctype" 3
namespace std __attribute__((visibility("default"))) {
# 66 "/usr/include/c++/4.4/cctype" 3
using ::isalnum;
# 67 "/usr/include/c++/4.4/cctype" 3
using ::isalpha;
# 68 "/usr/include/c++/4.4/cctype" 3
using ::iscntrl;
# 69 "/usr/include/c++/4.4/cctype" 3
using ::isdigit;
# 70 "/usr/include/c++/4.4/cctype" 3
using ::isgraph;
# 71 "/usr/include/c++/4.4/cctype" 3
using ::islower;
# 72 "/usr/include/c++/4.4/cctype" 3
using ::isprint;
# 73 "/usr/include/c++/4.4/cctype" 3
using ::ispunct;
# 74 "/usr/include/c++/4.4/cctype" 3
using ::isspace;
# 75 "/usr/include/c++/4.4/cctype" 3
using ::isupper;
# 76 "/usr/include/c++/4.4/cctype" 3
using ::isxdigit;
# 77 "/usr/include/c++/4.4/cctype" 3
using ::tolower;
# 78 "/usr/include/c++/4.4/cctype" 3
using ::toupper;
# 80 "/usr/include/c++/4.4/cctype" 3
}
# 46 "/usr/include/c++/4.4/bits/localefwd.h" 3
namespace std __attribute__((visibility("default"))) {
# 49 "/usr/include/c++/4.4/bits/localefwd.h" 3
class locale;
# 51 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _Facet >
    bool
    has_facet ( const locale & ) throw ( );
# 55 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _Facet >
    const _Facet &
    use_facet ( const locale & );
# 60 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isspace ( _CharT, const locale & );
# 64 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isprint ( _CharT, const locale & );
# 68 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    iscntrl ( _CharT, const locale & );
# 72 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isupper ( _CharT, const locale & );
# 76 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    islower ( _CharT, const locale & );
# 80 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isalpha ( _CharT, const locale & );
# 84 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isdigit ( _CharT, const locale & );
# 88 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    ispunct ( _CharT, const locale & );
# 92 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isxdigit ( _CharT, const locale & );
# 96 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isalnum ( _CharT, const locale & );
# 100 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    bool
    isgraph ( _CharT, const locale & );
# 104 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    _CharT
    toupper ( _CharT, const locale & );
# 108 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    _CharT
    tolower ( _CharT, const locale & );
# 113 "/usr/include/c++/4.4/bits/localefwd.h" 3
struct ctype_base;
# 114 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    class ctype;
# 116 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<> class ctype< char> ;
# 118 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<> class ctype< wchar_t> ;
# 120 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    class ctype_byname;
# 124 "/usr/include/c++/4.4/bits/localefwd.h" 3
class codecvt_base;
# 125 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<class _InternT, class _ExternT, class _StateT> class codecvt;
# 127 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<> class codecvt< char, char, __mbstate_t> ;
# 129 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<> class codecvt< wchar_t, char, __mbstate_t> ;
# 131 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<class _InternT, class _ExternT, class _StateT> class codecvt_byname;
# 136 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT, typename _InIter = istreambuf_iterator < _CharT > >
    class num_get;
# 138 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT, typename _OutIter = ostreambuf_iterator < _CharT > >
    class num_put;
# 141 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT > class numpunct;
# 142 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT > class numpunct_byname;
# 145 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT >
    class collate;
# 147 "/usr/include/c++/4.4/bits/localefwd.h" 3
template < typename _CharT > class
    collate_byname;
# 151 "/usr/include/c++/4.4/bits/localefwd.h" 3
class time_base;
# 152 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get;
# 154 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get_byname;
# 156 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put;
# 158 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put_byname;
# 162 "/usr/include/c++/4.4/bits/localefwd.h" 3
class money_base;
# 164 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class money_get;
# 166 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class money_put;
# 169 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<class _CharT, bool _Intl = false> class moneypunct;
# 171 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<class _CharT, bool _Intl = false> class moneypunct_byname;
# 175 "/usr/include/c++/4.4/bits/localefwd.h" 3
class messages_base;
# 176 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<class _CharT> class messages;
# 178 "/usr/include/c++/4.4/bits/localefwd.h" 3
template<class _CharT> class messages_byname;
# 181 "/usr/include/c++/4.4/bits/localefwd.h" 3
}
# 71 "/usr/include/bits/sched.h" 3
struct __attribute__((visibility("default"))) sched_param {
# 73 "/usr/include/bits/sched.h" 3
int __sched_priority;
# 74 "/usr/include/bits/sched.h" 3
};
# 80 "/usr/include/bits/sched.h" 3
extern "C" int clone(int (*)(void *), void *, int, void *, ...) throw() __attribute__((visibility("default")));
# 84 "/usr/include/bits/sched.h" 3
extern "C" int unshare(int) throw() __attribute__((visibility("default")));
# 87 "/usr/include/bits/sched.h" 3
extern "C" int sched_getcpu() throw() __attribute__((visibility("default")));
# 98 "/usr/include/bits/sched.h" 3
struct __attribute__((visibility("default"))) __sched_param {
# 100 "/usr/include/bits/sched.h" 3
int __sched_priority;
# 101 "/usr/include/bits/sched.h" 3
};
# 113 "/usr/include/bits/sched.h" 3
typedef unsigned long __cpu_mask;
# 123 "/usr/include/bits/sched.h" 3
typedef
# 121 "/usr/include/bits/sched.h" 3
struct __attribute__((visibility("default"))) {
# 122 "/usr/include/bits/sched.h" 3
__cpu_mask __bits[((1024) / ((8) * sizeof(__cpu_mask)))];
# 123 "/usr/include/bits/sched.h" 3
} cpu_set_t;
# 198 "/usr/include/bits/sched.h" 3
extern "C" int __sched_cpucount(size_t, const cpu_set_t *) throw() __attribute__((visibility("default")));
# 200 "/usr/include/bits/sched.h" 3
extern "C" cpu_set_t *__sched_cpualloc(size_t) throw() __attribute__((visibility("default")));
# 201 "/usr/include/bits/sched.h" 3
extern "C" void __sched_cpufree(cpu_set_t *) throw() __attribute__((visibility("default")));
# 43 "/usr/include/sched.h" 3
extern "C" int sched_setparam(__pid_t, const sched_param *) throw() __attribute__((visibility("default")));
# 47 "/usr/include/sched.h" 3
extern "C" int sched_getparam(__pid_t, sched_param *) throw() __attribute__((visibility("default")));
# 50 "/usr/include/sched.h" 3
extern "C" int sched_setscheduler(__pid_t, int, const sched_param *) throw() __attribute__((visibility("default")));
# 54 "/usr/include/sched.h" 3
extern "C" int sched_getscheduler(__pid_t) throw() __attribute__((visibility("default")));
# 57 "/usr/include/sched.h" 3
extern "C" int sched_yield() throw() __attribute__((visibility("default")));
# 60 "/usr/include/sched.h" 3
extern "C" int sched_get_priority_max(int) throw() __attribute__((visibility("default")));
# 63 "/usr/include/sched.h" 3
extern "C" int sched_get_priority_min(int) throw() __attribute__((visibility("default")));
# 66 "/usr/include/sched.h" 3
extern "C" int sched_rr_get_interval(__pid_t, timespec *) throw() __attribute__((visibility("default")));
# 110 "/usr/include/sched.h" 3
extern "C" int sched_setaffinity(__pid_t, size_t, const cpu_set_t *) throw() __attribute__((visibility("default")));
# 114 "/usr/include/sched.h" 3
extern "C" int sched_getaffinity(__pid_t, size_t, cpu_set_t *) throw() __attribute__((visibility("default")));
# 34 "/usr/include/bits/setjmp.h" 3
typedef int __jmp_buf[6];
# 37 "/usr/include/pthread.h" 3
enum {
# 38 "/usr/include/pthread.h" 3
PTHREAD_CREATE_JOINABLE,
# 40 "/usr/include/pthread.h" 3
PTHREAD_CREATE_DETACHED
# 42 "/usr/include/pthread.h" 3
};
# 47 "/usr/include/pthread.h" 3
enum {
# 48 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_TIMED_NP,
# 49 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_RECURSIVE_NP,
# 50 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_ERRORCHECK_NP,
# 51 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_ADAPTIVE_NP,
# 54 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_NORMAL = 0,
# 55 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_RECURSIVE,
# 56 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_ERRORCHECK,
# 57 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_DEFAULT = 0,
# 61 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_FAST_NP = 0
# 63 "/usr/include/pthread.h" 3
};
# 69 "/usr/include/pthread.h" 3
enum {
# 70 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_STALLED,
# 71 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_STALLED_NP = 0,
# 72 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_ROBUST,
# 73 "/usr/include/pthread.h" 3
PTHREAD_MUTEX_ROBUST_NP = 1
# 74 "/usr/include/pthread.h" 3
};
# 81 "/usr/include/pthread.h" 3
enum {
# 82 "/usr/include/pthread.h" 3
PTHREAD_PRIO_NONE,
# 83 "/usr/include/pthread.h" 3
PTHREAD_PRIO_INHERIT,
# 84 "/usr/include/pthread.h" 3
PTHREAD_PRIO_PROTECT
# 85 "/usr/include/pthread.h" 3
};
# 118 "/usr/include/pthread.h" 3
enum {
# 119 "/usr/include/pthread.h" 3
PTHREAD_RWLOCK_PREFER_READER_NP,
# 120 "/usr/include/pthread.h" 3
PTHREAD_RWLOCK_PREFER_WRITER_NP,
# 121 "/usr/include/pthread.h" 3
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
# 122 "/usr/include/pthread.h" 3
PTHREAD_RWLOCK_DEFAULT_NP = 0
# 123 "/usr/include/pthread.h" 3
};
# 150 "/usr/include/pthread.h" 3
enum {
# 151 "/usr/include/pthread.h" 3
PTHREAD_INHERIT_SCHED,
# 153 "/usr/include/pthread.h" 3
PTHREAD_EXPLICIT_SCHED
# 155 "/usr/include/pthread.h" 3
};
# 160 "/usr/include/pthread.h" 3
enum {
# 161 "/usr/include/pthread.h" 3
PTHREAD_SCOPE_SYSTEM,
# 163 "/usr/include/pthread.h" 3
PTHREAD_SCOPE_PROCESS
# 165 "/usr/include/pthread.h" 3
};
# 170 "/usr/include/pthread.h" 3
enum {
# 171 "/usr/include/pthread.h" 3
PTHREAD_PROCESS_PRIVATE,
# 173 "/usr/include/pthread.h" 3
PTHREAD_PROCESS_SHARED
# 175 "/usr/include/pthread.h" 3
};
# 184 "/usr/include/pthread.h" 3
struct __attribute__((visibility("default"))) _pthread_cleanup_buffer {
# 186 "/usr/include/pthread.h" 3
void (*__routine)(void *);
# 187 "/usr/include/pthread.h" 3
void *__arg;
# 188 "/usr/include/pthread.h" 3
int __canceltype;
# 189 "/usr/include/pthread.h" 3
_pthread_cleanup_buffer *__prev;
# 190 "/usr/include/pthread.h" 3
};
# 194 "/usr/include/pthread.h" 3
enum {
# 195 "/usr/include/pthread.h" 3
PTHREAD_CANCEL_ENABLE,
# 197 "/usr/include/pthread.h" 3
PTHREAD_CANCEL_DISABLE
# 199 "/usr/include/pthread.h" 3
};
# 201 "/usr/include/pthread.h" 3
enum {
# 202 "/usr/include/pthread.h" 3
PTHREAD_CANCEL_DEFERRED,
# 204 "/usr/include/pthread.h" 3
PTHREAD_CANCEL_ASYNCHRONOUS
# 206 "/usr/include/pthread.h" 3
};
# 227 "/usr/include/pthread.h" 3
extern "C" int pthread_create(pthread_t *__restrict__, const pthread_attr_t *__restrict__, void *(*)(void *), void *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 236 "/usr/include/pthread.h" 3
extern "C" void pthread_exit(void *) __attribute__((__noreturn__)) __attribute__((visibility("default")));
# 244 "/usr/include/pthread.h" 3
extern "C" int pthread_join(pthread_t, void **) __attribute__((visibility("default")));
# 249 "/usr/include/pthread.h" 3
extern "C" int pthread_tryjoin_np(pthread_t, void **) throw() __attribute__((visibility("default")));
# 257 "/usr/include/pthread.h" 3
extern "C" int pthread_timedjoin_np(pthread_t, void **, const timespec *) __attribute__((visibility("default")));
# 265 "/usr/include/pthread.h" 3
extern "C" int pthread_detach(pthread_t) throw() __attribute__((visibility("default")));
# 269 "/usr/include/pthread.h" 3
extern "C" pthread_t pthread_self() throw() __attribute__((__const__)) __attribute__((visibility("default")));
# 272 "/usr/include/pthread.h" 3
extern "C" int pthread_equal(pthread_t, pthread_t) throw() __attribute__((visibility("default")));
# 280 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_init(pthread_attr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 283 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_destroy(pthread_attr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 287 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getdetachstate(const pthread_attr_t *, int *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 292 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setdetachstate(pthread_attr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 298 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getguardsize(const pthread_attr_t *, size_t *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 303 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setguardsize(pthread_attr_t *, size_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 309 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getschedparam(const pthread_attr_t *__restrict__, sched_param *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 315 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setschedparam(pthread_attr_t *__restrict__, const sched_param *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 320 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getschedpolicy(const pthread_attr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 325 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setschedpolicy(pthread_attr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 329 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getinheritsched(const pthread_attr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 334 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setinheritsched(pthread_attr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 340 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getscope(const pthread_attr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 345 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setscope(pthread_attr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 349 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getstackaddr(const pthread_attr_t *__restrict__, void **__restrict__) throw() __attribute__((__deprecated__)) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 357 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setstackaddr(pthread_attr_t *, void *) throw() __attribute__((__deprecated__)) __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 362 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getstacksize(const pthread_attr_t *__restrict__, size_t *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 369 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setstacksize(pthread_attr_t *, size_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 375 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getstack(const pthread_attr_t *__restrict__, void **__restrict__, size_t *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 383 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setstack(pthread_attr_t *, void *, size_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 390 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setaffinity_np(pthread_attr_t *, size_t, const cpu_set_t *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 397 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getaffinity_np(const pthread_attr_t *, size_t, cpu_set_t *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 406 "/usr/include/pthread.h" 3
extern "C" int pthread_getattr_np(pthread_t, pthread_attr_t *) throw() __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 415 "/usr/include/pthread.h" 3
extern "C" int pthread_setschedparam(pthread_t, int, const sched_param *) throw() __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 420 "/usr/include/pthread.h" 3
extern "C" int pthread_getschedparam(pthread_t, int *__restrict__, sched_param *__restrict__) throw() __attribute__((nonnull(2))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 426 "/usr/include/pthread.h" 3
extern "C" int pthread_setschedprio(pthread_t, int) throw() __attribute__((visibility("default")));
# 432 "/usr/include/pthread.h" 3
extern "C" int pthread_getconcurrency() throw() __attribute__((visibility("default")));
# 435 "/usr/include/pthread.h" 3
extern "C" int pthread_setconcurrency(int) throw() __attribute__((visibility("default")));
# 443 "/usr/include/pthread.h" 3
extern "C" int pthread_yield() throw() __attribute__((visibility("default")));
# 448 "/usr/include/pthread.h" 3
extern "C" int pthread_setaffinity_np(pthread_t, size_t, const cpu_set_t *) throw() __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 453 "/usr/include/pthread.h" 3
extern "C" int pthread_getaffinity_np(pthread_t, size_t, cpu_set_t *) throw() __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 468 "/usr/include/pthread.h" 3
extern "C" int pthread_once(pthread_once_t *, void (*)(void)) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 480 "/usr/include/pthread.h" 3
extern "C" int pthread_setcancelstate(int, int *) __attribute__((visibility("default")));
# 484 "/usr/include/pthread.h" 3
extern "C" int pthread_setcanceltype(int, int *) __attribute__((visibility("default")));
# 487 "/usr/include/pthread.h" 3
extern "C" int pthread_cancel(pthread_t) __attribute__((visibility("default")));
# 492 "/usr/include/pthread.h" 3
extern "C" void pthread_testcancel() __attribute__((visibility("default")));
# 505 "/usr/include/pthread.h" 3
extern "C" { typedef
# 498 "/usr/include/pthread.h" 3
struct __attribute__((__aligned__(8))) __attribute__((visibility("default"))) {
# 500 "/usr/include/pthread.h" 3
struct {
# 501 "/usr/include/pthread.h" 3
__jmp_buf __cancel_jmp_buf;
# 502 "/usr/include/pthread.h" 3
int __mask_was_saved;
# 503 "/usr/include/pthread.h" 3
} __cancel_jmp_buf[1];
# 504 "/usr/include/pthread.h" 3
void *__pad[4];
# 505 "/usr/include/pthread.h" 3
} __pthread_unwind_buf_t; }
# 514 "/usr/include/pthread.h" 3
extern "C" { struct __attribute__((visibility("default"))) __pthread_cleanup_frame {
# 516 "/usr/include/pthread.h" 3
void (*__cancel_routine)(void *);
# 517 "/usr/include/pthread.h" 3
void *__cancel_arg;
# 518 "/usr/include/pthread.h" 3
int __do_it;
# 519 "/usr/include/pthread.h" 3
int __cancel_type;
# 520 "/usr/include/pthread.h" 3
}; }
# 525 "/usr/include/pthread.h" 3
extern "C" { class __attribute__((visibility("default"))) __pthread_cleanup_class {
# 527 "/usr/include/pthread.h" 3
void (*__cancel_routine)(void *);
# 528 "/usr/include/pthread.h" 3
void *__cancel_arg;
# 529 "/usr/include/pthread.h" 3
int __do_it;
# 530 "/usr/include/pthread.h" 3
int __cancel_type;
# 533 "/usr/include/pthread.h" 3
public: __pthread_cleanup_class(void (*__fct)(void *), void *__arg) : __cancel_routine(__fct), __cancel_arg(__arg), __do_it(1)
# 534 "/usr/include/pthread.h" 3
{ }
# 535 "/usr/include/pthread.h" 3
~__pthread_cleanup_class() { if (__do_it) { (__cancel_routine)(__cancel_arg); } }
# 536 "/usr/include/pthread.h" 3
void __setdoit(int __newval) { (__do_it) = __newval; }
# 537 "/usr/include/pthread.h" 3
void __defer() { pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &(__cancel_type));
# 538 "/usr/include/pthread.h" 3
}
# 539 "/usr/include/pthread.h" 3
void __restore() const { pthread_setcanceltype(__cancel_type, 0); }
# 540 "/usr/include/pthread.h" 3
}; }
# 716 "/usr/include/pthread.h" 3
struct __jmp_buf_tag;
# 717 "/usr/include/pthread.h" 3
extern "C" int __sigsetjmp(__jmp_buf_tag *, int) throw() __attribute__((visibility("default")));
# 723 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 728 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_destroy(pthread_mutex_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 732 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_trylock(pthread_mutex_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 736 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_lock(pthread_mutex_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 741 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_timedlock(pthread_mutex_t *__restrict__, const timespec *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 747 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_unlock(pthread_mutex_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 753 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 760 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_setprioceiling(pthread_mutex_t *__restrict__, int, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 769 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_consistent_np(pthread_mutex_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 772 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_consistent_np(pthread_mutex_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 782 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_init(pthread_mutexattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 786 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_destroy(pthread_mutexattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 790 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getpshared(const pthread_mutexattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 796 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setpshared(pthread_mutexattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 802 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 809 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_settype(pthread_mutexattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 813 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 820 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setprotocol(pthread_mutexattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 825 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 831 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 838 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getrobust(const pthread_mutexattr_t *, int *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 842 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t *, int *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 848 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setrobust(pthread_mutexattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 852 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setrobust_np(pthread_mutexattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 864 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_init(pthread_rwlock_t *__restrict__, const pthread_rwlockattr_t *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 869 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_destroy(pthread_rwlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 873 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_rdlock(pthread_rwlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 877 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_tryrdlock(pthread_rwlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 882 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict__, const timespec *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 888 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_wrlock(pthread_rwlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 892 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_trywrlock(pthread_rwlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 897 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict__, const timespec *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 903 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_unlock(pthread_rwlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 910 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_init(pthread_rwlockattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 914 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_destroy(pthread_rwlockattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 918 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 924 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 929 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 935 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 944 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_init(pthread_cond_t *__restrict__, const pthread_condattr_t *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 949 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_destroy(pthread_cond_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 953 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_signal(pthread_cond_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 957 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_broadcast(pthread_cond_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 965 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_wait(pthread_cond_t *__restrict__, pthread_mutex_t *__restrict__) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 976 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_timedwait(pthread_cond_t *__restrict__, pthread_mutex_t *__restrict__, const timespec *__restrict__) __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 984 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_init(pthread_condattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 988 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_destroy(pthread_condattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 992 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_getpshared(const pthread_condattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 998 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_setpshared(pthread_condattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1003 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_getclock(const pthread_condattr_t *__restrict__, __clockid_t *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 1009 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_setclock(pthread_condattr_t *, __clockid_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1020 "/usr/include/pthread.h" 3
extern "C" int pthread_spin_init(pthread_spinlock_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1024 "/usr/include/pthread.h" 3
extern "C" int pthread_spin_destroy(pthread_spinlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1028 "/usr/include/pthread.h" 3
extern "C" int pthread_spin_lock(pthread_spinlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1032 "/usr/include/pthread.h" 3
extern "C" int pthread_spin_trylock(pthread_spinlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1036 "/usr/include/pthread.h" 3
extern "C" int pthread_spin_unlock(pthread_spinlock_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1044 "/usr/include/pthread.h" 3
extern "C" int pthread_barrier_init(pthread_barrier_t *__restrict__, const pthread_barrierattr_t *__restrict__, unsigned) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1050 "/usr/include/pthread.h" 3
extern "C" int pthread_barrier_destroy(pthread_barrier_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1054 "/usr/include/pthread.h" 3
extern "C" int pthread_barrier_wait(pthread_barrier_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1059 "/usr/include/pthread.h" 3
extern "C" int pthread_barrierattr_init(pthread_barrierattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1063 "/usr/include/pthread.h" 3
extern "C" int pthread_barrierattr_destroy(pthread_barrierattr_t *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1067 "/usr/include/pthread.h" 3
extern "C" int pthread_barrierattr_getpshared(const pthread_barrierattr_t *__restrict__, int *__restrict__) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 1073 "/usr/include/pthread.h" 3
extern "C" int pthread_barrierattr_setpshared(pthread_barrierattr_t *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1087 "/usr/include/pthread.h" 3
extern "C" int pthread_key_create(pthread_key_t *, void (*)(void *)) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1092 "/usr/include/pthread.h" 3
extern "C" int pthread_key_delete(pthread_key_t) throw() __attribute__((visibility("default")));
# 1095 "/usr/include/pthread.h" 3
extern "C" void *pthread_getspecific(pthread_key_t) throw() __attribute__((visibility("default")));
# 1098 "/usr/include/pthread.h" 3
extern "C" int pthread_setspecific(pthread_key_t, const void *) throw() __attribute__((visibility("default")));
# 1104 "/usr/include/pthread.h" 3
extern "C" int pthread_getcpuclockid(pthread_t, __clockid_t *) throw() __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 1121 "/usr/include/pthread.h" 3
extern "C" int pthread_atfork(void (*)(void), void (*)(void), void (*)(void)) throw() __attribute__((visibility("default")));
# 268 "/usr/include/unistd.h" 3
extern "C" { typedef __intptr_t intptr_t; }
# 275 "/usr/include/unistd.h" 3
extern "C" { typedef __socklen_t socklen_t; }
# 288 "/usr/include/unistd.h" 3
extern "C" int access(const char *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 293 "/usr/include/unistd.h" 3
extern "C" int euidaccess(const char *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 297 "/usr/include/unistd.h" 3
extern "C" int eaccess(const char *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 305 "/usr/include/unistd.h" 3
extern "C" int faccessat(int, const char *, int, int) throw() __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 331 "/usr/include/unistd.h" 3
extern "C" __off_t lseek(int, __off_t, int) throw() __attribute__((visibility("default")));
# 342 "/usr/include/unistd.h" 3
extern "C" __off64_t lseek64(int, __off64_t, int) throw() __attribute__((visibility("default")));
# 350 "/usr/include/unistd.h" 3
extern "C" int close(int) __attribute__((visibility("default")));
# 357 "/usr/include/unistd.h" 3
extern "C" ssize_t read(int, void *, size_t) __attribute__((visibility("default")));
# 363 "/usr/include/unistd.h" 3
extern "C" ssize_t write(int, const void *, size_t) __attribute__((visibility("default")));
# 373 "/usr/include/unistd.h" 3
extern "C" ssize_t pread(int, void *, size_t, __off_t) __attribute__((visibility("default")));
# 381 "/usr/include/unistd.h" 3
extern "C" ssize_t pwrite(int, const void *, size_t, __off_t) __attribute__((visibility("default")));
# 401 "/usr/include/unistd.h" 3
extern "C" ssize_t pread64(int, void *, size_t, __off64_t) __attribute__((visibility("default")));
# 405 "/usr/include/unistd.h" 3
extern "C" ssize_t pwrite64(int, const void *, size_t, __off64_t) __attribute__((visibility("default")));
# 414 "/usr/include/unistd.h" 3
extern "C" int pipe(int [2]) throw() __attribute__((visibility("default")));
# 419 "/usr/include/unistd.h" 3
extern "C" int pipe2(int [2], int) throw() __attribute__((visibility("default")));
# 429 "/usr/include/unistd.h" 3
extern "C" unsigned alarm(unsigned) throw() __attribute__((visibility("default")));
# 441 "/usr/include/unistd.h" 3
extern "C" unsigned sleep(unsigned) __attribute__((visibility("default")));
# 448 "/usr/include/unistd.h" 3
extern "C" __useconds_t ualarm(__useconds_t, __useconds_t) throw() __attribute__((visibility("default")));
# 456 "/usr/include/unistd.h" 3
extern "C" int usleep(__useconds_t) __attribute__((visibility("default")));
# 465 "/usr/include/unistd.h" 3
extern "C" int pause() __attribute__((visibility("default")));
# 469 "/usr/include/unistd.h" 3
extern "C" int chown(const char *, __uid_t, __gid_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 474 "/usr/include/unistd.h" 3
extern "C" int fchown(int, __uid_t, __gid_t) throw() __attribute__((visibility("default")));
# 479 "/usr/include/unistd.h" 3
extern "C" int lchown(const char *, __uid_t, __gid_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 487 "/usr/include/unistd.h" 3
extern "C" int fchownat(int, const char *, __uid_t, __gid_t, int) throw() __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 493 "/usr/include/unistd.h" 3
extern "C" int chdir(const char *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 497 "/usr/include/unistd.h" 3
extern "C" int fchdir(int) throw() __attribute__((visibility("default")));
# 507 "/usr/include/unistd.h" 3
extern "C" char *getcwd(char *, size_t) throw() __attribute__((visibility("default")));
# 513 "/usr/include/unistd.h" 3
extern "C" char *get_current_dir_name() throw() __attribute__((visibility("default")));
# 520 "/usr/include/unistd.h" 3
extern "C" char *getwd(char *) throw() __attribute__((__deprecated__)) __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 526 "/usr/include/unistd.h" 3
extern "C" int dup(int) throw() __attribute__((visibility("default")));
# 529 "/usr/include/unistd.h" 3
extern "C" int dup2(int, int) throw() __attribute__((visibility("default")));
# 534 "/usr/include/unistd.h" 3
extern "C" int dup3(int, int, int) throw() __attribute__((visibility("default")));
# 538 "/usr/include/unistd.h" 3
extern "C" { extern char **__environ __attribute__((visibility("default"))); }
# 540 "/usr/include/unistd.h" 3
extern "C" { extern char **environ __attribute__((visibility("default"))); }
# 546 "/usr/include/unistd.h" 3
extern "C" int execve(const char *, char *const [], char *const []) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 552 "/usr/include/unistd.h" 3
extern "C" int fexecve(int, char *const [], char *const []) throw() __attribute__((visibility("default")));
# 558 "/usr/include/unistd.h" 3
extern "C" int execv(const char *, char *const []) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 563 "/usr/include/unistd.h" 3
extern "C" int execle(const char *, const char *, ...) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 568 "/usr/include/unistd.h" 3
extern "C" int execl(const char *, const char *, ...) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 573 "/usr/include/unistd.h" 3
extern "C" int execvp(const char *, char *const []) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 579 "/usr/include/unistd.h" 3
extern "C" int execlp(const char *, const char *, ...) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 585 "/usr/include/unistd.h" 3
extern "C" int execvpe(const char *, char *const [], char *const []) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 593 "/usr/include/unistd.h" 3
extern "C" int nice(int) throw() __attribute__((visibility("default")));
# 598 "/usr/include/unistd.h" 3
extern "C" void _exit(int) __attribute__((__noreturn__)) __attribute__((visibility("default")));
# 27 "/usr/include/bits/confname.h" 3
enum {
# 28 "/usr/include/bits/confname.h" 3
_PC_LINK_MAX,
# 30 "/usr/include/bits/confname.h" 3
_PC_MAX_CANON,
# 32 "/usr/include/bits/confname.h" 3
_PC_MAX_INPUT,
# 34 "/usr/include/bits/confname.h" 3
_PC_NAME_MAX,
# 36 "/usr/include/bits/confname.h" 3
_PC_PATH_MAX,
# 38 "/usr/include/bits/confname.h" 3
_PC_PIPE_BUF,
# 40 "/usr/include/bits/confname.h" 3
_PC_CHOWN_RESTRICTED,
# 42 "/usr/include/bits/confname.h" 3
_PC_NO_TRUNC,
# 44 "/usr/include/bits/confname.h" 3
_PC_VDISABLE,
# 46 "/usr/include/bits/confname.h" 3
_PC_SYNC_IO,
# 48 "/usr/include/bits/confname.h" 3
_PC_ASYNC_IO,
# 50 "/usr/include/bits/confname.h" 3
_PC_PRIO_IO,
# 52 "/usr/include/bits/confname.h" 3
_PC_SOCK_MAXBUF,
# 54 "/usr/include/bits/confname.h" 3
_PC_FILESIZEBITS,
# 56 "/usr/include/bits/confname.h" 3
_PC_REC_INCR_XFER_SIZE,
# 58 "/usr/include/bits/confname.h" 3
_PC_REC_MAX_XFER_SIZE,
# 60 "/usr/include/bits/confname.h" 3
_PC_REC_MIN_XFER_SIZE,
# 62 "/usr/include/bits/confname.h" 3
_PC_REC_XFER_ALIGN,
# 64 "/usr/include/bits/confname.h" 3
_PC_ALLOC_SIZE_MIN,
# 66 "/usr/include/bits/confname.h" 3
_PC_SYMLINK_MAX,
# 68 "/usr/include/bits/confname.h" 3
_PC_2_SYMLINKS
# 70 "/usr/include/bits/confname.h" 3
};
# 74 "/usr/include/bits/confname.h" 3
enum {
# 75 "/usr/include/bits/confname.h" 3
_SC_ARG_MAX,
# 77 "/usr/include/bits/confname.h" 3
_SC_CHILD_MAX,
# 79 "/usr/include/bits/confname.h" 3
_SC_CLK_TCK,
# 81 "/usr/include/bits/confname.h" 3
_SC_NGROUPS_MAX,
# 83 "/usr/include/bits/confname.h" 3
_SC_OPEN_MAX,
# 85 "/usr/include/bits/confname.h" 3
_SC_STREAM_MAX,
# 87 "/usr/include/bits/confname.h" 3
_SC_TZNAME_MAX,
# 89 "/usr/include/bits/confname.h" 3
_SC_JOB_CONTROL,
# 91 "/usr/include/bits/confname.h" 3
_SC_SAVED_IDS,
# 93 "/usr/include/bits/confname.h" 3
_SC_REALTIME_SIGNALS,
# 95 "/usr/include/bits/confname.h" 3
_SC_PRIORITY_SCHEDULING,
# 97 "/usr/include/bits/confname.h" 3
_SC_TIMERS,
# 99 "/usr/include/bits/confname.h" 3
_SC_ASYNCHRONOUS_IO,
# 101 "/usr/include/bits/confname.h" 3
_SC_PRIORITIZED_IO,
# 103 "/usr/include/bits/confname.h" 3
_SC_SYNCHRONIZED_IO,
# 105 "/usr/include/bits/confname.h" 3
_SC_FSYNC,
# 107 "/usr/include/bits/confname.h" 3
_SC_MAPPED_FILES,
# 109 "/usr/include/bits/confname.h" 3
_SC_MEMLOCK,
# 111 "/usr/include/bits/confname.h" 3
_SC_MEMLOCK_RANGE,
# 113 "/usr/include/bits/confname.h" 3
_SC_MEMORY_PROTECTION,
# 115 "/usr/include/bits/confname.h" 3
_SC_MESSAGE_PASSING,
# 117 "/usr/include/bits/confname.h" 3
_SC_SEMAPHORES,
# 119 "/usr/include/bits/confname.h" 3
_SC_SHARED_MEMORY_OBJECTS,
# 121 "/usr/include/bits/confname.h" 3
_SC_AIO_LISTIO_MAX,
# 123 "/usr/include/bits/confname.h" 3
_SC_AIO_MAX,
# 125 "/usr/include/bits/confname.h" 3
_SC_AIO_PRIO_DELTA_MAX,
# 127 "/usr/include/bits/confname.h" 3
_SC_DELAYTIMER_MAX,
# 129 "/usr/include/bits/confname.h" 3
_SC_MQ_OPEN_MAX,
# 131 "/usr/include/bits/confname.h" 3
_SC_MQ_PRIO_MAX,
# 133 "/usr/include/bits/confname.h" 3
_SC_VERSION,
# 135 "/usr/include/bits/confname.h" 3
_SC_PAGESIZE,
# 138 "/usr/include/bits/confname.h" 3
_SC_RTSIG_MAX,
# 140 "/usr/include/bits/confname.h" 3
_SC_SEM_NSEMS_MAX,
# 142 "/usr/include/bits/confname.h" 3
_SC_SEM_VALUE_MAX,
# 144 "/usr/include/bits/confname.h" 3
_SC_SIGQUEUE_MAX,
# 146 "/usr/include/bits/confname.h" 3
_SC_TIMER_MAX,
# 151 "/usr/include/bits/confname.h" 3
_SC_BC_BASE_MAX,
# 153 "/usr/include/bits/confname.h" 3
_SC_BC_DIM_MAX,
# 155 "/usr/include/bits/confname.h" 3
_SC_BC_SCALE_MAX,
# 157 "/usr/include/bits/confname.h" 3
_SC_BC_STRING_MAX,
# 159 "/usr/include/bits/confname.h" 3
_SC_COLL_WEIGHTS_MAX,
# 161 "/usr/include/bits/confname.h" 3
_SC_EQUIV_CLASS_MAX,
# 163 "/usr/include/bits/confname.h" 3
_SC_EXPR_NEST_MAX,
# 165 "/usr/include/bits/confname.h" 3
_SC_LINE_MAX,
# 167 "/usr/include/bits/confname.h" 3
_SC_RE_DUP_MAX,
# 169 "/usr/include/bits/confname.h" 3
_SC_CHARCLASS_NAME_MAX,
# 172 "/usr/include/bits/confname.h" 3
_SC_2_VERSION,
# 174 "/usr/include/bits/confname.h" 3
_SC_2_C_BIND,
# 176 "/usr/include/bits/confname.h" 3
_SC_2_C_DEV,
# 178 "/usr/include/bits/confname.h" 3
_SC_2_FORT_DEV,
# 180 "/usr/include/bits/confname.h" 3
_SC_2_FORT_RUN,
# 182 "/usr/include/bits/confname.h" 3
_SC_2_SW_DEV,
# 184 "/usr/include/bits/confname.h" 3
_SC_2_LOCALEDEF,
# 187 "/usr/include/bits/confname.h" 3
_SC_PII,
# 189 "/usr/include/bits/confname.h" 3
_SC_PII_XTI,
# 191 "/usr/include/bits/confname.h" 3
_SC_PII_SOCKET,
# 193 "/usr/include/bits/confname.h" 3
_SC_PII_INTERNET,
# 195 "/usr/include/bits/confname.h" 3
_SC_PII_OSI,
# 197 "/usr/include/bits/confname.h" 3
_SC_POLL,
# 199 "/usr/include/bits/confname.h" 3
_SC_SELECT,
# 201 "/usr/include/bits/confname.h" 3
_SC_UIO_MAXIOV,
# 203 "/usr/include/bits/confname.h" 3
_SC_IOV_MAX = 60,
# 205 "/usr/include/bits/confname.h" 3
_SC_PII_INTERNET_STREAM,
# 207 "/usr/include/bits/confname.h" 3
_SC_PII_INTERNET_DGRAM,
# 209 "/usr/include/bits/confname.h" 3
_SC_PII_OSI_COTS,
# 211 "/usr/include/bits/confname.h" 3
_SC_PII_OSI_CLTS,
# 213 "/usr/include/bits/confname.h" 3
_SC_PII_OSI_M,
# 215 "/usr/include/bits/confname.h" 3
_SC_T_IOV_MAX,
# 219 "/usr/include/bits/confname.h" 3
_SC_THREADS,
# 221 "/usr/include/bits/confname.h" 3
_SC_THREAD_SAFE_FUNCTIONS,
# 223 "/usr/include/bits/confname.h" 3
_SC_GETGR_R_SIZE_MAX,
# 225 "/usr/include/bits/confname.h" 3
_SC_GETPW_R_SIZE_MAX,
# 227 "/usr/include/bits/confname.h" 3
_SC_LOGIN_NAME_MAX,
# 229 "/usr/include/bits/confname.h" 3
_SC_TTY_NAME_MAX,
# 231 "/usr/include/bits/confname.h" 3
_SC_THREAD_DESTRUCTOR_ITERATIONS,
# 233 "/usr/include/bits/confname.h" 3
_SC_THREAD_KEYS_MAX,
# 235 "/usr/include/bits/confname.h" 3
_SC_THREAD_STACK_MIN,
# 237 "/usr/include/bits/confname.h" 3
_SC_THREAD_THREADS_MAX,
# 239 "/usr/include/bits/confname.h" 3
_SC_THREAD_ATTR_STACKADDR,
# 241 "/usr/include/bits/confname.h" 3
_SC_THREAD_ATTR_STACKSIZE,
# 243 "/usr/include/bits/confname.h" 3
_SC_THREAD_PRIORITY_SCHEDULING,
# 245 "/usr/include/bits/confname.h" 3
_SC_THREAD_PRIO_INHERIT,
# 247 "/usr/include/bits/confname.h" 3
_SC_THREAD_PRIO_PROTECT,
# 249 "/usr/include/bits/confname.h" 3
_SC_THREAD_PROCESS_SHARED,
# 252 "/usr/include/bits/confname.h" 3
_SC_NPROCESSORS_CONF,
# 254 "/usr/include/bits/confname.h" 3
_SC_NPROCESSORS_ONLN,
# 256 "/usr/include/bits/confname.h" 3
_SC_PHYS_PAGES,
# 258 "/usr/include/bits/confname.h" 3
_SC_AVPHYS_PAGES,
# 260 "/usr/include/bits/confname.h" 3
_SC_ATEXIT_MAX,
# 262 "/usr/include/bits/confname.h" 3
_SC_PASS_MAX,
# 265 "/usr/include/bits/confname.h" 3
_SC_XOPEN_VERSION,
# 267 "/usr/include/bits/confname.h" 3
_SC_XOPEN_XCU_VERSION,
# 269 "/usr/include/bits/confname.h" 3
_SC_XOPEN_UNIX,
# 271 "/usr/include/bits/confname.h" 3
_SC_XOPEN_CRYPT,
# 273 "/usr/include/bits/confname.h" 3
_SC_XOPEN_ENH_I18N,
# 275 "/usr/include/bits/confname.h" 3
_SC_XOPEN_SHM,
# 278 "/usr/include/bits/confname.h" 3
_SC_2_CHAR_TERM,
# 280 "/usr/include/bits/confname.h" 3
_SC_2_C_VERSION,
# 282 "/usr/include/bits/confname.h" 3
_SC_2_UPE,
# 285 "/usr/include/bits/confname.h" 3
_SC_XOPEN_XPG2,
# 287 "/usr/include/bits/confname.h" 3
_SC_XOPEN_XPG3,
# 289 "/usr/include/bits/confname.h" 3
_SC_XOPEN_XPG4,
# 292 "/usr/include/bits/confname.h" 3
_SC_CHAR_BIT,
# 294 "/usr/include/bits/confname.h" 3
_SC_CHAR_MAX,
# 296 "/usr/include/bits/confname.h" 3
_SC_CHAR_MIN,
# 298 "/usr/include/bits/confname.h" 3
_SC_INT_MAX,
# 300 "/usr/include/bits/confname.h" 3
_SC_INT_MIN,
# 302 "/usr/include/bits/confname.h" 3
_SC_LONG_BIT,
# 304 "/usr/include/bits/confname.h" 3
_SC_WORD_BIT,
# 306 "/usr/include/bits/confname.h" 3
_SC_MB_LEN_MAX,
# 308 "/usr/include/bits/confname.h" 3
_SC_NZERO,
# 310 "/usr/include/bits/confname.h" 3
_SC_SSIZE_MAX,
# 312 "/usr/include/bits/confname.h" 3
_SC_SCHAR_MAX,
# 314 "/usr/include/bits/confname.h" 3
_SC_SCHAR_MIN,
# 316 "/usr/include/bits/confname.h" 3
_SC_SHRT_MAX,
# 318 "/usr/include/bits/confname.h" 3
_SC_SHRT_MIN,
# 320 "/usr/include/bits/confname.h" 3
_SC_UCHAR_MAX,
# 322 "/usr/include/bits/confname.h" 3
_SC_UINT_MAX,
# 324 "/usr/include/bits/confname.h" 3
_SC_ULONG_MAX,
# 326 "/usr/include/bits/confname.h" 3
_SC_USHRT_MAX,
# 329 "/usr/include/bits/confname.h" 3
_SC_NL_ARGMAX,
# 331 "/usr/include/bits/confname.h" 3
_SC_NL_LANGMAX,
# 333 "/usr/include/bits/confname.h" 3
_SC_NL_MSGMAX,
# 335 "/usr/include/bits/confname.h" 3
_SC_NL_NMAX,
# 337 "/usr/include/bits/confname.h" 3
_SC_NL_SETMAX,
# 339 "/usr/include/bits/confname.h" 3
_SC_NL_TEXTMAX,
# 342 "/usr/include/bits/confname.h" 3
_SC_XBS5_ILP32_OFF32,
# 344 "/usr/include/bits/confname.h" 3
_SC_XBS5_ILP32_OFFBIG,
# 346 "/usr/include/bits/confname.h" 3
_SC_XBS5_LP64_OFF64,
# 348 "/usr/include/bits/confname.h" 3
_SC_XBS5_LPBIG_OFFBIG,
# 351 "/usr/include/bits/confname.h" 3
_SC_XOPEN_LEGACY,
# 353 "/usr/include/bits/confname.h" 3
_SC_XOPEN_REALTIME,
# 355 "/usr/include/bits/confname.h" 3
_SC_XOPEN_REALTIME_THREADS,
# 358 "/usr/include/bits/confname.h" 3
_SC_ADVISORY_INFO,
# 360 "/usr/include/bits/confname.h" 3
_SC_BARRIERS,
# 362 "/usr/include/bits/confname.h" 3
_SC_BASE,
# 364 "/usr/include/bits/confname.h" 3
_SC_C_LANG_SUPPORT,
# 366 "/usr/include/bits/confname.h" 3
_SC_C_LANG_SUPPORT_R,
# 368 "/usr/include/bits/confname.h" 3
_SC_CLOCK_SELECTION,
# 370 "/usr/include/bits/confname.h" 3
_SC_CPUTIME,
# 372 "/usr/include/bits/confname.h" 3
_SC_THREAD_CPUTIME,
# 374 "/usr/include/bits/confname.h" 3
_SC_DEVICE_IO,
# 376 "/usr/include/bits/confname.h" 3
_SC_DEVICE_SPECIFIC,
# 378 "/usr/include/bits/confname.h" 3
_SC_DEVICE_SPECIFIC_R,
# 380 "/usr/include/bits/confname.h" 3
_SC_FD_MGMT,
# 382 "/usr/include/bits/confname.h" 3
_SC_FIFO,
# 384 "/usr/include/bits/confname.h" 3
_SC_PIPE,
# 386 "/usr/include/bits/confname.h" 3
_SC_FILE_ATTRIBUTES,
# 388 "/usr/include/bits/confname.h" 3
_SC_FILE_LOCKING,
# 390 "/usr/include/bits/confname.h" 3
_SC_FILE_SYSTEM,
# 392 "/usr/include/bits/confname.h" 3
_SC_MONOTONIC_CLOCK,
# 394 "/usr/include/bits/confname.h" 3
_SC_MULTI_PROCESS,
# 396 "/usr/include/bits/confname.h" 3
_SC_SINGLE_PROCESS,
# 398 "/usr/include/bits/confname.h" 3
_SC_NETWORKING,
# 400 "/usr/include/bits/confname.h" 3
_SC_READER_WRITER_LOCKS,
# 402 "/usr/include/bits/confname.h" 3
_SC_SPIN_LOCKS,
# 404 "/usr/include/bits/confname.h" 3
_SC_REGEXP,
# 406 "/usr/include/bits/confname.h" 3
_SC_REGEX_VERSION,
# 408 "/usr/include/bits/confname.h" 3
_SC_SHELL,
# 410 "/usr/include/bits/confname.h" 3
_SC_SIGNALS,
# 412 "/usr/include/bits/confname.h" 3
_SC_SPAWN,
# 414 "/usr/include/bits/confname.h" 3
_SC_SPORADIC_SERVER,
# 416 "/usr/include/bits/confname.h" 3
_SC_THREAD_SPORADIC_SERVER,
# 418 "/usr/include/bits/confname.h" 3
_SC_SYSTEM_DATABASE,
# 420 "/usr/include/bits/confname.h" 3
_SC_SYSTEM_DATABASE_R,
# 422 "/usr/include/bits/confname.h" 3
_SC_TIMEOUTS,
# 424 "/usr/include/bits/confname.h" 3
_SC_TYPED_MEMORY_OBJECTS,
# 426 "/usr/include/bits/confname.h" 3
_SC_USER_GROUPS,
# 428 "/usr/include/bits/confname.h" 3
_SC_USER_GROUPS_R,
# 430 "/usr/include/bits/confname.h" 3
_SC_2_PBS,
# 432 "/usr/include/bits/confname.h" 3
_SC_2_PBS_ACCOUNTING,
# 434 "/usr/include/bits/confname.h" 3
_SC_2_PBS_LOCATE,
# 436 "/usr/include/bits/confname.h" 3
_SC_2_PBS_MESSAGE,
# 438 "/usr/include/bits/confname.h" 3
_SC_2_PBS_TRACK,
# 440 "/usr/include/bits/confname.h" 3
_SC_SYMLOOP_MAX,
# 442 "/usr/include/bits/confname.h" 3
_SC_STREAMS,
# 444 "/usr/include/bits/confname.h" 3
_SC_2_PBS_CHECKPOINT,
# 447 "/usr/include/bits/confname.h" 3
_SC_V6_ILP32_OFF32,
# 449 "/usr/include/bits/confname.h" 3
_SC_V6_ILP32_OFFBIG,
# 451 "/usr/include/bits/confname.h" 3
_SC_V6_LP64_OFF64,
# 453 "/usr/include/bits/confname.h" 3
_SC_V6_LPBIG_OFFBIG,
# 456 "/usr/include/bits/confname.h" 3
_SC_HOST_NAME_MAX,
# 458 "/usr/include/bits/confname.h" 3
_SC_TRACE,
# 460 "/usr/include/bits/confname.h" 3
_SC_TRACE_EVENT_FILTER,
# 462 "/usr/include/bits/confname.h" 3
_SC_TRACE_INHERIT,
# 464 "/usr/include/bits/confname.h" 3
_SC_TRACE_LOG,
# 467 "/usr/include/bits/confname.h" 3
_SC_LEVEL1_ICACHE_SIZE,
# 469 "/usr/include/bits/confname.h" 3
_SC_LEVEL1_ICACHE_ASSOC,
# 471 "/usr/include/bits/confname.h" 3
_SC_LEVEL1_ICACHE_LINESIZE,
# 473 "/usr/include/bits/confname.h" 3
_SC_LEVEL1_DCACHE_SIZE,
# 475 "/usr/include/bits/confname.h" 3
_SC_LEVEL1_DCACHE_ASSOC,
# 477 "/usr/include/bits/confname.h" 3
_SC_LEVEL1_DCACHE_LINESIZE,
# 479 "/usr/include/bits/confname.h" 3
_SC_LEVEL2_CACHE_SIZE,
# 481 "/usr/include/bits/confname.h" 3
_SC_LEVEL2_CACHE_ASSOC,
# 483 "/usr/include/bits/confname.h" 3
_SC_LEVEL2_CACHE_LINESIZE,
# 485 "/usr/include/bits/confname.h" 3
_SC_LEVEL3_CACHE_SIZE,
# 487 "/usr/include/bits/confname.h" 3
_SC_LEVEL3_CACHE_ASSOC,
# 489 "/usr/include/bits/confname.h" 3
_SC_LEVEL3_CACHE_LINESIZE,
# 491 "/usr/include/bits/confname.h" 3
_SC_LEVEL4_CACHE_SIZE,
# 493 "/usr/include/bits/confname.h" 3
_SC_LEVEL4_CACHE_ASSOC,
# 495 "/usr/include/bits/confname.h" 3
_SC_LEVEL4_CACHE_LINESIZE,
# 499 "/usr/include/bits/confname.h" 3
_SC_IPV6 = 235,
# 501 "/usr/include/bits/confname.h" 3
_SC_RAW_SOCKETS,
# 504 "/usr/include/bits/confname.h" 3
_SC_V7_ILP32_OFF32,
# 506 "/usr/include/bits/confname.h" 3
_SC_V7_ILP32_OFFBIG,
# 508 "/usr/include/bits/confname.h" 3
_SC_V7_LP64_OFF64,
# 510 "/usr/include/bits/confname.h" 3
_SC_V7_LPBIG_OFFBIG,
# 513 "/usr/include/bits/confname.h" 3
_SC_SS_REPL_MAX,
# 516 "/usr/include/bits/confname.h" 3
_SC_TRACE_EVENT_NAME_MAX,
# 518 "/usr/include/bits/confname.h" 3
_SC_TRACE_NAME_MAX,
# 520 "/usr/include/bits/confname.h" 3
_SC_TRACE_SYS_MAX,
# 522 "/usr/include/bits/confname.h" 3
_SC_TRACE_USER_EVENT_MAX,
# 525 "/usr/include/bits/confname.h" 3
_SC_XOPEN_STREAMS,
# 528 "/usr/include/bits/confname.h" 3
_SC_THREAD_ROBUST_PRIO_INHERIT,
# 530 "/usr/include/bits/confname.h" 3
_SC_THREAD_ROBUST_PRIO_PROTECT
# 532 "/usr/include/bits/confname.h" 3
};
# 536 "/usr/include/bits/confname.h" 3
enum {
# 537 "/usr/include/bits/confname.h" 3
_CS_PATH,
# 540 "/usr/include/bits/confname.h" 3
_CS_V6_WIDTH_RESTRICTED_ENVS,
# 544 "/usr/include/bits/confname.h" 3
_CS_GNU_LIBC_VERSION,
# 546 "/usr/include/bits/confname.h" 3
_CS_GNU_LIBPTHREAD_VERSION,
# 549 "/usr/include/bits/confname.h" 3
_CS_V5_WIDTH_RESTRICTED_ENVS,
# 553 "/usr/include/bits/confname.h" 3
_CS_V7_WIDTH_RESTRICTED_ENVS,
# 557 "/usr/include/bits/confname.h" 3
_CS_LFS_CFLAGS = 1000,
# 559 "/usr/include/bits/confname.h" 3
_CS_LFS_LDFLAGS,
# 561 "/usr/include/bits/confname.h" 3
_CS_LFS_LIBS,
# 563 "/usr/include/bits/confname.h" 3
_CS_LFS_LINTFLAGS,
# 565 "/usr/include/bits/confname.h" 3
_CS_LFS64_CFLAGS,
# 567 "/usr/include/bits/confname.h" 3
_CS_LFS64_LDFLAGS,
# 569 "/usr/include/bits/confname.h" 3
_CS_LFS64_LIBS,
# 571 "/usr/include/bits/confname.h" 3
_CS_LFS64_LINTFLAGS,
# 574 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
# 576 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFF32_LDFLAGS,
# 578 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFF32_LIBS,
# 580 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFF32_LINTFLAGS,
# 582 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFFBIG_CFLAGS,
# 584 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFFBIG_LDFLAGS,
# 586 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFFBIG_LIBS,
# 588 "/usr/include/bits/confname.h" 3
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS,
# 590 "/usr/include/bits/confname.h" 3
_CS_XBS5_LP64_OFF64_CFLAGS,
# 592 "/usr/include/bits/confname.h" 3
_CS_XBS5_LP64_OFF64_LDFLAGS,
# 594 "/usr/include/bits/confname.h" 3
_CS_XBS5_LP64_OFF64_LIBS,
# 596 "/usr/include/bits/confname.h" 3
_CS_XBS5_LP64_OFF64_LINTFLAGS,
# 598 "/usr/include/bits/confname.h" 3
_CS_XBS5_LPBIG_OFFBIG_CFLAGS,
# 600 "/usr/include/bits/confname.h" 3
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS,
# 602 "/usr/include/bits/confname.h" 3
_CS_XBS5_LPBIG_OFFBIG_LIBS,
# 604 "/usr/include/bits/confname.h" 3
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,
# 607 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFF32_CFLAGS,
# 609 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS,
# 611 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFF32_LIBS,
# 613 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,
# 615 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,
# 617 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,
# 619 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFFBIG_LIBS,
# 621 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,
# 623 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LP64_OFF64_CFLAGS,
# 625 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LP64_OFF64_LDFLAGS,
# 627 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LP64_OFF64_LIBS,
# 629 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS,
# 631 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,
# 633 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,
# 635 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS,
# 637 "/usr/include/bits/confname.h" 3
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,
# 640 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFF32_CFLAGS,
# 642 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS,
# 644 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFF32_LIBS,
# 646 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,
# 648 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,
# 650 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,
# 652 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFFBIG_LIBS,
# 654 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,
# 656 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LP64_OFF64_CFLAGS,
# 658 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LP64_OFF64_LDFLAGS,
# 660 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LP64_OFF64_LIBS,
# 662 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS,
# 664 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,
# 666 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,
# 668 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS,
# 670 "/usr/include/bits/confname.h" 3
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
# 672 "/usr/include/bits/confname.h" 3
};
# 607 "/usr/include/unistd.h" 3
extern "C" long pathconf(const char *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 611 "/usr/include/unistd.h" 3
extern "C" long fpathconf(int, int) throw() __attribute__((visibility("default")));
# 614 "/usr/include/unistd.h" 3
extern "C" long sysconf(int) throw() __attribute__((visibility("default")));
# 618 "/usr/include/unistd.h" 3
extern "C" size_t confstr(int, char *, size_t) throw() __attribute__((visibility("default")));
# 623 "/usr/include/unistd.h" 3
extern "C" __pid_t getpid() throw() __attribute__((visibility("default")));
# 626 "/usr/include/unistd.h" 3
extern "C" __pid_t getppid() throw() __attribute__((visibility("default")));
# 631 "/usr/include/unistd.h" 3
extern "C" __pid_t getpgrp() throw() __attribute__((visibility("default")));
# 641 "/usr/include/unistd.h" 3
extern "C" __pid_t __getpgid(__pid_t) throw() __attribute__((visibility("default")));
# 643 "/usr/include/unistd.h" 3
extern "C" __pid_t getpgid(__pid_t) throw() __attribute__((visibility("default")));
# 650 "/usr/include/unistd.h" 3
extern "C" int setpgid(__pid_t, __pid_t) throw() __attribute__((visibility("default")));
# 667 "/usr/include/unistd.h" 3
extern "C" int setpgrp() throw() __attribute__((visibility("default")));
# 684 "/usr/include/unistd.h" 3
extern "C" __pid_t setsid() throw() __attribute__((visibility("default")));
# 688 "/usr/include/unistd.h" 3
extern "C" __pid_t getsid(__pid_t) throw() __attribute__((visibility("default")));
# 692 "/usr/include/unistd.h" 3
extern "C" __uid_t getuid() throw() __attribute__((visibility("default")));
# 695 "/usr/include/unistd.h" 3
extern "C" __uid_t geteuid() throw() __attribute__((visibility("default")));
# 698 "/usr/include/unistd.h" 3
extern "C" __gid_t getgid() throw() __attribute__((visibility("default")));
# 701 "/usr/include/unistd.h" 3
extern "C" __gid_t getegid() throw() __attribute__((visibility("default")));
# 706 "/usr/include/unistd.h" 3
extern "C" int getgroups(int, __gid_t []) throw() __attribute__((visibility("default")));
# 710 "/usr/include/unistd.h" 3
extern "C" int group_member(__gid_t) throw() __attribute__((visibility("default")));
# 717 "/usr/include/unistd.h" 3
extern "C" int setuid(__uid_t) throw() __attribute__((visibility("default")));
# 722 "/usr/include/unistd.h" 3
extern "C" int setreuid(__uid_t, __uid_t) throw() __attribute__((visibility("default")));
# 727 "/usr/include/unistd.h" 3
extern "C" int seteuid(__uid_t) throw() __attribute__((visibility("default")));
# 734 "/usr/include/unistd.h" 3
extern "C" int setgid(__gid_t) throw() __attribute__((visibility("default")));
# 739 "/usr/include/unistd.h" 3
extern "C" int setregid(__gid_t, __gid_t) throw() __attribute__((visibility("default")));
# 744 "/usr/include/unistd.h" 3
extern "C" int setegid(__gid_t) throw() __attribute__((visibility("default")));
# 750 "/usr/include/unistd.h" 3
extern "C" int getresuid(__uid_t *, __uid_t *, __uid_t *) throw() __attribute__((visibility("default")));
# 755 "/usr/include/unistd.h" 3
extern "C" int getresgid(__gid_t *, __gid_t *, __gid_t *) throw() __attribute__((visibility("default")));
# 760 "/usr/include/unistd.h" 3
extern "C" int setresuid(__uid_t, __uid_t, __uid_t) throw() __attribute__((visibility("default")));
# 765 "/usr/include/unistd.h" 3
extern "C" int setresgid(__gid_t, __gid_t, __gid_t) throw() __attribute__((visibility("default")));
# 773 "/usr/include/unistd.h" 3
extern "C" __pid_t fork() throw() __attribute__((visibility("default")));
# 780 "/usr/include/unistd.h" 3
extern "C" __pid_t vfork() throw() __attribute__((visibility("default")));
# 786 "/usr/include/unistd.h" 3
extern "C" char *ttyname(int) throw() __attribute__((visibility("default")));
# 790 "/usr/include/unistd.h" 3
extern "C" int ttyname_r(int, char *, size_t) throw() __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 795 "/usr/include/unistd.h" 3
extern "C" int isatty(int) throw() __attribute__((visibility("default")));
# 801 "/usr/include/unistd.h" 3
extern "C" int ttyslot() throw() __attribute__((visibility("default")));
# 806 "/usr/include/unistd.h" 3
extern "C" int link(const char *, const char *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 812 "/usr/include/unistd.h" 3
extern "C" int linkat(int, const char *, int, const char *, int) throw() __attribute__((nonnull(2))) __attribute__((nonnull(4))) __attribute__((visibility("default")));
# 819 "/usr/include/unistd.h" 3
extern "C" int symlink(const char *, const char *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 825 "/usr/include/unistd.h" 3
extern "C" ssize_t readlink(const char *__restrict__, char *__restrict__, size_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 832 "/usr/include/unistd.h" 3
extern "C" int symlinkat(const char *, int, const char *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 836 "/usr/include/unistd.h" 3
extern "C" ssize_t readlinkat(int, const char *__restrict__, char *__restrict__, size_t) throw() __attribute__((nonnull(2))) __attribute__((nonnull(3))) __attribute__((visibility("default")));
# 842 "/usr/include/unistd.h" 3
extern "C" int unlink(const char *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 846 "/usr/include/unistd.h" 3
extern "C" int unlinkat(int, const char *, int) throw() __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 851 "/usr/include/unistd.h" 3
extern "C" int rmdir(const char *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 855 "/usr/include/unistd.h" 3
extern "C" __pid_t tcgetpgrp(int) throw() __attribute__((visibility("default")));
# 858 "/usr/include/unistd.h" 3
extern "C" int tcsetpgrp(int, __pid_t) throw() __attribute__((visibility("default")));
# 865 "/usr/include/unistd.h" 3
extern "C" char *getlogin() __attribute__((visibility("default")));
# 873 "/usr/include/unistd.h" 3
extern "C" int getlogin_r(char *, size_t) __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 878 "/usr/include/unistd.h" 3
extern "C" int setlogin(const char *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 59 "/usr/include/getopt.h" 3
extern "C" { extern char *optarg __attribute__((visibility("default"))); }
# 73 "/usr/include/getopt.h" 3
extern "C" { extern int optind __attribute__((visibility("default"))); }
# 78 "/usr/include/getopt.h" 3
extern "C" { extern int opterr __attribute__((visibility("default"))); }
# 82 "/usr/include/getopt.h" 3
extern "C" { extern int optopt __attribute__((visibility("default"))); }
# 152 "/usr/include/getopt.h" 3
extern "C" int getopt(int, char *const *, const char *) throw() __attribute__((visibility("default")));
# 895 "/usr/include/unistd.h" 3
extern "C" int gethostname(char *, size_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 902 "/usr/include/unistd.h" 3
extern "C" int sethostname(const char *, size_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 907 "/usr/include/unistd.h" 3
extern "C" int sethostid(long) throw() __attribute__((visibility("default")));
# 913 "/usr/include/unistd.h" 3
extern "C" int getdomainname(char *, size_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 915 "/usr/include/unistd.h" 3
extern "C" int setdomainname(const char *, size_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 922 "/usr/include/unistd.h" 3
extern "C" int vhangup() throw() __attribute__((visibility("default")));
# 925 "/usr/include/unistd.h" 3
extern "C" int revoke(const char *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 933 "/usr/include/unistd.h" 3
extern "C" int profil(unsigned short *, size_t, size_t, unsigned) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 941 "/usr/include/unistd.h" 3
extern "C" int acct(const char *) throw() __attribute__((visibility("default")));
# 945 "/usr/include/unistd.h" 3
extern "C" char *getusershell() throw() __attribute__((visibility("default")));
# 946 "/usr/include/unistd.h" 3
extern "C" void endusershell() throw() __attribute__((visibility("default")));
# 947 "/usr/include/unistd.h" 3
extern "C" void setusershell() throw() __attribute__((visibility("default")));
# 953 "/usr/include/unistd.h" 3
extern "C" int daemon(int, int) throw() __attribute__((visibility("default")));
# 960 "/usr/include/unistd.h" 3
extern "C" int chroot(const char *) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 964 "/usr/include/unistd.h" 3
extern "C" char *getpass(const char *) __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 973 "/usr/include/unistd.h" 3
extern "C" int fsync(int) __attribute__((visibility("default")));
# 980 "/usr/include/unistd.h" 3
extern "C" long gethostid() __attribute__((visibility("default")));
# 983 "/usr/include/unistd.h" 3
extern "C" void sync() throw() __attribute__((visibility("default")));
# 988 "/usr/include/unistd.h" 3
extern "C" int getpagesize() throw() __attribute__((__const__)) __attribute__((visibility("default")));
# 993 "/usr/include/unistd.h" 3
extern "C" int getdtablesize() throw() __attribute__((visibility("default")));
# 998 "/usr/include/unistd.h" 3
extern "C" int truncate(const char *, __off_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1010 "/usr/include/unistd.h" 3
extern "C" int truncate64(const char *, __off64_t) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1020 "/usr/include/unistd.h" 3
extern "C" int ftruncate(int, __off_t) throw() __attribute__((visibility("default")));
# 1030 "/usr/include/unistd.h" 3
extern "C" int ftruncate64(int, __off64_t) throw() __attribute__((visibility("default")));
# 1040 "/usr/include/unistd.h" 3
extern "C" int brk(void *) throw() __attribute__((visibility("default")));
# 1046 "/usr/include/unistd.h" 3
extern "C" void *sbrk(intptr_t) throw() __attribute__((visibility("default")));
# 1061 "/usr/include/unistd.h" 3
extern "C" long syscall(long, ...) throw() __attribute__((visibility("default")));
# 1084 "/usr/include/unistd.h" 3
extern "C" int lockf(int, int, __off_t) __attribute__((visibility("default")));
# 1094 "/usr/include/unistd.h" 3
extern "C" int lockf64(int, int, __off64_t) __attribute__((visibility("default")));
# 1115 "/usr/include/unistd.h" 3
extern "C" int fdatasync(int) __attribute__((visibility("default")));
# 1123 "/usr/include/unistd.h" 3
extern "C" char *crypt(const char *, const char *) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 1128 "/usr/include/unistd.h" 3
extern "C" void encrypt(char *, int) throw() __attribute__((nonnull(1))) __attribute__((visibility("default")));
# 1135 "/usr/include/unistd.h" 3
extern "C" void swab(const void *__restrict__, void *__restrict__, ssize_t) throw() __attribute__((nonnull(1))) __attribute__((nonnull(2))) __attribute__((visibility("default")));
# 1144 "/usr/include/unistd.h" 3
extern "C" char *ctermid(char *) throw() __attribute__((visibility("default")));
# 44 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
typedef pthread_t __gthread_t;
# 45 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
typedef pthread_key_t __gthread_key_t;
# 46 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
typedef pthread_once_t __gthread_once_t;
# 47 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
typedef pthread_mutex_t __gthread_mutex_t;
# 48 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
typedef pthread_mutex_t __gthread_recursive_mutex_t;
# 49 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
typedef pthread_cond_t __gthread_cond_t;
# 50 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
typedef timespec __gthread_time_t;
# 118 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_once) __gthrw_pthread_once __asm__("pthread_once") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 119 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_getspecific) __gthrw_pthread_getspecific __asm__("pthread_getspecific") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 120 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_setspecific) __gthrw_pthread_setspecific __asm__("pthread_setspecific") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 122 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_create) __gthrw_pthread_create __asm__("pthread_create") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 123 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_join) __gthrw_pthread_join __asm__("pthread_join") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 124 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_equal) __gthrw_pthread_equal __asm__("pthread_equal") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 125 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_self) __gthrw_pthread_self __asm__("pthread_self") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 126 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_detach) __gthrw_pthread_detach __asm__("pthread_detach") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 127 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_cancel) __gthrw_pthread_cancel __asm__("pthread_cancel") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 128 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(sched_yield) __gthrw_sched_yield __asm__("sched_yield") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 130 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutex_lock) __gthrw_pthread_mutex_lock __asm__("pthread_mutex_lock") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 131 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __asm__("pthread_mutex_trylock") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 134 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __asm__("pthread_mutex_timedlock") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 137 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __asm__("pthread_mutex_unlock") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 138 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutex_init) __gthrw_pthread_mutex_init __asm__("pthread_mutex_init") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 139 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __asm__("pthread_mutex_destroy") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 141 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __asm__("pthread_cond_broadcast") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 142 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_cond_signal) __gthrw_pthread_cond_signal __asm__("pthread_cond_signal") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 143 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_cond_wait) __gthrw_pthread_cond_wait __asm__("pthread_cond_wait") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 144 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __asm__("pthread_cond_timedwait") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 145 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_cond_destroy) __gthrw_pthread_cond_destroy __asm__("pthread_cond_destroy") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 148 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_key_create) __gthrw_pthread_key_create __asm__("pthread_key_create") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 149 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_key_delete) __gthrw_pthread_key_delete __asm__("pthread_key_delete") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 150 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __asm__("pthread_mutexattr_init") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 151 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __asm__("pthread_mutexattr_settype") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 152 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static __typeof__(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __asm__("pthread_mutexattr_destroy") __attribute__((__weakref__)) __attribute__((visibility("default")));
# 238 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_active_p()
# 239 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 240 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static void *const __gthread_active_ptr = __extension__ ((void *)(&__gthrw_pthread_cancel));
# 242 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthread_active_ptr != (0);
# 243 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 676 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_create(__gthread_t *__threadid, void *(*__func)(void *), void *
# 677 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
__args)
# 678 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 679 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_create(__threadid, __null, __func, __args);
# 680 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 683 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_join(__gthread_t __threadid, void **__value_ptr)
# 684 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 685 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_join(__threadid, __value_ptr);
# 686 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 689 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_detach(__gthread_t __threadid)
# 690 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 691 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_detach(__threadid);
# 692 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 695 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_equal(__gthread_t __t1, __gthread_t __t2)
# 696 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 697 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_equal(__t1, __t2);
# 698 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 701 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) __gthread_t __gthread_self()
# 702 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 703 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_self();
# 704 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 707 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_yield()
# 708 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 709 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_sched_yield();
# 710 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 713 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_once(__gthread_once_t *__once, void (*__func)(void))
# 714 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 715 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 716 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_once(__once, __func); } else {
# 718 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return -1; }
# 719 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 722 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_key_create(__gthread_key_t *__key, void (*__dtor)(void *))
# 723 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 724 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_key_create(__key, __dtor);
# 725 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 728 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_key_delete(__gthread_key_t __key)
# 729 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 730 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_key_delete(__key);
# 731 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 734 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) void *__gthread_getspecific(__gthread_key_t __key)
# 735 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 736 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_getspecific(__key);
# 737 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 740 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_setspecific(__gthread_key_t __key, const void *__ptr)
# 741 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 742 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_setspecific(__key, __ptr);
# 743 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 746 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_mutex_destroy(__gthread_mutex_t *__mutex)
# 747 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 748 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 749 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_mutex_destroy(__mutex); } else {
# 751 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return 0; }
# 752 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 755 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_mutex_lock(__gthread_mutex_t *__mutex)
# 756 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 757 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 758 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_mutex_lock(__mutex); } else {
# 760 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return 0; }
# 761 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 764 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_mutex_trylock(__gthread_mutex_t *__mutex)
# 765 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 766 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 767 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_mutex_trylock(__mutex); } else {
# 769 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return 0; }
# 770 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 775 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_mutex_timedlock(__gthread_mutex_t *__mutex, const __gthread_time_t *
# 776 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
__abs_timeout)
# 777 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 778 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 779 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_mutex_timedlock(__mutex, __abs_timeout); } else {
# 781 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return 0; }
# 782 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 787 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_mutex_unlock(__gthread_mutex_t *__mutex)
# 788 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 789 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 790 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_mutex_unlock(__mutex); } else {
# 792 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return 0; }
# 793 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 819 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *__mutex)
# 820 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 821 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthread_mutex_lock(__mutex);
# 822 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 825 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *__mutex)
# 826 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 827 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthread_mutex_trylock(__mutex);
# 828 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 833 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *__mutex, const __gthread_time_t *
# 834 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
__abs_timeout)
# 835 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 836 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthread_mutex_timedlock(__mutex, __abs_timeout);
# 837 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 842 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *__mutex)
# 843 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 844 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthread_mutex_unlock(__mutex);
# 845 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 848 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_cond_broadcast(__gthread_cond_t *__cond)
# 849 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 850 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_cond_broadcast(__cond);
# 851 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 854 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_cond_signal(__gthread_cond_t *__cond)
# 855 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 856 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_cond_signal(__cond);
# 857 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 860 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_cond_wait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
# 861 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 862 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_cond_wait(__cond, __mutex);
# 863 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 866 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_cond_timedwait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex, const __gthread_time_t *
# 867 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
__abs_timeout)
# 868 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 869 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_cond_timedwait(__cond, __mutex, __abs_timeout);
# 870 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 873 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_cond_wait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 874 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
__mutex)
# 875 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 876 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthread_cond_wait(__cond, __mutex);
# 877 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 880 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_cond_timedwait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 881 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
__mutex, const __gthread_time_t *
# 882 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
__abs_timeout)
# 883 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 884 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthread_cond_timedwait(__cond, __mutex, __abs_timeout);
# 885 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 888 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_cond_destroy(__gthread_cond_t *__cond)
# 889 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
{
# 890 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
return __gthrw_pthread_cond_destroy(__cond);
# 891 "/usr/include/c++/4.4/i486-linux-gnu/bits/gthr-default.h" 3
}
# 32 "/usr/include/c++/4.4/i486-linux-gnu/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "/usr/include/c++/4.4/ext/atomicity.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 45 "/usr/include/c++/4.4/ext/atomicity.h" 3
static inline _Atomic_word __exchange_and_add(volatile _Atomic_word *__mem, int __val)
# 46 "/usr/include/c++/4.4/ext/atomicity.h" 3
{ return __sync_fetch_and_add_4(__mem, __val); }
# 49 "/usr/include/c++/4.4/ext/atomicity.h" 3
static inline void __atomic_add(volatile _Atomic_word *__mem, int __val)
# 50 "/usr/include/c++/4.4/ext/atomicity.h" 3
{ __sync_fetch_and_add_4(__mem, __val); }
# 62 "/usr/include/c++/4.4/ext/atomicity.h" 3
static inline _Atomic_word __exchange_and_add_single(_Atomic_word *__mem, int __val)
# 63 "/usr/include/c++/4.4/ext/atomicity.h" 3
{
# 64 "/usr/include/c++/4.4/ext/atomicity.h" 3
_Atomic_word __result = (*__mem);
# 65 "/usr/include/c++/4.4/ext/atomicity.h" 3
(*__mem) += __val;
# 66 "/usr/include/c++/4.4/ext/atomicity.h" 3
return __result;
# 67 "/usr/include/c++/4.4/ext/atomicity.h" 3
}
# 70 "/usr/include/c++/4.4/ext/atomicity.h" 3
static inline void __atomic_add_single(_Atomic_word *__mem, int __val)
# 71 "/usr/include/c++/4.4/ext/atomicity.h" 3
{ (*__mem) += __val; }
# 75 "/usr/include/c++/4.4/ext/atomicity.h" 3
static inline __attribute__((__unused__)) _Atomic_word __exchange_and_add_dispatch(_Atomic_word *__mem, int __val)
# 76 "/usr/include/c++/4.4/ext/atomicity.h" 3
{
# 78 "/usr/include/c++/4.4/ext/atomicity.h" 3
if (__gthread_active_p()) {
# 79 "/usr/include/c++/4.4/ext/atomicity.h" 3
return __exchange_and_add(__mem, __val); } else {
# 81 "/usr/include/c++/4.4/ext/atomicity.h" 3
return __exchange_and_add_single(__mem, __val); }
# 85 "/usr/include/c++/4.4/ext/atomicity.h" 3
}
# 89 "/usr/include/c++/4.4/ext/atomicity.h" 3
static inline __attribute__((__unused__)) void __atomic_add_dispatch(_Atomic_word *__mem, int __val)
# 90 "/usr/include/c++/4.4/ext/atomicity.h" 3
{
# 92 "/usr/include/c++/4.4/ext/atomicity.h" 3
if (__gthread_active_p()) {
# 93 "/usr/include/c++/4.4/ext/atomicity.h" 3
__atomic_add(__mem, __val); } else {
# 95 "/usr/include/c++/4.4/ext/atomicity.h" 3
__atomic_add_single(__mem, __val); }
# 99 "/usr/include/c++/4.4/ext/atomicity.h" 3
}
# 101 "/usr/include/c++/4.4/ext/atomicity.h" 3
}
# 46 "/usr/include/c++/4.4/new" 3
namespace std {
# 54 "/usr/include/c++/4.4/new" 3
class __attribute__((visibility("default"))) bad_alloc : public exception {
# 57 "/usr/include/c++/4.4/new" 3
public: bad_alloc() throw() { }
# 61 "/usr/include/c++/4.4/new" 3
virtual ~bad_alloc() throw();
# 64 "/usr/include/c++/4.4/new" 3
virtual const char *what() const throw();
# 65 "/usr/include/c++/4.4/new" 3
};
# 67 "/usr/include/c++/4.4/new" 3
struct __attribute__((visibility("default"))) nothrow_t { };
# 69 "/usr/include/c++/4.4/new" 3
extern const nothrow_t nothrow __attribute__((visibility("default")));
# 73 "/usr/include/c++/4.4/new" 3
typedef void (*new_handler)(void);
# 77 "/usr/include/c++/4.4/new" 3
new_handler set_new_handler(new_handler) throw() __attribute__((visibility("default")));
# 78 "/usr/include/c++/4.4/new" 3
}
# 91 "/usr/include/c++/4.4/new" 3
void *operator new(size_t) throw(std::bad_alloc) __attribute__((visibility("default")));
# 92 "/usr/include/c++/4.4/new" 3
void *operator new[](size_t) throw(std::bad_alloc) __attribute__((visibility("default")));
# 93 "/usr/include/c++/4.4/new" 3
void operator delete(void *) throw() __attribute__((visibility("default")));
# 94 "/usr/include/c++/4.4/new" 3
void operator delete[](void *) throw() __attribute__((visibility("default")));
# 95 "/usr/include/c++/4.4/new" 3
void *operator new(size_t, const std::nothrow_t &) throw() __attribute__((visibility("default")));
# 96 "/usr/include/c++/4.4/new" 3
void *operator new[](size_t, const std::nothrow_t &) throw() __attribute__((visibility("default")));
# 97 "/usr/include/c++/4.4/new" 3
void operator delete(void *, const std::nothrow_t &) throw() __attribute__((visibility("default")));
# 98 "/usr/include/c++/4.4/new" 3
void operator delete[](void *, const std::nothrow_t &) throw() __attribute__((visibility("default")));
# 101 "/usr/include/c++/4.4/new" 3
inline __attribute__((visibility("default"))) void *operator new(size_t, void *__p) throw() { return __p; }
# 102 "/usr/include/c++/4.4/new" 3
inline __attribute__((visibility("default"))) void *operator new[](size_t, void *__p) throw() { return __p; }
# 105 "/usr/include/c++/4.4/new" 3
inline __attribute__((visibility("default"))) void operator delete(void *, void *) throw() { }
# 106 "/usr/include/c++/4.4/new" 3
inline __attribute__((visibility("default"))) void operator delete[](void *, void *) throw() { }
# 37 "/usr/include/c++/4.4/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute__((visibility("default"))) {
# 39 "/usr/include/c++/4.4/ext/new_allocator.h" 3
using std::size_t;
# 40 "/usr/include/c++/4.4/ext/new_allocator.h" 3
using std::ptrdiff_t;
# 50 "/usr/include/c++/4.4/ext/new_allocator.h" 3
template < typename _Tp >
    class new_allocator
    {
    public :
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp * pointer;
      typedef const _Tp * const_pointer;
      typedef _Tp & reference;
      typedef const _Tp & const_reference;
      typedef _Tp value_type;

      template < typename _Tp1 >
        struct rebind
        { typedef new_allocator < _Tp1 > other; };

      new_allocator ( ) throw ( ) { }

      new_allocator ( const new_allocator & ) throw ( ) { }

      template < typename _Tp1 >
        new_allocator ( const new_allocator < _Tp1 > & ) throw ( ) { }

      ~ new_allocator ( ) throw ( ) { }

      pointer
      address ( reference __x ) const { return & __x; }

      const_pointer
      address ( const_reference __x ) const { return & __x; }



      pointer
      allocate ( size_type __n, const void * = 0 )
      {
 if ( __builtin_expect ( __n > this -> max_size ( ), false ) )
   std :: __throw_bad_alloc ( );

 return static_cast < _Tp * > ( :: operator new ( __n * sizeof ( _Tp ) ) );
      }


      void
      deallocate ( pointer __p, size_type )
      { :: operator delete ( __p ); }

      size_type
      max_size ( ) const throw ( )
      { return size_t ( - 1 ) / sizeof ( _Tp ); }



      void
      construct ( pointer __p, const _Tp & __val )
      { :: new ( ( void * ) __p ) _Tp ( __val ); }

      void
      destroy ( pointer __p ) { __p -> ~ _Tp ( ); }
    };
# 118 "/usr/include/c++/4.4/ext/new_allocator.h" 3
template < typename _Tp >
    inline bool
    operator == ( const new_allocator < _Tp > &, const new_allocator < _Tp > & )
    { return true; }
# 123 "/usr/include/c++/4.4/ext/new_allocator.h" 3
template < typename _Tp >
    inline bool
    operator != ( const new_allocator < _Tp > &, const new_allocator < _Tp > & )
    { return false; }
# 128 "/usr/include/c++/4.4/ext/new_allocator.h" 3
}
# 50 "/usr/include/c++/4.4/bits/allocator.h" 3
namespace std __attribute__((visibility("default"))) {
# 59 "/usr/include/c++/4.4/bits/allocator.h" 3
template<class _Tp> class allocator;
# 64 "/usr/include/c++/4.4/bits/allocator.h" 3
template<> class allocator< void> {
# 67 "/usr/include/c++/4.4/bits/allocator.h" 3
public: typedef size_t size_type;
# 68 "/usr/include/c++/4.4/bits/allocator.h" 3
typedef ptrdiff_t difference_type;
# 69 "/usr/include/c++/4.4/bits/allocator.h" 3
typedef void *pointer;
# 70 "/usr/include/c++/4.4/bits/allocator.h" 3
typedef const void *const_pointer;
# 71 "/usr/include/c++/4.4/bits/allocator.h" 3
typedef void value_type;
# 73 "/usr/include/c++/4.4/bits/allocator.h" 3
template<class _Tp1>
# 74 "/usr/include/c++/4.4/bits/allocator.h" 3
struct rebind {
# 75 "/usr/include/c++/4.4/bits/allocator.h" 3
typedef std::allocator< _Tp1> other; };
# 76 "/usr/include/c++/4.4/bits/allocator.h" 3
};
# 85 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _Tp >
    class allocator : public __gnu_cxx :: new_allocator < _Tp >
    {
   public :
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp * pointer;
      typedef const _Tp * const_pointer;
      typedef _Tp & reference;
      typedef const _Tp & const_reference;
      typedef _Tp value_type;

      template < typename _Tp1 >
        struct rebind
        { typedef allocator < _Tp1 > other; };

      allocator ( ) throw ( ) { }

      allocator ( const allocator & __a ) throw ( )
      : __gnu_cxx :: new_allocator < _Tp > ( __a ) { }

      template < typename _Tp1 >
        allocator ( const allocator < _Tp1 > & ) throw ( ) { }

      ~ allocator ( ) throw ( ) { }


    };
# 114 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _T1, typename _T2 >
    inline bool
    operator == ( const allocator < _T1 > &, const allocator < _T2 > & )
    { return true; }
# 119 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _Tp >
    inline bool
    operator == ( const allocator < _Tp > &, const allocator < _Tp > & )
    { return true; }
# 124 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _T1, typename _T2 >
    inline bool
    operator != ( const allocator < _T1 > &, const allocator < _T2 > & )
    { return false; }
# 129 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _Tp >
    inline bool
    operator != ( const allocator < _Tp > &, const allocator < _Tp > & )
    { return false; }
# 138 "/usr/include/c++/4.4/bits/allocator.h" 3
extern template class allocator< char> ;
# 139 "/usr/include/c++/4.4/bits/allocator.h" 3
extern template class allocator< wchar_t> ;
# 146 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _Alloc, bool = __is_empty ( _Alloc ) >
    struct __alloc_swap
    { static void _S_do_it ( _Alloc &, _Alloc & ) { } };
# 150 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _Alloc >
    struct __alloc_swap < _Alloc, false >
    {
      static void
      _S_do_it ( _Alloc & __one, _Alloc & __two )
      {

 if ( __one != __two )
   swap ( __one, __two );
      }
    };
# 163 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _Alloc, bool = __is_empty ( _Alloc ) >
    struct __alloc_neq
    {
      static bool
      _S_do_it ( const _Alloc &, const _Alloc & )
      { return false; }
    };
# 171 "/usr/include/c++/4.4/bits/allocator.h" 3
template < typename _Alloc >
    struct __alloc_neq < _Alloc, false >
    {
      static bool
      _S_do_it ( const _Alloc & __one, const _Alloc & __two )
      { return __one != __two; }
    };
# 179 "/usr/include/c++/4.4/bits/allocator.h" 3
}
# 32 "/usr/include/c++/4.4/cxxabi-forced.h" 3
namespace __cxxabiv1 {
# 41 "/usr/include/c++/4.4/cxxabi-forced.h" 3
class __attribute__((visibility("default"))) __forced_unwind {
# 43 "/usr/include/c++/4.4/cxxabi-forced.h" 3
virtual ~__forced_unwind() throw();
# 44 "/usr/include/c++/4.4/cxxabi-forced.h" 3
virtual void __pure_dummy() = 0;
# 45 "/usr/include/c++/4.4/cxxabi-forced.h" 3
};
# 46 "/usr/include/c++/4.4/cxxabi-forced.h" 3
}
# 38 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
namespace std __attribute__((visibility("default"))) {
# 40 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
template < typename _CharT, typename _Traits >
    inline void
    __ostream_write ( basic_ostream < _CharT, _Traits > & __out,
      const _CharT * __s, streamsize __n )
    {
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef typename __ostream_type :: ios_base __ios_base;

      const streamsize __put = __out . rdbuf ( ) -> sputn ( __s, __n );
      if ( __put != __n )
 __out . setstate ( __ios_base :: badbit );
    }
# 53 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
template < typename _CharT, typename _Traits >
    inline void
    __ostream_fill ( basic_ostream < _CharT, _Traits > & __out, streamsize __n )
    {
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef typename __ostream_type :: ios_base __ios_base;

      const _CharT __c = __out . fill ( );
      for (; __n > 0; -- __n )
 {
   const typename _Traits :: int_type __put = __out . rdbuf ( ) -> sputc ( __c );
   if ( _Traits :: eq_int_type ( __put, _Traits :: eof ( ) ) )
     {
       __out . setstate ( __ios_base :: badbit );
       break;
     }
 }
    }
# 72 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    __ostream_insert ( basic_ostream < _CharT, _Traits > & __out,
       const _CharT * __s, streamsize __n )
    {
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef typename __ostream_type :: ios_base __ios_base;

      typename __ostream_type :: sentry __cerb ( __out );
      if ( __cerb )
 {
   try
     {
       const streamsize __w = __out . width ( );
       if ( __w > __n )
  {
    const bool __left = ( ( __out . flags ( )
     & __ios_base :: adjustfield )
           == __ios_base :: left );
    if ( ! __left )
      __ostream_fill ( __out, __w - __n );
    if ( __out . good ( ) )
      __ostream_write ( __out, __s, __n );
    if ( __left && __out . good ( ) )
      __ostream_fill ( __out, __w - __n );
  }
       else
  __ostream_write ( __out, __s, __n );
       __out . width ( 0 );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __out . _M_setstate ( __ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __out . _M_setstate ( __ios_base :: badbit ); }
 }
      return __out;
    }
# 117 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
extern template basic_ostream< char, char_traits< char> > &__ostream_insert(basic_ostream< char, char_traits< char> > &, const char *, streamsize);
# 120 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &__ostream_insert(basic_ostream< wchar_t, char_traits< wchar_t> > &, const wchar_t *, streamsize);
# 125 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
}
# 60 "/usr/include/c++/4.4/bits/stl_function.h" 3
namespace std __attribute__((visibility("default"))) {
# 99 "/usr/include/c++/4.4/bits/stl_function.h" 3
template<class _Arg, class _Result>
# 100 "/usr/include/c++/4.4/bits/stl_function.h" 3
struct unary_function {
# 102 "/usr/include/c++/4.4/bits/stl_function.h" 3
typedef _Arg argument_type;
# 105 "/usr/include/c++/4.4/bits/stl_function.h" 3
typedef _Result result_type;
# 106 "/usr/include/c++/4.4/bits/stl_function.h" 3
};
# 111 "/usr/include/c++/4.4/bits/stl_function.h" 3
template<class _Arg1, class _Arg2, class _Result>
# 112 "/usr/include/c++/4.4/bits/stl_function.h" 3
struct binary_function {
# 114 "/usr/include/c++/4.4/bits/stl_function.h" 3
typedef _Arg1 first_argument_type;
# 117 "/usr/include/c++/4.4/bits/stl_function.h" 3
typedef _Arg2 second_argument_type;
# 118 "/usr/include/c++/4.4/bits/stl_function.h" 3
typedef _Result result_type;
# 119 "/usr/include/c++/4.4/bits/stl_function.h" 3
};
# 134 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct plus : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x + __y; }
    };
# 143 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct minus : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x - __y; }
    };
# 152 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct multiplies : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x * __y; }
    };
# 161 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct divides : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x / __y; }
    };
# 170 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct modulus : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x % __y; }
    };
# 179 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct negate : public unary_function < _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x ) const
      { return - __x; }
    };
# 198 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct equal_to : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x == __y; }
    };
# 207 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct not_equal_to : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x != __y; }
    };
# 216 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct greater : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x > __y; }
    };
# 225 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct less : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x < __y; }
    };
# 234 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct greater_equal : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x >= __y; }
    };
# 243 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct less_equal : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x <= __y; }
    };
# 262 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct logical_and : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x && __y; }
    };
# 271 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct logical_or : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x || __y; }
    };
# 280 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct logical_not : public unary_function < _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x ) const
      { return ! __x; }
    };
# 291 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct bit_and : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x & __y; }
    };
# 299 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct bit_or : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x | __y; }
    };
# 307 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct bit_xor : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x ^ __y; }
    };
# 345 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Predicate >
    class unary_negate
    : public unary_function < typename _Predicate :: argument_type, bool >
    {
    protected :
      _Predicate _M_pred;

    public :
      explicit
      unary_negate ( const _Predicate & __x ) : _M_pred ( __x ) { }

      bool
      operator ( ) ( const typename _Predicate :: argument_type & __x ) const
      { return ! _M_pred ( __x ); }
    };
# 362 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Predicate >
    inline unary_negate < _Predicate >
    not1 ( const _Predicate & __pred )
    { return unary_negate < _Predicate > ( __pred ); }
# 368 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Predicate >
    class binary_negate
    : public binary_function < typename _Predicate :: first_argument_type,
        typename _Predicate :: second_argument_type, bool >
    {
    protected :
      _Predicate _M_pred;

    public :
      explicit
      binary_negate ( const _Predicate & __x ) : _M_pred ( __x ) { }

      bool
      operator ( ) ( const typename _Predicate :: first_argument_type & __x,
   const typename _Predicate :: second_argument_type & __y ) const
      { return ! _M_pred ( __x, __y ); }
    };
# 387 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Predicate >
    inline binary_negate < _Predicate >
    not2 ( const _Predicate & __pred )
    { return binary_negate < _Predicate > ( __pred ); }
# 416 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Arg, typename _Result >
    class pointer_to_unary_function : public unary_function < _Arg, _Result >
    {
    protected :
      _Result ( * _M_ptr ) ( _Arg );

    public :
      pointer_to_unary_function ( ) { }

      explicit
      pointer_to_unary_function ( _Result ( * __x ) ( _Arg ) )
      : _M_ptr ( __x ) { }

      _Result
      operator ( ) ( _Arg __x ) const
      { return _M_ptr ( __x ); }
    };
# 435 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Arg, typename _Result >
    inline pointer_to_unary_function < _Arg, _Result >
    ptr_fun ( _Result ( * __x ) ( _Arg ) )
    { return pointer_to_unary_function < _Arg, _Result > ( __x ); }
# 441 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Arg1, typename _Arg2, typename _Result >
    class pointer_to_binary_function
    : public binary_function < _Arg1, _Arg2, _Result >
    {
    protected :
      _Result ( * _M_ptr ) ( _Arg1, _Arg2 );

    public :
      pointer_to_binary_function ( ) { }

      explicit
      pointer_to_binary_function ( _Result ( * __x ) ( _Arg1, _Arg2 ) )
      : _M_ptr ( __x ) { }

      _Result
      operator ( ) ( _Arg1 __x, _Arg2 __y ) const
      { return _M_ptr ( __x, __y ); }
    };
# 461 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Arg1, typename _Arg2, typename _Result >
    inline pointer_to_binary_function < _Arg1, _Arg2, _Result >
    ptr_fun ( _Result ( * __x ) ( _Arg1, _Arg2 ) )
    { return pointer_to_binary_function < _Arg1, _Arg2, _Result > ( __x ); }
# 467 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Tp >
    struct _Identity : public unary_function < _Tp, _Tp >
    {
      _Tp &
      operator ( ) ( _Tp & __x ) const
      { return __x; }

      const _Tp &
      operator ( ) ( const _Tp & __x ) const
      { return __x; }
    };
# 479 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Pair >
    struct _Select1st : public unary_function < _Pair,
           typename _Pair :: first_type >
    {
      typename _Pair :: first_type &
      operator ( ) ( _Pair & __x ) const
      { return __x . first; }

      const typename _Pair :: first_type &
      operator ( ) ( const _Pair & __x ) const
      { return __x . first; }
    };
# 492 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Pair >
    struct _Select2nd : public unary_function < _Pair,
           typename _Pair :: second_type >
    {
      typename _Pair :: second_type &
      operator ( ) ( _Pair & __x ) const
      { return __x . second; }

      const typename _Pair :: second_type &
      operator ( ) ( const _Pair & __x ) const
      { return __x . second; }
    };
# 523 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    class mem_fun_t : public unary_function < _Tp *, _Ret >
    {
    public :
      explicit
      mem_fun_t ( _Ret ( _Tp :: * __pf ) ( ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp * __p ) const
      { return ( __p ->* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( );
    };
# 541 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    class const_mem_fun_t : public unary_function < const _Tp *, _Ret >
    {
    public :
      explicit
      const_mem_fun_t ( _Ret ( _Tp :: * __pf ) ( ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp * __p ) const
      { return ( __p ->* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( ) const;
    };
# 559 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    class mem_fun_ref_t : public unary_function < _Tp, _Ret >
    {
    public :
      explicit
      mem_fun_ref_t ( _Ret ( _Tp :: * __pf ) ( ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp & __r ) const
      { return ( __r .* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( );
  };
# 577 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    class const_mem_fun_ref_t : public unary_function < _Tp, _Ret >
    {
    public :
      explicit
      const_mem_fun_ref_t ( _Ret ( _Tp :: * __pf ) ( ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp & __r ) const
      { return ( __r .* _M_f ) ( ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( ) const;
    };
# 595 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    class mem_fun1_t : public binary_function < _Tp *, _Arg, _Ret >
    {
    public :
      explicit
      mem_fun1_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp * __p, _Arg __x ) const
      { return ( __p ->* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg );
    };
# 613 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    class const_mem_fun1_t : public binary_function < const _Tp *, _Arg, _Ret >
    {
    public :
      explicit
      const_mem_fun1_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp * __p, _Arg __x ) const
      { return ( __p ->* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg ) const;
    };
# 631 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    class mem_fun1_ref_t : public binary_function < _Tp, _Arg, _Ret >
    {
    public :
      explicit
      mem_fun1_ref_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp & __r, _Arg __x ) const
      { return ( __r .* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg );
    };
# 649 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    class const_mem_fun1_ref_t : public binary_function < _Tp, _Arg, _Ret >
    {
    public :
      explicit
      const_mem_fun1_ref_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp & __r, _Arg __x ) const
      { return ( __r .* _M_f ) ( __x ); }

    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg ) const;
    };
# 667 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    inline mem_fun_t < _Ret, _Tp >
    mem_fun ( _Ret ( _Tp :: * __f ) ( ) )
    { return mem_fun_t < _Ret, _Tp > ( __f ); }
# 672 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    inline const_mem_fun_t < _Ret, _Tp >
    mem_fun ( _Ret ( _Tp :: * __f ) ( ) const )
    { return const_mem_fun_t < _Ret, _Tp > ( __f ); }
# 677 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    inline mem_fun_ref_t < _Ret, _Tp >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( ) )
    { return mem_fun_ref_t < _Ret, _Tp > ( __f ); }
# 682 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp >
    inline const_mem_fun_ref_t < _Ret, _Tp >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( ) const )
    { return const_mem_fun_ref_t < _Ret, _Tp > ( __f ); }
# 687 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    inline mem_fun1_t < _Ret, _Tp, _Arg >
    mem_fun ( _Ret ( _Tp :: * __f ) ( _Arg ) )
    { return mem_fun1_t < _Ret, _Tp, _Arg > ( __f ); }
# 692 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    inline const_mem_fun1_t < _Ret, _Tp, _Arg >
    mem_fun ( _Ret ( _Tp :: * __f ) ( _Arg ) const )
    { return const_mem_fun1_t < _Ret, _Tp, _Arg > ( __f ); }
# 697 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    inline mem_fun1_ref_t < _Ret, _Tp, _Arg >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( _Arg ) )
    { return mem_fun1_ref_t < _Ret, _Tp, _Arg > ( __f ); }
# 702 "/usr/include/c++/4.4/bits/stl_function.h" 3
template < typename _Ret, typename _Tp, typename _Arg >
    inline const_mem_fun1_ref_t < _Ret, _Tp, _Arg >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( _Arg ) const )
    { return const_mem_fun1_ref_t < _Ret, _Tp, _Arg > ( __f ); }
# 709 "/usr/include/c++/4.4/bits/stl_function.h" 3
}
# 60 "/usr/include/c++/4.4/backward/binders.h" 3
namespace std __attribute__((visibility("default"))) {
# 96 "/usr/include/c++/4.4/backward/binders.h" 3
template < typename _Operation >
    class binder1st
    : public unary_function < typename _Operation :: second_argument_type,
       typename _Operation :: result_type >
    {
    protected :
      _Operation op;
      typename _Operation :: first_argument_type value;

    public :
      binder1st ( const _Operation & __x,
  const typename _Operation :: first_argument_type & __y )
      : op ( __x ), value ( __y ) { }

      typename _Operation :: result_type
      operator ( ) ( const typename _Operation :: second_argument_type & __x ) const
      { return op ( value, __x ); }



      typename _Operation :: result_type
      operator ( ) ( typename _Operation :: second_argument_type & __x ) const
      { return op ( value, __x ); }
    };
# 122 "/usr/include/c++/4.4/backward/binders.h" 3
template < typename _Operation, typename _Tp >
    inline binder1st < _Operation >
    bind1st ( const _Operation & __fn, const _Tp & __x )
    {
      typedef typename _Operation :: first_argument_type _Arg1_type;
      return binder1st < _Operation > ( __fn, _Arg1_type ( __x ) );
    }
# 131 "/usr/include/c++/4.4/backward/binders.h" 3
template < typename _Operation >
    class binder2nd
    : public unary_function < typename _Operation :: first_argument_type,
       typename _Operation :: result_type >
    {
    protected :
      _Operation op;
      typename _Operation :: second_argument_type value;

    public :
      binder2nd ( const _Operation & __x,
  const typename _Operation :: second_argument_type & __y )
      : op ( __x ), value ( __y ) { }

      typename _Operation :: result_type
      operator ( ) ( const typename _Operation :: first_argument_type & __x ) const
      { return op ( __x, value ); }



      typename _Operation :: result_type
      operator ( ) ( typename _Operation :: first_argument_type & __x ) const
      { return op ( __x, value ); }
    };
# 157 "/usr/include/c++/4.4/backward/binders.h" 3
template < typename _Operation, typename _Tp >
    inline binder2nd < _Operation >
    bind2nd ( const _Operation & __fn, const _Tp & __x )
    {
      typedef typename _Operation :: second_argument_type _Arg2_type;
      return binder2nd < _Operation > ( __fn, _Arg2_type ( __x ) );
    }
# 166 "/usr/include/c++/4.4/backward/binders.h" 3
}
# 45 "/usr/include/c++/4.4/bits/basic_string.h" 3
namespace std __attribute__((visibility("default"))) {
# 103 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    class basic_string
    {
      typedef typename _Alloc :: template rebind < _CharT > :: other _CharT_alloc_type;


    public :
      typedef _Traits traits_type;
      typedef typename _Traits :: char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type :: size_type size_type;
      typedef typename _CharT_alloc_type :: difference_type difference_type;
      typedef typename _CharT_alloc_type :: reference reference;
      typedef typename _CharT_alloc_type :: const_reference const_reference;
      typedef typename _CharT_alloc_type :: pointer pointer;
      typedef typename _CharT_alloc_type :: const_pointer const_pointer;
      typedef __gnu_cxx :: __normal_iterator < pointer, basic_string > iterator;
      typedef __gnu_cxx :: __normal_iterator < const_pointer, basic_string >
                                                            const_iterator;
      typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;
      typedef std :: reverse_iterator < iterator > reverse_iterator;

    private :
# 140 "/usr/include/c++/4.4/bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc :: template rebind < char > :: other _Raw_bytes_alloc;
# 165 "/usr/include/c++/4.4/bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage [ ];

        static _Rep &
        _S_empty_rep ( )
        {



   void * __p = reinterpret_cast < void * > ( & _S_empty_rep_storage );
   return * reinterpret_cast < _Rep * > ( __p );
 }

        bool
 _M_is_leaked ( ) const
        { return this -> _M_refcount < 0; }

        bool
 _M_is_shared ( ) const
        { return this -> _M_refcount > 0; }

        void
 _M_set_leaked ( )
        { this -> _M_refcount = - 1; }

        void
 _M_set_sharable ( )
        { this -> _M_refcount = 0; }

 void
 _M_set_length_and_sharable ( size_type __n )
 {
   this -> _M_set_sharable ( );
   this -> _M_length = __n;
   traits_type :: assign ( this -> _M_refdata ( ) [ __n ], _S_terminal );


 }

 _CharT *
 _M_refdata ( ) throw ( )
 { return reinterpret_cast < _CharT * > ( this + 1 ); }

 _CharT *
 _M_grab ( const _Alloc & __alloc1, const _Alloc & __alloc2 )
 {
   return ( ! _M_is_leaked ( ) && __alloc1 == __alloc2 )
           ? _M_refcopy ( ) : _M_clone ( __alloc1 );
 }


 static _Rep *
 _S_create ( size_type, size_type, const _Alloc & );

 void
 _M_dispose ( const _Alloc & __a )
 {

   if ( __builtin_expect ( this != & _S_empty_rep ( ), false ) )

     if ( __gnu_cxx :: __exchange_and_add_dispatch ( & this -> _M_refcount,
             - 1 ) <= 0 )
       _M_destroy ( __a );
 }

 void
 _M_destroy ( const _Alloc & ) throw ( );

 _CharT *
 _M_refcopy ( ) throw ( )
 {

   if ( __builtin_expect ( this != & _S_empty_rep ( ), false ) )

            __gnu_cxx :: __atomic_add_dispatch ( & this -> _M_refcount, 1 );
   return _M_refdata ( );
 }

 _CharT *
 _M_clone ( const _Alloc &, size_type __res = 0 );
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider ( _CharT * __dat, const _Alloc & __a )
 : _Alloc ( __a ), _M_p ( __dat ) { }

 _CharT * _M_p;
      };

    public :




      static const size_type npos = static_cast < size_type > ( - 1 );

    private :

      mutable _Alloc_hider _M_dataplus;

      _CharT *
      _M_data ( ) const
      { return _M_dataplus . _M_p; }

      _CharT *
      _M_data ( _CharT * __p )
      { return ( _M_dataplus . _M_p = __p ); }

      _Rep *
      _M_rep ( ) const
      { return & ( ( reinterpret_cast < _Rep * > ( _M_data ( ) ) ) [ - 1 ] ); }



      iterator
      _M_ibegin ( ) const
      { return iterator ( _M_data ( ) ); }

      iterator
      _M_iend ( ) const
      { return iterator ( _M_data ( ) + this -> size ( ) ); }

      void
      _M_leak ( )
      {
 if ( ! _M_rep ( ) -> _M_is_leaked ( ) )
   _M_leak_hard ( );
      }

      size_type
      _M_check ( size_type __pos, const char * __s ) const
      {
 if ( __pos > this -> size ( ) )
   __throw_out_of_range ( ( __s ) );
 return __pos;
      }

      void
      _M_check_length ( size_type __n1, size_type __n2, const char * __s ) const
      {
 if ( this -> max_size ( ) - ( this -> size ( ) - __n1 ) < __n2 )
   __throw_length_error ( ( __s ) );
      }


      size_type
      _M_limit ( size_type __pos, size_type __off ) const
      {
 const bool __testoff = __off < this -> size ( ) - __pos;
 return __testoff ? __off : this -> size ( ) - __pos;
      }


      bool
      _M_disjunct ( const _CharT * __s ) const
      {
 return ( less < const _CharT * > ( ) ( __s, _M_data ( ) )
  || less < const _CharT * > ( ) ( _M_data ( ) + this -> size ( ), __s ) );
      }



      static void
      _M_copy ( _CharT * __d, const _CharT * __s, size_type __n )
      {
 if ( __n == 1 )
   traits_type :: assign ( * __d, * __s );
 else
   traits_type :: copy ( __d, __s, __n );
      }

      static void
      _M_move ( _CharT * __d, const _CharT * __s, size_type __n )
      {
 if ( __n == 1 )
   traits_type :: assign ( * __d, * __s );
 else
   traits_type :: move ( __d, __s, __n );
      }

      static void
      _M_assign ( _CharT * __d, size_type __n, _CharT __c )
      {
 if ( __n == 1 )
   traits_type :: assign ( * __d, __c );
 else
   traits_type :: assign ( __d, __n, __c );
      }



      template < class _Iterator >
        static void
        _S_copy_chars ( _CharT * __p, _Iterator __k1, _Iterator __k2 )
        {
   for (; __k1 != __k2; ++ __k1, ++ __p )
     traits_type :: assign ( * __p, * __k1 );
 }

      static void
      _S_copy_chars ( _CharT * __p, iterator __k1, iterator __k2 )
      { _S_copy_chars ( __p, __k1 . base ( ), __k2 . base ( ) ); }

      static void
      _S_copy_chars ( _CharT * __p, const_iterator __k1, const_iterator __k2 )
      { _S_copy_chars ( __p, __k1 . base ( ), __k2 . base ( ) ); }

      static void
      _S_copy_chars ( _CharT * __p, _CharT * __k1, _CharT * __k2 )
      { _M_copy ( __p, __k1, __k2 - __k1 ); }

      static void
      _S_copy_chars ( _CharT * __p, const _CharT * __k1, const _CharT * __k2 )
      { _M_copy ( __p, __k1, __k2 - __k1 ); }

      static int
      _S_compare ( size_type __n1, size_type __n2 )
      {
 const difference_type __d = difference_type ( __n1 - __n2 );

 if ( __d > __gnu_cxx :: __numeric_traits < int > :: __max )
   return __gnu_cxx :: __numeric_traits < int > :: __max;
 else if ( __d < __gnu_cxx :: __numeric_traits < int > :: __min )
   return __gnu_cxx :: __numeric_traits < int > :: __min;
 else
   return int ( __d );
      }

      void
      _M_mutate ( size_type __pos, size_type __len1, size_type __len2 );

      void
      _M_leak_hard ( );

      static _Rep &
      _S_empty_rep ( )
      { return _Rep :: _S_empty_rep ( ); }

    public :







      inline
      basic_string ( );




      explicit
      basic_string ( const _Alloc & __a );






      basic_string ( const basic_string & __str );






      basic_string ( const basic_string & __str, size_type __pos,
     size_type __n = npos );







      basic_string ( const basic_string & __str, size_type __pos,
     size_type __n, const _Alloc & __a );
# 459 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string ( const _CharT * __s, size_type __n,
     const _Alloc & __a = _Alloc ( ) );





      basic_string ( const _CharT * __s, const _Alloc & __a = _Alloc ( ) );






      basic_string ( size_type __n, _CharT __c, const _Alloc & __a = _Alloc ( ) );







      template < class _InputIterator >
        basic_string ( _InputIterator __beg, _InputIterator __end,
       const _Alloc & __a = _Alloc ( ) );




      ~ basic_string ( )
      { _M_rep ( ) -> _M_dispose ( this -> get_allocator ( ) ); }





      basic_string &
      operator = ( const basic_string & __str )
      { return this -> assign ( __str ); }





      basic_string &
      operator = ( const _CharT * __s )
      { return this -> assign ( __s ); }
# 514 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      operator = ( _CharT __c )
      {
 this -> assign ( 1, __c );
 return * this;
      }






      iterator
      begin ( )
      {
 _M_leak ( );
 return iterator ( _M_data ( ) );
      }





      const_iterator
      begin ( ) const
      { return const_iterator ( _M_data ( ) ); }





      iterator
      end ( )
      {
 _M_leak ( );
 return iterator ( _M_data ( ) + this -> size ( ) );
      }





      const_iterator
      end ( ) const
      { return const_iterator ( _M_data ( ) + this -> size ( ) ); }






      reverse_iterator
      rbegin ( )
      { return reverse_iterator ( this -> end ( ) ); }






      const_reverse_iterator
      rbegin ( ) const
      { return const_reverse_iterator ( this -> end ( ) ); }






      reverse_iterator
      rend ( )
      { return reverse_iterator ( this -> begin ( ) ); }






      const_reverse_iterator
      rend ( ) const
      { return const_reverse_iterator ( this -> begin ( ) ); }

    public :



      size_type
      size ( ) const
      { return _M_rep ( ) -> _M_length; }



      size_type
      length ( ) const
      { return _M_rep ( ) -> _M_length; }


      size_type
      max_size ( ) const
      { return _Rep :: _S_max_size; }
# 625 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      resize ( size_type __n, _CharT __c );
# 638 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      resize ( size_type __n )
      { this -> resize ( __n, _CharT ( ) ); }





      size_type
      capacity ( ) const
      { return _M_rep ( ) -> _M_capacity; }
# 667 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      reserve ( size_type __res_arg = 0 );




      void
      clear ( )
      { _M_mutate ( 0, this -> size ( ), 0 ); }




      bool
      empty ( ) const
      { return this -> size ( ) == 0; }
# 695 "/usr/include/c++/4.4/bits/basic_string.h" 3
      const_reference
      operator [ ] ( size_type __pos ) const
      {
 ;
 return _M_data ( ) [ __pos ];
      }
# 712 "/usr/include/c++/4.4/bits/basic_string.h" 3
      reference
      operator [ ] ( size_type __pos )
      {

 ;

 ;
 _M_leak ( );
 return _M_data ( ) [ __pos ];
      }
# 733 "/usr/include/c++/4.4/bits/basic_string.h" 3
      const_reference
      at ( size_type __n ) const
      {
 if ( __n >= this -> size ( ) )
   __throw_out_of_range ( ( "basic_string::at" ) );
 return _M_data ( ) [ __n ];
      }
# 752 "/usr/include/c++/4.4/bits/basic_string.h" 3
      reference
      at ( size_type __n )
      {
 if ( __n >= size ( ) )
   __throw_out_of_range ( ( "basic_string::at" ) );
 _M_leak ( );
 return _M_data ( ) [ __n ];
      }







      basic_string &
      operator += ( const basic_string & __str )
      { return this -> append ( __str ); }






      basic_string &
      operator += ( const _CharT * __s )
      { return this -> append ( __s ); }






      basic_string &
      operator += ( _CharT __c )
      {
 this -> push_back ( __c );
 return * this;
      }






      basic_string &
      append ( const basic_string & __str );
# 812 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      append ( const basic_string & __str, size_type __pos, size_type __n );







      basic_string &
      append ( const _CharT * __s, size_type __n );






      basic_string &
      append ( const _CharT * __s )
      {
 ;
 return this -> append ( __s, traits_type :: length ( __s ) );
      }
# 844 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      append ( size_type __n, _CharT __c );
# 855 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template < class _InputIterator >
        basic_string &
        append ( _InputIterator __first, _InputIterator __last )
        { return this -> replace ( _M_iend ( ), _M_iend ( ), __first, __last ); }





      void
      push_back ( _CharT __c )
      {
 const size_type __len = 1 + this -> size ( );
 if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
   this -> reserve ( __len );
 traits_type :: assign ( _M_data ( ) [ this -> size ( ) ], __c );
 _M_rep ( ) -> _M_set_length_and_sharable ( __len );
      }






      basic_string &
      assign ( const basic_string & __str );
# 894 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      assign ( const basic_string & __str, size_type __pos, size_type __n )
      { return this -> assign ( __str . _M_data ( )
       + __str . _M_check ( __pos, "basic_string::assign" ),
       __str . _M_limit ( __pos, __n ) ); }
# 910 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      assign ( const _CharT * __s, size_type __n );
# 922 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      assign ( const _CharT * __s )
      {
 ;
 return this -> assign ( __s, traits_type :: length ( __s ) );
      }
# 938 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      assign ( size_type __n, _CharT __c )
      { return _M_replace_aux ( size_type ( 0 ), this -> size ( ), __n, __c ); }
# 950 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template < class _InputIterator >
        basic_string &
        assign ( _InputIterator __first, _InputIterator __last )
        { return this -> replace ( _M_ibegin ( ), _M_iend ( ), __first, __last ); }
# 967 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      insert ( iterator __p, size_type __n, _CharT __c )
      { this -> replace ( __p, __p, __n, __c ); }
# 982 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template < class _InputIterator >
        void
        insert ( iterator __p, _InputIterator __beg, _InputIterator __end )
        { this -> replace ( __p, __p, __beg, __end ); }
# 998 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      insert ( size_type __pos1, const basic_string & __str )
      { return this -> insert ( __pos1, __str, size_type ( 0 ), __str . size ( ) ); }
# 1020 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      insert ( size_type __pos1, const basic_string & __str,
      size_type __pos2, size_type __n )
      { return this -> insert ( __pos1, __str . _M_data ( )
       + __str . _M_check ( __pos2, "basic_string::insert" ),
       __str . _M_limit ( __pos2, __n ) ); }
# 1043 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      insert ( size_type __pos, const _CharT * __s, size_type __n );
# 1061 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      insert ( size_type __pos, const _CharT * __s )
      {
 ;
 return this -> insert ( __pos, __s, traits_type :: length ( __s ) );
      }
# 1084 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      insert ( size_type __pos, size_type __n, _CharT __c )
      { return _M_replace_aux ( _M_check ( __pos, "basic_string::insert" ),
         size_type ( 0 ), __n, __c ); }
# 1101 "/usr/include/c++/4.4/bits/basic_string.h" 3
      iterator
      insert ( iterator __p, _CharT __c )
      {
 ;
 const size_type __pos = __p - _M_ibegin ( );
 _M_replace_aux ( __pos, size_type ( 0 ), size_type ( 1 ), __c );
 _M_rep ( ) -> _M_set_leaked ( );
 return iterator ( _M_data ( ) + __pos );
      }
# 1125 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      erase ( size_type __pos = 0, size_type __n = npos )
      {
 _M_mutate ( _M_check ( __pos, "basic_string::erase" ),
    _M_limit ( __pos, __n ), size_type ( 0 ) );
 return * this;
      }
# 1141 "/usr/include/c++/4.4/bits/basic_string.h" 3
      iterator
      erase ( iterator __position )
      {
 ;

 const size_type __pos = __position - _M_ibegin ( );
 _M_mutate ( __pos, size_type ( 1 ), size_type ( 0 ) );
 _M_rep ( ) -> _M_set_leaked ( );
 return iterator ( _M_data ( ) + __pos );
      }
# 1161 "/usr/include/c++/4.4/bits/basic_string.h" 3
      iterator
      erase ( iterator __first, iterator __last )
      {
 ;

        const size_type __pos = __first - _M_ibegin ( );
 _M_mutate ( __pos, __last - __first, size_type ( 0 ) );
 _M_rep ( ) -> _M_set_leaked ( );
 return iterator ( _M_data ( ) + __pos );
      }
# 1188 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( size_type __pos, size_type __n, const basic_string & __str )
      { return this -> replace ( __pos, __n, __str . _M_data ( ), __str . size ( ) ); }
# 1210 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( size_type __pos1, size_type __n1, const basic_string & __str,
       size_type __pos2, size_type __n2 )
      { return this -> replace ( __pos1, __n1, __str . _M_data ( )
        + __str . _M_check ( __pos2, "basic_string::replace" ),
        __str . _M_limit ( __pos2, __n2 ) ); }
# 1234 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( size_type __pos, size_type __n1, const _CharT * __s,
       size_type __n2 );
# 1253 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( size_type __pos, size_type __n1, const _CharT * __s )
      {
 ;
 return this -> replace ( __pos, __n1, __s, traits_type :: length ( __s ) );
      }
# 1276 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( size_type __pos, size_type __n1, size_type __n2, _CharT __c )
      { return _M_replace_aux ( _M_check ( __pos, "basic_string::replace" ),
         _M_limit ( __pos, __n1 ), __n2, __c ); }
# 1294 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( iterator __i1, iterator __i2, const basic_string & __str )
      { return this -> replace ( __i1, __i2, __str . _M_data ( ), __str . size ( ) ); }
# 1312 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( iterator __i1, iterator __i2, const _CharT * __s, size_type __n )
      {
 ;

 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1, __s, __n );
      }
# 1333 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( iterator __i1, iterator __i2, const _CharT * __s )
      {
 ;
 return this -> replace ( __i1, __i2, __s, traits_type :: length ( __s ) );
      }
# 1354 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string &
      replace ( iterator __i1, iterator __i2, size_type __n, _CharT __c )
      {
 ;

 return _M_replace_aux ( __i1 - _M_ibegin ( ), __i2 - __i1, __n, __c );
      }
# 1376 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template < class _InputIterator >
        basic_string &
        replace ( iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2 )
        {
   ;

   ;
   typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
   return _M_replace_dispatch ( __i1, __i2, __k1, __k2, _Integral ( ) );
 }



      basic_string &
      replace ( iterator __i1, iterator __i2, _CharT * __k1, _CharT * __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1, __k2 - __k1 );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2,
       const _CharT * __k1, const _CharT * __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1, __k2 - __k1 );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2, iterator __k1, iterator __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1 . base ( ), __k2 - __k1 );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1 . base ( ), __k2 - __k1 );
      }

    private :
      template < class _Integer >
 basic_string &
 _M_replace_dispatch ( iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type )
        { return _M_replace_aux ( __i1 - _M_ibegin ( ), __i2 - __i1, __n, __val ); }

      template < class _InputIterator >
 basic_string &
 _M_replace_dispatch ( iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type );

      basic_string &
      _M_replace_aux ( size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c );

      basic_string &
      _M_replace_safe ( size_type __pos1, size_type __n1, const _CharT * __s,
        size_type __n2 );



      template < class _InIterator >
        static _CharT *
        _S_construct_aux ( _InIterator __beg, _InIterator __end,
    const _Alloc & __a, __false_type )
 {
          typedef typename iterator_traits < _InIterator > :: iterator_category _Tag;
          return _S_construct ( __beg, __end, __a, _Tag ( ) );
 }



      template < class _Integer >
        static _CharT *
        _S_construct_aux ( _Integer __beg, _Integer __end,
    const _Alloc & __a, __true_type )
        { return _S_construct ( static_cast < size_type > ( __beg ), __end, __a ); }

      template < class _InIterator >
        static _CharT *
        _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a )
 {
   typedef typename std :: __is_integer < _InIterator > :: __type _Integral;
   return _S_construct_aux ( __beg, __end, __a, _Integral ( ) );
        }


      template < class _InIterator >
        static _CharT *
         _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a,
        input_iterator_tag );



      template < class _FwdIterator >
        static _CharT *
        _S_construct ( _FwdIterator __beg, _FwdIterator __end, const _Alloc & __a,
       forward_iterator_tag );

      static _CharT *
      _S_construct ( size_type __req, _CharT __c, const _Alloc & __a );

    public :
# 1508 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      copy ( _CharT * __s, size_type __n, size_type __pos = 0 ) const;
# 1518 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      swap ( basic_string & __s );
# 1528 "/usr/include/c++/4.4/bits/basic_string.h" 3
      const _CharT *
      c_str ( ) const
      { return _M_data ( ); }







      const _CharT *
      data ( ) const
      { return _M_data ( ); }




      allocator_type
      get_allocator ( ) const
      { return _M_dataplus; }
# 1560 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find ( const _CharT * __s, size_type __pos, size_type __n ) const;
# 1573 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find ( const basic_string & __str, size_type __pos = 0 ) const
      { return this -> find ( __str . data ( ), __pos, __str . size ( ) ); }
# 1587 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find ( const _CharT * __s, size_type __pos = 0 ) const
      {
 ;
 return this -> find ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1604 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find ( _CharT __c, size_type __pos = 0 ) const;
# 1617 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind ( const basic_string & __str, size_type __pos = npos ) const
      { return this -> rfind ( __str . data ( ), __pos, __str . size ( ) ); }
# 1632 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind ( const _CharT * __s, size_type __pos, size_type __n ) const;
# 1645 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind ( const _CharT * __s, size_type __pos = npos ) const
      {
 ;
 return this -> rfind ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1662 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind ( _CharT __c, size_type __pos = npos ) const;
# 1675 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of ( const basic_string & __str, size_type __pos = 0 ) const
      { return this -> find_first_of ( __str . data ( ), __pos, __str . size ( ) ); }
# 1690 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of ( const _CharT * __s, size_type __pos, size_type __n ) const;
# 1703 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of ( const _CharT * __s, size_type __pos = 0 ) const
      {
 ;
 return this -> find_first_of ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1722 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of ( _CharT __c, size_type __pos = 0 ) const
      { return this -> find ( __c, __pos ); }
# 1736 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of ( const basic_string & __str, size_type __pos = npos ) const
      { return this -> find_last_of ( __str . data ( ), __pos, __str . size ( ) ); }
# 1751 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of ( const _CharT * __s, size_type __pos, size_type __n ) const;
# 1764 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of ( const _CharT * __s, size_type __pos = npos ) const
      {
 ;
 return this -> find_last_of ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1783 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of ( _CharT __c, size_type __pos = npos ) const
      { return this -> rfind ( __c, __pos ); }
# 1797 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of ( const basic_string & __str, size_type __pos = 0 ) const
      { return this -> find_first_not_of ( __str . data ( ), __pos, __str . size ( ) ); }
# 1812 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of ( const _CharT * __s, size_type __pos,
   size_type __n ) const;
# 1826 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of ( const _CharT * __s, size_type __pos = 0 ) const
      {
 ;
 return this -> find_first_not_of ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1843 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of ( _CharT __c, size_type __pos = 0 ) const;
# 1856 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of ( const basic_string & __str, size_type __pos = npos ) const
      { return this -> find_last_not_of ( __str . data ( ), __pos, __str . size ( ) ); }
# 1872 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of ( const _CharT * __s, size_type __pos,
         size_type __n ) const;
# 1885 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of ( const _CharT * __s, size_type __pos = npos ) const
      {
 ;
 return this -> find_last_not_of ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1902 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of ( _CharT __c, size_type __pos = npos ) const;
# 1917 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string
      substr ( size_type __pos = 0, size_type __n = npos ) const
      { return basic_string ( * this,
       _M_check ( __pos, "basic_string::substr" ), __n ); }
# 1935 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare ( const basic_string & __str ) const
      {
 const size_type __size = this -> size ( );
 const size_type __osize = __str . size ( );
 const size_type __len = std :: min ( __size, __osize );

 int __r = traits_type :: compare ( _M_data ( ), __str . data ( ), __len );
 if ( ! __r )
   __r = _S_compare ( __size, __osize );
 return __r;
      }
# 1965 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare ( size_type __pos, size_type __n, const basic_string & __str ) const;
# 1989 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare ( size_type __pos1, size_type __n1, const basic_string & __str,
       size_type __pos2, size_type __n2 ) const;
# 2007 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare ( const _CharT * __s ) const;
# 2030 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare ( size_type __pos, size_type __n1, const _CharT * __s ) const;
# 2055 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare ( size_type __pos, size_type __n1, const _CharT * __s,
       size_type __n2 ) const;
  };
# 2146 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( )

    : _M_dataplus ( _S_empty_rep ( ) . _M_refdata ( ), _Alloc ( ) ) { }
# 2162 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    {
      basic_string < _CharT, _Traits, _Alloc > __str ( __lhs );
      __str . append ( __rhs );
      return __str;
    }
# 2178 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs );
# 2189 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( _CharT __lhs, const basic_string < _CharT, _Traits, _Alloc > & __rhs );
# 2199 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string < _CharT, _Traits, _Alloc >
    operator + ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
      const _CharT * __rhs )
    {
      basic_string < _CharT, _Traits, _Alloc > __str ( __lhs );
      __str . append ( __rhs );
      return __str;
    }
# 2215 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string < _CharT, _Traits, _Alloc >
    operator + ( const basic_string < _CharT, _Traits, _Alloc > & __lhs, _CharT __rhs )
    {
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;
      __string_type __str ( __lhs );
      __str . append ( __size_type ( 1 ), __rhs );
      return __str;
    }
# 2233 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator == ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) == 0; }
# 2239 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT >
    inline
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value, bool > :: __type
    operator == ( const basic_string < _CharT > & __lhs,
        const basic_string < _CharT > & __rhs )
    { return ( __lhs . size ( ) == __rhs . size ( )
       && ! std :: char_traits < _CharT > :: compare ( __lhs . data ( ), __rhs . data ( ),
          __lhs . size ( ) ) ); }
# 2254 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator == ( const _CharT * __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) == 0; }
# 2266 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator == ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) == 0; }
# 2279 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator != ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return ! ( __lhs == __rhs ); }
# 2291 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator != ( const _CharT * __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return ! ( __lhs == __rhs ); }
# 2303 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator != ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return ! ( __lhs == __rhs ); }
# 2316 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator < ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) < 0; }
# 2328 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator < ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) < 0; }
# 2340 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator < ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) > 0; }
# 2353 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator > ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) > 0; }
# 2365 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator > ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) > 0; }
# 2377 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator > ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) < 0; }
# 2390 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator <= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) <= 0; }
# 2402 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator <= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) <= 0; }
# 2414 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator <= ( const _CharT * __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) >= 0; }
# 2427 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator >= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) >= 0; }
# 2439 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator >= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) >= 0; }
# 2451 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator >= ( const _CharT * __lhs,
      const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) <= 0; }
# 2464 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline void
    swap ( basic_string < _CharT, _Traits, _Alloc > & __lhs,
  basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { __lhs . swap ( __rhs ); }
# 2481 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __is,
        basic_string < _CharT, _Traits, _Alloc > & __str );
# 2488 "/usr/include/c++/4.4/bits/basic_string.h" 3
template<> basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &);
# 2499 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __os,
        const basic_string < _CharT, _Traits, _Alloc > & __str )
    {


      return __ostream_insert ( __os, __str . data ( ), __str . size ( ) );
    }
# 2522 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    getline ( basic_istream < _CharT, _Traits > & __is,
     basic_string < _CharT, _Traits, _Alloc > & __str, _CharT __delim );
# 2539 "/usr/include/c++/4.4/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_istream < _CharT, _Traits > &
    getline ( basic_istream < _CharT, _Traits > & __is,
     basic_string < _CharT, _Traits, _Alloc > & __str )
    { return getline ( __is, __str, __is . widen ( '\n' ) ); }
# 2547 "/usr/include/c++/4.4/bits/basic_string.h" 3
template<> basic_istream< char, char_traits< char> > &getline(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &, char);
# 2553 "/usr/include/c++/4.4/bits/basic_string.h" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &getline(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &, wchar_t);
# 2557 "/usr/include/c++/4.4/bits/basic_string.h" 3
}
# 46 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 48 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> const typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 51 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_max_size = ((((npos - sizeof(_Rep_base)) / sizeof(_CharT)) - 1) / 4);
# 53 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> const _CharT
# 56 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_terminal = (_CharT());
# 58 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> const typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 60 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::npos;
# 64 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template<class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 66 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_empty_rep_storage[];
# 74 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InIterator >
      _CharT *
      basic_string < _CharT, _Traits, _Alloc > ::
      _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a,
     input_iterator_tag )
      {

 if ( __beg == __end && __a == _Alloc ( ) )
   return _S_empty_rep ( ) . _M_refdata ( );


 _CharT __buf [ 128 ];
 size_type __len = 0;
 while ( __beg != __end && __len < sizeof ( __buf ) / sizeof ( _CharT ) )
   {
     __buf [ __len ++ ] = * __beg;
     ++ __beg;
   }
 _Rep * __r = _Rep :: _S_create ( __len, size_type ( 0 ), __a );
 _M_copy ( __r -> _M_refdata ( ), __buf, __len );
 try
   {
     while ( __beg != __end )
       {
  if ( __len == __r -> _M_capacity )
    {

      _Rep * __another = _Rep :: _S_create ( __len + 1, __len, __a );
      _M_copy ( __another -> _M_refdata ( ), __r -> _M_refdata ( ), __len );
      __r -> _M_destroy ( __a );
      __r = __another;
    }
  __r -> _M_refdata ( ) [ __len ++ ] = * __beg;
  ++ __beg;
       }
   }
 catch ( ... )
   {
     __r -> _M_destroy ( __a );
     throw;
   }
 __r -> _M_set_length_and_sharable ( __len );
 return __r -> _M_refdata ( );
      }
# 120 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InIterator >
      _CharT *
      basic_string < _CharT, _Traits, _Alloc > ::
      _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a,
     forward_iterator_tag )
      {

 if ( __beg == __end && __a == _Alloc ( ) )
   return _S_empty_rep ( ) . _M_refdata ( );


 if ( __builtin_expect ( __gnu_cxx :: __is_null_pointer ( __beg )
        && __beg != __end, 0 ) )
   __throw_logic_error ( ( "basic_string::_S_construct NULL not valid" ) );

 const size_type __dnew = static_cast < size_type > ( std :: distance ( __beg,
              __end ) );

 _Rep * __r = _Rep :: _S_create ( __dnew, size_type ( 0 ), __a );
 try
   { _S_copy_chars ( __r -> _M_refdata ( ), __beg, __end ); }
 catch ( ... )
   {
     __r -> _M_destroy ( __a );
     throw;
   }
 __r -> _M_set_length_and_sharable ( __dnew );
 return __r -> _M_refdata ( );
      }
# 151 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    _CharT *
    basic_string < _CharT, _Traits, _Alloc > ::
    _S_construct ( size_type __n, _CharT __c, const _Alloc & __a )
    {

      if ( __n == 0 && __a == _Alloc ( ) )
 return _S_empty_rep ( ) . _M_refdata ( );


      _Rep * __r = _Rep :: _S_create ( __n, size_type ( 0 ), __a );
      if ( __n )
 _M_assign ( __r -> _M_refdata ( ), __n, __c );

      __r -> _M_set_length_and_sharable ( __n );
      return __r -> _M_refdata ( );
    }
# 169 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const basic_string & __str )
    : _M_dataplus ( __str . _M_rep ( ) -> _M_grab ( _Alloc ( __str . get_allocator ( ) ),
       __str . get_allocator ( ) ),
    __str . get_allocator ( ) )
    { }
# 177 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const _Alloc & __a )
    : _M_dataplus ( _S_construct ( size_type ( ), _CharT ( ), __a ), __a )
    { }
# 183 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const basic_string & __str, size_type __pos, size_type __n )
    : _M_dataplus ( _S_construct ( __str . _M_data ( )
          + __str . _M_check ( __pos,
      "basic_string::basic_string" ),
          __str . _M_data ( ) + __str . _M_limit ( __pos, __n )
          + __pos, _Alloc ( ) ), _Alloc ( ) )
    { }
# 193 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const basic_string & __str, size_type __pos,
   size_type __n, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __str . _M_data ( )
          + __str . _M_check ( __pos,
      "basic_string::basic_string" ),
          __str . _M_data ( ) + __str . _M_limit ( __pos, __n )
          + __pos, __a ), __a )
    { }
# 205 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const _CharT * __s, size_type __n, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __s, __s + __n, __a ), __a )
    { }
# 212 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const _CharT * __s, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __s, __s ? __s + traits_type :: length ( __s ) :
          __s + npos, __a ), __a )
    { }
# 219 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( size_type __n, _CharT __c, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __n, __c, __a ), __a )
    { }
# 226 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InputIterator >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( _InputIterator __beg, _InputIterator __end, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __beg, __end, __a ), __a )
    { }
# 241 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    assign ( const basic_string & __str )
    {
      if ( _M_rep ( ) != __str . _M_rep ( ) )
 {

   const allocator_type __a = this -> get_allocator ( );
   _CharT * __tmp = __str . _M_rep ( ) -> _M_grab ( __a, __str . get_allocator ( ) );
   _M_rep ( ) -> _M_dispose ( __a );
   _M_data ( __tmp );
 }
      return * this;
    }
# 257 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    assign ( const _CharT * __s, size_type __n )
    {
      ;
      _M_check_length ( this -> size ( ), __n, "basic_string::assign" );
      if ( _M_disjunct ( __s ) || _M_rep ( ) -> _M_is_shared ( ) )
 return _M_replace_safe ( size_type ( 0 ), this -> size ( ), __s, __n );
      else
 {

   const size_type __pos = __s - _M_data ( );
   if ( __pos >= __n )
     _M_copy ( _M_data ( ), __s, __n );
   else if ( __pos )
     _M_move ( _M_data ( ), __s, __n );
   _M_rep ( ) -> _M_set_length_and_sharable ( __n );
   return * this;
 }
     }
# 279 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( size_type __n, _CharT __c )
    {
      if ( __n )
 {
   _M_check_length ( size_type ( 0 ), __n, "basic_string::append" );
   const size_type __len = __n + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     this -> reserve ( __len );
   _M_assign ( _M_data ( ) + this -> size ( ), __n, __c );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 296 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( const _CharT * __s, size_type __n )
    {
      ;
      if ( __n )
 {
   _M_check_length ( size_type ( 0 ), __n, "basic_string::append" );
   const size_type __len = __n + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     {
       if ( _M_disjunct ( __s ) )
  this -> reserve ( __len );
       else
  {
    const size_type __off = __s - _M_data ( );
    this -> reserve ( __len );
    __s = _M_data ( ) + __off;
  }
     }
   _M_copy ( _M_data ( ) + this -> size ( ), __s, __n );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 323 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( const basic_string & __str )
    {
      const size_type __size = __str . size ( );
      if ( __size )
 {
   const size_type __len = __size + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     this -> reserve ( __len );
   _M_copy ( _M_data ( ) + this -> size ( ), __str . _M_data ( ), __size );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 340 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( const basic_string & __str, size_type __pos, size_type __n )
    {
      __str . _M_check ( __pos, "basic_string::append" );
      __n = __str . _M_limit ( __pos, __n );
      if ( __n )
 {
   const size_type __len = __n + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     this -> reserve ( __len );
   _M_copy ( _M_data ( ) + this -> size ( ), __str . _M_data ( ) + __pos, __n );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 358 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
     basic_string < _CharT, _Traits, _Alloc > &
     basic_string < _CharT, _Traits, _Alloc > ::
     insert ( size_type __pos, const _CharT * __s, size_type __n )
     {
       ;
       _M_check ( __pos, "basic_string::insert" );
       _M_check_length ( size_type ( 0 ), __n, "basic_string::insert" );
       if ( _M_disjunct ( __s ) || _M_rep ( ) -> _M_is_shared ( ) )
         return _M_replace_safe ( __pos, size_type ( 0 ), __s, __n );
       else
         {

           const size_type __off = __s - _M_data ( );
           _M_mutate ( __pos, 0, __n );
           __s = _M_data ( ) + __off;
           _CharT * __p = _M_data ( ) + __pos;
           if ( __s + __n <= __p )
             _M_copy ( __p, __s, __n );
           else if ( __s >= __p )
             _M_copy ( __p, __s + __n, __n );
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy ( __p, __s, __nleft );
               _M_copy ( __p + __nleft, __p + __n, __n - __nleft );
             }
           return * this;
         }
     }
# 389 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
     basic_string < _CharT, _Traits, _Alloc > &
     basic_string < _CharT, _Traits, _Alloc > ::
     replace ( size_type __pos, size_type __n1, const _CharT * __s,
      size_type __n2 )
     {
       ;
       _M_check ( __pos, "basic_string::replace" );
       __n1 = _M_limit ( __pos, __n1 );
       _M_check_length ( __n1, __n2, "basic_string::replace" );
       bool __left;
       if ( _M_disjunct ( __s ) || _M_rep ( ) -> _M_is_shared ( ) )
         return _M_replace_safe ( __pos, __n1, __s, __n2 );
       else if ( ( __left = __s + __n2 <= _M_data ( ) + __pos )
  || _M_data ( ) + __pos + __n1 <= __s )
  {

    size_type __off = __s - _M_data ( );
    __left ? __off : ( __off += __n2 - __n1 );
    _M_mutate ( __pos, __n1, __n2 );
    _M_copy ( _M_data ( ) + __pos, _M_data ( ) + __off, __n2 );
    return * this;
  }
       else
  {

    const basic_string __tmp ( __s, __n2 );
    return _M_replace_safe ( __pos, __n1, __tmp . _M_data ( ), __n2 );
  }
     }
# 420 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > :: _Rep ::
    _M_destroy ( const _Alloc & __a ) throw ( )
    {
      const size_type __size = sizeof ( _Rep_base ) +
                        ( this -> _M_capacity + 1 ) * sizeof ( _CharT );
      _Raw_bytes_alloc ( __a ) . deallocate ( reinterpret_cast < char * > ( this ), __size );
    }
# 430 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_leak_hard ( )
    {

      if ( _M_rep ( ) == & _S_empty_rep ( ) )
 return;

      if ( _M_rep ( ) -> _M_is_shared ( ) )
 _M_mutate ( 0, 0, 0 );
      _M_rep ( ) -> _M_set_leaked ( );
    }
# 444 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_mutate ( size_type __pos, size_type __len1, size_type __len2 )
    {
      const size_type __old_size = this -> size ( );
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if ( __new_size > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
 {

   const allocator_type __a = get_allocator ( );
   _Rep * __r = _Rep :: _S_create ( __new_size, this -> capacity ( ), __a );

   if ( __pos )
     _M_copy ( __r -> _M_refdata ( ), _M_data ( ), __pos );
   if ( __how_much )
     _M_copy ( __r -> _M_refdata ( ) + __pos + __len2,
      _M_data ( ) + __pos + __len1, __how_much );

   _M_rep ( ) -> _M_dispose ( __a );
   _M_data ( __r -> _M_refdata ( ) );
 }
      else if ( __how_much && __len1 != __len2 )
 {

   _M_move ( _M_data ( ) + __pos + __len2,
    _M_data ( ) + __pos + __len1, __how_much );
 }
      _M_rep ( ) -> _M_set_length_and_sharable ( __new_size );
    }
# 477 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    reserve ( size_type __res )
    {
      if ( __res != this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
        {

   if ( __res < this -> size ( ) )
     __res = this -> size ( );
   const allocator_type __a = get_allocator ( );
   _CharT * __tmp = _M_rep ( ) -> _M_clone ( __a, __res - this -> size ( ) );
   _M_rep ( ) -> _M_dispose ( __a );
   _M_data ( __tmp );
        }
    }
# 494 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    swap ( basic_string & __s )
    {
      if ( _M_rep ( ) -> _M_is_leaked ( ) )
 _M_rep ( ) -> _M_set_sharable ( );
      if ( __s . _M_rep ( ) -> _M_is_leaked ( ) )
 __s . _M_rep ( ) -> _M_set_sharable ( );
      if ( this -> get_allocator ( ) == __s . get_allocator ( ) )
 {
   _CharT * __tmp = _M_data ( );
   _M_data ( __s . _M_data ( ) );
   __s . _M_data ( __tmp );
 }

      else
 {
   const basic_string __tmp1 ( _M_ibegin ( ), _M_iend ( ),
        __s . get_allocator ( ) );
   const basic_string __tmp2 ( __s . _M_ibegin ( ), __s . _M_iend ( ),
        this -> get_allocator ( ) );
   * this = __tmp2;
   __s = __tmp1;
 }
    }
# 521 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: _Rep *
    basic_string < _CharT, _Traits, _Alloc > :: _Rep ::
    _S_create ( size_type __capacity, size_type __old_capacity,
       const _Alloc & __alloc )
    {


      if ( __capacity > _S_max_size )
 __throw_length_error ( ( "basic_string::_S_create" ) );
# 555 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof ( void * );







      if ( __capacity > __old_capacity && __capacity < 2 * __old_capacity )
 __capacity = 2 * __old_capacity;




      size_type __size = ( __capacity + 1 ) * sizeof ( _CharT ) + sizeof ( _Rep );

      const size_type __adj_size = __size + __malloc_header_size;
      if ( __adj_size > __pagesize && __capacity > __old_capacity )
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof ( _CharT );

   if ( __capacity > _S_max_size )
     __capacity = _S_max_size;
   __size = ( __capacity + 1 ) * sizeof ( _CharT ) + sizeof ( _Rep );
 }



      void * __place = _Raw_bytes_alloc ( __alloc ) . allocate ( __size );
      _Rep * __p = new ( __place ) _Rep;
      __p -> _M_capacity = __capacity;







      __p -> _M_set_sharable ( );
      return __p;
    }
# 599 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    _CharT *
    basic_string < _CharT, _Traits, _Alloc > :: _Rep ::
    _M_clone ( const _Alloc & __alloc, size_type __res )
    {

      const size_type __requested_cap = this -> _M_length + __res;
      _Rep * __r = _Rep :: _S_create ( __requested_cap, this -> _M_capacity,
      __alloc );
      if ( this -> _M_length )
 _M_copy ( __r -> _M_refdata ( ), _M_refdata ( ), this -> _M_length );

      __r -> _M_set_length_and_sharable ( this -> _M_length );
      return __r -> _M_refdata ( );
    }
# 615 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    resize ( size_type __n, _CharT __c )
    {
      const size_type __size = this -> size ( );
      _M_check_length ( __size, __n, "basic_string::resize" );
      if ( __size < __n )
 this -> append ( __n - __size, __c );
      else if ( __n < __size )
 this -> erase ( __n );

    }
# 629 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InputIterator >
      basic_string < _CharT, _Traits, _Alloc > &
      basic_string < _CharT, _Traits, _Alloc > ::
      _M_replace_dispatch ( iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type )
      {
 const basic_string __s ( __k1, __k2 );
 const size_type __n1 = __i2 - __i1;
 _M_check_length ( __n1, __s . size ( ), "basic_string::_M_replace_dispatch" );
 return _M_replace_safe ( __i1 - _M_ibegin ( ), __n1, __s . _M_data ( ),
          __s . size ( ) );
      }
# 643 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_replace_aux ( size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c )
    {
      _M_check_length ( __n1, __n2, "basic_string::_M_replace_aux" );
      _M_mutate ( __pos1, __n1, __n2 );
      if ( __n2 )
 _M_assign ( _M_data ( ) + __pos1, __n2, __c );
      return * this;
    }
# 656 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_replace_safe ( size_type __pos1, size_type __n1, const _CharT * __s,
      size_type __n2 )
    {
      _M_mutate ( __pos1, __n1, __n2 );
      if ( __n2 )
 _M_copy ( _M_data ( ) + __pos1, __s, __n2 );
      return * this;
    }
# 668 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    {
      ;
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;
      const __size_type __len = _Traits :: length ( __lhs );
      __string_type __str;
      __str . reserve ( __len + __rhs . size ( ) );
      __str . append ( __lhs, __len );
      __str . append ( __rhs );
      return __str;
    }
# 684 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( _CharT __lhs, const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    {
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs . size ( );
      __str . reserve ( __len + 1 );
      __str . append ( __size_type ( 1 ), __lhs );
      __str . append ( __rhs );
      return __str;
    }
# 698 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    copy ( _CharT * __s, size_type __n, size_type __pos ) const
    {
      _M_check ( __pos, "basic_string::copy" );
      __n = _M_limit ( __pos, __n );
      ;
      if ( __n )
 _M_copy ( __s, _M_data ( ) + __pos, __n );

      return __n;
    }
# 712 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      const size_type __size = this -> size ( );
      const _CharT * __data = _M_data ( );

      if ( __n == 0 )
 return __pos <= __size ? __pos : npos;

      if ( __n <= __size )
 {
   for (; __pos <= __size - __n; ++ __pos )
     if ( traits_type :: eq ( __data [ __pos ], __s [ 0 ] )
  && traits_type :: compare ( __data + __pos + 1,
     __s + 1, __n - 1 ) == 0 )
       return __pos;
 }
      return npos;
    }
# 735 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find ( _CharT __c, size_type __pos ) const
    {
      size_type __ret = npos;
      const size_type __size = this -> size ( );
      if ( __pos < __size )
 {
   const _CharT * __data = _M_data ( );
   const size_type __n = __size - __pos;
   const _CharT * __p = traits_type :: find ( __data + __pos, __n, __c );
   if ( __p )
     __ret = __p - __data;
 }
      return __ret;
    }
# 753 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    rfind ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      const size_type __size = this -> size ( );
      if ( __n <= __size )
 {
   __pos = std :: min ( size_type ( __size - __n ), __pos );
   const _CharT * __data = _M_data ( );
   do
     {
       if ( traits_type :: compare ( __data + __pos, __s, __n ) == 0 )
  return __pos;
     }
   while ( __pos -- > 0 );
 }
      return npos;
    }
# 774 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    rfind ( _CharT __c, size_type __pos ) const
    {
      size_type __size = this -> size ( );
      if ( __size )
 {
   if ( -- __size > __pos )
     __size = __pos;
   for ( ++ __size; __size -- > 0; )
     if ( traits_type :: eq ( _M_data ( ) [ __size ], __c ) )
       return __size;
 }
      return npos;
    }
# 791 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_first_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      for (; __n && __pos < this -> size ( ); ++ __pos )
 {
   const _CharT * __p = traits_type :: find ( __s, __n, _M_data ( ) [ __pos ] );
   if ( __p )
     return __pos;
 }
      return npos;
    }
# 806 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_last_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      size_type __size = this -> size ( );
      if ( __size && __n )
 {
   if ( -- __size > __pos )
     __size = __pos;
   do
     {
       if ( traits_type :: find ( __s, __n, _M_data ( ) [ __size ] ) )
  return __size;
     }
   while ( __size -- != 0 );
 }
      return npos;
    }
# 827 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_first_not_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      for (; __pos < this -> size ( ); ++ __pos )
 if ( ! traits_type :: find ( __s, __n, _M_data ( ) [ __pos ] ) )
   return __pos;
      return npos;
    }
# 839 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_first_not_of ( _CharT __c, size_type __pos ) const
    {
      for (; __pos < this -> size ( ); ++ __pos )
 if ( ! traits_type :: eq ( _M_data ( ) [ __pos ], __c ) )
   return __pos;
      return npos;
    }
# 850 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_last_not_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      size_type __size = this -> size ( );
      if ( __size )
 {
   if ( -- __size > __pos )
     __size = __pos;
   do
     {
       if ( ! traits_type :: find ( __s, __n, _M_data ( ) [ __size ] ) )
  return __size;
     }
   while ( __size -- );
 }
      return npos;
    }
# 871 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_last_not_of ( _CharT __c, size_type __pos ) const
    {
      size_type __size = this -> size ( );
      if ( __size )
 {
   if ( -- __size > __pos )
     __size = __pos;
   do
     {
       if ( ! traits_type :: eq ( _M_data ( ) [ __size ], __c ) )
  return __size;
     }
   while ( __size -- );
 }
      return npos;
    }
# 891 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos, size_type __n, const basic_string & __str ) const
    {
      _M_check ( __pos, "basic_string::compare" );
      __n = _M_limit ( __pos, __n );
      const size_type __osize = __str . size ( );
      const size_type __len = std :: min ( __n, __osize );
      int __r = traits_type :: compare ( _M_data ( ) + __pos, __str . data ( ), __len );
      if ( ! __r )
 __r = _S_compare ( __n, __osize );
      return __r;
    }
# 906 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos1, size_type __n1, const basic_string & __str,
     size_type __pos2, size_type __n2 ) const
    {
      _M_check ( __pos1, "basic_string::compare" );
      __str . _M_check ( __pos2, "basic_string::compare" );
      __n1 = _M_limit ( __pos1, __n1 );
      __n2 = __str . _M_limit ( __pos2, __n2 );
      const size_type __len = std :: min ( __n1, __n2 );
      int __r = traits_type :: compare ( _M_data ( ) + __pos1,
         __str . data ( ) + __pos2, __len );
      if ( ! __r )
 __r = _S_compare ( __n1, __n2 );
      return __r;
    }
# 924 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( const _CharT * __s ) const
    {
      ;
      const size_type __size = this -> size ( );
      const size_type __osize = traits_type :: length ( __s );
      const size_type __len = std :: min ( __size, __osize );
      int __r = traits_type :: compare ( _M_data ( ), __s, __len );
      if ( ! __r )
 __r = _S_compare ( __size, __osize );
      return __r;
    }
# 939 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos, size_type __n1, const _CharT * __s ) const
    {
      ;
      _M_check ( __pos, "basic_string::compare" );
      __n1 = _M_limit ( __pos, __n1 );
      const size_type __osize = traits_type :: length ( __s );
      const size_type __len = std :: min ( __n1, __osize );
      int __r = traits_type :: compare ( _M_data ( ) + __pos, __s, __len );
      if ( ! __r )
 __r = _S_compare ( __n1, __osize );
      return __r;
    }
# 955 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos, size_type __n1, const _CharT * __s,
     size_type __n2 ) const
    {
      ;
      _M_check ( __pos, "basic_string::compare" );
      __n1 = _M_limit ( __pos, __n1 );
      const size_type __len = std :: min ( __n1, __n2 );
      int __r = traits_type :: compare ( _M_data ( ) + __pos, __s, __len );
      if ( ! __r )
 __r = _S_compare ( __n1, __n2 );
      return __r;
    }
# 972 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in,
        basic_string < _CharT, _Traits, _Alloc > & __str )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __istream_type :: ios_base __ios_base;
      typedef typename __istream_type :: int_type __int_type;
      typedef typename __string_type :: size_type __size_type;
      typedef ctype < _CharT > __ctype_type;
      typedef typename __ctype_type :: ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base :: iostate __err = __ios_base :: goodbit;
      typename __istream_type :: sentry __cerb ( __in, false );
      if ( __cerb )
 {
   try
     {

       __str . erase ( );
       _CharT __buf [ 128 ];
       __size_type __len = 0;
       const streamsize __w = __in . width ( );
       const __size_type __n = __w > 0 ? static_cast < __size_type > ( __w )
                                : __str . max_size ( );
       const __ctype_type & __ct = use_facet < __ctype_type > ( __in . getloc ( ) );
       const __int_type __eof = _Traits :: eof ( );
       __int_type __c = __in . rdbuf ( ) -> sgetc ( );

       while ( __extracted < __n
       && ! _Traits :: eq_int_type ( __c, __eof )
       && ! __ct . is ( __ctype_base :: space,
     _Traits :: to_char_type ( __c ) ) )
  {
    if ( __len == sizeof ( __buf ) / sizeof ( _CharT ) )
      {
        __str . append ( __buf, sizeof ( __buf ) / sizeof ( _CharT ) );
        __len = 0;
      }
    __buf [ __len ++ ] = _Traits :: to_char_type ( __c );
    ++ __extracted;
    __c = __in . rdbuf ( ) -> snextc ( );
  }
       __str . append ( __buf, __len );

       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __err |= __ios_base :: eofbit;
       __in . width ( 0 );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( __ios_base :: badbit );
       throw;
     }
   catch ( ... )
     {



       __in . _M_setstate ( __ios_base :: badbit );
     }
 }

      if ( ! __extracted )
 __err |= __ios_base :: failbit;
      if ( __err )
 __in . setstate ( __err );
      return __in;
    }
# 1044 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    getline ( basic_istream < _CharT, _Traits > & __in,
     basic_string < _CharT, _Traits, _Alloc > & __str, _CharT __delim )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __istream_type :: ios_base __ios_base;
      typedef typename __istream_type :: int_type __int_type;
      typedef typename __string_type :: size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str . max_size ( );
      typename __ios_base :: iostate __err = __ios_base :: goodbit;
      typename __istream_type :: sentry __cerb ( __in, true );
      if ( __cerb )
 {
   try
     {
       __str . erase ( );
       const __int_type __idelim = _Traits :: to_int_type ( __delim );
       const __int_type __eof = _Traits :: eof ( );
       __int_type __c = __in . rdbuf ( ) -> sgetc ( );

       while ( __extracted < __n
       && ! _Traits :: eq_int_type ( __c, __eof )
       && ! _Traits :: eq_int_type ( __c, __idelim ) )
  {
    __str += _Traits :: to_char_type ( __c );
    ++ __extracted;
    __c = __in . rdbuf ( ) -> snextc ( );
  }

       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __err |= __ios_base :: eofbit;
       else if ( _Traits :: eq_int_type ( __c, __idelim ) )
  {
    ++ __extracted;
    __in . rdbuf ( ) -> sbumpc ( );
  }
       else
  __err |= __ios_base :: failbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( __ios_base :: badbit );
       throw;
     }
   catch ( ... )
     {



       __in . _M_setstate ( __ios_base :: badbit );
     }
 }
      if ( ! __extracted )
 __err |= __ios_base :: failbit;
      if ( __err )
 __in . setstate ( __err );
      return __in;
    }
# 1111 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template class basic_string< char, char_traits< char> , allocator< char> > ;
# 1112 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &);
# 1115 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const basic_string< char, char_traits< char> , allocator< char> > &);
# 1118 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_istream< char, char_traits< char> > &getline(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &, char);
# 1121 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_istream< char, char_traits< char> > &getline(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &);
# 1126 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template class basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 1127 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &);
# 1130 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, const basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &);
# 1133 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &getline(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &, wchar_t);
# 1136 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &getline(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &);
# 1142 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
}
# 45 "/usr/include/c++/4.4/bits/locale_classes.h" 3
namespace std __attribute__((visibility("default"))) {
# 61 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class locale {
# 66 "/usr/include/c++/4.4/bits/locale_classes.h" 3
public: typedef int category;
# 69 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class facet;
# 70 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class id;
# 71 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class _Impl;
# 73 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class facet;
# 74 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class _Impl;
# 76 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<class _Facet> friend bool has_facet(const locale &) throw();
# 80 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<class _Facet> friend const _Facet &use_facet(const locale &);
# 84 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<class _Cache> friend struct __use_cache;
# 97 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category none = 0;
# 98 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category ctype = (1L << 0);
# 99 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category numeric = (1L << 1);
# 100 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category collate = (1L << 2);
# 101 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category time = (1L << 3);
# 102 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category monetary = (1L << 4);
# 103 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category messages = (1L << 5);
# 104 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const category all = (((((ctype | numeric) | collate) | time) | monetary) | messages);
# 116 "/usr/include/c++/4.4/bits/locale_classes.h" 3
locale() throw();
# 125 "/usr/include/c++/4.4/bits/locale_classes.h" 3
locale(const locale &) throw();
# 136 "/usr/include/c++/4.4/bits/locale_classes.h" 3
explicit locale(const char *);
# 150 "/usr/include/c++/4.4/bits/locale_classes.h" 3
locale(const locale &, const char *, category);
# 163 "/usr/include/c++/4.4/bits/locale_classes.h" 3
locale(const locale &, const locale &, category);
# 175 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _Facet >
      locale ( const locale & __other, _Facet * __f );
# 179 "/usr/include/c++/4.4/bits/locale_classes.h" 3
~locale() throw();
# 190 "/usr/include/c++/4.4/bits/locale_classes.h" 3
const locale &operator=(const locale &) throw();
# 204 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _Facet >
      locale
      combine ( const locale & __other ) const;
# 214 "/usr/include/c++/4.4/bits/locale_classes.h" 3
string name() const;
# 224 "/usr/include/c++/4.4/bits/locale_classes.h" 3
bool operator==(const locale &) const throw();
# 233 "/usr/include/c++/4.4/bits/locale_classes.h" 3
bool operator!=(const locale &__other) const throw()
# 234 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ return !this->operator==(__other); }
# 251 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _Char, typename _Traits, typename _Alloc >
      bool
      operator ( ) ( const basic_string < _Char, _Traits, _Alloc > & __s1,
   const basic_string < _Char, _Traits, _Alloc > & __s2 ) const;
# 268 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static locale global(const locale &);
# 274 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale &classic();
# 278 "/usr/include/c++/4.4/bits/locale_classes.h" 3
private: _Impl *_M_impl;
# 281 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static _Impl *_S_classic;
# 284 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static _Impl *_S_global;
# 290 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const char *const *const _S_categories;
# 302 "/usr/include/c++/4.4/bits/locale_classes.h" 3
enum { _S_categories_size = 12};
# 305 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static __gthread_once_t _S_once;
# 309 "/usr/include/c++/4.4/bits/locale_classes.h" 3
explicit locale(_Impl *) throw();
# 312 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static void _S_initialize();
# 315 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static void _S_initialize_once();
# 318 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static category _S_normalize_category(category);
# 321 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_coalesce(const locale &, const locale &, category);
# 322 "/usr/include/c++/4.4/bits/locale_classes.h" 3
};
# 335 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class locale::facet {
# 338 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class locale;
# 339 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class locale::_Impl;
# 341 "/usr/include/c++/4.4/bits/locale_classes.h" 3
mutable _Atomic_word _M_refcount;
# 344 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static __c_locale _S_c_locale;
# 347 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const char _S_c_name[2];
# 350 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static __gthread_once_t _S_once;
# 354 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static void _S_initialize_once();
# 367 "/usr/include/c++/4.4/bits/locale_classes.h" 3
protected: explicit facet(size_t __refs = (0)) throw() : _M_refcount(((__refs) ? 1 : 0))
# 368 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ }
# 372 "/usr/include/c++/4.4/bits/locale_classes.h" 3
virtual ~facet();
# 375 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static void _S_create_c_locale(__c_locale &, const char *, __c_locale = 0);
# 379 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static __c_locale _S_clone_c_locale(__c_locale &);
# 382 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static void _S_destroy_c_locale(__c_locale &);
# 387 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static __c_locale _S_get_c_locale();
# 390 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const char *_S_get_c_name();
# 394 "/usr/include/c++/4.4/bits/locale_classes.h" 3
private: void _M_add_reference() const throw()
# 395 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); }
# 398 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_remove_reference() const throw()
# 399 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{
# 400 "/usr/include/c++/4.4/bits/locale_classes.h" 3
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1)
# 401 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{
# 402 "/usr/include/c++/4.4/bits/locale_classes.h" 3
try
# 403 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ delete this; }
# 404 "/usr/include/c++/4.4/bits/locale_classes.h" 3
catch (...)
# 405 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ }
# 406 "/usr/include/c++/4.4/bits/locale_classes.h" 3
}
# 407 "/usr/include/c++/4.4/bits/locale_classes.h" 3
}
# 409 "/usr/include/c++/4.4/bits/locale_classes.h" 3
facet(const locale::facet &);
# 412 "/usr/include/c++/4.4/bits/locale_classes.h" 3
locale::facet &operator=(const locale::facet &);
# 413 "/usr/include/c++/4.4/bits/locale_classes.h" 3
};
# 426 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class locale::id {
# 429 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class locale;
# 430 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class locale::_Impl;
# 432 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<class _Facet> friend const _Facet &use_facet(const locale &);
# 436 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<class _Facet> friend bool has_facet(const locale &) throw();
# 443 "/usr/include/c++/4.4/bits/locale_classes.h" 3
mutable size_t _M_index;
# 446 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static _Atomic_word _S_refcount;
# 449 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void operator=(const locale::id &);
# 451 "/usr/include/c++/4.4/bits/locale_classes.h" 3
id(const locale::id &);
# 457 "/usr/include/c++/4.4/bits/locale_classes.h" 3
public: id() { }
# 460 "/usr/include/c++/4.4/bits/locale_classes.h" 3
size_t _M_id() const;
# 461 "/usr/include/c++/4.4/bits/locale_classes.h" 3
};
# 465 "/usr/include/c++/4.4/bits/locale_classes.h" 3
class locale::_Impl {
# 469 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class locale;
# 470 "/usr/include/c++/4.4/bits/locale_classes.h" 3
friend class locale::facet;
# 472 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<class _Facet> friend bool has_facet(const locale &) throw();
# 476 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<class _Facet> friend const _Facet &use_facet(const locale &);
# 480 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<class _Cache> friend struct __use_cache;
# 485 "/usr/include/c++/4.4/bits/locale_classes.h" 3
_Atomic_word _M_refcount;
# 486 "/usr/include/c++/4.4/bits/locale_classes.h" 3
const locale::facet **_M_facets;
# 487 "/usr/include/c++/4.4/bits/locale_classes.h" 3
size_t _M_facets_size;
# 488 "/usr/include/c++/4.4/bits/locale_classes.h" 3
const locale::facet **_M_caches;
# 489 "/usr/include/c++/4.4/bits/locale_classes.h" 3
char **_M_names;
# 490 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale::id *const _S_id_ctype[];
# 491 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale::id *const _S_id_numeric[];
# 492 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale::id *const _S_id_collate[];
# 493 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale::id *const _S_id_time[];
# 494 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale::id *const _S_id_monetary[];
# 495 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale::id *const _S_id_messages[];
# 496 "/usr/include/c++/4.4/bits/locale_classes.h" 3
static const locale::id *const *const _S_facet_categories[];
# 499 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_add_reference() throw()
# 500 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); }
# 503 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_remove_reference() throw()
# 504 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{
# 505 "/usr/include/c++/4.4/bits/locale_classes.h" 3
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1)
# 506 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{
# 507 "/usr/include/c++/4.4/bits/locale_classes.h" 3
try
# 508 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ delete this; }
# 509 "/usr/include/c++/4.4/bits/locale_classes.h" 3
catch (...)
# 510 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{ }
# 511 "/usr/include/c++/4.4/bits/locale_classes.h" 3
}
# 512 "/usr/include/c++/4.4/bits/locale_classes.h" 3
}
# 514 "/usr/include/c++/4.4/bits/locale_classes.h" 3
_Impl(const locale::_Impl &, size_t);
# 515 "/usr/include/c++/4.4/bits/locale_classes.h" 3
_Impl(const char *, size_t);
# 516 "/usr/include/c++/4.4/bits/locale_classes.h" 3
_Impl(size_t) throw();
# 518 "/usr/include/c++/4.4/bits/locale_classes.h" 3
~_Impl() throw();
# 520 "/usr/include/c++/4.4/bits/locale_classes.h" 3
_Impl(const locale::_Impl &);
# 523 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void operator=(const locale::_Impl &);
# 526 "/usr/include/c++/4.4/bits/locale_classes.h" 3
bool _M_check_same_name()
# 527 "/usr/include/c++/4.4/bits/locale_classes.h" 3
{
# 528 "/usr/include/c++/4.4/bits/locale_classes.h" 3
bool __ret = true;
# 529 "/usr/include/c++/4.4/bits/locale_classes.h" 3
if ((_M_names)[1]) {
# 531 "/usr/include/c++/4.4/bits/locale_classes.h" 3
for (size_t __i = (0); __ret && (__i < ((_S_categories_size) - 1)); ++__i) {
# 532 "/usr/include/c++/4.4/bits/locale_classes.h" 3
__ret = (__builtin_strcmp((_M_names)[__i], (_M_names)[__i + (1)]) == 0); } }
# 533 "/usr/include/c++/4.4/bits/locale_classes.h" 3
return __ret;
# 534 "/usr/include/c++/4.4/bits/locale_classes.h" 3
}
# 537 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_replace_categories(const locale::_Impl *, locale::category);
# 540 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_replace_category(const locale::_Impl *, const locale::id *const *);
# 543 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_replace_facet(const locale::_Impl *, const locale::id *);
# 546 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_install_facet(const locale::id *, const locale::facet *);
# 548 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _Facet >
      void
      _M_init_facet ( _Facet * __facet )
      { _M_install_facet ( & _Facet :: id, __facet ); }
# 554 "/usr/include/c++/4.4/bits/locale_classes.h" 3
void _M_install_cache(const locale::facet *, size_t);
# 555 "/usr/include/c++/4.4/bits/locale_classes.h" 3
};
# 569 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<class _Facet> bool has_facet(const locale &) throw();
# 586 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<class _Facet> const _Facet &use_facet(const locale &);
# 603 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _CharT >
    class collate : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;


    protected :


      __c_locale _M_c_locale_collate;

    public :

      static locale :: id id;
# 630 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      explicit
      collate ( size_t __refs = 0 )
      : facet ( __refs ), _M_c_locale_collate ( _S_get_c_locale ( ) )
      { }
# 644 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      explicit
      collate ( __c_locale __cloc, size_t __refs = 0 )
      : facet ( __refs ), _M_c_locale_collate ( _S_clone_c_locale ( __cloc ) )
      { }
# 661 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      int
      compare ( const _CharT * __lo1, const _CharT * __hi1,
       const _CharT * __lo2, const _CharT * __hi2 ) const
      { return this -> do_compare ( __lo1, __hi1, __lo2, __hi2 ); }
# 680 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      string_type
      transform ( const _CharT * __lo, const _CharT * __hi ) const
      { return this -> do_transform ( __lo, __hi ); }
# 694 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      long
      hash ( const _CharT * __lo, const _CharT * __hi ) const
      { return this -> do_hash ( __lo, __hi ); }


      int
      _M_compare ( const _CharT *, const _CharT * ) const;

      size_t
      _M_transform ( _CharT *, const _CharT *, size_t ) const;

  protected :

      virtual
      ~ collate ( )
      { _S_destroy_c_locale ( _M_c_locale_collate ); }
# 723 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      virtual int
      do_compare ( const _CharT * __lo1, const _CharT * __hi1,
   const _CharT * __lo2, const _CharT * __hi2 ) const;
# 739 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      virtual string_type
      do_transform ( const _CharT * __lo, const _CharT * __hi ) const;
# 752 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      virtual long
      do_hash ( const _CharT * __lo, const _CharT * __hi ) const;
    };
# 756 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<class _CharT> locale::id
# 757 "/usr/include/c++/4.4/bits/locale_classes.h" 3
collate< _CharT> ::id;
# 762 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<> int collate< char> ::_M_compare(const char *, const char *) const;
# 766 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<> size_t collate< char> ::_M_transform(char *, const char *, size_t) const;
# 771 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<> int collate< wchar_t> ::_M_compare(const wchar_t *, const wchar_t *) const;
# 775 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template<> size_t collate< wchar_t> ::_M_transform(wchar_t *, const wchar_t *, size_t) const;
# 779 "/usr/include/c++/4.4/bits/locale_classes.h" 3
template < typename _CharT >
    class collate_byname : public collate < _CharT >
    {
    public :


      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;


      explicit
      collate_byname ( const char * __s, size_t __refs = 0 )
      : collate < _CharT > ( __refs )
      {
 if ( __builtin_strcmp ( __s, "C" ) != 0
     && __builtin_strcmp ( __s, "POSIX" ) != 0 )
   {
     this -> _S_destroy_c_locale ( this -> _M_c_locale_collate );
     this -> _S_create_c_locale ( this -> _M_c_locale_collate, __s );
   }
      }

    protected :
      virtual
      ~ collate_byname ( ) { }
    };
# 806 "/usr/include/c++/4.4/bits/locale_classes.h" 3
}
# 39 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 41 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _Facet >
    locale ::
    locale ( const locale & __other, _Facet * __f )
    {
      _M_impl = new _Impl ( * __other . _M_impl, 1 );

      try
 { _M_impl -> _M_install_facet ( & _Facet :: id, __f ); }
      catch ( ... )
 {
   _M_impl -> _M_remove_reference ( );
   throw;
 }
      delete [ ] _M_impl -> _M_names [ 0 ];
      _M_impl -> _M_names [ 0 ] = 0;
    }
# 58 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _Facet >
    locale
    locale ::
    combine ( const locale & __other ) const
    {
      _Impl * __tmp = new _Impl ( * _M_impl, 1 );
      try
 {
   __tmp -> _M_replace_facet ( __other . _M_impl, & _Facet :: id );
 }
      catch ( ... )
 {
   __tmp -> _M_remove_reference ( );
   throw;
 }
      return locale ( __tmp );
    }
# 76 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    bool
    locale ::
    operator ( ) ( const basic_string < _CharT, _Traits, _Alloc > & __s1,
        const basic_string < _CharT, _Traits, _Alloc > & __s2 ) const
    {
      typedef std :: collate < _CharT > __collate_type;
      const __collate_type & __collate = use_facet < __collate_type > ( * this );
      return ( __collate . compare ( __s1 . data ( ), __s1 . data ( ) + __s1 . length ( ),
    __s2 . data ( ), __s2 . data ( ) + __s2 . length ( ) ) < 0 );
    }
# 89 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _Facet >
    bool
    has_facet ( const locale & __loc ) throw ( )
    {
      const size_t __i = _Facet :: id . _M_id ( );
      const locale :: facet * * __facets = __loc . _M_impl -> _M_facets;
      return ( __i < __loc . _M_impl -> _M_facets_size

       && dynamic_cast < const _Facet * > ( __facets [ __i ] ) );



    }
# 103 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _Facet >
    const _Facet &
    use_facet ( const locale & __loc )
    {
      const size_t __i = _Facet :: id . _M_id ( );
      const locale :: facet * * __facets = __loc . _M_impl -> _M_facets;
      if ( __i >= __loc . _M_impl -> _M_facets_size || ! __facets [ __i ] )
        __throw_bad_cast ( );

      return dynamic_cast < const _Facet & > ( * __facets [ __i ] );



    }
# 120 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _CharT >
    int
    collate < _CharT > :: _M_compare ( const _CharT *, const _CharT * ) const
    { return 0; }
# 126 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _CharT >
    size_t
    collate < _CharT > :: _M_transform ( _CharT *, const _CharT *, size_t ) const
    { return 0; }
# 131 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _CharT >
    int
    collate < _CharT > ::
    do_compare ( const _CharT * __lo1, const _CharT * __hi1,
        const _CharT * __lo2, const _CharT * __hi2 ) const
    {


      const string_type __one ( __lo1, __hi1 );
      const string_type __two ( __lo2, __hi2 );

      const _CharT * __p = __one . c_str ( );
      const _CharT * __pend = __one . data ( ) + __one . length ( );
      const _CharT * __q = __two . c_str ( );
      const _CharT * __qend = __two . data ( ) + __two . length ( );




      for (;; )
 {
   const int __res = _M_compare ( __p, __q );
   if ( __res )
     return __res;

   __p += char_traits < _CharT > :: length ( __p );
   __q += char_traits < _CharT > :: length ( __q );
   if ( __p == __pend && __q == __qend )
     return 0;
   else if ( __p == __pend )
     return - 1;
   else if ( __q == __qend )
     return 1;

   __p ++;
   __q ++;
 }
    }
# 170 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _CharT >
    typename collate < _CharT > :: string_type
    collate < _CharT > ::
    do_transform ( const _CharT * __lo, const _CharT * __hi ) const
    {
      string_type __ret;


      const string_type __str ( __lo, __hi );

      const _CharT * __p = __str . c_str ( );
      const _CharT * __pend = __str . data ( ) + __str . length ( );

      size_t __len = ( __hi - __lo ) * 2;

      _CharT * __c = new _CharT [ __len ];

      try
 {



   for (;; )
     {

       size_t __res = _M_transform ( __c, __p, __len );


       if ( __res >= __len )
  {
    __len = __res + 1;
    delete [ ] __c, __c = 0;
    __c = new _CharT [ __len ];
    __res = _M_transform ( __c, __p, __len );
  }

       __ret . append ( __c, __res );
       __p += char_traits < _CharT > :: length ( __p );
       if ( __p == __pend )
  break;

       __p ++;
       __ret . push_back ( _CharT ( ) );
     }
 }
      catch ( ... )
 {
   delete [ ] __c;
   throw;
 }

      delete [ ] __c;

      return __ret;
    }
# 226 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
template < typename _CharT >
    long
    collate < _CharT > ::
    do_hash ( const _CharT * __lo, const _CharT * __hi ) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++ __lo )
 __val =
   * __lo + ( ( __val << 7 )
     | ( __val >> ( __gnu_cxx :: __numeric_traits < unsigned long > ::
    __digits - 7 ) ) );
      return static_cast < long > ( __val );
    }
# 244 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template class collate< char> ;
# 245 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template class collate_byname< char> ;
# 247 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template const collate< char> &use_facet< collate< char> > (const locale &);
# 251 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template bool has_facet< collate< char> > (const locale &) throw();
# 256 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template class collate< wchar_t> ;
# 257 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template class collate_byname< wchar_t> ;
# 259 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template const collate< wchar_t> &use_facet< collate< wchar_t> > (const locale &);
# 263 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
extern template bool has_facet< collate< wchar_t> > (const locale &) throw();
# 269 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
}
# 54 "/usr/include/c++/4.4/bits/ios_base.h" 3
namespace std __attribute__((visibility("default"))) {
# 60 "/usr/include/c++/4.4/bits/ios_base.h" 3
enum _Ios_Fmtflags {
# 62 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_boolalpha = 1,
# 63 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_dec,
# 64 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_fixed = 4,
# 65 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_hex = 8,
# 66 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_internal = 16,
# 67 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_left = 32,
# 68 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_oct = 64,
# 69 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_right = 128,
# 70 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_scientific = 256,
# 71 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_showbase = 512,
# 72 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_showpoint = 1024,
# 73 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_showpos = 2048,
# 74 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_skipws = 4096,
# 75 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_unitbuf = 8192,
# 76 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_uppercase = 16384,
# 77 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_adjustfield = 176,
# 78 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_basefield = 74,
# 79 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_floatfield = 260,
# 80 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_ios_fmtflags_end = 65536
# 81 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 84 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Fmtflags operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
# 85 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) & (static_cast< int>(__b))); }
# 88 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Fmtflags operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
# 89 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) | (static_cast< int>(__b))); }
# 92 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Fmtflags operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
# 93 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); }
# 96 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Fmtflags &operator|=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b)
# 97 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a | __b); }
# 100 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Fmtflags &operator&=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b)
# 101 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a & __b); }
# 104 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Fmtflags &operator^=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b)
# 105 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a ^ __b); }
# 108 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Fmtflags operator~(_Ios_Fmtflags __a)
# 109 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)(~(static_cast< int>(__a))); }
# 112 "/usr/include/c++/4.4/bits/ios_base.h" 3
enum _Ios_Openmode {
# 114 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_app = 1,
# 115 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_ate,
# 116 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_bin = 4,
# 117 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_in = 8,
# 118 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_out = 16,
# 119 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_trunc = 32,
# 120 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_ios_openmode_end = 65536
# 121 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 124 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Openmode operator&(_Ios_Openmode __a, _Ios_Openmode __b)
# 125 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Openmode)((static_cast< int>(__a)) & (static_cast< int>(__b))); }
# 128 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Openmode operator|(_Ios_Openmode __a, _Ios_Openmode __b)
# 129 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Openmode)((static_cast< int>(__a)) | (static_cast< int>(__b))); }
# 132 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Openmode operator^(_Ios_Openmode __a, _Ios_Openmode __b)
# 133 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Openmode)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); }
# 136 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Openmode &operator|=(_Ios_Openmode &__a, _Ios_Openmode __b)
# 137 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a | __b); }
# 140 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Openmode &operator&=(_Ios_Openmode &__a, _Ios_Openmode __b)
# 141 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a & __b); }
# 144 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Openmode &operator^=(_Ios_Openmode &__a, _Ios_Openmode __b)
# 145 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a ^ __b); }
# 148 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Openmode operator~(_Ios_Openmode __a)
# 149 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Openmode)(~(static_cast< int>(__a))); }
# 152 "/usr/include/c++/4.4/bits/ios_base.h" 3
enum _Ios_Iostate {
# 154 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_goodbit,
# 155 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_badbit,
# 156 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_eofbit,
# 157 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_failbit = 4,
# 158 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_ios_iostate_end = 65536
# 159 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 162 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Iostate operator&(_Ios_Iostate __a, _Ios_Iostate __b)
# 163 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Iostate)((static_cast< int>(__a)) & (static_cast< int>(__b))); }
# 166 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Iostate operator|(_Ios_Iostate __a, _Ios_Iostate __b)
# 167 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Iostate)((static_cast< int>(__a)) | (static_cast< int>(__b))); }
# 170 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Iostate operator^(_Ios_Iostate __a, _Ios_Iostate __b)
# 171 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Iostate)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); }
# 174 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Iostate &operator|=(_Ios_Iostate &__a, _Ios_Iostate __b)
# 175 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a | __b); }
# 178 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Iostate &operator&=(_Ios_Iostate &__a, _Ios_Iostate __b)
# 179 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a & __b); }
# 182 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Iostate &operator^=(_Ios_Iostate &__a, _Ios_Iostate __b)
# 183 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __a = (__a ^ __b); }
# 186 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline _Ios_Iostate operator~(_Ios_Iostate __a)
# 187 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return (_Ios_Iostate)(~(static_cast< int>(__a))); }
# 189 "/usr/include/c++/4.4/bits/ios_base.h" 3
enum _Ios_Seekdir {
# 191 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_beg,
# 192 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_cur,
# 193 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_end,
# 194 "/usr/include/c++/4.4/bits/ios_base.h" 3
_S_ios_seekdir_end = 65536
# 195 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 207 "/usr/include/c++/4.4/bits/ios_base.h" 3
class ios_base {
# 217 "/usr/include/c++/4.4/bits/ios_base.h" 3
public: class failure : public exception {
# 223 "/usr/include/c++/4.4/bits/ios_base.h" 3
public: explicit failure(const string &) throw();
# 228 "/usr/include/c++/4.4/bits/ios_base.h" 3
virtual ~failure() throw();
# 231 "/usr/include/c++/4.4/bits/ios_base.h" 3
virtual const char *what() const throw();
# 234 "/usr/include/c++/4.4/bits/ios_base.h" 3
private: string _M_msg;
# 235 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 263 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef _Ios_Fmtflags fmtflags;
# 266 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags boolalpha = ((fmtflags)1);
# 269 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags dec = ((fmtflags)2);
# 272 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags fixed = ((fmtflags)4);
# 275 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags hex = ((fmtflags)8);
# 280 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags internal = ((fmtflags)16);
# 284 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags left = ((fmtflags)32);
# 287 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags oct = ((fmtflags)64);
# 291 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags right = ((fmtflags)128);
# 294 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags scientific = ((fmtflags)256);
# 298 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags showbase = ((fmtflags)512);
# 302 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags showpoint = ((fmtflags)1024);
# 305 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags showpos = ((fmtflags)2048);
# 308 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags skipws = ((fmtflags)4096);
# 311 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags unitbuf = ((fmtflags)8192);
# 315 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags uppercase = ((fmtflags)16384);
# 318 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags adjustfield = ((fmtflags)176);
# 321 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags basefield = ((fmtflags)74);
# 324 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const fmtflags floatfield = ((fmtflags)260);
# 338 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef _Ios_Iostate iostate;
# 342 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const iostate badbit = ((iostate)1);
# 345 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const iostate eofbit = ((iostate)2);
# 350 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const iostate failbit = ((iostate)4);
# 353 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const iostate goodbit = ((iostate)0);
# 369 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef _Ios_Openmode openmode;
# 372 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const openmode app = ((openmode)1);
# 375 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const openmode ate = ((openmode)2);
# 380 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const openmode binary = ((openmode)4);
# 383 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const openmode in = ((openmode)8);
# 386 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const openmode out = ((openmode)16);
# 389 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const openmode trunc = ((openmode)32);
# 401 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef _Ios_Seekdir seekdir;
# 404 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const seekdir beg = ((seekdir)0);
# 407 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const seekdir cur = ((seekdir)1);
# 410 "/usr/include/c++/4.4/bits/ios_base.h" 3
static const seekdir end = ((seekdir)2);
# 413 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef int io_state;
# 414 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef int open_mode;
# 415 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef int seek_dir;
# 417 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef std::streampos streampos;
# 418 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef std::streamoff streamoff;
# 427 "/usr/include/c++/4.4/bits/ios_base.h" 3
enum event {
# 429 "/usr/include/c++/4.4/bits/ios_base.h" 3
erase_event,
# 430 "/usr/include/c++/4.4/bits/ios_base.h" 3
imbue_event,
# 431 "/usr/include/c++/4.4/bits/ios_base.h" 3
copyfmt_event
# 432 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 444 "/usr/include/c++/4.4/bits/ios_base.h" 3
typedef void (*event_callback)(event, ios_base &, int);
# 457 "/usr/include/c++/4.4/bits/ios_base.h" 3
void register_callback(event_callback, int);
# 464 "/usr/include/c++/4.4/bits/ios_base.h" 3
protected: streamsize _M_precision;
# 465 "/usr/include/c++/4.4/bits/ios_base.h" 3
streamsize _M_width;
# 466 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags _M_flags;
# 467 "/usr/include/c++/4.4/bits/ios_base.h" 3
iostate _M_exception;
# 468 "/usr/include/c++/4.4/bits/ios_base.h" 3
iostate _M_streambuf_state;
# 473 "/usr/include/c++/4.4/bits/ios_base.h" 3
struct _Callback_list {
# 476 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Callback_list *_M_next;
# 477 "/usr/include/c++/4.4/bits/ios_base.h" 3
event_callback _M_fn;
# 478 "/usr/include/c++/4.4/bits/ios_base.h" 3
int _M_index;
# 479 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Atomic_word _M_refcount;
# 481 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Callback_list(event_callback __fn, int __index, _Callback_list *
# 482 "/usr/include/c++/4.4/bits/ios_base.h" 3
__cb) : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0)
# 483 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ }
# 486 "/usr/include/c++/4.4/bits/ios_base.h" 3
void _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); }
# 490 "/usr/include/c++/4.4/bits/ios_base.h" 3
int _M_remove_reference()
# 491 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return __gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1); }
# 492 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 494 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Callback_list *_M_callbacks;
# 497 "/usr/include/c++/4.4/bits/ios_base.h" 3
void _M_call_callbacks(event) throw();
# 500 "/usr/include/c++/4.4/bits/ios_base.h" 3
void _M_dispose_callbacks();
# 503 "/usr/include/c++/4.4/bits/ios_base.h" 3
struct _Words {
# 505 "/usr/include/c++/4.4/bits/ios_base.h" 3
void *_M_pword;
# 506 "/usr/include/c++/4.4/bits/ios_base.h" 3
long _M_iword;
# 507 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Words() : _M_pword((0)), _M_iword((0)) { }
# 508 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 511 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Words _M_word_zero;
# 515 "/usr/include/c++/4.4/bits/ios_base.h" 3
enum { _S_local_word_size = 8};
# 516 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Words _M_local_word[_S_local_word_size];
# 519 "/usr/include/c++/4.4/bits/ios_base.h" 3
int _M_word_size;
# 520 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Words *_M_word;
# 523 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Words &_M_grow_words(int, bool);
# 526 "/usr/include/c++/4.4/bits/ios_base.h" 3
locale _M_ios_locale;
# 529 "/usr/include/c++/4.4/bits/ios_base.h" 3
void _M_init();
# 537 "/usr/include/c++/4.4/bits/ios_base.h" 3
public: class Init {
# 539 "/usr/include/c++/4.4/bits/ios_base.h" 3
friend class ios_base;
# 541 "/usr/include/c++/4.4/bits/ios_base.h" 3
public: Init();
# 542 "/usr/include/c++/4.4/bits/ios_base.h" 3
~Init();
# 545 "/usr/include/c++/4.4/bits/ios_base.h" 3
private: static _Atomic_word _S_refcount;
# 546 "/usr/include/c++/4.4/bits/ios_base.h" 3
static bool _S_synced_with_stdio;
# 547 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 555 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags flags() const
# 556 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return _M_flags; }
# 566 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags flags(fmtflags __fmtfl)
# 567 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 568 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags __old = (_M_flags);
# 569 "/usr/include/c++/4.4/bits/ios_base.h" 3
(_M_flags) = __fmtfl;
# 570 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __old;
# 571 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 582 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl)
# 583 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 584 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags __old = (_M_flags);
# 585 "/usr/include/c++/4.4/bits/ios_base.h" 3
(((_M_flags)) |= __fmtfl);
# 586 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __old;
# 587 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 599 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl, fmtflags __mask)
# 600 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 601 "/usr/include/c++/4.4/bits/ios_base.h" 3
fmtflags __old = (_M_flags);
# 602 "/usr/include/c++/4.4/bits/ios_base.h" 3
(((_M_flags)) &= ((~__mask)));
# 603 "/usr/include/c++/4.4/bits/ios_base.h" 3
(((_M_flags)) |= ((__fmtfl & __mask)));
# 604 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __old;
# 605 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 614 "/usr/include/c++/4.4/bits/ios_base.h" 3
void unsetf(fmtflags __mask)
# 615 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ (((_M_flags)) &= ((~__mask))); }
# 625 "/usr/include/c++/4.4/bits/ios_base.h" 3
streamsize precision() const
# 626 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return _M_precision; }
# 634 "/usr/include/c++/4.4/bits/ios_base.h" 3
streamsize precision(streamsize __prec)
# 635 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 636 "/usr/include/c++/4.4/bits/ios_base.h" 3
streamsize __old = (_M_precision);
# 637 "/usr/include/c++/4.4/bits/ios_base.h" 3
(_M_precision) = __prec;
# 638 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __old;
# 639 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 648 "/usr/include/c++/4.4/bits/ios_base.h" 3
streamsize width() const
# 649 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return _M_width; }
# 657 "/usr/include/c++/4.4/bits/ios_base.h" 3
streamsize width(streamsize __wide)
# 658 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 659 "/usr/include/c++/4.4/bits/ios_base.h" 3
streamsize __old = (_M_width);
# 660 "/usr/include/c++/4.4/bits/ios_base.h" 3
(_M_width) = __wide;
# 661 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __old;
# 662 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 676 "/usr/include/c++/4.4/bits/ios_base.h" 3
static bool sync_with_stdio(bool = true);
# 688 "/usr/include/c++/4.4/bits/ios_base.h" 3
locale imbue(const locale &);
# 699 "/usr/include/c++/4.4/bits/ios_base.h" 3
locale getloc() const
# 700 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return _M_ios_locale; }
# 710 "/usr/include/c++/4.4/bits/ios_base.h" 3
const locale &_M_getloc() const
# 711 "/usr/include/c++/4.4/bits/ios_base.h" 3
{ return _M_ios_locale; }
# 729 "/usr/include/c++/4.4/bits/ios_base.h" 3
static int xalloc() throw();
# 745 "/usr/include/c++/4.4/bits/ios_base.h" 3
long &iword(int __ix)
# 746 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 747 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Words &__word = ((__ix < (_M_word_size)) ? ((_M_word)[__ix]) : this->_M_grow_words(__ix, true));
# 749 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __word._M_iword;
# 750 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 766 "/usr/include/c++/4.4/bits/ios_base.h" 3
void *&pword(int __ix)
# 767 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 768 "/usr/include/c++/4.4/bits/ios_base.h" 3
_Words &__word = ((__ix < (_M_word_size)) ? ((_M_word)[__ix]) : this->_M_grow_words(__ix, false));
# 770 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __word._M_pword;
# 771 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 782 "/usr/include/c++/4.4/bits/ios_base.h" 3
virtual ~ios_base();
# 785 "/usr/include/c++/4.4/bits/ios_base.h" 3
protected: ios_base();
# 790 "/usr/include/c++/4.4/bits/ios_base.h" 3
private: ios_base(const ios_base &);
# 793 "/usr/include/c++/4.4/bits/ios_base.h" 3
ios_base &operator=(const ios_base &);
# 794 "/usr/include/c++/4.4/bits/ios_base.h" 3
};
# 799 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &boolalpha(ios_base &__base)
# 800 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 801 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::boolalpha);
# 802 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 803 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 807 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &noboolalpha(ios_base &__base)
# 808 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 809 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.unsetf(ios_base::boolalpha);
# 810 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 811 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 815 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &showbase(ios_base &__base)
# 816 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 817 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::showbase);
# 818 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 819 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 823 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &noshowbase(ios_base &__base)
# 824 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 825 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.unsetf(ios_base::showbase);
# 826 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 827 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 831 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &showpoint(ios_base &__base)
# 832 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 833 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::showpoint);
# 834 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 835 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 839 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &noshowpoint(ios_base &__base)
# 840 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 841 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.unsetf(ios_base::showpoint);
# 842 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 843 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 847 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &showpos(ios_base &__base)
# 848 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 849 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::showpos);
# 850 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 851 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 855 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &noshowpos(ios_base &__base)
# 856 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 857 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.unsetf(ios_base::showpos);
# 858 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 859 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 863 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &skipws(ios_base &__base)
# 864 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 865 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::skipws);
# 866 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 867 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 871 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &noskipws(ios_base &__base)
# 872 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 873 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.unsetf(ios_base::skipws);
# 874 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 875 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 879 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &uppercase(ios_base &__base)
# 880 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 881 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::uppercase);
# 882 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 883 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 887 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &nouppercase(ios_base &__base)
# 888 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 889 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.unsetf(ios_base::uppercase);
# 890 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 891 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 895 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &unitbuf(ios_base &__base)
# 896 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 897 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::unitbuf);
# 898 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 899 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 903 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &nounitbuf(ios_base &__base)
# 904 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 905 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.unsetf(ios_base::unitbuf);
# 906 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 907 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 912 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &internal(ios_base &__base)
# 913 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 914 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::internal, ios_base::adjustfield);
# 915 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 916 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 920 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &left(ios_base &__base)
# 921 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 922 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::left, ios_base::adjustfield);
# 923 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 924 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 928 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &right(ios_base &__base)
# 929 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 930 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::right, ios_base::adjustfield);
# 931 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 932 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 937 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &dec(ios_base &__base)
# 938 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 939 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::dec, ios_base::basefield);
# 940 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 941 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 945 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &hex(ios_base &__base)
# 946 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 947 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::hex, ios_base::basefield);
# 948 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 949 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 953 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &oct(ios_base &__base)
# 954 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 955 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::oct, ios_base::basefield);
# 956 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 957 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 962 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &fixed(ios_base &__base)
# 963 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 964 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::fixed, ios_base::floatfield);
# 965 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 966 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 970 "/usr/include/c++/4.4/bits/ios_base.h" 3
inline ios_base &scientific(ios_base &__base)
# 971 "/usr/include/c++/4.4/bits/ios_base.h" 3
{
# 972 "/usr/include/c++/4.4/bits/ios_base.h" 3
__base.setf(ios_base::scientific, ios_base::floatfield);
# 973 "/usr/include/c++/4.4/bits/ios_base.h" 3
return __base;
# 974 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 976 "/usr/include/c++/4.4/bits/ios_base.h" 3
}
# 46 "/usr/include/c++/4.4/streambuf" 3
namespace std __attribute__((visibility("default"))) {
# 48 "/usr/include/c++/4.4/streambuf" 3
template < typename _CharT, typename _Traits >
    streamsize
    __copy_streambufs_eof ( basic_streambuf < _CharT, _Traits > *,
     basic_streambuf < _CharT, _Traits > *, bool & );
# 113 "/usr/include/c++/4.4/streambuf" 3
template < typename _CharT, typename _Traits >
    class basic_streambuf
    {
    public :






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type :: int_type int_type;
      typedef typename traits_type :: pos_type pos_type;
      typedef typename traits_type :: off_type off_type;




      typedef basic_streambuf < char_type, traits_type > __streambuf_type;


      friend class basic_ios < char_type, traits_type >;
      friend class basic_istream < char_type, traits_type >;
      friend class basic_ostream < char_type, traits_type >;
      friend class istreambuf_iterator < char_type, traits_type >;
      friend class ostreambuf_iterator < char_type, traits_type >;

      friend streamsize
      __copy_streambufs_eof < > ( __streambuf_type *, __streambuf_type *, bool & );

      template < bool _IsMove, typename _CharT2 >
        friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
            _CharT2 * > :: __type
        __copy_move_a2 ( istreambuf_iterator < _CharT2 >,
         istreambuf_iterator < _CharT2 >, _CharT2 * );

      template < typename _CharT2 >
        friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
      istreambuf_iterator < _CharT2 > > :: __type
        find ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      const _CharT2 & );

      template < typename _CharT2, typename _Traits2 >
        friend basic_istream < _CharT2, _Traits2 > &
        operator >> ( basic_istream < _CharT2, _Traits2 > &, _CharT2 * );

      template < typename _CharT2, typename _Traits2, typename _Alloc >
        friend basic_istream < _CharT2, _Traits2 > &
        operator >> ( basic_istream < _CharT2, _Traits2 > &,
     basic_string < _CharT2, _Traits2, _Alloc > & );

      template < typename _CharT2, typename _Traits2, typename _Alloc >
        friend basic_istream < _CharT2, _Traits2 > &
        getline ( basic_istream < _CharT2, _Traits2 > &,
  basic_string < _CharT2, _Traits2, _Alloc > &, _CharT2 );

    protected :
# 179 "/usr/include/c++/4.4/streambuf" 3
      char_type * _M_in_beg;
      char_type * _M_in_cur;
      char_type * _M_in_end;
      char_type * _M_out_beg;
      char_type * _M_out_cur;
      char_type * _M_out_end;


      locale _M_buf_locale;

  public :

      virtual
      ~ basic_streambuf ( )
      { }
# 203 "/usr/include/c++/4.4/streambuf" 3
      locale
      pubimbue ( const locale & __loc )
      {
 locale __tmp ( this -> getloc ( ) );
 this -> imbue ( __loc );
 _M_buf_locale = __loc;
 return __tmp;
      }
# 220 "/usr/include/c++/4.4/streambuf" 3
      locale
      getloc ( ) const
      { return _M_buf_locale; }
# 233 "/usr/include/c++/4.4/streambuf" 3
      __streambuf_type *
      pubsetbuf ( char_type * __s, streamsize __n )
      { return this -> setbuf ( __s, __n ); }

      pos_type
      pubseekoff ( off_type __off, ios_base :: seekdir __way,
   ios_base :: openmode __mode = ios_base :: in | ios_base :: out )
      { return this -> seekoff ( __off, __way, __mode ); }

      pos_type
      pubseekpos ( pos_type __sp,
   ios_base :: openmode __mode = ios_base :: in | ios_base :: out )
      { return this -> seekpos ( __sp, __mode ); }

      int
      pubsync ( ) { return this -> sync ( ); }
# 260 "/usr/include/c++/4.4/streambuf" 3
      streamsize
      in_avail ( )
      {
 const streamsize __ret = this -> egptr ( ) - this -> gptr ( );
 return __ret ? __ret : this -> showmanyc ( );
      }
# 274 "/usr/include/c++/4.4/streambuf" 3
      int_type
      snextc ( )
      {
 int_type __ret = traits_type :: eof ( );
 if ( __builtin_expect ( ! traits_type :: eq_int_type ( this -> sbumpc ( ),
             __ret ), true ) )
   __ret = this -> sgetc ( );
 return __ret;
      }
# 292 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sbumpc ( )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> gptr ( ) < this -> egptr ( ), true ) )
   {
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
     this -> gbump ( 1 );
   }
 else
   __ret = this -> uflow ( );
 return __ret;
      }
# 314 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sgetc ( )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> gptr ( ) < this -> egptr ( ), true ) )
   __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
 else
   __ret = this -> underflow ( );
 return __ret;
      }
# 333 "/usr/include/c++/4.4/streambuf" 3
      streamsize
      sgetn ( char_type * __s, streamsize __n )
      { return this -> xsgetn ( __s, __n ); }
# 347 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sputbackc ( char_type __c )
      {
 int_type __ret;
 const bool __testpos = this -> eback ( ) < this -> gptr ( );
 if ( __builtin_expect ( ! __testpos ||
        ! traits_type :: eq ( __c, this -> gptr ( ) [ - 1 ] ), false ) )
   __ret = this -> pbackfail ( traits_type :: to_int_type ( __c ) );
 else
   {
     this -> gbump ( - 1 );
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
   }
 return __ret;
      }
# 372 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sungetc ( )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> eback ( ) < this -> gptr ( ), true ) )
   {
     this -> gbump ( - 1 );
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
   }
 else
   __ret = this -> pbackfail ( );
 return __ret;
      }
# 399 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sputc ( char_type __c )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> pptr ( ) < this -> epptr ( ), true ) )
   {
     * this -> pptr ( ) = __c;
     this -> pbump ( 1 );
     __ret = traits_type :: to_int_type ( __c );
   }
 else
   __ret = this -> overflow ( traits_type :: to_int_type ( __c ) );
 return __ret;
      }
# 425 "/usr/include/c++/4.4/streambuf" 3
      streamsize
      sputn ( const char_type * __s, streamsize __n )
      { return this -> xsputn ( __s, __n ); }

    protected :
# 439 "/usr/include/c++/4.4/streambuf" 3
      basic_streambuf ( )
      : _M_in_beg ( 0 ), _M_in_cur ( 0 ), _M_in_end ( 0 ),
      _M_out_beg ( 0 ), _M_out_cur ( 0 ), _M_out_end ( 0 ),
      _M_buf_locale ( locale ( ) )
      { }
# 457 "/usr/include/c++/4.4/streambuf" 3
      char_type *
      eback ( ) const { return _M_in_beg; }

      char_type *
      gptr ( ) const { return _M_in_cur; }

      char_type *
      egptr ( ) const { return _M_in_end; }
# 473 "/usr/include/c++/4.4/streambuf" 3
      void
      gbump ( int __n ) { _M_in_cur += __n; }
# 484 "/usr/include/c++/4.4/streambuf" 3
      void
      setg ( char_type * __gbeg, char_type * __gnext, char_type * __gend )
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 504 "/usr/include/c++/4.4/streambuf" 3
      char_type *
      pbase ( ) const { return _M_out_beg; }

      char_type *
      pptr ( ) const { return _M_out_cur; }

      char_type *
      epptr ( ) const { return _M_out_end; }
# 520 "/usr/include/c++/4.4/streambuf" 3
      void
      pbump ( int __n ) { _M_out_cur += __n; }
# 530 "/usr/include/c++/4.4/streambuf" 3
      void
      setp ( char_type * __pbeg, char_type * __pend )
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 551 "/usr/include/c++/4.4/streambuf" 3
      virtual void
      imbue ( const locale & )
      { }
# 566 "/usr/include/c++/4.4/streambuf" 3
      virtual basic_streambuf < char_type, _Traits > *
      setbuf ( char_type *, streamsize )
      { return this; }
# 577 "/usr/include/c++/4.4/streambuf" 3
      virtual pos_type
      seekoff ( off_type, ios_base :: seekdir,
       ios_base :: openmode = ios_base :: in | ios_base :: out )
      { return pos_type ( off_type ( - 1 ) ); }
# 589 "/usr/include/c++/4.4/streambuf" 3
      virtual pos_type
      seekpos ( pos_type,
       ios_base :: openmode = ios_base :: in | ios_base :: out )
      { return pos_type ( off_type ( - 1 ) ); }
# 602 "/usr/include/c++/4.4/streambuf" 3
      virtual int
      sync ( ) { return 0; }
# 624 "/usr/include/c++/4.4/streambuf" 3
      virtual streamsize
      showmanyc ( ) { return 0; }
# 640 "/usr/include/c++/4.4/streambuf" 3
      virtual streamsize
      xsgetn ( char_type * __s, streamsize __n );
# 662 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      underflow ( )
      { return traits_type :: eof ( ); }
# 675 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      uflow ( )
      {
 int_type __ret = traits_type :: eof ( );
 const bool __testeof = traits_type :: eq_int_type ( this -> underflow ( ),
       __ret );
 if ( ! __testeof )
   {
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
     this -> gbump ( 1 );
   }
 return __ret;
      }
# 699 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      pbackfail ( int_type = traits_type :: eof ( ) )
      { return traits_type :: eof ( ); }
# 717 "/usr/include/c++/4.4/streambuf" 3
      virtual streamsize
      xsputn ( const char_type * __s, streamsize __n );
# 742 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      overflow ( int_type = traits_type :: eof ( ) )
      { return traits_type :: eof ( ); }



    public :
# 757 "/usr/include/c++/4.4/streambuf" 3
      void
      stossc ( )
      {
 if ( this -> gptr ( ) < this -> egptr ( ) )
   this -> gbump ( 1 );
 else
   this -> uflow ( );
      }


    private :


      basic_streambuf ( const __streambuf_type & __sb )
      : _M_in_beg ( __sb . _M_in_beg ), _M_in_cur ( __sb . _M_in_cur ),
      _M_in_end ( __sb . _M_in_end ), _M_out_beg ( __sb . _M_out_beg ),
      _M_out_cur ( __sb . _M_out_cur ), _M_out_end ( __sb . _M_out_cur ),
      _M_buf_locale ( __sb . _M_buf_locale )
      { }

      __streambuf_type &
      operator = ( const __streambuf_type & ) { return * this; };
    };
# 784 "/usr/include/c++/4.4/streambuf" 3
template<> streamsize __copy_streambufs_eof(basic_streambuf< char, char_traits< char> > *, basic_streambuf< char, char_traits< char> > *, bool &);
# 789 "/usr/include/c++/4.4/streambuf" 3
template<> streamsize __copy_streambufs_eof(basic_streambuf< wchar_t, char_traits< wchar_t> > *, basic_streambuf< wchar_t, char_traits< wchar_t> > *, bool &);
# 793 "/usr/include/c++/4.4/streambuf" 3
}
# 40 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 42 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
template < typename _CharT, typename _Traits >
    streamsize
    basic_streambuf < _CharT, _Traits > ::
    xsgetn ( char_type * __s, streamsize __n )
    {
      streamsize __ret = 0;
      while ( __ret < __n )
 {
   const streamsize __buf_len = this -> egptr ( ) - this -> gptr ( );
   if ( __buf_len )
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std :: min ( __buf_len, __remaining );
       traits_type :: copy ( __s, this -> gptr ( ), __len );
       __ret += __len;
       __s += __len;
       this -> gbump ( __len );
     }

   if ( __ret < __n )
     {
       const int_type __c = this -> uflow ( );
       if ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
  {
    traits_type :: assign ( * __s ++, traits_type :: to_char_type ( __c ) );
    ++ __ret;
  }
       else
  break;
     }
 }
      return __ret;
    }
# 76 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
template < typename _CharT, typename _Traits >
    streamsize
    basic_streambuf < _CharT, _Traits > ::
    xsputn ( const char_type * __s, streamsize __n )
    {
      streamsize __ret = 0;
      while ( __ret < __n )
 {
   const streamsize __buf_len = this -> epptr ( ) - this -> pptr ( );
   if ( __buf_len )
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std :: min ( __buf_len, __remaining );
       traits_type :: copy ( this -> pptr ( ), __s, __len );
       __ret += __len;
       __s += __len;
       this -> pbump ( __len );
     }

   if ( __ret < __n )
     {
       int_type __c = this -> overflow ( traits_type :: to_int_type ( * __s ) );
       if ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
  {
    ++ __ret;
    ++ __s;
  }
       else
  break;
     }
 }
      return __ret;
    }
# 113 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
template < typename _CharT, typename _Traits >
    streamsize
    __copy_streambufs_eof ( basic_streambuf < _CharT, _Traits > * __sbin,
     basic_streambuf < _CharT, _Traits > * __sbout,
     bool & __ineof )
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits :: int_type __c = __sbin -> sgetc ( );
      while ( ! _Traits :: eq_int_type ( __c, _Traits :: eof ( ) ) )
 {
   __c = __sbout -> sputc ( _Traits :: to_char_type ( __c ) );
   if ( _Traits :: eq_int_type ( __c, _Traits :: eof ( ) ) )
     {
       __ineof = false;
       break;
     }
   ++ __ret;
   __c = __sbin -> snextc ( );
 }
      return __ret;
    }
# 136 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
template < typename _CharT, typename _Traits >
    inline streamsize
    __copy_streambufs ( basic_streambuf < _CharT, _Traits > * __sbin,
        basic_streambuf < _CharT, _Traits > * __sbout )
    {
      bool __ineof;
      return __copy_streambufs_eof ( __sbin, __sbout, __ineof );
    }
# 149 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
extern template class basic_streambuf< char, char_traits< char> > ;
# 150 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
extern template streamsize __copy_streambufs(basic_streambuf< char, char_traits< char> > *, basic_streambuf< char, char_traits< char> > *);
# 154 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
extern template streamsize __copy_streambufs_eof< char, char_traits< char> > (basic_streambuf< char, char_traits< char> > *, basic_streambuf< char, char_traits< char> > *, bool &);
# 160 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
extern template class basic_streambuf< wchar_t, char_traits< wchar_t> > ;
# 161 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
extern template streamsize __copy_streambufs(basic_streambuf< wchar_t, char_traits< wchar_t> > *, basic_streambuf< wchar_t, char_traits< wchar_t> > *);
# 165 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
extern template streamsize __copy_streambufs_eof< wchar_t, char_traits< wchar_t> > (basic_streambuf< wchar_t, char_traits< wchar_t> > *, basic_streambuf< wchar_t, char_traits< wchar_t> > *, bool &);
# 172 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
}
# 53 "/usr/include/wctype.h" 3
typedef unsigned long wctype_t;
# 73 "/usr/include/wctype.h" 3
enum {
# 74 "/usr/include/wctype.h" 3
__ISwupper,
# 75 "/usr/include/wctype.h" 3
__ISwlower,
# 76 "/usr/include/wctype.h" 3
__ISwalpha,
# 77 "/usr/include/wctype.h" 3
__ISwdigit,
# 78 "/usr/include/wctype.h" 3
__ISwxdigit,
# 79 "/usr/include/wctype.h" 3
__ISwspace,
# 80 "/usr/include/wctype.h" 3
__ISwprint,
# 81 "/usr/include/wctype.h" 3
__ISwgraph,
# 82 "/usr/include/wctype.h" 3
__ISwblank,
# 83 "/usr/include/wctype.h" 3
__ISwcntrl,
# 84 "/usr/include/wctype.h" 3
__ISwpunct,
# 85 "/usr/include/wctype.h" 3
__ISwalnum,
# 87 "/usr/include/wctype.h" 3
_ISwupper = 16777216,
# 88 "/usr/include/wctype.h" 3
_ISwlower = 33554432,
# 89 "/usr/include/wctype.h" 3
_ISwalpha = 67108864,
# 90 "/usr/include/wctype.h" 3
_ISwdigit = 134217728,
# 91 "/usr/include/wctype.h" 3
_ISwxdigit = 268435456,
# 92 "/usr/include/wctype.h" 3
_ISwspace = 536870912,
# 93 "/usr/include/wctype.h" 3
_ISwprint = 1073741824,
# 94 "/usr/include/wctype.h" 3
_ISwgraph = (-2147483647-1),
# 95 "/usr/include/wctype.h" 3
_ISwblank = 65536,
# 96 "/usr/include/wctype.h" 3
_ISwcntrl = 131072,
# 97 "/usr/include/wctype.h" 3
_ISwpunct = 262144,
# 98 "/usr/include/wctype.h" 3
_ISwalnum = 524288
# 99 "/usr/include/wctype.h" 3
};
# 112 "/usr/include/wctype.h" 3
extern "C" int iswalnum(wint_t) throw();
# 118 "/usr/include/wctype.h" 3
extern "C" int iswalpha(wint_t) throw();
# 121 "/usr/include/wctype.h" 3
extern "C" int iswcntrl(wint_t) throw();
# 125 "/usr/include/wctype.h" 3
extern "C" int iswdigit(wint_t) throw();
# 129 "/usr/include/wctype.h" 3
extern "C" int iswgraph(wint_t) throw();
# 134 "/usr/include/wctype.h" 3
extern "C" int iswlower(wint_t) throw();
# 137 "/usr/include/wctype.h" 3
extern "C" int iswprint(wint_t) throw();
# 142 "/usr/include/wctype.h" 3
extern "C" int iswpunct(wint_t) throw();
# 147 "/usr/include/wctype.h" 3
extern "C" int iswspace(wint_t) throw();
# 152 "/usr/include/wctype.h" 3
extern "C" int iswupper(wint_t) throw();
# 157 "/usr/include/wctype.h" 3
extern "C" int iswxdigit(wint_t) throw();
# 163 "/usr/include/wctype.h" 3
extern "C" int iswblank(wint_t) throw();
# 172 "/usr/include/wctype.h" 3
extern "C" wctype_t wctype(const char *) throw();
# 176 "/usr/include/wctype.h" 3
extern "C" int iswctype(wint_t, wctype_t) throw();
# 187 "/usr/include/wctype.h" 3
extern "C" { typedef const __int32_t *wctrans_t; }
# 195 "/usr/include/wctype.h" 3
extern "C" wint_t towlower(wint_t) throw();
# 198 "/usr/include/wctype.h" 3
extern "C" wint_t towupper(wint_t) throw();
# 219 "/usr/include/wctype.h" 3
extern "C" wctrans_t wctrans(const char *) throw();
# 222 "/usr/include/wctype.h" 3
extern "C" wint_t towctrans(wint_t, wctrans_t) throw();
# 231 "/usr/include/wctype.h" 3
extern "C" int iswalnum_l(wint_t, __locale_t) throw();
# 237 "/usr/include/wctype.h" 3
extern "C" int iswalpha_l(wint_t, __locale_t) throw();
# 240 "/usr/include/wctype.h" 3
extern "C" int iswcntrl_l(wint_t, __locale_t) throw();
# 244 "/usr/include/wctype.h" 3
extern "C" int iswdigit_l(wint_t, __locale_t) throw();
# 248 "/usr/include/wctype.h" 3
extern "C" int iswgraph_l(wint_t, __locale_t) throw();
# 253 "/usr/include/wctype.h" 3
extern "C" int iswlower_l(wint_t, __locale_t) throw();
# 256 "/usr/include/wctype.h" 3
extern "C" int iswprint_l(wint_t, __locale_t) throw();
# 261 "/usr/include/wctype.h" 3
extern "C" int iswpunct_l(wint_t, __locale_t) throw();
# 266 "/usr/include/wctype.h" 3
extern "C" int iswspace_l(wint_t, __locale_t) throw();
# 271 "/usr/include/wctype.h" 3
extern "C" int iswupper_l(wint_t, __locale_t) throw();
# 276 "/usr/include/wctype.h" 3
extern "C" int iswxdigit_l(wint_t, __locale_t) throw();
# 281 "/usr/include/wctype.h" 3
extern "C" int iswblank_l(wint_t, __locale_t) throw();
# 285 "/usr/include/wctype.h" 3
extern "C" wctype_t wctype_l(const char *, __locale_t) throw();
# 290 "/usr/include/wctype.h" 3
extern "C" int iswctype_l(wint_t, wctype_t, __locale_t) throw();
# 299 "/usr/include/wctype.h" 3
extern "C" wint_t towlower_l(wint_t, __locale_t) throw();
# 302 "/usr/include/wctype.h" 3
extern "C" wint_t towupper_l(wint_t, __locale_t) throw();
# 306 "/usr/include/wctype.h" 3
extern "C" wctrans_t wctrans_l(const char *, __locale_t) throw();
# 310 "/usr/include/wctype.h" 3
extern "C" wint_t towctrans_l(wint_t, wctrans_t, __locale_t) throw();
# 76 "/usr/include/c++/4.4/cwctype" 3
namespace std __attribute__((visibility("default"))) {
# 78 "/usr/include/c++/4.4/cwctype" 3
using ::wctrans_t;
# 79 "/usr/include/c++/4.4/cwctype" 3
using ::wctype_t;
# 82 "/usr/include/c++/4.4/cwctype" 3
using ::iswalnum;
# 83 "/usr/include/c++/4.4/cwctype" 3
using ::iswalpha;
# 85 "/usr/include/c++/4.4/cwctype" 3
using ::iswblank;
# 87 "/usr/include/c++/4.4/cwctype" 3
using ::iswcntrl;
# 88 "/usr/include/c++/4.4/cwctype" 3
using ::iswctype;
# 89 "/usr/include/c++/4.4/cwctype" 3
using ::iswdigit;
# 90 "/usr/include/c++/4.4/cwctype" 3
using ::iswgraph;
# 91 "/usr/include/c++/4.4/cwctype" 3
using ::iswlower;
# 92 "/usr/include/c++/4.4/cwctype" 3
using ::iswprint;
# 93 "/usr/include/c++/4.4/cwctype" 3
using ::iswpunct;
# 94 "/usr/include/c++/4.4/cwctype" 3
using ::iswspace;
# 95 "/usr/include/c++/4.4/cwctype" 3
using ::iswupper;
# 96 "/usr/include/c++/4.4/cwctype" 3
using ::iswxdigit;
# 97 "/usr/include/c++/4.4/cwctype" 3
using ::towctrans;
# 98 "/usr/include/c++/4.4/cwctype" 3
using ::towlower;
# 99 "/usr/include/c++/4.4/cwctype" 3
using ::towupper;
# 100 "/usr/include/c++/4.4/cwctype" 3
using ::wctrans;
# 101 "/usr/include/c++/4.4/cwctype" 3
using ::wctype;
# 103 "/usr/include/c++/4.4/cwctype" 3
}
# 37 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
namespace std __attribute__((visibility("default"))) {
# 40 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
struct ctype_base {
# 43 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
typedef const int *__to_type;
# 47 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
typedef unsigned short mask;
# 48 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
static const mask upper = (_ISupper);
# 49 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
static const mask lower = (_ISlower);
# 50 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
static const mask alpha = (_ISalpha);
# 51 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
static const mask digit = (_ISdigit);
# 52 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
static const mask xdigit = (_ISxdigit);
# 53 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
static const mask space = (_ISspace);
# 54 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
static const mask print = (_ISprint);
# 55 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
static const mask graph = (((_ISalpha) | (_ISdigit)) | (_ISpunct));
# 56 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
static const mask cntrl = (_IScntrl);
# 57 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
static const mask punct = (_ISpunct);
# 58 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
static const mask alnum = ((_ISalpha) | (_ISdigit));
# 59 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
};
# 61 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_base.h" 3
}
# 40 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
namespace std __attribute__((visibility("default"))) {
# 44 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < typename _CharT, typename _Traits >
    class istreambuf_iterator
    : public iterator < input_iterator_tag, _CharT, typename _Traits :: off_type,
        _CharT *, _CharT & >
    {
    public :



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits :: int_type int_type;
      typedef basic_streambuf < _CharT, _Traits > streambuf_type;
      typedef basic_istream < _CharT, _Traits > istream_type;


      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
                      ostreambuf_iterator < _CharT2 > > :: __type
 copy ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      ostreambuf_iterator < _CharT2 > );

      template < bool _IsMove, typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
            _CharT2 * > :: __type
 __copy_move_a2 ( istreambuf_iterator < _CharT2 >,
         istreambuf_iterator < _CharT2 >, _CharT2 * );

      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
               istreambuf_iterator < _CharT2 > > :: __type
 find ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      const _CharT2 & );

    private :







      mutable streambuf_type * _M_sbuf;
      mutable int_type _M_c;

    public :

      istreambuf_iterator ( ) throw ( )
      : _M_sbuf ( 0 ), _M_c ( traits_type :: eof ( ) ) { }


      istreambuf_iterator ( istream_type & __s ) throw ( )
      : _M_sbuf ( __s . rdbuf ( ) ), _M_c ( traits_type :: eof ( ) ) { }


      istreambuf_iterator ( streambuf_type * __s ) throw ( )
      : _M_sbuf ( __s ), _M_c ( traits_type :: eof ( ) ) { }




      char_type
      operator * ( ) const
      {







 return traits_type :: to_char_type ( _M_get ( ) );
      }


      istreambuf_iterator &
      operator ++ ( )
      {
 ;


 if ( _M_sbuf )
   {
     _M_sbuf -> sbumpc ( );
     _M_c = traits_type :: eof ( );
   }
 return * this;
      }


      istreambuf_iterator
      operator ++ ( int )
      {
 ;



 istreambuf_iterator __old = * this;
 if ( _M_sbuf )
   {
     __old . _M_c = _M_sbuf -> sbumpc ( );
     _M_c = traits_type :: eof ( );
   }
 return __old;
      }





      bool
      equal ( const istreambuf_iterator & __b ) const
      { return _M_at_eof ( ) == __b . _M_at_eof ( ); }

    private :
      int_type
      _M_get ( ) const
      {
 const int_type __eof = traits_type :: eof ( );
 int_type __ret = __eof;
 if ( _M_sbuf )
   {
     if ( ! traits_type :: eq_int_type ( _M_c, __eof ) )
       __ret = _M_c;
     else if ( ! traits_type :: eq_int_type ( ( __ret = _M_sbuf -> sgetc ( ) ),
            __eof ) )
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof ( ) const
      {
 const int_type __eof = traits_type :: eof ( );
 return traits_type :: eq_int_type ( _M_get ( ), __eof );
      }
    };
# 185 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < typename _CharT, typename _Traits >
    inline bool
    operator == ( const istreambuf_iterator < _CharT, _Traits > & __a,
        const istreambuf_iterator < _CharT, _Traits > & __b )
    { return __a . equal ( __b ); }
# 191 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < typename _CharT, typename _Traits >
    inline bool
    operator != ( const istreambuf_iterator < _CharT, _Traits > & __a,
        const istreambuf_iterator < _CharT, _Traits > & __b )
    { return ! __a . equal ( __b ); }
# 198 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < typename _CharT, typename _Traits >
    class ostreambuf_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    public :



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf < _CharT, _Traits > streambuf_type;
      typedef basic_ostream < _CharT, _Traits > ostream_type;


      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
                      ostreambuf_iterator < _CharT2 > > :: __type
 copy ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      ostreambuf_iterator < _CharT2 > );

    private :
      streambuf_type * _M_sbuf;
      bool _M_failed;

    public :

      ostreambuf_iterator ( ostream_type & __s ) throw ( )
      : _M_sbuf ( __s . rdbuf ( ) ), _M_failed ( ! _M_sbuf ) { }


      ostreambuf_iterator ( streambuf_type * __s ) throw ( )
      : _M_sbuf ( __s ), _M_failed ( ! _M_sbuf ) { }


      ostreambuf_iterator &
      operator = ( _CharT __c )
      {
 if ( ! _M_failed &&
     _Traits :: eq_int_type ( _M_sbuf -> sputc ( __c ), _Traits :: eof ( ) ) )
   _M_failed = true;
 return * this;
      }


      ostreambuf_iterator &
      operator * ( )
      { return * this; }


      ostreambuf_iterator &
      operator ++ ( int )
      { return * this; }


      ostreambuf_iterator &
      operator ++ ( )
      { return * this; }


      bool
      failed ( ) const throw ( )
      { return _M_failed; }

      ostreambuf_iterator &
      _M_put ( const _CharT * __ws, streamsize __len )
      {
 if ( __builtin_expect ( ! _M_failed, true )
     && __builtin_expect ( this -> _M_sbuf -> sputn ( __ws, __len ) != __len,
    false ) )
   _M_failed = true;
 return * this;
      }
    };
# 273 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
                           ostreambuf_iterator < _CharT > > :: __type
    copy ( istreambuf_iterator < _CharT > __first,
  istreambuf_iterator < _CharT > __last,
  ostreambuf_iterator < _CharT > __result )
    {
      if ( __first . _M_sbuf && ! __last . _M_sbuf && ! __result . _M_failed )
 {
   bool __ineof;
   __copy_streambufs_eof ( __first . _M_sbuf, __result . _M_sbuf, __ineof );
   if ( ! __ineof )
     __result . _M_failed = true;
 }
      return __result;
    }
# 290 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
            ostreambuf_iterator < _CharT > > :: __type
    __copy_move_a2 ( _CharT * __first, _CharT * __last,
     ostreambuf_iterator < _CharT > __result )
    {
      const streamsize __num = __last - __first;
      if ( __num > 0 )
 __result . _M_put ( __first, __num );
      return __result;
    }
# 302 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
        ostreambuf_iterator < _CharT > > :: __type
    __copy_move_a2 ( const _CharT * __first, const _CharT * __last,
     ostreambuf_iterator < _CharT > __result )
    {
      const streamsize __num = __last - __first;
      if ( __num > 0 )
 __result . _M_put ( __first, __num );
      return __result;
    }
# 314 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < bool _IsMove, typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
            _CharT * > :: __type
    __copy_move_a2 ( istreambuf_iterator < _CharT > __first,
     istreambuf_iterator < _CharT > __last, _CharT * __result )
    {
      typedef istreambuf_iterator < _CharT > __is_iterator_type;
      typedef typename __is_iterator_type :: traits_type traits_type;
      typedef typename __is_iterator_type :: streambuf_type streambuf_type;
      typedef typename traits_type :: int_type int_type;

      if ( __first . _M_sbuf && ! __last . _M_sbuf )
 {
   streambuf_type * __sb = __first . _M_sbuf;
   int_type __c = __sb -> sgetc ( );
   while ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
     {
       const streamsize __n = __sb -> egptr ( ) - __sb -> gptr ( );
       if ( __n > 1 )
  {
    traits_type :: copy ( __result, __sb -> gptr ( ), __n );
    __sb -> gbump ( __n );
    __result += __n;
    __c = __sb -> underflow ( );
  }
       else
  {
    * __result ++ = traits_type :: to_char_type ( __c );
    __c = __sb -> snextc ( );
  }
     }
 }
      return __result;
    }
# 349 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
          istreambuf_iterator < _CharT > > :: __type
    find ( istreambuf_iterator < _CharT > __first,
  istreambuf_iterator < _CharT > __last, const _CharT & __val )
    {
      typedef istreambuf_iterator < _CharT > __is_iterator_type;
      typedef typename __is_iterator_type :: traits_type traits_type;
      typedef typename __is_iterator_type :: streambuf_type streambuf_type;
      typedef typename traits_type :: int_type int_type;

      if ( __first . _M_sbuf && ! __last . _M_sbuf )
 {
   const int_type __ival = traits_type :: to_int_type ( __val );
   streambuf_type * __sb = __first . _M_sbuf;
   int_type __c = __sb -> sgetc ( );
   while ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) )
   && ! traits_type :: eq_int_type ( __c, __ival ) )
     {
       streamsize __n = __sb -> egptr ( ) - __sb -> gptr ( );
       if ( __n > 1 )
  {
    const _CharT * __p = traits_type :: find ( __sb -> gptr ( ),
       __n, __val );
    if ( __p )
      __n = __p - __sb -> gptr ( );
    __sb -> gbump ( __n );
    __c = __sb -> sgetc ( );
  }
       else
  __c = __sb -> snextc ( );
     }

   if ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
     __first . _M_c = __c;
   else
     __first . _M_sbuf = 0;
 }
      return __first;
    }
# 390 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
}
# 52 "/usr/include/c++/4.4/bits/locale_facets.h" 3
namespace std __attribute__((visibility("default"))) {
# 64 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<class _Tv> void __convert_to_v(const char *, _Tv &, ios_base::iostate &, const __c_locale &);
# 72 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> void __convert_to_v(const char *, float &, ios_base::iostate &, const __c_locale &);
# 77 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> void __convert_to_v(const char *, double &, ios_base::iostate &, const __c_locale &);
# 82 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> void __convert_to_v(const char *, long double &, ios_base::iostate &, const __c_locale &);
# 87 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<class _CharT, class _Traits>
# 88 "/usr/include/c++/4.4/bits/locale_facets.h" 3
struct __pad {
# 91 "/usr/include/c++/4.4/bits/locale_facets.h" 3
static void _S_pad(ios_base &, _CharT, _CharT *, const _CharT *, streamsize, streamsize);
# 93 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 100 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    _CharT *
    __add_grouping ( _CharT * __s, _CharT __sep,
     const char * __gbeg, size_t __gsize,
     const _CharT * __first, const _CharT * __last );
# 109 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline
    ostreambuf_iterator < _CharT >
    __write ( ostreambuf_iterator < _CharT > __s, const _CharT * __ws, int __len )
    {
      __s . _M_put ( __ws, __len );
      return __s;
    }
# 119 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT, typename _OutIter >
    inline
    _OutIter
    __write ( _OutIter __s, const _CharT * __ws, int __len )
    {
      for ( int __j = 0; __j < __len; __j ++, ++ __s )
 * __s = __ws [ __j ];
      return __s;
    }
# 143 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    class __ctype_abstract_base : public locale :: facet, public ctype_base
    {
    public :


      typedef _CharT char_type;
# 161 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      bool
      is ( mask __m, char_type __c ) const
      { return this -> do_is ( __m, __c ); }
# 178 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type *
      is ( const char_type * __lo, const char_type * __hi, mask * __vec ) const
      { return this -> do_is ( __lo, __hi, __vec ); }
# 194 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type *
      scan_is ( mask __m, const char_type * __lo, const char_type * __hi ) const
      { return this -> do_scan_is ( __m, __lo, __hi ); }
# 210 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type *
      scan_not ( mask __m, const char_type * __lo, const char_type * __hi ) const
      { return this -> do_scan_not ( __m, __lo, __hi ); }
# 224 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      toupper ( char_type __c ) const
      { return this -> do_toupper ( __c ); }
# 239 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type *
      toupper ( char_type * __lo, const char_type * __hi ) const
      { return this -> do_toupper ( __lo, __hi ); }
# 253 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      tolower ( char_type __c ) const
      { return this -> do_tolower ( __c ); }
# 268 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type *
      tolower ( char_type * __lo, const char_type * __hi ) const
      { return this -> do_tolower ( __lo, __hi ); }
# 285 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      widen ( char __c ) const
      { return this -> do_widen ( __c ); }
# 304 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char *
      widen ( const char * __lo, const char * __hi, char_type * __to ) const
      { return this -> do_widen ( __lo, __hi, __to ); }
# 323 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char
      narrow ( char_type __c, char __dfault ) const
      { return this -> do_narrow ( __c, __dfault ); }
# 345 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type *
      narrow ( const char_type * __lo, const char_type * __hi,
       char __dfault, char * __to ) const
      { return this -> do_narrow ( __lo, __hi, __dfault, __to ); }

    protected :
      explicit
      __ctype_abstract_base ( size_t __refs = 0 ) : facet ( __refs ) { }

      virtual
      ~ __ctype_abstract_base ( ) { }
# 370 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual bool
      do_is ( mask __m, char_type __c ) const = 0;
# 389 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type *
      do_is ( const char_type * __lo, const char_type * __hi,
     mask * __vec ) const = 0;
# 408 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type *
      do_scan_is ( mask __m, const char_type * __lo,
   const char_type * __hi ) const = 0;
# 427 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type *
      do_scan_not ( mask __m, const char_type * __lo,
    const char_type * __hi ) const = 0;
# 445 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_toupper ( char_type ) const = 0;
# 462 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type *
      do_toupper ( char_type * __lo, const char_type * __hi ) const = 0;
# 478 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_tolower ( char_type ) const = 0;
# 495 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type *
      do_tolower ( char_type * __lo, const char_type * __hi ) const = 0;
# 514 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_widen ( char ) const = 0;
# 535 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char *
      do_widen ( const char * __lo, const char * __hi,
        char_type * __dest ) const = 0;
# 557 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char
      do_narrow ( char_type, char __dfault ) const = 0;
# 581 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type *
      do_narrow ( const char_type * __lo, const char_type * __hi,
  char __dfault, char * __dest ) const = 0;
    };
# 604 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    class ctype : public __ctype_abstract_base < _CharT >
    {
    public :

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base < _CharT > :: mask mask;


      static locale :: id id;

      explicit
      ctype ( size_t __refs = 0 ) : __ctype_abstract_base < _CharT > ( __refs ) { }

   protected :
      virtual
      ~ ctype ( );

      virtual bool
      do_is ( mask __m, char_type __c ) const;

      virtual const char_type *
      do_is ( const char_type * __lo, const char_type * __hi, mask * __vec ) const;

      virtual const char_type *
      do_scan_is ( mask __m, const char_type * __lo, const char_type * __hi ) const;

      virtual const char_type *
      do_scan_not ( mask __m, const char_type * __lo,
    const char_type * __hi ) const;

      virtual char_type
      do_toupper ( char_type __c ) const;

      virtual const char_type *
      do_toupper ( char_type * __lo, const char_type * __hi ) const;

      virtual char_type
      do_tolower ( char_type __c ) const;

      virtual const char_type *
      do_tolower ( char_type * __lo, const char_type * __hi ) const;

      virtual char_type
      do_widen ( char __c ) const;

      virtual const char *
      do_widen ( const char * __lo, const char * __hi, char_type * __dest ) const;

      virtual char
      do_narrow ( char_type, char __dfault ) const;

      virtual const char_type *
      do_narrow ( const char_type * __lo, const char_type * __hi,
  char __dfault, char * __dest ) const;
    };
# 661 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<class _CharT> locale::id
# 662 "/usr/include/c++/4.4/bits/locale_facets.h" 3
ctype< _CharT> ::id;
# 674 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> class ctype< char> : public locale::facet, public ctype_base {
# 679 "/usr/include/c++/4.4/bits/locale_facets.h" 3
public: typedef char char_type;
# 683 "/usr/include/c++/4.4/bits/locale_facets.h" 3
protected: __c_locale _M_c_locale_ctype;
# 684 "/usr/include/c++/4.4/bits/locale_facets.h" 3
bool _M_del;
# 685 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__to_type _M_toupper;
# 686 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__to_type _M_tolower;
# 687 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const mask *_M_table;
# 688 "/usr/include/c++/4.4/bits/locale_facets.h" 3
mutable char _M_widen_ok;
# 689 "/usr/include/c++/4.4/bits/locale_facets.h" 3
mutable char _M_widen[(1 + (static_cast< unsigned char>((-1))))];
# 690 "/usr/include/c++/4.4/bits/locale_facets.h" 3
mutable char _M_narrow[(1 + (static_cast< unsigned char>((-1))))];
# 691 "/usr/include/c++/4.4/bits/locale_facets.h" 3
mutable char _M_narrow_ok;
# 696 "/usr/include/c++/4.4/bits/locale_facets.h" 3
public: static locale::id id;
# 698 "/usr/include/c++/4.4/bits/locale_facets.h" 3
static const size_t table_size = (1 + (static_cast< unsigned char>((-1))));
# 711 "/usr/include/c++/4.4/bits/locale_facets.h" 3
explicit ctype(const mask * = 0, bool = false, size_t = (0));
# 724 "/usr/include/c++/4.4/bits/locale_facets.h" 3
explicit ctype(__c_locale, const mask * = 0, bool = false, size_t = (0));
# 737 "/usr/include/c++/4.4/bits/locale_facets.h" 3
inline bool is(mask, char) const;
# 752 "/usr/include/c++/4.4/bits/locale_facets.h" 3
inline const char *is(const char *, const char *, mask *) const;
# 766 "/usr/include/c++/4.4/bits/locale_facets.h" 3
inline const char *scan_is(mask, const char *, const char *) const;
# 780 "/usr/include/c++/4.4/bits/locale_facets.h" 3
inline const char *scan_not(mask, const char *, const char *) const;
# 795 "/usr/include/c++/4.4/bits/locale_facets.h" 3
char_type toupper(char_type __c) const
# 796 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{ return this->do_toupper(__c); }
# 812 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const
# 813 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{ return this->do_toupper(__lo, __hi); }
# 828 "/usr/include/c++/4.4/bits/locale_facets.h" 3
char_type tolower(char_type __c) const
# 829 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{ return this->do_tolower(__c); }
# 845 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const
# 846 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{ return this->do_tolower(__lo, __hi); }
# 865 "/usr/include/c++/4.4/bits/locale_facets.h" 3
char_type widen(char __c) const
# 866 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 867 "/usr/include/c++/4.4/bits/locale_facets.h" 3
if (_M_widen_ok) {
# 868 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return (_M_widen)[static_cast< unsigned char>(__c)]; }
# 869 "/usr/include/c++/4.4/bits/locale_facets.h" 3
this->_M_widen_init();
# 870 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return this->do_widen(__c);
# 871 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 892 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const
# 893 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 894 "/usr/include/c++/4.4/bits/locale_facets.h" 3
if ((_M_widen_ok) == 1)
# 895 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 896 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__builtin_memcpy(__to, __lo, __hi - __lo);
# 897 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return __hi;
# 898 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 899 "/usr/include/c++/4.4/bits/locale_facets.h" 3
if (!(_M_widen_ok)) {
# 900 "/usr/include/c++/4.4/bits/locale_facets.h" 3
this->_M_widen_init(); }
# 901 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return this->do_widen(__lo, __hi, __to);
# 902 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 923 "/usr/include/c++/4.4/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const
# 924 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 925 "/usr/include/c++/4.4/bits/locale_facets.h" 3
if ((_M_narrow)[static_cast< unsigned char>(__c)]) {
# 926 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return (_M_narrow)[static_cast< unsigned char>(__c)]; }
# 927 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const char __t = this->do_narrow(__c, __dfault);
# 928 "/usr/include/c++/4.4/bits/locale_facets.h" 3
if (__t != __dfault) {
# 929 "/usr/include/c++/4.4/bits/locale_facets.h" 3
((_M_narrow)[static_cast< unsigned char>(__c)]) = __t; }
# 930 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return __t;
# 931 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 956 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char
# 957 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__dfault, char *__to) const
# 958 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 959 "/usr/include/c++/4.4/bits/locale_facets.h" 3
if (__builtin_expect((_M_narrow_ok) == 1, true))
# 960 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 961 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__builtin_memcpy(__to, __lo, __hi - __lo);
# 962 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return __hi;
# 963 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 964 "/usr/include/c++/4.4/bits/locale_facets.h" 3
if (!(_M_narrow_ok)) {
# 965 "/usr/include/c++/4.4/bits/locale_facets.h" 3
this->_M_narrow_init(); }
# 966 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return this->do_narrow(__lo, __hi, __dfault, __to);
# 967 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 974 "/usr/include/c++/4.4/bits/locale_facets.h" 3
const mask *table() const throw()
# 975 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{ return _M_table; }
# 979 "/usr/include/c++/4.4/bits/locale_facets.h" 3
static const mask *classic_table() throw();
# 989 "/usr/include/c++/4.4/bits/locale_facets.h" 3
protected: virtual ~ctype();
# 1005 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type) const;
# 1022 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type *, const char_type *) const;
# 1038 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type) const;
# 1055 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type *, const char_type *) const;
# 1075 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const
# 1076 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{ return __c; }
# 1098 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char *do_widen(const char *__lo, const char *__hi, char_type *__dest) const
# 1099 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 1100 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__builtin_memcpy(__dest, __lo, __hi - __lo);
# 1101 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return __hi;
# 1102 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 1124 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char) const
# 1125 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{ return __c; }
# 1150 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *__lo, const char_type *__hi, char, char *
# 1151 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__dest) const
# 1152 "/usr/include/c++/4.4/bits/locale_facets.h" 3
{
# 1153 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__builtin_memcpy(__dest, __lo, __hi - __lo);
# 1154 "/usr/include/c++/4.4/bits/locale_facets.h" 3
return __hi;
# 1155 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 1158 "/usr/include/c++/4.4/bits/locale_facets.h" 3
private: void _M_narrow_init() const;
# 1159 "/usr/include/c++/4.4/bits/locale_facets.h" 3
void _M_widen_init() const;
# 1160 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 1175 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> class ctype< wchar_t> : public __ctype_abstract_base< wchar_t> {
# 1180 "/usr/include/c++/4.4/bits/locale_facets.h" 3
public: typedef wchar_t char_type;
# 1181 "/usr/include/c++/4.4/bits/locale_facets.h" 3
typedef wctype_t __wmask_type;
# 1184 "/usr/include/c++/4.4/bits/locale_facets.h" 3
protected: __c_locale _M_c_locale_ctype;
# 1187 "/usr/include/c++/4.4/bits/locale_facets.h" 3
bool _M_narrow_ok;
# 1188 "/usr/include/c++/4.4/bits/locale_facets.h" 3
char _M_narrow[128];
# 1189 "/usr/include/c++/4.4/bits/locale_facets.h" 3
wint_t _M_widen[(1 + (static_cast< unsigned char>((-1))))];
# 1192 "/usr/include/c++/4.4/bits/locale_facets.h" 3
mask _M_bit[16];
# 1193 "/usr/include/c++/4.4/bits/locale_facets.h" 3
__wmask_type _M_wmask[16];
# 1198 "/usr/include/c++/4.4/bits/locale_facets.h" 3
public: static locale::id id;
# 1208 "/usr/include/c++/4.4/bits/locale_facets.h" 3
explicit ctype(size_t = (0));
# 1219 "/usr/include/c++/4.4/bits/locale_facets.h" 3
explicit ctype(__c_locale, size_t = (0));
# 1223 "/usr/include/c++/4.4/bits/locale_facets.h" 3
protected: __wmask_type _M_convert_to_wmask(const mask) const;
# 1227 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual ~ctype();
# 1243 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual bool do_is(mask, char_type) const;
# 1262 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type *, const char_type *, mask *) const;
# 1280 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask, const char_type *, const char_type *) const;
# 1298 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask, const char_type *, const char_type *) const;
# 1315 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type) const;
# 1332 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type *, const char_type *) const;
# 1348 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type) const;
# 1365 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type *, const char_type *) const;
# 1385 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char_type do_widen(char) const;
# 1407 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char *do_widen(const char *, const char *, char_type *) const;
# 1430 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual char do_narrow(char_type, char) const;
# 1456 "/usr/include/c++/4.4/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *, const char_type *, char, char *) const;
# 1461 "/usr/include/c++/4.4/bits/locale_facets.h" 3
void _M_initialize_ctype();
# 1462 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 1466 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    class ctype_byname : public ctype < _CharT >
    {
    public :
      typedef typename ctype < _CharT > :: mask mask;

      explicit
      ctype_byname ( const char * __s, size_t __refs = 0 );

    protected :
      virtual
      ~ ctype_byname ( ) { };
    };
# 1482 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> class ctype_byname< char> : public ctype< char> {
# 1486 "/usr/include/c++/4.4/bits/locale_facets.h" 3
public: explicit ctype_byname(const char *, size_t = (0));
# 1490 "/usr/include/c++/4.4/bits/locale_facets.h" 3
protected: virtual ~ctype_byname();
# 1491 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 1495 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> class ctype_byname< wchar_t> : public ctype< wchar_t> {
# 1499 "/usr/include/c++/4.4/bits/locale_facets.h" 3
public: explicit ctype_byname(const char *, size_t = (0));
# 1503 "/usr/include/c++/4.4/bits/locale_facets.h" 3
protected: virtual ~ctype_byname();
# 1504 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 1507 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 37 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
namespace std __attribute__((visibility("default"))) {
# 41 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
inline bool ctype< char> ::is(mask __m, char __c) const
# 42 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
{ return ((_M_table)[static_cast< unsigned char>(__c)]) & __m; }
# 46 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
inline const char *ctype< char> ::is(const char *__low, const char *__high, mask *__vec) const
# 47 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
{
# 48 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
while (__low < __high) {
# 49 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
(*(__vec++)) = ((_M_table)[static_cast< unsigned char>((*(__low++)))]); }
# 50 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
return __high;
# 51 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
}
# 55 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
inline const char *ctype< char> ::scan_is(mask __m, const char *__low, const char *__high) const
# 56 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
{
# 57 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
while ((__low < __high) && (!(((_M_table)[static_cast< unsigned char>((*__low))]) & __m))) {
# 59 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
++__low; }
# 60 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
return __low;
# 61 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
}
# 65 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
inline const char *ctype< char> ::scan_not(mask __m, const char *__low, const char *__high) const
# 66 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
{
# 67 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
while ((__low < __high) && ((((_M_table)[static_cast< unsigned char>((*__low))]) & __m) != 0)) {
# 69 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
++__low; }
# 70 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
return __low;
# 71 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
}
# 73 "/usr/include/c++/4.4/i486-linux-gnu/bits/ctype_inline.h" 3
}
# 1512 "/usr/include/c++/4.4/bits/locale_facets.h" 3
namespace std __attribute__((visibility("default"))) {
# 1515 "/usr/include/c++/4.4/bits/locale_facets.h" 3
class __num_base {
# 1521 "/usr/include/c++/4.4/bits/locale_facets.h" 3
public: enum {
# 1522 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_ominus,
# 1523 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_oplus,
# 1524 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_ox,
# 1525 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_oX,
# 1526 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_odigits,
# 1527 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_odigits_end = 20,
# 1528 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_oudigits = 20,
# 1529 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_oudigits_end = 36,
# 1530 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_oe = 18,
# 1531 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_oE = 34,
# 1532 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_oend = 36
# 1533 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 1540 "/usr/include/c++/4.4/bits/locale_facets.h" 3
static const char *_S_atoms_out;
# 1544 "/usr/include/c++/4.4/bits/locale_facets.h" 3
static const char *_S_atoms_in;
# 1547 "/usr/include/c++/4.4/bits/locale_facets.h" 3
enum {
# 1548 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_iminus,
# 1549 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_iplus,
# 1550 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_ix,
# 1551 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_iX,
# 1552 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_izero,
# 1553 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_ie = 18,
# 1554 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_iE = 24,
# 1555 "/usr/include/c++/4.4/bits/locale_facets.h" 3
_S_iend = 26
# 1556 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 1561 "/usr/include/c++/4.4/bits/locale_facets.h" 3
static void _S_format_float(const ios_base &, char *, char);
# 1562 "/usr/include/c++/4.4/bits/locale_facets.h" 3
};
# 1564 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    struct __numpunct_cache : public locale :: facet
    {
      const char * _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT * _M_truename;
      size_t _M_truename_size;
      const _CharT * _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out [ __num_base :: _S_oend ];





      _CharT _M_atoms_in [ __num_base :: _S_iend ];

      bool _M_allocated;

      __numpunct_cache ( size_t __refs = 0 ) : facet ( __refs ),
      _M_grouping ( __null ), _M_grouping_size ( 0 ), _M_use_grouping ( false ),
      _M_truename ( __null ), _M_truename_size ( 0 ), _M_falsename ( __null ),
      _M_falsename_size ( 0 ), _M_decimal_point ( _CharT ( ) ),
      _M_thousands_sep ( _CharT ( ) ), _M_allocated ( false )
      { }

      ~ __numpunct_cache ( );

      void
      _M_cache ( const locale & __loc );

    private :
      __numpunct_cache &
      operator = ( const __numpunct_cache & );

      explicit
      __numpunct_cache ( const __numpunct_cache & );
    };
# 1611 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    __numpunct_cache < _CharT > :: ~ __numpunct_cache ( )
    {
      if ( _M_allocated )
 {
   delete [ ] _M_grouping;
   delete [ ] _M_truename;
   delete [ ] _M_falsename;
 }
    }
# 1635 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    class numpunct : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;

      typedef __numpunct_cache < _CharT > __cache_type;

    protected :
      __cache_type * _M_data;

    public :

      static locale :: id id;






      explicit
      numpunct ( size_t __refs = 0 ) : facet ( __refs ), _M_data ( __null )
      { _M_initialize_numpunct ( ); }
# 1672 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      numpunct ( __cache_type * __cache, size_t __refs = 0 )
      : facet ( __refs ), _M_data ( __cache )
      { _M_initialize_numpunct ( ); }
# 1686 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      numpunct ( __c_locale __cloc, size_t __refs = 0 )
      : facet ( __refs ), _M_data ( __null )
      { _M_initialize_numpunct ( __cloc ); }
# 1700 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      decimal_point ( ) const
      { return this -> do_decimal_point ( ); }
# 1713 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      thousands_sep ( ) const
      { return this -> do_thousands_sep ( ); }
# 1744 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      string
      grouping ( ) const
      { return this -> do_grouping ( ); }
# 1757 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      string_type
      truename ( ) const
      { return this -> do_truename ( ); }
# 1770 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      string_type
      falsename ( ) const
      { return this -> do_falsename ( ); }

    protected :

      virtual
      ~ numpunct ( );
# 1787 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point ( ) const
      { return _M_data -> _M_decimal_point; }
# 1799 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep ( ) const
      { return _M_data -> _M_thousands_sep; }
# 1812 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual string
      do_grouping ( ) const
      { return _M_data -> _M_grouping; }
# 1825 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual string_type
      do_truename ( ) const
      { return _M_data -> _M_truename; }
# 1838 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual string_type
      do_falsename ( ) const
      { return _M_data -> _M_falsename; }


      void
      _M_initialize_numpunct ( __c_locale __cloc = __null );
    };
# 1847 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<class _CharT> locale::id
# 1848 "/usr/include/c++/4.4/bits/locale_facets.h" 3
numpunct< _CharT> ::id;
# 1851 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> numpunct< char> ::~numpunct();
# 1855 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> void numpunct< char> ::_M_initialize_numpunct(__c_locale);
# 1859 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> numpunct< wchar_t> ::~numpunct();
# 1863 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<> void numpunct< wchar_t> ::_M_initialize_numpunct(__c_locale);
# 1867 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    class numpunct_byname : public numpunct < _CharT >
    {
    public :
      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;

      explicit
      numpunct_byname ( const char * __s, size_t __refs = 0 )
      : numpunct < _CharT > ( __refs )
      {
 if ( __builtin_strcmp ( __s, "C" ) != 0
     && __builtin_strcmp ( __s, "POSIX" ) != 0 )
   {
     __c_locale __tmp;
     this -> _S_create_c_locale ( __tmp, __s );
     this -> _M_initialize_numpunct ( __tmp );
     this -> _S_destroy_c_locale ( __tmp );
   }
      }

    protected :
      virtual
      ~ numpunct_byname ( ) { }
    };
# 1907 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT, typename _InIter >
    class num_get : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale :: id id;
# 1928 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      num_get ( size_t __refs = 0 ) : facet ( __refs ) { }
# 1954 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, bool & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }
# 1990 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned short & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned int & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }


      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, long long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned long long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }
# 2049 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, float & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, double & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, long double & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }
# 2091 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, void * & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

    protected :

      virtual ~ num_get ( ) { }

      iter_type
      _M_extract_float ( iter_type, iter_type, ios_base &, ios_base :: iostate &,
         string & ) const;

      template < typename _ValueT >
        iter_type
        _M_extract_int ( iter_type, iter_type, ios_base &, ios_base :: iostate &,
         _ValueT & ) const;

      template < typename _CharT2 >
      typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value, int > :: __type
        _M_find ( const _CharT2 *, size_t __len, _CharT2 __c ) const
        {
   int __ret = - 1;
   if ( __len <= 10 )
     {
       if ( __c >= _CharT2 ( '0' ) && __c < _CharT2 ( _CharT2 ( '0' ) + __len ) )
  __ret = __c - _CharT2 ( '0' );
     }
   else
     {
       if ( __c >= _CharT2 ( '0' ) && __c <= _CharT2 ( '9' ) )
  __ret = __c - _CharT2 ( '0' );
       else if ( __c >= _CharT2 ( 'a' ) && __c <= _CharT2 ( 'f' ) )
  __ret = 10 + ( __c - _CharT2 ( 'a' ) );
       else if ( __c >= _CharT2 ( 'A' ) && __c <= _CharT2 ( 'F' ) )
  __ret = 10 + ( __c - _CharT2 ( 'A' ) );
     }
   return __ret;
 }

      template < typename _CharT2 >
      typename __gnu_cxx :: __enable_if < ! __is_char < _CharT2 > :: __value,
          int > :: __type
        _M_find ( const _CharT2 * __zero, size_t __len, _CharT2 __c ) const
        {
   int __ret = - 1;
   const char_type * __q = char_traits < _CharT2 > :: find ( __zero, __len, __c );
   if ( __q )
     {
       __ret = __q - __zero;
       if ( __ret > 15 )
  __ret -= 6;
     }
   return __ret;
 }
# 2162 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate &, bool & ) const;

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned short & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned int & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }


      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, long long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }

      virtual iter_type
      do_get ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, unsigned long long & __v ) const
      { return _M_extract_int ( __beg, __end, __io, __err, __v ); }


      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      float & ) const;

      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      double & ) const;







      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      long double & ) const;


      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      void * & ) const;
# 2227 "/usr/include/c++/4.4/bits/locale_facets.h" 3
    };
# 2229 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<class _CharT, class _InIter> locale::id
# 2230 "/usr/include/c++/4.4/bits/locale_facets.h" 3
num_get< _CharT, _InIter> ::id;
# 2244 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT, typename _OutIter >
    class num_put : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale :: id id;
# 2265 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      num_put ( size_t __refs = 0 ) : facet ( __refs ) { }
# 2283 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, bool __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }
# 2325 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   unsigned long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }


      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, long long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   unsigned long long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }
# 2388 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, double __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   long double __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }
# 2413 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   const void * __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

    protected :
      template < typename _ValueT >
        iter_type
        _M_insert_float ( iter_type, ios_base & __io, char_type __fill,
   char __mod, _ValueT __v ) const;

      void
      _M_group_float ( const char * __grouping, size_t __grouping_size,
       char_type __sep, const char_type * __p, char_type * __new,
       char_type * __cs, int & __len ) const;

      template < typename _ValueT >
        iter_type
        _M_insert_int ( iter_type, ios_base & __io, char_type __fill,
        _ValueT __v ) const;

      void
      _M_group_int ( const char * __grouping, size_t __grouping_size,
     char_type __sep, ios_base & __io, char_type * __new,
     char_type * __cs, int & __len ) const;

      void
      _M_pad ( char_type __fill, streamsize __w, ios_base & __io,
      char_type * __new, const char_type * __cs, int & __len ) const;


      virtual
      ~ num_put ( ) { };
# 2461 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, bool __v ) const;

      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill, long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }

      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill,
      unsigned long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }


      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill,
      long long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }

      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill,
      unsigned long long __v ) const
      { return _M_insert_int ( __s, __io, __fill, __v ); }


      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, double __v ) const;






      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, long double __v ) const;


      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, const void * __v ) const;







    };
# 2508 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template<class _CharT, class _OutIter> locale::id
# 2509 "/usr/include/c++/4.4/bits/locale_facets.h" 3
num_put< _CharT, _OutIter> ::id;
# 2519 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isspace ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: space, __c ); }
# 2525 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isprint ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: print, __c ); }
# 2531 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    iscntrl ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: cntrl, __c ); }
# 2537 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isupper ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: upper, __c ); }
# 2543 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    islower ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: lower, __c ); }
# 2549 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isalpha ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: alpha, __c ); }
# 2555 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isdigit ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: digit, __c ); }
# 2561 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    ispunct ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: punct, __c ); }
# 2567 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isxdigit ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: xdigit, __c ); }
# 2573 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isalnum ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: alnum, __c ); }
# 2579 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isgraph ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: graph, __c ); }
# 2585 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline _CharT
    toupper ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . toupper ( __c ); }
# 2591 "/usr/include/c++/4.4/bits/locale_facets.h" 3
template < typename _CharT >
    inline _CharT
    tolower ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . tolower ( __c ); }
# 2596 "/usr/include/c++/4.4/bits/locale_facets.h" 3
}
# 37 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 41 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template<class _Facet>
# 42 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
struct __use_cache {
# 45 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
const _Facet *operator()(const locale &) const;
# 46 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
};
# 49 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT >
    struct __use_cache < __numpunct_cache < _CharT > >
    {
      const __numpunct_cache < _CharT > *
      operator ( ) ( const locale & __loc ) const
      {
 const size_t __i = numpunct < _CharT > :: id . _M_id ( );
 const locale :: facet * * __caches = __loc . _M_impl -> _M_caches;
 if ( ! __caches [ __i ] )
   {
     __numpunct_cache < _CharT > * __tmp = __null;
     try
       {
  __tmp = new __numpunct_cache < _CharT >;
  __tmp -> _M_cache ( __loc );
       }
     catch ( ... )
       {
  delete __tmp;
  throw;
       }
     __loc . _M_impl -> _M_install_cache ( __tmp, __i );
   }
 return static_cast < const __numpunct_cache < _CharT > * > ( __caches [ __i ] );
      }
    };
# 76 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT >
    void
    __numpunct_cache < _CharT > :: _M_cache ( const locale & __loc )
    {
      _M_allocated = true;

      const numpunct < _CharT > & __np = use_facet < numpunct < _CharT > > ( __loc );

      _M_grouping_size = __np . grouping ( ) . size ( );
      char * __grouping = new char [ _M_grouping_size ];
      __np . grouping ( ) . copy ( __grouping, _M_grouping_size );
      _M_grouping = __grouping;
      _M_use_grouping = ( _M_grouping_size
    && static_cast < signed char > ( _M_grouping [ 0 ] ) > 0
    && ( _M_grouping [ 0 ]
        != __gnu_cxx :: __numeric_traits < char > :: __max ) );

      _M_truename_size = __np . truename ( ) . size ( );
      _CharT * __truename = new _CharT [ _M_truename_size ];
      __np . truename ( ) . copy ( __truename, _M_truename_size );
      _M_truename = __truename;

      _M_falsename_size = __np . falsename ( ) . size ( );
      _CharT * __falsename = new _CharT [ _M_falsename_size ];
      __np . falsename ( ) . copy ( __falsename, _M_falsename_size );
      _M_falsename = __falsename;

      _M_decimal_point = __np . decimal_point ( );
      _M_thousands_sep = __np . thousands_sep ( );

      const ctype < _CharT > & __ct = use_facet < ctype < _CharT > > ( __loc );
      __ct . widen ( __num_base :: _S_atoms_out,
   __num_base :: _S_atoms_out + __num_base :: _S_oend, _M_atoms_out );
      __ct . widen ( __num_base :: _S_atoms_in,
   __num_base :: _S_atoms_in + __num_base :: _S_iend, _M_atoms_in );
    }
# 122 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
bool __verify_grouping(const char *, size_t, const string &);
# 127 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    _M_extract_float ( _InIter __beg, _InIter __end, ios_base & __io,
       ios_base :: iostate & __err, string & __xtrc ) const
    {
      typedef char_traits < _CharT > __traits_type;
      typedef __numpunct_cache < _CharT > __cache_type;
      __use_cache < __cache_type > __uc;
      const locale & __loc = __io . _M_getloc ( );
      const __cache_type * __lc = __uc ( __loc );
      const _CharT * __lit = __lc -> _M_atoms_in;
      char_type __c = char_type ( );


      bool __testeof = __beg == __end;


      if ( ! __testeof )
 {
   __c = * __beg;
   const bool __plus = __c == __lit [ __num_base :: _S_iplus ];
   if ( ( __plus || __c == __lit [ __num_base :: _S_iminus ] )
       && ! ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
       && ! ( __c == __lc -> _M_decimal_point ) )
     {
       __xtrc += __plus ? '+' : '-';
       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while ( ! __testeof )
 {
   if ( ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
       || __c == __lc -> _M_decimal_point )
     break;
   else if ( __c == __lit [ __num_base :: _S_izero ] )
     {
       if ( ! __found_mantissa )
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++ __sep_pos;

       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if ( __lc -> _M_use_grouping )
 __found_grouping . reserve ( 32 );
      const char_type * __lit_zero = __lit + __num_base :: _S_izero;

      if ( ! __lc -> _M_allocated )

 while ( ! __testeof )
   {
     const int __digit = _M_find ( __lit_zero, 10, __c );
     if ( __digit != - 1 )
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if ( __c == __lc -> _M_decimal_point
       && ! __found_dec && ! __found_sci )
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ( ( __c == __lit [ __num_base :: _S_ie ]
        || __c == __lit [ __num_base :: _S_iE ] )
       && ! __found_sci && __found_mantissa )
       {

  __xtrc += 'e';
  __found_sci = true;


  if ( ++ __beg != __end )
    {
      __c = * __beg;
      const bool __plus = __c == __lit [ __num_base :: _S_iplus ];
      if ( __plus || __c == __lit [ __num_base :: _S_iminus ] )
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if ( ++ __beg != __end )
       __c = * __beg;
     else
       __testeof = true;
   }
      else
 while ( ! __testeof )
   {


     if ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
       {
  if ( ! __found_dec && ! __found_sci )
    {


      if ( __sep_pos )
        {
   __found_grouping += static_cast < char > ( __sep_pos );
   __sep_pos = 0;
        }
      else
        {


   __xtrc . clear ( );
   break;
        }
    }
  else
    break;
       }
     else if ( __c == __lc -> _M_decimal_point )
       {
  if ( ! __found_dec && ! __found_sci )
    {



      if ( __found_grouping . size ( ) )
        __found_grouping += static_cast < char > ( __sep_pos );
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type * __q =
    __traits_type :: find ( __lit_zero, 10, __c );
  if ( __q )
    {
      __xtrc += '0' + ( __q - __lit_zero );
      __found_mantissa = true;
      ++ __sep_pos;
    }
  else if ( ( __c == __lit [ __num_base :: _S_ie ]
     || __c == __lit [ __num_base :: _S_iE ] )
    && ! __found_sci && __found_mantissa )
    {

      if ( __found_grouping . size ( ) && ! __found_dec )
        __found_grouping += static_cast < char > ( __sep_pos );
      __xtrc += 'e';
      __found_sci = true;


      if ( ++ __beg != __end )
        {
   __c = * __beg;
   const bool __plus = __c == __lit [ __num_base :: _S_iplus ];
   if ( ( __plus || __c == __lit [ __num_base :: _S_iminus ] )
       && ! ( __lc -> _M_use_grouping
     && __c == __lc -> _M_thousands_sep )
       && ! ( __c == __lc -> _M_decimal_point ) )
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if ( ++ __beg != __end )
       __c = * __beg;
     else
       __testeof = true;
   }



      if ( __found_grouping . size ( ) )
        {

   if ( ! __found_dec && ! __found_sci )
     __found_grouping += static_cast < char > ( __sep_pos );

          if ( ! std :: __verify_grouping ( __lc -> _M_grouping,
          __lc -> _M_grouping_size,
          __found_grouping ) )
     __err = ios_base :: failbit;
        }

      return __beg;
    }
# 351 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    template < typename _ValueT >
      _InIter
      num_get < _CharT, _InIter > ::
      _M_extract_int ( _InIter __beg, _InIter __end, ios_base & __io,
       ios_base :: iostate & __err, _ValueT & __v ) const
      {
        typedef char_traits < _CharT > __traits_type;
 using __gnu_cxx :: __add_unsigned;
 typedef typename __add_unsigned < _ValueT > :: __type __unsigned_type;
 typedef __numpunct_cache < _CharT > __cache_type;
 __use_cache < __cache_type > __uc;
 const locale & __loc = __io . _M_getloc ( );
 const __cache_type * __lc = __uc ( __loc );
 const _CharT * __lit = __lc -> _M_atoms_in;
 char_type __c = char_type ( );


 const ios_base :: fmtflags __basefield = __io . flags ( )
                                        & ios_base :: basefield;
 const bool __oct = __basefield == ios_base :: oct;
 int __base = __oct ? 8 : ( __basefield == ios_base :: hex ? 16 : 10 );


 bool __testeof = __beg == __end;


 bool __negative = false;
 if ( ! __testeof )
   {
     __c = * __beg;
     __negative = __c == __lit [ __num_base :: _S_iminus ];
     if ( ( __negative || __c == __lit [ __num_base :: _S_iplus ] )
  && ! ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
  && ! ( __c == __lc -> _M_decimal_point ) )
       {
  if ( ++ __beg != __end )
    __c = * __beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while ( ! __testeof )
   {
     if ( ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
  || __c == __lc -> _M_decimal_point )
       break;
     else if ( __c == __lit [ __num_base :: _S_izero ]
       && ( ! __found_zero || __base == 10 ) )
       {
  __found_zero = true;
  ++ __sep_pos;
  if ( __basefield == 0 )
    __base = 8;
  if ( __base == 8 )
    __sep_pos = 0;
       }
     else if ( __found_zero
       && ( __c == __lit [ __num_base :: _S_ix ]
    || __c == __lit [ __num_base :: _S_iX ] ) )
       {
  if ( __basefield == 0 )
    __base = 16;
  if ( __base == 16 )
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if ( ++ __beg != __end )
       {
  __c = * __beg;
  if ( ! __found_zero )
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = ( __base == 16 ? __num_base :: _S_iend
         - __num_base :: _S_izero : __base );


 string __found_grouping;
 if ( __lc -> _M_use_grouping )
   __found_grouping . reserve ( 32 );
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   ( __negative && __gnu_cxx :: __numeric_traits < _ValueT > :: __is_signed )
   ? - __gnu_cxx :: __numeric_traits < _ValueT > :: __min
   : __gnu_cxx :: __numeric_traits < _ValueT > :: __max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type * __lit_zero = __lit + __num_base :: _S_izero;

 if ( ! __lc -> _M_allocated )

   while ( ! __testeof )
     {
       __digit = _M_find ( __lit_zero, __len, __c );
       if ( __digit == - 1 )
  break;

       if ( __result > __smax )
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++ __sep_pos;
  }

       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }
 else
   while ( ! __testeof )
     {


       if ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
  {


    if ( __sep_pos )
      {
        __found_grouping += static_cast < char > ( __sep_pos );
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if ( __c == __lc -> _M_decimal_point )
  break;
       else
  {
    const char_type * __q =
      __traits_type :: find ( __lit_zero, __len, __c );
    if ( ! __q )
      break;

    __digit = __q - __lit_zero;
    if ( __digit > 15 )
      __digit -= 6;
    if ( __result > __smax )
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++ __sep_pos;
      }
  }

       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }



 if ( __found_grouping . size ( ) )
   {

     __found_grouping += static_cast < char > ( __sep_pos );

     if ( ! std :: __verify_grouping ( __lc -> _M_grouping,
     __lc -> _M_grouping_size,
     __found_grouping ) )
       __err = ios_base :: failbit;
   }



 if ( ( ! __sep_pos && ! __found_zero && ! __found_grouping . size ( ) )
     || __testfail )
   {
     __v = 0;
     __err = ios_base :: failbit;
   }
 else if ( __testoverflow )
   {
     if ( __negative
  && __gnu_cxx :: __numeric_traits < _ValueT > :: __is_signed )
       __v = __gnu_cxx :: __numeric_traits < _ValueT > :: __min;
     else
       __v = __gnu_cxx :: __numeric_traits < _ValueT > :: __max;
     __err = ios_base :: failbit;
   }
 else
   __v = __negative ? - __result : __result;

 if ( __testeof )
   __err |= ios_base :: eofbit;
 return __beg;
      }
# 572 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, bool & __v ) const
    {
      if ( ! ( __io . flags ( ) & ios_base :: boolalpha ) )
        {



   long __l = - 1;
          __beg = _M_extract_int ( __beg, __end, __io, __err, __l );
   if ( __l == 0 || __l == 1 )
     __v = bool ( __l );
   else
     {


       __v = true;
       __err = ios_base :: failbit;
       if ( __beg == __end )
  __err |= ios_base :: eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache < _CharT > __cache_type;
   __use_cache < __cache_type > __uc;
   const locale & __loc = __io . _M_getloc ( );
   const __cache_type * __lc = __uc ( __loc );

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc -> _M_falsename_size == 0;
   bool __donet = __lc -> _M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while ( ! __donef || ! __donet )
     {
       if ( __beg == __end )
  {
    __testeof = true;
    break;
  }

       const char_type __c = * __beg;

       if ( ! __donef )
  __testf = __c == __lc -> _M_falsename [ __n ];

       if ( ! __testf && __donet )
  break;

       if ( ! __donet )
  __testt = __c == __lc -> _M_truename [ __n ];

       if ( ! __testt && __donef )
  break;

       if ( ! __testt && ! __testf )
  break;

       ++ __n;
       ++ __beg;

       __donef = ! __testf || __n >= __lc -> _M_falsename_size;
       __donet = ! __testt || __n >= __lc -> _M_truename_size;
     }
   if ( __testf && __n == __lc -> _M_falsename_size && __n )
     {
       __v = false;
       if ( __testt && __n == __lc -> _M_truename_size )
  __err = ios_base :: failbit;
       else
  __err = __testeof ? ios_base :: eofbit : ios_base :: goodbit;
     }
   else if ( __testt && __n == __lc -> _M_truename_size && __n )
     {
       __v = true;
       __err = __testeof ? ios_base :: eofbit : ios_base :: goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base :: failbit;
       if ( __testeof )
  __err |= ios_base :: eofbit;
     }
 }
      return __beg;
    }
# 668 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
    ios_base :: iostate & __err, float & __v ) const
    {
      string __xtrc;
      __xtrc . reserve ( 32 );
      __beg = _M_extract_float ( __beg, __end, __io, __err, __xtrc );
      std :: __convert_to_v ( __xtrc . c_str ( ), __v, __err, _S_get_c_locale ( ) );
      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 683 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, double & __v ) const
    {
      string __xtrc;
      __xtrc . reserve ( 32 );
      __beg = _M_extract_float ( __beg, __end, __io, __err, __xtrc );
      std :: __convert_to_v ( __xtrc . c_str ( ), __v, __err, _S_get_c_locale ( ) );
      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 715 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, long double & __v ) const
    {
      string __xtrc;
      __xtrc . reserve ( 32 );
      __beg = _M_extract_float ( __beg, __end, __io, __err, __xtrc );
      std :: __convert_to_v ( __xtrc . c_str ( ), __v, __err, _S_get_c_locale ( ) );
      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 730 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, void * & __v ) const
    {

      typedef ios_base :: fmtflags fmtflags;
      const fmtflags __fmt = __io . flags ( );
      __io . flags ( ( __fmt & ~ ios_base :: basefield ) | ios_base :: hex );

      typedef __gnu_cxx :: __conditional_type < ( sizeof ( void * )
          <= sizeof ( unsigned long ) ),
 unsigned long, unsigned long long > :: __type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int ( __beg, __end, __io, __err, __ul );


      __io . flags ( __fmt );

      __v = reinterpret_cast < void * > ( __ul );
      return __beg;
    }
# 757 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    void
    num_put < _CharT, _OutIter > ::
    _M_pad ( _CharT __fill, streamsize __w, ios_base & __io,
    _CharT * __new, const _CharT * __cs, int & __len ) const
    {


      __pad < _CharT, char_traits < _CharT > > :: _S_pad ( __io, __fill, __new,
        __cs, __w, __len );
      __len = static_cast < int > ( __w );
    }
# 772 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _ValueT >
    int
    __int_to_char ( _CharT * __bufend, _ValueT __v, const _CharT * __lit,
    ios_base :: fmtflags __flags, bool __dec )
    {
      _CharT * __buf = __bufend;
      if ( __builtin_expect ( __dec, true ) )
 {

   do
     {
       * -- __buf = __lit [ ( __v % 10 ) + __num_base :: _S_odigits ];
       __v /= 10;
     }
   while ( __v != 0 );
 }
      else if ( ( __flags & ios_base :: basefield ) == ios_base :: oct )
 {

   do
     {
       * -- __buf = __lit [ ( __v & 7 ) + __num_base :: _S_odigits ];
       __v >>= 3;
     }
   while ( __v != 0 );
 }
      else
 {

   const bool __uppercase = __flags & ios_base :: uppercase;
   const int __case_offset = __uppercase ? __num_base :: _S_oudigits
                                         : __num_base :: _S_odigits;
   do
     {
       * -- __buf = __lit [ ( __v & 15 ) + __case_offset ];
       __v >>= 4;
     }
   while ( __v != 0 );
 }
      return __bufend - __buf;
    }
# 816 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    void
    num_put < _CharT, _OutIter > ::
    _M_group_int ( const char * __grouping, size_t __grouping_size, _CharT __sep,
   ios_base &, _CharT * __new, _CharT * __cs, int & __len ) const
    {
      _CharT * __p = std :: __add_grouping ( __new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len );
      __len = __p - __new;
    }
# 827 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    template < typename _ValueT >
      _OutIter
      num_put < _CharT, _OutIter > ::
      _M_insert_int ( _OutIter __s, ios_base & __io, _CharT __fill,
      _ValueT __v ) const
      {
 using __gnu_cxx :: __add_unsigned;
 typedef typename __add_unsigned < _ValueT > :: __type __unsigned_type;
 typedef __numpunct_cache < _CharT > __cache_type;
 __use_cache < __cache_type > __uc;
 const locale & __loc = __io . _M_getloc ( );
 const __cache_type * __lc = __uc ( __loc );
 const _CharT * __lit = __lc -> _M_atoms_out;
 const ios_base :: fmtflags __flags = __io . flags ( );


 const int __ilen = 5 * sizeof ( _ValueT );
 _CharT * __cs = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
            * __ilen ) );



 const ios_base :: fmtflags __basefield = __flags & ios_base :: basefield;
 const bool __dec = ( __basefield != ios_base :: oct
       && __basefield != ios_base :: hex );
 const __unsigned_type __u = ( ( __v > 0 || ! __dec )
         ? __unsigned_type ( __v )
         : - __unsigned_type ( __v ) );
  int __len = __int_to_char ( __cs + __ilen, __u, __lit, __flags, __dec );
 __cs += __ilen - __len;


 if ( __lc -> _M_use_grouping )
   {


     _CharT * __cs2 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * ( __len + 1 )
          * 2 ) );
     _M_group_int ( __lc -> _M_grouping, __lc -> _M_grouping_size,
    __lc -> _M_thousands_sep, __io, __cs2 + 2, __cs, __len );
     __cs = __cs2 + 2;
   }


 if ( __builtin_expect ( __dec, true ) )
   {

     if ( __v >= 0 )
       {
  if ( bool ( __flags & ios_base :: showpos )
      && __gnu_cxx :: __numeric_traits < _ValueT > :: __is_signed )
    * -- __cs = __lit [ __num_base :: _S_oplus ], ++ __len;
       }
     else
       * -- __cs = __lit [ __num_base :: _S_ominus ], ++ __len;
   }
 else if ( bool ( __flags & ios_base :: showbase ) && __v )
   {
     if ( __basefield == ios_base :: oct )
       * -- __cs = __lit [ __num_base :: _S_odigits ], ++ __len;
     else
       {

  const bool __uppercase = __flags & ios_base :: uppercase;
  * -- __cs = __lit [ __num_base :: _S_ox + __uppercase ];

  * -- __cs = __lit [ __num_base :: _S_odigits ];
  __len += 2;
       }
   }


 const streamsize __w = __io . width ( );
 if ( __w > static_cast < streamsize > ( __len ) )
   {
     _CharT * __cs3 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * __w ) );
     _M_pad ( __fill, __w, __io, __cs3, __cs, __len );
     __cs = __cs3;
   }
 __io . width ( 0 );



 return std :: __write ( __s, __cs, __len );
      }
# 916 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    void
    num_put < _CharT, _OutIter > ::
    _M_group_float ( const char * __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT * __p, _CharT * __new,
     _CharT * __cs, int & __len ) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT * __p2 = std :: __add_grouping ( __new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen );


      int __newlen = __p2 - __new;
      if ( __p )
 {
   char_traits < _CharT > :: copy ( __p2, __p, __len - __declen );
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 951 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    template < typename _ValueT >
      _OutIter
      num_put < _CharT, _OutIter > ::
      _M_insert_float ( _OutIter __s, ios_base & __io, _CharT __fill, char __mod,
         _ValueT __v ) const
      {
 typedef __numpunct_cache < _CharT > __cache_type;
 __use_cache < __cache_type > __uc;
 const locale & __loc = __io . _M_getloc ( );
 const __cache_type * __lc = __uc ( __loc );


 const streamsize __prec = __io . precision ( ) < 0 ? 6 : __io . precision ( );

 const int __max_digits =
   __gnu_cxx :: __numeric_traits < _ValueT > :: __digits10;


 int __len;

 char __fbuf [ 16 ];
 __num_base :: _S_format_float ( __io, __fbuf, __mod );




 int __cs_size = __max_digits * 3;
 char * __cs = static_cast < char * > ( __builtin_alloca ( __cs_size ) );
 __len = std :: __convert_from_v ( _S_get_c_locale ( ), __cs, __cs_size,
          __fbuf, __prec, __v );


 if ( __len >= __cs_size )
   {
     __cs_size = __len + 1;
     __cs = static_cast < char * > ( __builtin_alloca ( __cs_size ) );
     __len = std :: __convert_from_v ( _S_get_c_locale ( ), __cs, __cs_size,
       __fbuf, __prec, __v );
   }



 const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );

 _CharT * __ws = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
            * __len ) );
 __ctype . widen ( __cs, __cs + __len, __ws );


 _CharT * __wp = 0;
 const char * __p = char_traits < char > :: find ( __cs, __len, '.' );
 if ( __p )
   {
     __wp = __ws + ( __p - __cs );
     * __wp = __lc -> _M_decimal_point;
   }




 if ( __lc -> _M_use_grouping
     && ( __wp || __len < 3 || ( __cs [ 1 ] <= '9' && __cs [ 2 ] <= '9'
          && __cs [ 1 ] >= '0' && __cs [ 2 ] >= '0' ) ) )
   {


     _CharT * __ws2 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * __len * 2 ) );

     streamsize __off = 0;
     if ( __cs [ 0 ] == '-' || __cs [ 0 ] == '+' )
       {
  __off = 1;
  __ws2 [ 0 ] = __ws [ 0 ];
  __len -= 1;
       }

     _M_group_float ( __lc -> _M_grouping, __lc -> _M_grouping_size,
      __lc -> _M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len );
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io . width ( );
 if ( __w > static_cast < streamsize > ( __len ) )
   {
     _CharT * __ws3 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * __w ) );
     _M_pad ( __fill, __w, __io, __ws3, __ws, __len );
     __ws = __ws3;
   }
 __io . width ( 0 );



 return std :: __write ( __s, __ws, __len );
      }
# 1071 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill, bool __v ) const
    {
      const ios_base :: fmtflags __flags = __io . flags ( );
      if ( ( __flags & ios_base :: boolalpha ) == 0 )
        {
          const long __l = __v;
          __s = _M_insert_int ( __s, __io, __fill, __l );
        }
      else
        {
   typedef __numpunct_cache < _CharT > __cache_type;
   __use_cache < __cache_type > __uc;
   const locale & __loc = __io . _M_getloc ( );
   const __cache_type * __lc = __uc ( __loc );

   const _CharT * __name = __v ? __lc -> _M_truename
                              : __lc -> _M_falsename;
   int __len = __v ? __lc -> _M_truename_size
                   : __lc -> _M_falsename_size;

   const streamsize __w = __io . width ( );
   if ( __w > static_cast < streamsize > ( __len ) )
     {
       const streamsize __plen = __w - __len;
       _CharT * __ps
  = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
       * __plen ) );

       char_traits < _CharT > :: assign ( __ps, __plen, __fill );
       __io . width ( 0 );

       if ( ( __flags & ios_base :: adjustfield ) == ios_base :: left )
  {
    __s = std :: __write ( __s, __name, __len );
    __s = std :: __write ( __s, __ps, __plen );
  }
       else
  {
    __s = std :: __write ( __s, __ps, __plen );
    __s = std :: __write ( __s, __name, __len );
  }
       return __s;
     }
   __io . width ( 0 );
   __s = std :: __write ( __s, __name, __len );
 }
      return __s;
    }
# 1123 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill, double __v ) const
    { return _M_insert_float ( __s, __io, __fill, char ( ), __v ); }
# 1137 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill,
    long double __v ) const
    { return _M_insert_float ( __s, __io, __fill, 'L', __v ); }
# 1144 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill,
           const void * __v ) const
    {
      const ios_base :: fmtflags __flags = __io . flags ( );
      const ios_base :: fmtflags __fmt = ~ ( ios_base :: basefield
      | ios_base :: uppercase );
      __io . flags ( ( __flags & __fmt ) | ( ios_base :: hex | ios_base :: showbase ) );

      typedef __gnu_cxx :: __conditional_type < ( sizeof ( const void * )
          <= sizeof ( unsigned long ) ),
 unsigned long, unsigned long long > :: __type _UIntPtrType;

      __s = _M_insert_int ( __s, __io, __fill,
     reinterpret_cast < _UIntPtrType > ( __v ) );
      __io . flags ( __flags );
      return __s;
    }
# 1174 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT, typename _Traits >
    void
    __pad < _CharT, _Traits > :: _S_pad ( ios_base & __io, _CharT __fill,
       _CharT * __news, const _CharT * __olds,
       streamsize __newlen, streamsize __oldlen )
    {
      const size_t __plen = static_cast < size_t > ( __newlen - __oldlen );
      const ios_base :: fmtflags __adjust = __io . flags ( ) & ios_base :: adjustfield;


      if ( __adjust == ios_base :: left )
 {
   _Traits :: copy ( __news, __olds, __oldlen );
   _Traits :: assign ( __news + __oldlen, __plen, __fill );
   return;
 }

      size_t __mod = 0;
      if ( __adjust == ios_base :: internal )
 {



          const locale & __loc = __io . _M_getloc ( );
   const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );

   if ( __ctype . widen ( '-' ) == __olds [ 0 ]
       || __ctype . widen ( '+' ) == __olds [ 0 ] )
     {
       __news [ 0 ] = __olds [ 0 ];
       __mod = 1;
       ++ __news;
     }
   else if ( __ctype . widen ( '0' ) == __olds [ 0 ]
     && __oldlen > 1
     && ( __ctype . widen ( 'x' ) == __olds [ 1 ]
         || __ctype . widen ( 'X' ) == __olds [ 1 ] ) )
     {
       __news [ 0 ] = __olds [ 0 ];
       __news [ 1 ] = __olds [ 1 ];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits :: assign ( __news, __plen, __fill );
      _Traits :: copy ( __news + __plen, __olds + __mod, __oldlen - __mod );
    }
# 1223 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
template < typename _CharT >
    _CharT *
    __add_grouping ( _CharT * __s, _CharT __sep,
     const char * __gbeg, size_t __gsize,
     const _CharT * __first, const _CharT * __last )
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while ( __last - __first > __gbeg [ __idx ]
      && static_cast < signed char > ( __gbeg [ __idx ] ) > 0
      && __gbeg [ __idx ] != __gnu_cxx :: __numeric_traits < char > :: __max )
 {
   __last -= __gbeg [ __idx ];
   __idx < __gsize - 1 ? ++ __idx : ++ __ctr;
 }

      while ( __first != __last )
 * __s ++ = * __first ++;

      while ( __ctr -- )
 {
   * __s ++ = __sep;
   for ( char __i = __gbeg [ __idx ]; __i > 0; -- __i )
     * __s ++ = * __first ++;
 }

      while ( __idx -- )
 {
   * __s ++ = __sep;
   for ( char __i = __gbeg [ __idx ]; __i > 0; -- __i )
     * __s ++ = * __first ++;
 }

      return __s;
    }
# 1264 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class numpunct< char> ;
# 1265 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class numpunct_byname< char> ;
# 1266 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class num_get< char, istreambuf_iterator< char, char_traits< char> > > ;
# 1267 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class num_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
# 1270 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const ctype< char> &use_facet< ctype< char> > (const locale &);
# 1274 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const numpunct< char> &use_facet< numpunct< char> > (const locale &);
# 1278 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const num_put< char, ostreambuf_iterator< char, char_traits< char> > > &use_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 1282 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const num_get< char, istreambuf_iterator< char, char_traits< char> > > &use_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 1286 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< ctype< char> > (const locale &) throw();
# 1290 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< numpunct< char> > (const locale &) throw();
# 1294 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 1298 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 1303 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class numpunct< wchar_t> ;
# 1304 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class numpunct_byname< wchar_t> ;
# 1305 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 1306 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template class num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 1309 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const ctype< wchar_t> &use_facet< ctype< wchar_t> > (const locale &);
# 1313 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const numpunct< wchar_t> &use_facet< numpunct< wchar_t> > (const locale &);
# 1317 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 1321 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template const num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 1325 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< ctype< wchar_t> > (const locale &) throw();
# 1329 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< numpunct< wchar_t> > (const locale &) throw();
# 1333 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 1337 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
extern template bool has_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 1343 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
}
# 42 "/usr/include/c++/4.4/bits/basic_ios.h" 3
namespace std __attribute__((visibility("default"))) {
# 44 "/usr/include/c++/4.4/bits/basic_ios.h" 3
template < typename _Facet >
    inline const _Facet &
    __check_facet ( const _Facet * __f )
    {
      if ( ! __f )
 __throw_bad_cast ( );
      return * __f;
    }
# 61 "/usr/include/c++/4.4/bits/basic_ios.h" 3
template < typename _CharT, typename _Traits >
    class basic_ios : public ios_base
    {
    public :






      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;






      typedef ctype < _CharT > __ctype_type;
      typedef num_put < _CharT, ostreambuf_iterator < _CharT, _Traits > >
           __num_put_type;
      typedef num_get < _CharT, istreambuf_iterator < _CharT, _Traits > >
           __num_get_type;



    protected :
      basic_ostream < _CharT, _Traits > * _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf < _CharT, _Traits > * _M_streambuf;


      const __ctype_type * _M_ctype;

      const __num_put_type * _M_num_put;

      const __num_get_type * _M_num_get;

    public :







      operator void * ( ) const
      { return this -> fail ( ) ? 0 : const_cast < basic_ios * > ( this ); }

      bool
      operator ! ( ) const
      { return this -> fail ( ); }
# 126 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      iostate
      rdstate ( ) const
      { return _M_streambuf_state; }
# 137 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      void
      clear ( iostate __state = goodbit );







      void
      setstate ( iostate __state )
      { this -> clear ( this -> rdstate ( ) | __state ); }




      void
      _M_setstate ( iostate __state )
      {


 _M_streambuf_state |= __state;
 if ( this -> exceptions ( ) & __state )
   throw;
      }







      bool
      good ( ) const
      { return this -> rdstate ( ) == 0; }







      bool
      eof ( ) const
      { return ( this -> rdstate ( ) & eofbit ) != 0; }
# 190 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      bool
      fail ( ) const
      { return ( this -> rdstate ( ) & ( badbit | failbit ) ) != 0; }







      bool
      bad ( ) const
      { return ( this -> rdstate ( ) & badbit ) != 0; }
# 211 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      iostate
      exceptions ( ) const
      { return _M_exception; }
# 246 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      void
      exceptions ( iostate __except )
      {
        _M_exception = __except;
        this -> clear ( _M_streambuf_state );
      }







      explicit
      basic_ios ( basic_streambuf < _CharT, _Traits > * __sb )
      : ios_base ( ), _M_tie ( 0 ), _M_fill ( ), _M_fill_init ( false ), _M_streambuf ( 0 ),
 _M_ctype ( 0 ), _M_num_put ( 0 ), _M_num_get ( 0 )
      { this -> init ( __sb ); }







      virtual
      ~ basic_ios ( ) { }
# 284 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_ostream < _CharT, _Traits > *
      tie ( ) const
      { return _M_tie; }
# 296 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_ostream < _CharT, _Traits > *
      tie ( basic_ostream < _CharT, _Traits > * __tiestr )
      {
        basic_ostream < _CharT, _Traits > * __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf < _CharT, _Traits > *
      rdbuf ( ) const
      { return _M_streambuf; }
# 336 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_streambuf < _CharT, _Traits > *
      rdbuf ( basic_streambuf < _CharT, _Traits > * __sb );
# 350 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_ios &
      copyfmt ( const basic_ios & __rhs );







      char_type
      fill ( ) const
      {
 if ( ! _M_fill_init )
   {
     _M_fill = this -> widen ( ' ' );
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 379 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      char_type
      fill ( char_type __ch )
      {
 char_type __old = this -> fill ( );
 _M_fill = __ch;
 return __old;
      }
# 399 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      locale
      imbue ( const locale & __loc );
# 419 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      char
      narrow ( char_type __c, char __dfault ) const
      { return __check_facet ( _M_ctype ) . narrow ( __c, __dfault ); }
# 438 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      char_type
      widen ( char __c ) const
      { return __check_facet ( _M_ctype ) . widen ( __c ); }

    protected :







      basic_ios ( )
      : ios_base ( ), _M_tie ( 0 ), _M_fill ( char_type ( ) ), _M_fill_init ( false ),
 _M_streambuf ( 0 ), _M_ctype ( 0 ), _M_num_put ( 0 ), _M_num_get ( 0 )
      { }







      void
      init ( basic_streambuf < _CharT, _Traits > * __sb );

      void
      _M_cache_locale ( const locale & __loc );
    };
# 468 "/usr/include/c++/4.4/bits/basic_ios.h" 3
}
# 36 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 38 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    void
    basic_ios < _CharT, _Traits > :: clear ( iostate __state )
    {
      if ( this -> rdbuf ( ) )
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if ( this -> exceptions ( ) & this -> rdstate ( ) )
 __throw_ios_failure ( ( "basic_ios::clear" ) );
    }
# 50 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    basic_streambuf < _CharT, _Traits > *
    basic_ios < _CharT, _Traits > :: rdbuf ( basic_streambuf < _CharT, _Traits > * __sb )
    {
      basic_streambuf < _CharT, _Traits > * __old = _M_streambuf;
      _M_streambuf = __sb;
      this -> clear ( );
      return __old;
    }
# 60 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ios < _CharT, _Traits > &
    basic_ios < _CharT, _Traits > :: copyfmt ( const basic_ios & __rhs )
    {


      if ( this != & __rhs )
 {




   _Words * __words = ( __rhs . _M_word_size <= _S_local_word_size ) ?
                      _M_local_word : new _Words [ __rhs . _M_word_size ];


   _Callback_list * __cb = __rhs . _M_callbacks;
   if ( __cb )
     __cb -> _M_add_reference ( );
   _M_call_callbacks ( erase_event );
   if ( _M_word != _M_local_word )
     {
       delete [ ] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks ( );


   _M_callbacks = __cb;
   for ( int __i = 0; __i < __rhs . _M_word_size; ++ __i )
     __words [ __i ] = __rhs . _M_word [ __i ];
   _M_word = __words;
   _M_word_size = __rhs . _M_word_size;

   this -> flags ( __rhs . flags ( ) );
   this -> width ( __rhs . width ( ) );
   this -> precision ( __rhs . precision ( ) );
   this -> tie ( __rhs . tie ( ) );
   this -> fill ( __rhs . fill ( ) );
   _M_ios_locale = __rhs . getloc ( );
   _M_cache_locale ( _M_ios_locale );

   _M_call_callbacks ( copyfmt_event );


   this -> exceptions ( __rhs . exceptions ( ) );
 }
      return * this;
    }
# 111 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    locale
    basic_ios < _CharT, _Traits > :: imbue ( const locale & __loc )
    {
      locale __old ( this -> getloc ( ) );
      ios_base :: imbue ( __loc );
      _M_cache_locale ( __loc );
      if ( this -> rdbuf ( ) != 0 )
 this -> rdbuf ( ) -> pubimbue ( __loc );
      return __old;
    }
# 123 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    void
    basic_ios < _CharT, _Traits > :: init ( basic_streambuf < _CharT, _Traits > * __sb )
    {

      ios_base :: _M_init ( );


      _M_cache_locale ( _M_ios_locale );
# 145 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
      _M_fill = _CharT ( );
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }
# 154 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    void
    basic_ios < _CharT, _Traits > :: _M_cache_locale ( const locale & __loc )
    {
      if ( __builtin_expect ( has_facet < __ctype_type > ( __loc ), true ) )
 _M_ctype = & use_facet < __ctype_type > ( __loc );
      else
 _M_ctype = 0;

      if ( __builtin_expect ( has_facet < __num_put_type > ( __loc ), true ) )
 _M_num_put = & use_facet < __num_put_type > ( __loc );
      else
 _M_num_put = 0;

      if ( __builtin_expect ( has_facet < __num_get_type > ( __loc ), true ) )
 _M_num_get = & use_facet < __num_get_type > ( __loc );
      else
 _M_num_get = 0;
    }
# 178 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
extern template class basic_ios< char, char_traits< char> > ;
# 181 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
extern template class basic_ios< wchar_t, char_traits< wchar_t> > ;
# 185 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
}
# 43 "/usr/include/c++/4.4/ostream" 3
namespace std __attribute__((visibility("default"))) {
# 54 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    class basic_ostream : virtual public basic_ios < _CharT, _Traits >
    {
    public :

      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef basic_ios < _CharT, _Traits > __ios_type;
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef num_put < _CharT, ostreambuf_iterator < _CharT, _Traits > >
             __num_put_type;
      typedef ctype < _CharT > __ctype_type;
# 81 "/usr/include/c++/4.4/ostream" 3
      explicit
      basic_ostream ( __streambuf_type * __sb )
      { this -> init ( __sb ); }






      virtual
      ~ basic_ostream ( ) { }


      class sentry;
      friend class sentry;
# 107 "/usr/include/c++/4.4/ostream" 3
      __ostream_type &
      operator << ( __ostream_type & ( * __pf ) ( __ostream_type & ) )
      {



 return __pf ( * this );
      }

      __ostream_type &
      operator << ( __ios_type & ( * __pf ) ( __ios_type & ) )
      {



 __pf ( * this );
 return * this;
      }

      __ostream_type &
      operator << ( ios_base & ( * __pf ) ( ios_base & ) )
      {



 __pf ( * this );
 return * this;
      }
# 164 "/usr/include/c++/4.4/ostream" 3
      __ostream_type &
      operator << ( long __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( unsigned long __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( bool __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( short __n );

      __ostream_type &
      operator << ( unsigned short __n )
      {


 return _M_insert ( static_cast < unsigned long > ( __n ) );
      }

      __ostream_type &
      operator << ( int __n );

      __ostream_type &
      operator << ( unsigned int __n )
      {


 return _M_insert ( static_cast < unsigned long > ( __n ) );
      }


      __ostream_type &
      operator << ( long long __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( unsigned long long __n )
      { return _M_insert ( __n ); }


      __ostream_type &
      operator << ( double __f )
      { return _M_insert ( __f ); }

      __ostream_type &
      operator << ( float __f )
      {


 return _M_insert ( static_cast < double > ( __f ) );
      }

      __ostream_type &
      operator << ( long double __f )
      { return _M_insert ( __f ); }

      __ostream_type &
      operator << ( const void * __p )
      { return _M_insert ( __p ); }
# 249 "/usr/include/c++/4.4/ostream" 3
      __ostream_type &
      operator << ( __streambuf_type * __sb );
# 282 "/usr/include/c++/4.4/ostream" 3
      __ostream_type &
      put ( char_type __c );


      void
      _M_write ( const char_type * __s, streamsize __n )
      {
 const streamsize __put = this -> rdbuf ( ) -> sputn ( __s, __n );
 if ( __put != __n )
   this -> setstate ( ios_base :: badbit );
      }
# 310 "/usr/include/c++/4.4/ostream" 3
      __ostream_type &
      write ( const char_type * __s, streamsize __n );
# 323 "/usr/include/c++/4.4/ostream" 3
      __ostream_type &
      flush ( );
# 334 "/usr/include/c++/4.4/ostream" 3
      pos_type
      tellp ( );
# 345 "/usr/include/c++/4.4/ostream" 3
      __ostream_type &
      seekp ( pos_type );
# 357 "/usr/include/c++/4.4/ostream" 3
       __ostream_type &
      seekp ( off_type, ios_base :: seekdir );

    protected :
      basic_ostream ( )
      { this -> init ( 0 ); }

      template < typename _ValueT >
        __ostream_type &
        _M_insert ( _ValueT __v );
    };
# 376 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    class basic_ostream < _CharT, _Traits > :: sentry
    {

      bool _M_ok;
      basic_ostream < _CharT, _Traits > & _M_os;

    public :
# 395 "/usr/include/c++/4.4/ostream" 3
      explicit
      sentry ( basic_ostream < _CharT, _Traits > & __os );
# 405 "/usr/include/c++/4.4/ostream" 3
      ~ sentry ( )
      {

 if ( bool ( _M_os . flags ( ) & ios_base :: unitbuf ) && ! uncaught_exception ( ) )
   {

     if ( _M_os . rdbuf ( ) && _M_os . rdbuf ( ) -> pubsync ( ) == - 1 )
       _M_os . setstate ( ios_base :: badbit );
   }
      }
# 423 "/usr/include/c++/4.4/ostream" 3
      operator bool ( ) const
      { return _M_ok; }
    };
# 444 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, _CharT __c )
    { return __ostream_insert ( __out, & __c, 1 ); }
# 449 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, char __c )
    { return ( __out << __out . widen ( __c ) ); }
# 455 "/usr/include/c++/4.4/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, char __c )
    { return __ostream_insert ( __out, & __c, 1 ); }
# 461 "/usr/include/c++/4.4/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, signed char __c )
    { return ( __out << static_cast < char > ( __c ) ); }
# 466 "/usr/include/c++/4.4/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, unsigned char __c )
    { return ( __out << static_cast < char > ( __c ) ); }
# 486 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, const _CharT * __s )
    {
      if ( ! __s )
 __out . setstate ( ios_base :: badbit );
      else
 __ostream_insert ( __out, __s,
    static_cast < streamsize > ( _Traits :: length ( __s ) ) );
      return __out;
    }
# 498 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, const char * __s );
# 503 "/usr/include/c++/4.4/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, const char * __s )
    {
      if ( ! __s )
 __out . setstate ( ios_base :: badbit );
      else
 __ostream_insert ( __out, __s,
    static_cast < streamsize > ( _Traits :: length ( __s ) ) );
      return __out;
    }
# 516 "/usr/include/c++/4.4/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, const signed char * __s )
    { return ( __out << reinterpret_cast < const char * > ( __s ) ); }
# 521 "/usr/include/c++/4.4/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, const unsigned char * __s )
    { return ( __out << reinterpret_cast < const char * > ( __s ) ); }
# 536 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    endl ( basic_ostream < _CharT, _Traits > & __os )
    { return flush ( __os . put ( __os . widen ( '\n' ) ) ); }
# 547 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    ends ( basic_ostream < _CharT, _Traits > & __os )
    { return __os . put ( _CharT ( ) ); }
# 557 "/usr/include/c++/4.4/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    flush ( basic_ostream < _CharT, _Traits > & __os )
    { return __os . flush ( ); }
# 562 "/usr/include/c++/4.4/ostream" 3
}
# 43 "/usr/include/c++/4.4/bits/ostream.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 45 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > :: sentry ::
    sentry ( basic_ostream < _CharT, _Traits > & __os )
    : _M_ok ( false ), _M_os ( __os )
    {

      if ( __os . tie ( ) && __os . good ( ) )
 __os . tie ( ) -> flush ( );

      if ( __os . good ( ) )
 _M_ok = true;
      else
 __os . setstate ( ios_base :: failbit );
    }
# 60 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    template < typename _ValueT >
      basic_ostream < _CharT, _Traits > &
      basic_ostream < _CharT, _Traits > ::
      _M_insert ( _ValueT __v )
      {
 sentry __cerb ( * this );
 if ( __cerb )
   {
     ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
     try
       {
  const __num_put_type & __np = __check_facet ( this -> _M_num_put );
  if ( __np . put ( * this, * this, this -> fill ( ), __v ) . failed ( ) )
    __err |= ios_base :: badbit;
       }
     catch ( __cxxabiv1 :: __forced_unwind & )
       {
  this -> _M_setstate ( ios_base :: badbit );
  throw;
       }
     catch ( ... )
       { this -> _M_setstate ( ios_base :: badbit ); }
     if ( __err )
       this -> setstate ( __err );
   }
 return * this;
      }
# 89 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    operator << ( short __n )
    {


      const ios_base :: fmtflags __fmt = this -> flags ( ) & ios_base :: basefield;
      if ( __fmt == ios_base :: oct || __fmt == ios_base :: hex )
 return _M_insert ( static_cast < long > ( static_cast < unsigned short > ( __n ) ) );
      else
 return _M_insert ( static_cast < long > ( __n ) );
    }
# 103 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    operator << ( int __n )
    {


      const ios_base :: fmtflags __fmt = this -> flags ( ) & ios_base :: basefield;
      if ( __fmt == ios_base :: oct || __fmt == ios_base :: hex )
 return _M_insert ( static_cast < long > ( static_cast < unsigned int > ( __n ) ) );
      else
 return _M_insert ( static_cast < long > ( __n ) );
    }
# 117 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    operator << ( __streambuf_type * __sbin )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this );
      if ( __cerb && __sbin )
 {
   try
     {
       if ( ! __copy_streambufs ( __sbin, this -> rdbuf ( ) ) )
  __err |= ios_base :: failbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: failbit ); }
 }
      else if ( ! __sbin )
 __err |= ios_base :: badbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 146 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    put ( char_type __c )
    {






      sentry __cerb ( * this );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __put = this -> rdbuf ( ) -> sputc ( __c );
       if ( traits_type :: eq_int_type ( __put, traits_type :: eof ( ) ) )
  __err |= ios_base :: badbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 180 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    write ( const _CharT * __s, streamsize __n )
    {







      sentry __cerb ( * this );
      if ( __cerb )
 {
   try
     { _M_write ( __s, __n ); }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      return * this;
    }
# 208 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    flush ( )
    {



      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( this -> rdbuf ( ) && this -> rdbuf ( ) -> pubsync ( ) == - 1 )
     __err |= ios_base :: badbit;
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 234 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    typename basic_ostream < _CharT, _Traits > :: pos_type
    basic_ostream < _CharT, _Traits > ::
    tellp ( )
    {
      pos_type __ret = pos_type ( - 1 );
      try
 {
   if ( ! this -> fail ( ) )
     __ret = this -> rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur, ios_base :: out );
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      return __ret;
    }
# 255 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    seekp ( pos_type __pos )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {


       const pos_type __p = this -> rdbuf ( ) -> pubseekpos ( __pos,
            ios_base :: out );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 287 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    seekp ( off_type __off, ios_base :: seekdir __dir )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {


       const pos_type __p = this -> rdbuf ( ) -> pubseekoff ( __off, __dir,
            ios_base :: out );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 319 "/usr/include/c++/4.4/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, const char * __s )
    {
      if ( ! __s )
 __out . setstate ( ios_base :: badbit );
      else
 {


   const size_t __clen = char_traits < char > :: length ( __s );
   try
     {
       struct __ptr_guard
       {
  _CharT * __p;
  __ptr_guard ( _CharT * __ip ) : __p ( __ip ) { }
  ~ __ptr_guard ( ) { delete [ ] __p; }
  _CharT * __get ( ) { return __p; }
       } __pg ( new _CharT [ __clen ] );

       _CharT * __ws = __pg . __get ( );
       for ( size_t __i = 0; __i < __clen; ++ __i )
  __ws [ __i ] = __out . widen ( __s [ __i ] );
       __ostream_insert ( __out, __ws, __clen );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __out . _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __out . _M_setstate ( ios_base :: badbit ); }
 }
      return __out;
    }
# 360 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template class basic_ostream< char, char_traits< char> > ;
# 361 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &endl(basic_ostream< char, char_traits< char> > &);
# 362 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &ends(basic_ostream< char, char_traits< char> > &);
# 363 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &flush(basic_ostream< char, char_traits< char> > &);
# 364 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, char);
# 365 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, unsigned char);
# 366 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, signed char);
# 367 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const char *);
# 368 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const unsigned char *);
# 369 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const signed char *);
# 371 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long);
# 372 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long);
# 373 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(bool);
# 375 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long long);
# 376 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long long);
# 378 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(double);
# 379 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long double);
# 380 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(const void *);
# 383 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template class basic_ostream< wchar_t, char_traits< wchar_t> > ;
# 384 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &endl(basic_ostream< wchar_t, char_traits< wchar_t> > &);
# 385 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &ends(basic_ostream< wchar_t, char_traits< wchar_t> > &);
# 386 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &flush(basic_ostream< wchar_t, char_traits< wchar_t> > &);
# 387 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, wchar_t);
# 388 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, char);
# 389 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, const wchar_t *);
# 390 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, const char *);
# 392 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long);
# 393 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long);
# 394 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(bool);
# 396 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long long);
# 397 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long long);
# 399 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(double);
# 400 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long double);
# 401 "/usr/include/c++/4.4/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(const void *);
# 405 "/usr/include/c++/4.4/bits/ostream.tcc" 3
}
# 43 "/usr/include/c++/4.4/istream" 3
namespace std __attribute__((visibility("default"))) {
# 54 "/usr/include/c++/4.4/istream" 3
template < typename _CharT, typename _Traits >
    class basic_istream : virtual public basic_ios < _CharT, _Traits >
    {
    public :

      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef basic_ios < _CharT, _Traits > __ios_type;
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef num_get < _CharT, istreambuf_iterator < _CharT, _Traits > >
        __num_get_type;
      typedef ctype < _CharT > __ctype_type;

    protected :





      streamsize _M_gcount;

    public :
# 90 "/usr/include/c++/4.4/istream" 3
      explicit
      basic_istream ( __streambuf_type * __sb )
      : _M_gcount ( streamsize ( 0 ) )
      { this -> init ( __sb ); }






      virtual
      ~ basic_istream ( )
      { _M_gcount = streamsize ( 0 ); }


      class sentry;
      friend class sentry;
# 118 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      operator >> ( __istream_type & ( * __pf ) ( __istream_type & ) )
      { return __pf ( * this ); }

      __istream_type &
      operator >> ( __ios_type & ( * __pf ) ( __ios_type & ) )
      {
 __pf ( * this );
 return * this;
      }

      __istream_type &
      operator >> ( ios_base & ( * __pf ) ( ios_base & ) )
      {
 __pf ( * this );
 return * this;
      }
# 165 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      operator >> ( bool & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( short & __n );

      __istream_type &
      operator >> ( unsigned short & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( int & __n );

      __istream_type &
      operator >> ( unsigned int & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( long & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( unsigned long & __n )
      { return _M_extract ( __n ); }


      __istream_type &
      operator >> ( long long & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( unsigned long long & __n )
      { return _M_extract ( __n ); }


      __istream_type &
      operator >> ( float & __f )
      { return _M_extract ( __f ); }

      __istream_type &
      operator >> ( double & __f )
      { return _M_extract ( __f ); }

      __istream_type &
      operator >> ( long double & __f )
      { return _M_extract ( __f ); }

      __istream_type &
      operator >> ( void * & __p )
      { return _M_extract ( __p ); }
# 237 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      operator >> ( __streambuf_type * __sb );
# 247 "/usr/include/c++/4.4/istream" 3
      streamsize
      gcount ( ) const
      { return _M_gcount; }
# 279 "/usr/include/c++/4.4/istream" 3
      int_type
      get ( );
# 293 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      get ( char_type & __c );
# 320 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      get ( char_type * __s, streamsize __n, char_type __delim );
# 331 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      get ( char_type * __s, streamsize __n )
      { return this -> get ( __s, __n, this -> widen ( '\n' ) ); }
# 354 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      get ( __streambuf_type & __sb, char_type __delim );
# 364 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      get ( __streambuf_type & __sb )
      { return this -> get ( __sb, this -> widen ( '\n' ) ); }
# 393 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      getline ( char_type * __s, streamsize __n, char_type __delim );
# 404 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      getline ( char_type * __s, streamsize __n )
      { return this -> getline ( __s, __n, this -> widen ( '\n' ) ); }
# 428 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      ignore ( );

      __istream_type &
      ignore ( streamsize __n );

      __istream_type &
      ignore ( streamsize __n, int_type __delim );
# 445 "/usr/include/c++/4.4/istream" 3
      int_type
      peek ( );
# 463 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      read ( char_type * __s, streamsize __n );
# 482 "/usr/include/c++/4.4/istream" 3
      streamsize
      readsome ( char_type * __s, streamsize __n );
# 498 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      putback ( char_type __c );
# 513 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      unget ( );
# 531 "/usr/include/c++/4.4/istream" 3
      int
      sync ( );
# 545 "/usr/include/c++/4.4/istream" 3
      pos_type
      tellg ( );
# 560 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      seekg ( pos_type );
# 576 "/usr/include/c++/4.4/istream" 3
      __istream_type &
      seekg ( off_type, ios_base :: seekdir );


    protected :
      basic_istream ( )
      : _M_gcount ( streamsize ( 0 ) )
      { this -> init ( 0 ); }

      template < typename _ValueT >
        __istream_type &
        _M_extract ( _ValueT & __v );
    };
# 594 "/usr/include/c++/4.4/istream" 3
template<> basic_istream< char, char_traits< char> > &basic_istream< char, char_traits< char> > ::getline(char_type *, streamsize, char_type);
# 599 "/usr/include/c++/4.4/istream" 3
template<> basic_istream< char, char_traits< char> > &basic_istream< char, char_traits< char> > ::ignore(streamsize);
# 604 "/usr/include/c++/4.4/istream" 3
template<> basic_istream< char, char_traits< char> > &basic_istream< char, char_traits< char> > ::ignore(streamsize, int_type);
# 610 "/usr/include/c++/4.4/istream" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &basic_istream< wchar_t, char_traits< wchar_t> > ::getline(char_type *, streamsize, char_type);
# 615 "/usr/include/c++/4.4/istream" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize);
# 620 "/usr/include/c++/4.4/istream" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize, int_type);
# 631 "/usr/include/c++/4.4/istream" 3
template < typename _CharT, typename _Traits >
    class basic_istream < _CharT, _Traits > :: sentry
    {
    public :

      typedef _Traits traits_type;
      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef typename __istream_type :: __ctype_type __ctype_type;
      typedef typename _Traits :: int_type __int_type;
# 663 "/usr/include/c++/4.4/istream" 3
      explicit
      sentry ( basic_istream < _CharT, _Traits > & __is, bool __noskipws = false );
# 673 "/usr/include/c++/4.4/istream" 3
      operator bool ( ) const
      { return _M_ok; }

    private :
      bool _M_ok;
    };
# 693 "/usr/include/c++/4.4/istream" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in, _CharT & __c );
# 697 "/usr/include/c++/4.4/istream" 3
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, unsigned char & __c )
    { return ( __in >> reinterpret_cast < char & > ( __c ) ); }
# 702 "/usr/include/c++/4.4/istream" 3
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, signed char & __c )
    { return ( __in >> reinterpret_cast < char & > ( __c ) ); }
# 734 "/usr/include/c++/4.4/istream" 3
template<class _CharT, class _Traits> basic_istream< _CharT, _Traits> &operator>>(basic_istream< _CharT, _Traits> &, _CharT *);
# 741 "/usr/include/c++/4.4/istream" 3
template<> basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, char *);
# 743 "/usr/include/c++/4.4/istream" 3
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, unsigned char * __s )
    { return ( __in >> reinterpret_cast < char * > ( __s ) ); }
# 748 "/usr/include/c++/4.4/istream" 3
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, signed char * __s )
    { return ( __in >> reinterpret_cast < char * > ( __s ) ); }
# 762 "/usr/include/c++/4.4/istream" 3
template < typename _CharT, typename _Traits >
    class basic_iostream
    : public basic_istream < _CharT, _Traits >,
      public basic_ostream < _CharT, _Traits >
    {
    public :



      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_ostream < _CharT, _Traits > __ostream_type;







      explicit
      basic_iostream ( basic_streambuf < _CharT, _Traits > * __sb )
      : __istream_type ( __sb ), __ostream_type ( __sb ) { }




      virtual
      ~ basic_iostream ( ) { }

    protected :
      basic_iostream ( )
      : __istream_type ( ), __ostream_type ( ) { }
    };
# 823 "/usr/include/c++/4.4/istream" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    ws ( basic_istream < _CharT, _Traits > & __is );
# 827 "/usr/include/c++/4.4/istream" 3
}
# 43 "/usr/include/c++/4.4/bits/istream.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 45 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > :: sentry ::
    sentry ( basic_istream < _CharT, _Traits > & __in, bool __noskip ) : _M_ok ( false )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      if ( __in . good ( ) )
 {
   if ( __in . tie ( ) )
     __in . tie ( ) -> flush ( );
   if ( ! __noskip && bool ( __in . flags ( ) & ios_base :: skipws ) )
     {
       const __int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = __in . rdbuf ( );
       __int_type __c = __sb -> sgetc ( );

       const __ctype_type & __ct = __check_facet ( __in . _M_ctype );
       while ( ! traits_type :: eq_int_type ( __c, __eof )
       && __ct . is ( ctype_base :: space,
    traits_type :: to_char_type ( __c ) ) )
  __c = __sb -> snextc ( );




       if ( traits_type :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
     }
 }

      if ( __in . good ( ) && __err == ios_base :: goodbit )
 _M_ok = true;
      else
 {
   __err |= ios_base :: failbit;
   __in . setstate ( __err );
 }
    }
# 83 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    template < typename _ValueT >
      basic_istream < _CharT, _Traits > &
      basic_istream < _CharT, _Traits > ::
      _M_extract ( _ValueT & __v )
      {
 sentry __cerb ( * this, false );
 if ( __cerb )
   {
     ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
     try
       {
  const __num_get_type & __ng = __check_facet ( this -> _M_num_get );
  __ng . get ( * this, 0, * this, __err, __v );
       }
     catch ( __cxxabiv1 :: __forced_unwind & )
       {
  this -> _M_setstate ( ios_base :: badbit );
  throw;
       }
     catch ( ... )
       { this -> _M_setstate ( ios_base :: badbit ); }
     if ( __err )
       this -> setstate ( __err );
   }
 return * this;
      }
# 111 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    operator >> ( short & __n )
    {


      long __l;
      _M_extract ( __l );
      if ( ! this -> fail ( ) )
 {
   if ( __gnu_cxx :: __numeric_traits < short > :: __min <= __l
       && __l <= __gnu_cxx :: __numeric_traits < short > :: __max )
     __n = short ( __l );
   else
     this -> setstate ( ios_base :: failbit );
 }
      return * this;
    }
# 131 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    operator >> ( int & __n )
    {


      long __l;
      _M_extract ( __l );
      if ( ! this -> fail ( ) )
 {
   if ( __gnu_cxx :: __numeric_traits < int > :: __min <= __l
       && __l <= __gnu_cxx :: __numeric_traits < int > :: __max )
     __n = int ( __l );
   else
     this -> setstate ( ios_base :: failbit );
 }
      return * this;
    }
# 151 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    operator >> ( __streambuf_type * __sbout )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, false );
      if ( __cerb && __sbout )
 {
   try
     {
       bool __ineof;
       if ( ! __copy_streambufs_eof ( this -> rdbuf ( ), __sbout, __ineof ) )
  __err |= ios_base :: failbit;
       if ( __ineof )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: failbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: failbit ); }
 }
      else if ( ! __sbout )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 183 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    typename basic_istream < _CharT, _Traits > :: int_type
    basic_istream < _CharT, _Traits > ::
    get ( void )
    {
      const int_type __eof = traits_type :: eof ( );
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       __c = this -> rdbuf ( ) -> sbumpc ( );

       if ( ! traits_type :: eq_int_type ( __c, __eof ) )
  _M_gcount = 1;
       else
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return __c;
    }
# 219 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    get ( char_type & __c )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       const int_type __cb = this -> rdbuf ( ) -> sbumpc ( );

       if ( ! traits_type :: eq_int_type ( __cb, traits_type :: eof ( ) ) )
  {
    _M_gcount = 1;
    __c = traits_type :: to_char_type ( __cb );
  }
       else
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 256 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    get ( char_type * __s, streamsize __n, char_type __delim )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       const int_type __idelim = traits_type :: to_int_type ( __delim );
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );
       int_type __c = __sb -> sgetc ( );

       while ( _M_gcount + 1 < __n
       && ! traits_type :: eq_int_type ( __c, __eof )
       && ! traits_type :: eq_int_type ( __c, __idelim ) )
  {
    * __s ++ = traits_type :: to_char_type ( __c );
    ++ _M_gcount;
    __c = __sb -> snextc ( );
  }
       if ( traits_type :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }


      if ( __n > 0 )
 * __s = char_type ( );
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 303 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    get ( __streambuf_type & __sb, char_type __delim )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       const int_type __idelim = traits_type :: to_int_type ( __delim );
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __this_sb = this -> rdbuf ( );
       int_type __c = __this_sb -> sgetc ( );
       char_type __c2 = traits_type :: to_char_type ( __c );

       while ( ! traits_type :: eq_int_type ( __c, __eof )
       && ! traits_type :: eq_int_type ( __c, __idelim )
       && ! traits_type :: eq_int_type ( __sb . sputc ( __c2 ), __eof ) )
  {
    ++ _M_gcount;
    __c = __this_sb -> snextc ( );
    __c2 = traits_type :: to_char_type ( __c );
  }
       if ( traits_type :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 347 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    getline ( char_type * __s, streamsize __n, char_type __delim )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
        {
          try
            {
              const int_type __idelim = traits_type :: to_int_type ( __delim );
              const int_type __eof = traits_type :: eof ( );
              __streambuf_type * __sb = this -> rdbuf ( );
              int_type __c = __sb -> sgetc ( );

              while ( _M_gcount + 1 < __n
                     && ! traits_type :: eq_int_type ( __c, __eof )
                     && ! traits_type :: eq_int_type ( __c, __idelim ) )
                {
                  * __s ++ = traits_type :: to_char_type ( __c );
                  __c = __sb -> snextc ( );
                  ++ _M_gcount;
                }
              if ( traits_type :: eq_int_type ( __c, __eof ) )
                __err |= ios_base :: eofbit;
              else
                {
                  if ( traits_type :: eq_int_type ( __c, __idelim ) )
                    {
                      __sb -> sbumpc ( );
                      ++ _M_gcount;
                    }
                  else
                    __err |= ios_base :: failbit;
                }
            }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
          catch ( ... )
            { this -> _M_setstate ( ios_base :: badbit ); }
        }


      if ( __n > 0 )
 * __s = char_type ( );
      if ( ! _M_gcount )
        __err |= ios_base :: failbit;
      if ( __err )
        this -> setstate ( __err );
      return * this;
    }
# 407 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    ignore ( void )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );

       if ( traits_type :: eq_int_type ( __sb -> sbumpc ( ), __eof ) )
  __err |= ios_base :: eofbit;
       else
  _M_gcount = 1;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 440 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    ignore ( streamsize __n )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb && __n > 0 )
        {
          ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
          try
            {
              const int_type __eof = traits_type :: eof ( );
              __streambuf_type * __sb = this -> rdbuf ( );
              int_type __c = __sb -> sgetc ( );
# 463 "/usr/include/c++/4.4/bits/istream.tcc" 3
       bool __large_ignore = false;
       while ( true )
  {
    while ( _M_gcount < __n
    && ! traits_type :: eq_int_type ( __c, __eof ) )
      {
        ++ _M_gcount;
        __c = __sb -> snextc ( );
      }
    if ( __n == __gnu_cxx :: __numeric_traits < streamsize > :: __max
        && ! traits_type :: eq_int_type ( __c, __eof ) )
      {
        _M_gcount =
   __gnu_cxx :: __numeric_traits < streamsize > :: __min;
        __large_ignore = true;
      }
    else
      break;
  }

       if ( __large_ignore )
  _M_gcount = __gnu_cxx :: __numeric_traits < streamsize > :: __max;

       if ( traits_type :: eq_int_type ( __c, __eof ) )
                __err |= ios_base :: eofbit;
            }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
          catch ( ... )
            { this -> _M_setstate ( ios_base :: badbit ); }
          if ( __err )
            this -> setstate ( __err );
        }
      return * this;
    }
# 502 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    ignore ( streamsize __n, int_type __delim )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb && __n > 0 )
        {
          ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
          try
            {
              const int_type __eof = traits_type :: eof ( );
              __streambuf_type * __sb = this -> rdbuf ( );
              int_type __c = __sb -> sgetc ( );


       bool __large_ignore = false;
       while ( true )
  {
    while ( _M_gcount < __n
    && ! traits_type :: eq_int_type ( __c, __eof )
    && ! traits_type :: eq_int_type ( __c, __delim ) )
      {
        ++ _M_gcount;
        __c = __sb -> snextc ( );
      }
    if ( __n == __gnu_cxx :: __numeric_traits < streamsize > :: __max
        && ! traits_type :: eq_int_type ( __c, __eof )
        && ! traits_type :: eq_int_type ( __c, __delim ) )
      {
        _M_gcount =
   __gnu_cxx :: __numeric_traits < streamsize > :: __min;
        __large_ignore = true;
      }
    else
      break;
  }

       if ( __large_ignore )
  _M_gcount = __gnu_cxx :: __numeric_traits < streamsize > :: __max;

              if ( traits_type :: eq_int_type ( __c, __eof ) )
                __err |= ios_base :: eofbit;
       else if ( traits_type :: eq_int_type ( __c, __delim ) )
  {
    if ( _M_gcount
        < __gnu_cxx :: __numeric_traits < streamsize > :: __max )
      ++ _M_gcount;
    __sb -> sbumpc ( );
  }
            }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
          catch ( ... )
            { this -> _M_setstate ( ios_base :: badbit ); }
          if ( __err )
            this -> setstate ( __err );
        }
      return * this;
    }
# 567 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    typename basic_istream < _CharT, _Traits > :: int_type
    basic_istream < _CharT, _Traits > ::
    peek ( void )
    {
      int_type __c = traits_type :: eof ( );
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       __c = this -> rdbuf ( ) -> sgetc ( );
       if ( traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return __c;
    }
# 597 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    read ( char_type * __s, streamsize __n )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       _M_gcount = this -> rdbuf ( ) -> sgetn ( __s, __n );
       if ( _M_gcount != __n )
  __err |= ( ios_base :: eofbit | ios_base :: failbit );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 626 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    streamsize
    basic_istream < _CharT, _Traits > ::
    readsome ( char_type * __s, streamsize __n )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {

       const streamsize __num = this -> rdbuf ( ) -> in_avail ( );
       if ( __num > 0 )
  _M_gcount = this -> rdbuf ( ) -> sgetn ( __s, std :: min ( __num, __n ) );
       else if ( __num == - 1 )
  __err |= ios_base :: eofbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return _M_gcount;
    }
# 658 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    putback ( char_type __c )
    {


      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );
       if ( ! __sb
    || traits_type :: eq_int_type ( __sb -> sputbackc ( __c ), __eof ) )
  __err |= ios_base :: badbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 691 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    unget ( void )
    {


      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );
       if ( ! __sb
    || traits_type :: eq_int_type ( __sb -> sungetc ( ), __eof ) )
  __err |= ios_base :: badbit;
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 724 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    int
    basic_istream < _CharT, _Traits > ::
    sync ( void )
    {


      int __ret = - 1;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       __streambuf_type * __sb = this -> rdbuf ( );
       if ( __sb )
  {
    if ( __sb -> pubsync ( ) == - 1 )
      __err |= ios_base :: badbit;
    else
      __ret = 0;
  }
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       this -> _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return __ret;
    }
# 760 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    typename basic_istream < _CharT, _Traits > :: pos_type
    basic_istream < _CharT, _Traits > ::
    tellg ( void )
    {


      pos_type __ret = pos_type ( - 1 );
      try
 {
   if ( ! this -> fail ( ) )
     __ret = this -> rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur,
           ios_base :: in );
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      return __ret;
    }
# 784 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    seekg ( pos_type __pos )
    {


      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {

       const pos_type __p = this -> rdbuf ( ) -> pubseekpos ( __pos,
            ios_base :: in );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 817 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    seekg ( off_type __off, ios_base :: seekdir __dir )
    {


      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {

       const pos_type __p = this -> rdbuf ( ) -> pubseekoff ( __off, __dir,
            ios_base :: in );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( __cxxabiv1 :: __forced_unwind & )
 {
   this -> _M_setstate ( ios_base :: badbit );
   throw;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 851 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in, _CharT & __c )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef typename __istream_type :: int_type __int_type;

      typename __istream_type :: sentry __cerb ( __in, false );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const __int_type __cb = __in . rdbuf ( ) -> sbumpc ( );
       if ( ! _Traits :: eq_int_type ( __cb, _Traits :: eof ( ) ) )
  __c = _Traits :: to_char_type ( __cb );
       else
  __err |= ( ios_base :: eofbit | ios_base :: failbit );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __in . _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     __in . setstate ( __err );
 }
      return __in;
    }
# 883 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in, _CharT * __s )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef typename _Traits :: int_type int_type;
      typedef _CharT char_type;
      typedef ctype < _CharT > __ctype_type;

      streamsize __extracted = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      typename __istream_type :: sentry __cerb ( __in, false );
      if ( __cerb )
 {
   try
     {

       streamsize __num = __in . width ( );
       if ( __num <= 0 )
  __num = __gnu_cxx :: __numeric_traits < streamsize > :: __max;

       const __ctype_type & __ct = use_facet < __ctype_type > ( __in . getloc ( ) );

       const int_type __eof = _Traits :: eof ( );
       __streambuf_type * __sb = __in . rdbuf ( );
       int_type __c = __sb -> sgetc ( );

       while ( __extracted < __num - 1
       && ! _Traits :: eq_int_type ( __c, __eof )
       && ! __ct . is ( ctype_base :: space,
     _Traits :: to_char_type ( __c ) ) )
  {
    * __s ++ = _Traits :: to_char_type ( __c );
    ++ __extracted;
    __c = __sb -> snextc ( );
  }
       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;



       * __s = char_type ( );
       __in . width ( 0 );
     }
   catch ( __cxxabiv1 :: __forced_unwind & )
     {
       __in . _M_setstate ( ios_base :: badbit );
       throw;
     }
   catch ( ... )
     { __in . _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! __extracted )
 __err |= ios_base :: failbit;
      if ( __err )
 __in . setstate ( __err );
      return __in;
    }
# 944 "/usr/include/c++/4.4/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    ws ( basic_istream < _CharT, _Traits > & __in )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef typename __istream_type :: int_type __int_type;
      typedef ctype < _CharT > __ctype_type;

      const __ctype_type & __ct = use_facet < __ctype_type > ( __in . getloc ( ) );
      const __int_type __eof = _Traits :: eof ( );
      __streambuf_type * __sb = __in . rdbuf ( );
      __int_type __c = __sb -> sgetc ( );

      while ( ! _Traits :: eq_int_type ( __c, __eof )
      && __ct . is ( ctype_base :: space, _Traits :: to_char_type ( __c ) ) )
 __c = __sb -> snextc ( );

       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __in . setstate ( ios_base :: eofbit );
      return __in;
    }
# 971 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template class basic_istream< char, char_traits< char> > ;
# 972 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &ws(basic_istream< char, char_traits< char> > &);
# 973 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, char &);
# 974 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, char *);
# 975 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, unsigned char &);
# 976 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, signed char &);
# 977 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, unsigned char *);
# 978 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, signed char *);
# 980 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned short &);
# 981 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned &);
# 982 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long &);
# 983 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long &);
# 984 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(bool &);
# 986 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long long &);
# 987 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long long &);
# 989 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(float &);
# 990 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(double &);
# 991 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long double &);
# 992 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(void *&);
# 994 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template class basic_iostream< char, char_traits< char> > ;
# 997 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template class basic_istream< wchar_t, char_traits< wchar_t> > ;
# 998 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &ws(basic_istream< wchar_t, char_traits< wchar_t> > &);
# 999 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, wchar_t &);
# 1000 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, wchar_t *);
# 1002 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned short &);
# 1003 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned &);
# 1004 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long &);
# 1005 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long &);
# 1006 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(bool &);
# 1008 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long long &);
# 1009 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long long &);
# 1011 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(float &);
# 1012 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(double &);
# 1013 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long double &);
# 1014 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(void *&);
# 1016 "/usr/include/c++/4.4/bits/istream.tcc" 3
extern template class basic_iostream< wchar_t, char_traits< wchar_t> > ;
# 1020 "/usr/include/c++/4.4/bits/istream.tcc" 3
}
# 37 "/usr/include/c++/4.4/bits/stream_iterator.h" 3
namespace std __attribute__((visibility("default"))) {
# 40 "/usr/include/c++/4.4/bits/stream_iterator.h" 3
template < typename _Tp, typename _CharT = char,
           typename _Traits = char_traits < _CharT >, typename _Dist = ptrdiff_t >
    class istream_iterator
    : public iterator < input_iterator_tag, _Tp, _Dist, const _Tp *, const _Tp & >
    {
    public :
      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_istream < _CharT, _Traits > istream_type;

    private :
      istream_type * _M_stream;
      _Tp _M_value;
      bool _M_ok;

    public :

      istream_iterator ( )
      : _M_stream ( 0 ), _M_value ( ), _M_ok ( false ) { }


      istream_iterator ( istream_type & __s )
      : _M_stream ( & __s )
      { _M_read ( ); }

      istream_iterator ( const istream_iterator & __obj )
      : _M_stream ( __obj . _M_stream ), _M_value ( __obj . _M_value ),
        _M_ok ( __obj . _M_ok )
      { }

      const _Tp &
      operator * ( ) const
      {
 ;


 return _M_value;
      }

      const _Tp *
      operator -> ( ) const { return & ( operator * ( ) ); }

      istream_iterator &
      operator ++ ( )
      {
 ;


 _M_read ( );
 return * this;
      }

      istream_iterator
      operator ++ ( int )
      {
 ;


 istream_iterator __tmp = * this;
 _M_read ( );
 return __tmp;
      }

      bool
      _M_equal ( const istream_iterator & __x ) const
      { return ( _M_ok == __x . _M_ok ) && ( ! _M_ok || _M_stream == __x . _M_stream ); }

    private :
      void
      _M_read ( )
      {
 _M_ok = ( _M_stream && * _M_stream ) ? true : false;
 if ( _M_ok )
   {
     * _M_stream >> _M_value;
     _M_ok = * _M_stream ? true : false;
   }
      }
    };
# 121 "/usr/include/c++/4.4/bits/stream_iterator.h" 3
template < typename _Tp, typename _CharT, typename _Traits, typename _Dist >
    inline bool
    operator == ( const istream_iterator < _Tp, _CharT, _Traits, _Dist > & __x,
        const istream_iterator < _Tp, _CharT, _Traits, _Dist > & __y )
    { return __x . _M_equal ( __y ); }
# 128 "/usr/include/c++/4.4/bits/stream_iterator.h" 3
template < class _Tp, class _CharT, class _Traits, class _Dist >
    inline bool
    operator != ( const istream_iterator < _Tp, _CharT, _Traits, _Dist > & __x,
        const istream_iterator < _Tp, _CharT, _Traits, _Dist > & __y )
    { return ! __x . _M_equal ( __y ); }
# 145 "/usr/include/c++/4.4/bits/stream_iterator.h" 3
template < typename _Tp, typename _CharT = char,
           typename _Traits = char_traits < _CharT > >
    class ostream_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    public :


      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_ostream < _CharT, _Traits > ostream_type;


    private :
      ostream_type * _M_stream;
      const _CharT * _M_string;

    public :

      ostream_iterator ( ostream_type & __s ) : _M_stream ( & __s ), _M_string ( 0 ) { }
# 176 "/usr/include/c++/4.4/bits/stream_iterator.h" 3
      ostream_iterator ( ostream_type & __s, const _CharT * __c )
      : _M_stream ( & __s ), _M_string ( __c ) { }


      ostream_iterator ( const ostream_iterator & __obj )
      : _M_stream ( __obj . _M_stream ), _M_string ( __obj . _M_string ) { }



      ostream_iterator &
      operator = ( const _Tp & __value )
      {
 ;


 * _M_stream << __value;
 if ( _M_string ) * _M_stream << _M_string;
 return * this;
      }

      ostream_iterator &
      operator * ( )
      { return * this; }

      ostream_iterator &
      operator ++ ( )
      { return * this; }

      ostream_iterator &
      operator ++ ( int )
      { return * this; }
    };
# 209 "/usr/include/c++/4.4/bits/stream_iterator.h" 3
}
# 32 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
namespace thrust {
# 35 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
template<class T>
# 36 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
struct iterator_traits : public std::iterator_traits< T> {
# 39 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
};
# 43 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
struct host_space_tag { };
# 45 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
struct device_space_tag { };
# 49 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
struct no_traversal_tag { };
# 51 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
struct incrementable_traversal_tag : public no_traversal_tag {
# 52 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
};
# 54 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
struct single_pass_traversal_tag : public incrementable_traversal_tag {
# 55 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
};
# 57 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
struct forward_traversal_tag : public single_pass_traversal_tag {
# 58 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
};
# 60 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
struct bidirectional_traversal_tag : public forward_traversal_tag {
# 61 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
};
# 63 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
struct random_access_traversal_tag : public bidirectional_traversal_tag {
# 64 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
};
# 67 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
template<class Iterator> struct iterator_value;
# 69 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
template<class Iterator> struct iterator_pointer;
# 71 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
template<class Iterator> struct iterator_reference;
# 73 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
template<class Iterator> struct iterator_difference;
# 75 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
template<class Iterator> struct iterator_traversal;
# 77 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
template<class Iterator> struct iterator_space;
# 79 "/home/normal/checkout/thrust/thrust/iterator/iterator_traits.h"
}
# 21 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_spaces.h"
namespace thrust {
# 23 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_spaces.h"
namespace detail {
# 27 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_spaces.h"
struct cuda_device_space_tag : public device_space_tag { };
# 28 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_spaces.h"
struct omp_device_space_tag : public device_space_tag { };
# 31 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_spaces.h"
typedef cuda_device_space_tag default_device_space_tag;
# 38 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_spaces.h"
}
# 39 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_spaces.h"
}
# 22 "/home/normal/checkout/thrust/thrust/iterator/detail/any_space_tag.h"
namespace thrust {
# 25 "/home/normal/checkout/thrust/thrust/iterator/detail/any_space_tag.h"
struct any_space_tag {
# 28 "/home/normal/checkout/thrust/thrust/iterator/detail/any_space_tag.h"
operator host_space_tag() { return host_space_tag(); }
# 30 "/home/normal/checkout/thrust/thrust/iterator/detail/any_space_tag.h"
operator device_space_tag() { return device_space_tag(); }
# 32 "/home/normal/checkout/thrust/thrust/iterator/detail/any_space_tag.h"
operator detail::cuda_device_space_tag() { return detail::cuda_device_space_tag(); }
# 34 "/home/normal/checkout/thrust/thrust/iterator/detail/any_space_tag.h"
operator detail::omp_device_space_tag() { return detail::omp_device_space_tag(); }
# 35 "/home/normal/checkout/thrust/thrust/iterator/detail/any_space_tag.h"
};
# 37 "/home/normal/checkout/thrust/thrust/iterator/detail/any_space_tag.h"
}
# 30 "/home/normal/checkout/thrust/thrust/iterator/iterator_categories.h"
namespace thrust {
# 52 "/home/normal/checkout/thrust/thrust/iterator/iterator_categories.h"
struct input_device_iterator_tag { };
# 65 "/home/normal/checkout/thrust/thrust/iterator/iterator_categories.h"
struct output_device_iterator_tag { };
# 78 "/home/normal/checkout/thrust/thrust/iterator/iterator_categories.h"
struct forward_device_iterator_tag : public input_device_iterator_tag { };
# 91 "/home/normal/checkout/thrust/thrust/iterator/iterator_categories.h"
struct bidirectional_device_iterator_tag : public forward_device_iterator_tag { };
# 104 "/home/normal/checkout/thrust/thrust/iterator/iterator_categories.h"
struct random_access_device_iterator_tag : public bidirectional_device_iterator_tag { };
# 118 "/home/normal/checkout/thrust/thrust/iterator/iterator_categories.h"
typedef std::input_iterator_tag input_host_iterator_tag;
# 132 "/home/normal/checkout/thrust/thrust/iterator/iterator_categories.h"
typedef std::output_iterator_tag output_host_iterator_tag;
# 146 "/home/normal/checkout/thrust/thrust/iterator/iterator_categories.h"
typedef std::forward_iterator_tag forward_host_iterator_tag;
# 160 "/home/normal/checkout/thrust/thrust/iterator/iterator_categories.h"
typedef std::bidirectional_iterator_tag bidirectional_host_iterator_tag;
# 174 "/home/normal/checkout/thrust/thrust/iterator/iterator_categories.h"
typedef std::random_access_iterator_tag random_access_host_iterator_tag;
# 179 "/home/normal/checkout/thrust/thrust/iterator/iterator_categories.h"
}
# 21 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
namespace thrust {
# 23 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
namespace detail {
# 27 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
struct cuda_device_iterator_tag { };
# 29 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
struct input_cuda_device_iterator_tag : public cuda_device_iterator_tag {
# 32 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
operator input_device_iterator_tag() { return input_device_iterator_tag(); }
# 33 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
};
# 35 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
struct output_cuda_device_iterator_tag : public cuda_device_iterator_tag {
# 38 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
operator output_device_iterator_tag() { return output_device_iterator_tag(); }
# 39 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
};
# 41 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
struct forward_cuda_device_iterator_tag : public input_cuda_device_iterator_tag {
# 44 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
operator forward_device_iterator_tag() { return forward_device_iterator_tag(); }
# 45 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
};
# 47 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
struct bidirectional_cuda_device_iterator_tag : public forward_cuda_device_iterator_tag {
# 50 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
operator bidirectional_device_iterator_tag() { return bidirectional_device_iterator_tag(); }
# 51 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
};
# 53 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
struct random_access_cuda_device_iterator_tag : public bidirectional_cuda_device_iterator_tag {
# 56 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
operator random_access_device_iterator_tag() { return random_access_device_iterator_tag(); }
# 57 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
};
# 61 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
struct omp_device_iterator_tag { };
# 63 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
struct input_omp_device_iterator_tag : public omp_device_iterator_tag {
# 66 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
operator input_device_iterator_tag() { return input_device_iterator_tag(); }
# 67 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
};
# 69 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
struct output_omp_device_iterator_tag : public omp_device_iterator_tag {
# 72 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
operator output_device_iterator_tag() { return output_device_iterator_tag(); }
# 73 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
};
# 75 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
struct forward_omp_device_iterator_tag : public input_omp_device_iterator_tag {
# 78 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
operator forward_device_iterator_tag() { return forward_device_iterator_tag(); }
# 79 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
};
# 81 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
struct bidirectional_omp_device_iterator_tag : public forward_omp_device_iterator_tag {
# 84 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
operator bidirectional_device_iterator_tag() { return bidirectional_device_iterator_tag(); }
# 85 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
};
# 87 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
struct random_access_omp_device_iterator_tag : public bidirectional_omp_device_iterator_tag {
# 90 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
operator random_access_device_iterator_tag() { return random_access_device_iterator_tag(); }
# 91 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
};
# 93 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
}
# 94 "/home/normal/checkout/thrust/thrust/iterator/detail/backend_iterator_categories.h"
}
# 23 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
struct input_universal_iterator_tag {
# 30 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator input_host_iterator_tag() { return input_host_iterator_tag(); }
# 32 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator detail::input_cuda_device_iterator_tag() { return detail::input_cuda_device_iterator_tag(); }
# 34 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator detail::input_omp_device_iterator_tag() { return detail::input_omp_device_iterator_tag(); }
# 35 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
};
# 37 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
struct output_universal_iterator_tag {
# 39 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator output_host_iterator_tag() { return output_host_iterator_tag(); }
# 41 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator detail::output_cuda_device_iterator_tag() { return detail::output_cuda_device_iterator_tag(); }
# 43 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator detail::output_omp_device_iterator_tag() { return detail::output_omp_device_iterator_tag(); }
# 44 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
};
# 46 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
struct forward_universal_iterator_tag : public input_universal_iterator_tag {
# 49 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator forward_host_iterator_tag() { return forward_host_iterator_tag(); }
# 51 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator detail::forward_cuda_device_iterator_tag() { return detail::forward_cuda_device_iterator_tag(); }
# 53 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator detail::forward_omp_device_iterator_tag() { return detail::forward_omp_device_iterator_tag(); }
# 54 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
};
# 56 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
struct bidirectional_universal_iterator_tag : public forward_universal_iterator_tag {
# 59 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator bidirectional_host_iterator_tag() { return bidirectional_host_iterator_tag(); }
# 61 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator detail::bidirectional_cuda_device_iterator_tag() { return detail::bidirectional_cuda_device_iterator_tag(); }
# 63 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator detail::bidirectional_omp_device_iterator_tag() { return detail::bidirectional_omp_device_iterator_tag(); }
# 64 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
};
# 71 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
struct random_access_universal_iterator_tag {
# 74 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator bidirectional_universal_iterator_tag() { return bidirectional_universal_iterator_tag(); }
# 76 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator random_access_host_iterator_tag() { return random_access_host_iterator_tag(); }
# 78 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator detail::random_access_cuda_device_iterator_tag() { return detail::random_access_cuda_device_iterator_tag(); }
# 80 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
operator detail::random_access_omp_device_iterator_tag() { return detail::random_access_omp_device_iterator_tag(); }
# 81 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
};
# 84 "/home/normal/checkout/thrust/thrust/iterator/detail/universal_categories.h"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
namespace thrust {
# 49 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> class device_reference;
# 51 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
namespace detail {
# 54 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class _Tp, _Tp __v>
# 55 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct integral_constant {
# 57 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
static const _Tp value = __v;
# 58 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef _Tp value_type;
# 59 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef detail::integral_constant< _Tp, __v> type;
# 60 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 63 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef integral_constant< bool, true> true_type;
# 66 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef integral_constant< bool, false> false_type;
# 69 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_integral : public false_type { };
# 70 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< bool> : public true_type { };
# 71 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< char> : public true_type { };
# 72 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< signed char> : public true_type { };
# 73 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< unsigned char> : public true_type { };
# 74 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< short> : public true_type { };
# 75 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< unsigned short> : public true_type { };
# 76 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< int> : public true_type { };
# 77 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< unsigned> : public true_type { };
# 78 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< long> : public true_type { };
# 79 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< unsigned long> : public true_type { };
# 80 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< long long> : public true_type { };
# 81 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< unsigned long long> : public true_type { };
# 82 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< const bool> : public true_type { };
# 83 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< const char> : public true_type { };
# 84 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< const unsigned char> : public true_type { };
# 85 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< const short> : public true_type { };
# 86 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< const unsigned short> : public true_type { };
# 87 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< const int> : public true_type { };
# 88 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< const unsigned> : public true_type { };
# 89 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< const long> : public true_type { };
# 90 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< const unsigned long> : public true_type { };
# 91 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< const long long> : public true_type { };
# 92 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_integral< const unsigned long long> : public true_type { };
# 94 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_floating_point : public false_type { };
# 95 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_floating_point< float> : public true_type { };
# 96 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_floating_point< double> : public true_type { };
# 97 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_floating_point< long double> : public true_type { };
# 99 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_arithmetic : public is_integral< T> { };
# 100 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_arithmetic< float> : public true_type { };
# 101 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_arithmetic< double> : public true_type { };
# 102 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_arithmetic< const float> : public true_type { };
# 103 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_arithmetic< const double> : public true_type { };
# 105 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_pointer : public false_type { };
# 106 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_pointer< T *> : public true_type { };
# 108 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_device_ptr : public false_type { };
# 110 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_void : public false_type { };
# 111 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct is_void< void> : public true_type { };
# 114 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
namespace tt_detail {
# 118 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
}
# 120 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_pod : public integral_constant< bool, (((is_void< T> ::value || is_pointer< T> ::value) || is_arithmetic< T> ::value) || __is_pod(T))> {
# 134 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 137 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct has_trivial_constructor : public integral_constant< bool, (is_pod< T> ::value || __has_trivial_constructor(T))> {
# 150 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 159 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct has_trivial_copy : public is_pod< T> { };
# 160 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct has_trivial_copy_constructor : public is_pod< T> { };
# 162 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct has_trivial_destructor : public is_pod< T> { };
# 163 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct has_trivial_assign : public is_pod< T> { };
# 165 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_const : public false_type { };
# 166 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_const< const T> : public true_type { };
# 168 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_volatile : public false_type { };
# 169 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_volatile< volatile T> : public true_type { };
# 171 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 172 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct add_const {
# 174 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef const T type;
# 175 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 177 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 178 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct remove_const {
# 180 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef T type;
# 181 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 183 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 184 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct remove_const< const T> {
# 186 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef T type;
# 187 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 189 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 190 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct add_volatile {
# 192 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef volatile T type;
# 193 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 195 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 196 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct remove_volatile {
# 198 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef T type;
# 199 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 201 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 202 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct remove_volatile< volatile T> {
# 204 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef T type;
# 205 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 207 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 208 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct add_cv {
# 210 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef const volatile T type;
# 211 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 213 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 214 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct remove_cv {
# 216 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef typename remove_const< typename remove_volatile< T> ::type> ::type type;
# 217 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 220 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_reference : public false_type { };
# 221 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_reference< T &> : public true_type { };
# 223 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_device_reference : public false_type { };
# 224 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_device_reference< device_reference< T> > : public true_type { };
# 228 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class _Tp, bool __T7 = (is_void< _Tp> ::value || is_reference< _Tp> ::value)>
# 229 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct __add_reference_helper {
# 230 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef _Tp &type; };
# 232 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class _Tp>
# 233 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct __add_reference_helper< _Tp, true> {
# 234 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef _Tp type; };
# 236 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class _Tp>
# 237 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct add_reference : public __add_reference_helper< _Tp, (is_void< _Tp> ::value || is_reference< _Tp> ::value)> {
# 238 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 240 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 241 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct remove_reference {
# 243 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef T type;
# 244 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 246 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 247 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct remove_reference< T &> {
# 249 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef T type;
# 250 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 252 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T1, class T2>
# 253 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct is_same : public false_type {
# 256 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 258 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 259 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct is_same< T, T> : public true_type {
# 262 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 265 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
namespace tt_detail {
# 268 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 269 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct is_int_or_cref {
# 271 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef typename remove_reference< T> ::type type_sans_ref;
# 272 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
static const bool value = (is_integral< T> ::value || ((is_integral< typename remove_reference< T> ::type> ::value && is_const< typename remove_reference< T> ::type> ::value) && (!is_volatile< typename remove_reference< T> ::type> ::value)));
# 276 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 278 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct any_conversion {
# 280 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> any_conversion(const volatile T &);
# 281 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> any_conversion(T &);
# 282 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 284 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class From, class To>
# 285 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct is_convertible_sfinae {
# 288 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
private: typedef char one_byte;
# 289 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef struct { char two_chars[2]; } two_bytes;
# 291 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
static one_byte test(To, int);
# 292 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
static two_bytes test(any_conversion, ...);
# 293 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
static From m_from;
# 296 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
public: static const bool value = (sizeof(test(m_from, 0)) == (1));
# 297 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 300 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class From, class To>
# 301 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct is_convertible_needs_simple_test {
# 303 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
static const bool from_is_void = (is_void< From> ::value);
# 304 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
static const bool to_is_void = (is_void< To> ::value);
# 305 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
static const bool from_is_float = (is_floating_point< typename remove_reference< From> ::type> ::value);
# 306 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
static const bool to_is_int_or_cref = (is_int_or_cref< To> ::value);
# 308 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
static const bool value = ((from_is_void || to_is_void) || (from_is_float && to_is_int_or_cref));
# 309 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 312 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class From, class To, bool
# 313 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
__T8 = is_convertible_needs_simple_test< From, To> ::value>
# 314 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct is_convertible {
# 316 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
static const bool value = (is_void< To> ::value || (is_int_or_cref< To> ::value && (!is_void< From> ::value)));
# 319 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 322 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class From, class To>
# 323 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct is_convertible< From, To, false> {
# 325 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
static const bool value = (is_convertible_sfinae< typename add_reference< From> ::type, To> ::value);
# 327 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 330 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
}
# 332 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class From, class To>
# 333 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct is_convertible : public integral_constant< bool, tt_detail::is_convertible< From, To, tt_detail::is_convertible_needs_simple_test< From, To> ::value> ::value> {
# 336 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 339 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T1, class T2>
# 340 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct is_one_convertible_to_the_other : public integral_constant< bool, (is_convertible< T1, T2> ::value || is_convertible< T2, T1> ::value)> {
# 345 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 350 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class Condition1, class Condition2, class Condition3 = false_type>
# 351 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct or_ : public integral_constant< bool, ((Condition1::value || Condition2::value) || Condition3::value)> {
# 354 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 356 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class Condition1, class Condition2>
# 357 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct and_ : public integral_constant< bool, (Condition1::value && Condition2::value)> {
# 360 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 362 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class Boolean>
# 363 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct not_ : public integral_constant< bool, (!Boolean::value)> {
# 366 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 368 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<bool __T9, class Then, class Else>
# 369 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct eval_if {
# 371 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 373 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class Then, class Else>
# 374 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct eval_if< true, Then, Else> {
# 376 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef typename Then::type type;
# 377 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 379 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class Then, class Else>
# 380 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct eval_if< false, Then, Else> {
# 382 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef typename Else::type type;
# 383 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 385 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 388 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct identity_ {
# 390 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef T type;
# 391 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 393 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<bool __T10, class T = void> struct enable_if { };
# 394 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct enable_if< true, T> { typedef T type; };
# 397 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T1, class T2>
# 398 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct enable_if_convertible : public enable_if< is_convertible< T1, T2> ::value, void> {
# 400 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 403 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 404 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct is_numeric : public and_< is_convertible< int, T> , is_convertible< T, int> > {
# 410 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 413 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class > struct is_reference_to_const : public false_type { };
# 414 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct is_reference_to_const< const T &> : public true_type { };
# 419 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
namespace tt_detail {
# 422 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T> struct make_unsigned_simple;
# 424 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct make_unsigned_simple< char> { typedef unsigned char type; };
# 425 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct make_unsigned_simple< signed char> { typedef signed char type; };
# 426 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct make_unsigned_simple< unsigned char> { typedef unsigned char type; };
# 427 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct make_unsigned_simple< short> { typedef unsigned short type; };
# 428 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct make_unsigned_simple< unsigned short> { typedef unsigned short type; };
# 429 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct make_unsigned_simple< int> { typedef unsigned type; };
# 430 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct make_unsigned_simple< unsigned> { typedef unsigned type; };
# 431 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct make_unsigned_simple< long> { typedef unsigned long type; };
# 432 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct make_unsigned_simple< unsigned long> { typedef unsigned long type; };
# 433 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct make_unsigned_simple< long long> { typedef unsigned long long type; };
# 434 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<> struct make_unsigned_simple< unsigned long long> { typedef unsigned long long type; };
# 436 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 437 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct make_unsigned_base {
# 440 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef typename remove_cv< T> ::type remove_cv_t;
# 443 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef typename make_unsigned_simple< typename remove_cv< T> ::type> ::type unsigned_remove_cv_t;
# 463 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef typename eval_if< (is_const< T> ::value && is_volatile< T> ::value), add_cv< typename make_unsigned_simple< typename remove_cv< T> ::type> ::type> , eval_if< is_const< T> ::value, add_const< typename make_unsigned_simple< typename remove_cv< T> ::type> ::type> , eval_if< is_volatile< T> ::value, add_volatile< typename make_unsigned_simple< typename remove_cv< T> ::type> ::type> , identity_< typename make_unsigned_simple< typename remove_cv< T> ::type> ::type> > > > ::type type;
# 464 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 466 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
}
# 468 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
template<class T>
# 469 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct make_unsigned : public tt_detail::make_unsigned_base< T> {
# 471 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 473 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
struct largest_available_float {
# 482 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
typedef double type;
# 484 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
};
# 486 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
}
# 488 "/home/normal/checkout/thrust/thrust/detail/type_traits.h"
}
# 23 "/home/normal/checkout/thrust/thrust/iterator/detail/device_iterator_category_to_backend_space.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/iterator/detail/device_iterator_category_to_backend_space.h"
namespace detail {
# 29 "/home/normal/checkout/thrust/thrust/iterator/detail/device_iterator_category_to_backend_space.h"
template<class DeviceCategory>
# 30 "/home/normal/checkout/thrust/thrust/iterator/detail/device_iterator_category_to_backend_space.h"
struct device_iterator_category_to_backend_space : public eval_if< is_convertible< DeviceCategory, cuda_device_iterator_tag> ::value, identity_< cuda_device_space_tag> , eval_if< is_convertible< DeviceCategory, omp_device_iterator_tag> ::value, identity_< omp_device_space_tag> , eval_if< is_convertible< DeviceCategory, device_space_tag> ::value, identity_< device_space_tag> , identity_< void> > > > {
# 54 "/home/normal/checkout/thrust/thrust/iterator/detail/device_iterator_category_to_backend_space.h"
};
# 56 "/home/normal/checkout/thrust/thrust/iterator/detail/device_iterator_category_to_backend_space.h"
}
# 58 "/home/normal/checkout/thrust/thrust/iterator/detail/device_iterator_category_to_backend_space.h"
}
# 24 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_space.h"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_space.h"
struct random_access_universal_iterator_tag;
# 29 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_space.h"
struct input_universal_iterator_tag;
# 30 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_space.h"
struct output_universal_iterator_tag;
# 32 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_space.h"
namespace detail {
# 36 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_space.h"
template<class > struct is_iterator_space;
# 38 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_space.h"
template<class > struct device_iterator_category_to_backend_space;
# 40 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_space.h"
template<class Category>
# 41 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_space.h"
struct iterator_category_to_space : public eval_if< or_< is_convertible< Category, input_universal_iterator_tag> , is_convertible< Category, output_universal_iterator_tag> , integral_constant< bool, false> > ::value, identity_< any_space_tag> , eval_if< or_< is_convertible< Category, std::input_iterator_tag> , is_convertible< Category, std::output_iterator_tag> , integral_constant< bool, false> > ::value, identity_< host_space_tag> , eval_if< or_< is_convertible< Category, input_device_iterator_tag> , is_convertible< Category, output_device_iterator_tag> , integral_constant< bool, false> > ::value, device_iterator_category_to_backend_space< Category> , void> > > {
# 75 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_space.h"
};
# 78 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_space.h"
template<class CategoryOrTraversal>
# 79 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_space.h"
struct iterator_category_or_traversal_to_space : public eval_if< is_iterator_space< CategoryOrTraversal> ::value, identity_< CategoryOrTraversal> , iterator_category_to_space< CategoryOrTraversal> > {
# 86 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_space.h"
};
# 88 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_space.h"
}
# 90 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_space.h"
}
# 24 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
struct bidirectional_universal_iterator_tag;
# 29 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
struct forward_universal_iterator_tag;
# 31 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
namespace detail {
# 35 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
template<class > struct is_iterator_space;
# 36 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
template<class > struct is_iterator_traversal;
# 39 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
using namespace detail;
# 41 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
template<class Category>
# 42 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
struct host_space_category_to_traversal : public eval_if< is_convertible< Category, std::random_access_iterator_tag> ::value, identity_< random_access_traversal_tag> , eval_if< is_convertible< Category, std::bidirectional_iterator_tag> ::value, identity_< bidirectional_traversal_tag> , eval_if< is_convertible< Category, std::forward_iterator_tag> ::value, identity_< forward_traversal_tag> , eval_if< is_convertible< Category, std::input_iterator_tag> ::value, identity_< single_pass_traversal_tag> , eval_if< is_convertible< Category, std::output_iterator_tag> ::value, identity_< incrementable_traversal_tag> , void> > > > > {
# 65 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
};
# 69 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
template<class Category>
# 70 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
struct device_space_category_to_traversal : public eval_if< is_convertible< Category, random_access_device_iterator_tag> ::value, identity_< random_access_traversal_tag> , eval_if< is_convertible< Category, bidirectional_device_iterator_tag> ::value, identity_< bidirectional_traversal_tag> , eval_if< is_convertible< Category, forward_device_iterator_tag> ::value, identity_< forward_traversal_tag> , eval_if< is_convertible< Category, input_device_iterator_tag> ::value, identity_< single_pass_traversal_tag> , eval_if< is_convertible< Category, output_device_iterator_tag> ::value, identity_< incrementable_traversal_tag> , void> > > > > {
# 93 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
};
# 97 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
template<class Category>
# 98 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
struct any_space_category_to_traversal : public eval_if< is_convertible< Category, random_access_universal_iterator_tag> ::value, identity_< random_access_traversal_tag> , eval_if< is_convertible< Category, bidirectional_universal_iterator_tag> ::value, identity_< bidirectional_traversal_tag> , eval_if< is_convertible< Category, forward_universal_iterator_tag> ::value, identity_< forward_traversal_tag> , eval_if< is_convertible< Category, input_universal_iterator_tag> ::value, identity_< single_pass_traversal_tag> , eval_if< is_convertible< Category, output_universal_iterator_tag> ::value, identity_< incrementable_traversal_tag> , void> > > > > {
# 123 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
};
# 126 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
template<class Category>
# 127 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
struct category_to_traversal : public eval_if< or_< is_convertible< Category, input_universal_iterator_tag> , is_convertible< Category, output_universal_iterator_tag> , integral_constant< bool, false> > ::value, any_space_category_to_traversal< Category> , eval_if< or_< is_convertible< Category, std::input_iterator_tag> , is_convertible< Category, std::output_iterator_tag> , integral_constant< bool, false> > ::value, host_space_category_to_traversal< Category> , eval_if< or_< is_convertible< Category, input_device_iterator_tag> , is_convertible< Category, output_device_iterator_tag> , integral_constant< bool, false> > ::value, device_space_category_to_traversal< Category> , void> > > {
# 160 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
};
# 163 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
template<class CategoryOrTraversal>
# 164 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
struct iterator_category_to_traversal : public eval_if< is_iterator_traversal< CategoryOrTraversal> ::value, identity_< CategoryOrTraversal> , category_to_traversal< CategoryOrTraversal> > {
# 171 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
};
# 174 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
}
# 176 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_category_to_traversal.h"
}
# 29 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
namespace __gnu_cxx {
# 32 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
template<class Iterator, class Container> class __normal_iterator;
# 34 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
}
# 48 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
namespace thrust {
# 51 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
template<class Iterator>
# 52 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
struct iterator_value {
# 54 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
typedef typename iterator_traits< Iterator> ::value_type type;
# 55 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
};
# 58 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
template<class Iterator>
# 59 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
struct iterator_pointer {
# 61 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
typedef typename iterator_traits< Iterator> ::pointer type;
# 62 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
};
# 65 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
template<class Iterator>
# 66 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
struct iterator_reference {
# 68 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
typedef typename iterator_traits< Iterator> ::reference type;
# 69 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
};
# 72 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
template<class Iterator>
# 73 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
struct iterator_difference {
# 75 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
typedef typename iterator_traits< Iterator> ::difference_type type;
# 76 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
};
# 79 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
template<class Iterator>
# 80 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
struct iterator_space : public detail::iterator_category_to_space< typename iterator_traits< Iterator> ::iterator_category> {
# 85 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
};
# 88 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
template<class Iterator>
# 89 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
struct iterator_traversal : public detail::iterator_category_to_traversal< typename iterator_traits< Iterator> ::iterator_category> {
# 94 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
};
# 96 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
namespace detail {
# 99 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
template<class T>
# 100 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
struct is_iterator_traversal : public is_convertible< T, incrementable_traversal_tag> {
# 103 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
};
# 106 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
template<class T>
# 107 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
struct is_iterator_space : public or_< is_convertible< T, any_space_tag> , or_< is_convertible< T, host_space_tag> , is_convertible< T, device_space_tag> , integral_constant< bool, false> > , integral_constant< bool, false> > {
# 116 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
};
# 120 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
template<class T>
# 121 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
struct is_gnu_normal_iterator : public false_type {
# 124 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
};
# 128 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
template<class Iterator, class Container>
# 129 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
struct is_gnu_normal_iterator< __gnu_cxx::__normal_iterator< Iterator, Container> > : public true_type {
# 132 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
};
# 152 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
template<class T>
# 153 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
struct is_trivial_iterator : public integral_constant< bool, ((is_pointer< T> ::value | is_device_ptr< T> ::value) | is_gnu_normal_iterator< T> ::value)> {
# 164 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
};
# 167 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
template<class Space1, class Space2>
# 168 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
struct are_spaces_interoperable : public false_type {
# 170 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
};
# 173 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
template<> struct are_spaces_interoperable< host_space_tag, omp_device_space_tag> : public true_type {
# 177 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
};
# 180 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
template<> struct are_spaces_interoperable< omp_device_space_tag, host_space_tag> : public true_type {
# 184 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
};
# 186 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
}
# 188 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_traits.inl"
}
# 29 "/home/normal/checkout/thrust/thrust/reduce.h"
namespace thrust {
# 75 "/home/normal/checkout/thrust/thrust/reduce.h"
template<class InputIterator> typename iterator_traits< InputIterator> ::value_type reduce(InputIterator, InputIterator);
# 118 "/home/normal/checkout/thrust/thrust/reduce.h"
template<class InputIterator, class T> T reduce(InputIterator, InputIterator, T);
# 168 "/home/normal/checkout/thrust/thrust/reduce.h"
template<class InputIterator, class
# 169 "/home/normal/checkout/thrust/thrust/reduce.h"
T, class
# 170 "/home/normal/checkout/thrust/thrust/reduce.h"
BinaryFunction> T
# 168 "/home/normal/checkout/thrust/thrust/reduce.h"
reduce(InputIterator, InputIterator, T, BinaryFunction);
# 223 "/home/normal/checkout/thrust/thrust/reduce.h"
template<class InputIterator1, class
# 224 "/home/normal/checkout/thrust/thrust/reduce.h"
InputIterator2, class
# 225 "/home/normal/checkout/thrust/thrust/reduce.h"
OutputIterator1, class
# 226 "/home/normal/checkout/thrust/thrust/reduce.h"
OutputIterator2> pair< OutputIterator1, OutputIterator2>
# 223 "/home/normal/checkout/thrust/thrust/reduce.h"
reduce_by_key(InputIterator1, InputIterator1, InputIterator2, OutputIterator1, OutputIterator2);
# 284 "/home/normal/checkout/thrust/thrust/reduce.h"
template<class InputIterator1, class
# 285 "/home/normal/checkout/thrust/thrust/reduce.h"
InputIterator2, class
# 286 "/home/normal/checkout/thrust/thrust/reduce.h"
OutputIterator1, class
# 287 "/home/normal/checkout/thrust/thrust/reduce.h"
OutputIterator2, class
# 288 "/home/normal/checkout/thrust/thrust/reduce.h"
BinaryPredicate> pair< OutputIterator1, OutputIterator2>
# 284 "/home/normal/checkout/thrust/thrust/reduce.h"
reduce_by_key(InputIterator1, InputIterator1, InputIterator2, OutputIterator1, OutputIterator2, BinaryPredicate);
# 354 "/home/normal/checkout/thrust/thrust/reduce.h"
template<class InputIterator1, class
# 355 "/home/normal/checkout/thrust/thrust/reduce.h"
InputIterator2, class
# 356 "/home/normal/checkout/thrust/thrust/reduce.h"
OutputIterator1, class
# 357 "/home/normal/checkout/thrust/thrust/reduce.h"
OutputIterator2, class
# 358 "/home/normal/checkout/thrust/thrust/reduce.h"
BinaryPredicate, class
# 359 "/home/normal/checkout/thrust/thrust/reduce.h"
BinaryFunction> pair< OutputIterator1, OutputIterator2>
# 354 "/home/normal/checkout/thrust/thrust/reduce.h"
reduce_by_key(InputIterator1, InputIterator1, InputIterator2, OutputIterator1, OutputIterator2, BinaryPredicate, BinaryFunction);
# 372 "/home/normal/checkout/thrust/thrust/reduce.h"
}
# 28 "/home/normal/checkout/thrust/thrust/functional.h"
namespace thrust {
# 34 "/home/normal/checkout/thrust/thrust/functional.h"
template<class Operation> struct unary_traits;
# 36 "/home/normal/checkout/thrust/thrust/functional.h"
template<class Operation> struct binary_traits;
# 68 "/home/normal/checkout/thrust/thrust/functional.h"
template<class Argument, class
# 69 "/home/normal/checkout/thrust/thrust/functional.h"
Result>
# 70 "/home/normal/checkout/thrust/thrust/functional.h"
struct unary_function : public std::unary_function< Argument, Result> {
# 73 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 100 "/home/normal/checkout/thrust/thrust/functional.h"
template<class Argument1, class
# 101 "/home/normal/checkout/thrust/thrust/functional.h"
Argument2, class
# 102 "/home/normal/checkout/thrust/thrust/functional.h"
Result>
# 103 "/home/normal/checkout/thrust/thrust/functional.h"
struct binary_function : public std::binary_function< Argument1, Argument2, Result> {
# 106 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 154 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 155 "/home/normal/checkout/thrust/thrust/functional.h"
struct plus : public binary_function< T, T, T> {
# 159 "/home/normal/checkout/thrust/thrust/functional.h"
T operator()(const T &lhs, const T &rhs) const { return lhs + rhs; }
# 160 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 195 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 196 "/home/normal/checkout/thrust/thrust/functional.h"
struct minus : public binary_function< T, T, T> {
# 200 "/home/normal/checkout/thrust/thrust/functional.h"
T operator()(const T &lhs, const T &rhs) const { return lhs - rhs; }
# 201 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 236 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 237 "/home/normal/checkout/thrust/thrust/functional.h"
struct multiplies : public binary_function< T, T, T> {
# 241 "/home/normal/checkout/thrust/thrust/functional.h"
T operator()(const T &lhs, const T &rhs) const { return lhs * rhs; }
# 242 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 277 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 278 "/home/normal/checkout/thrust/thrust/functional.h"
struct divides : public binary_function< T, T, T> {
# 282 "/home/normal/checkout/thrust/thrust/functional.h"
T operator()(const T &lhs, const T &rhs) const { return lhs / rhs; }
# 283 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 318 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 319 "/home/normal/checkout/thrust/thrust/functional.h"
struct modulus : public binary_function< T, T, T> {
# 323 "/home/normal/checkout/thrust/thrust/functional.h"
T operator()(const T &lhs, const T &rhs) const { return lhs % rhs; }
# 324 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 356 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 357 "/home/normal/checkout/thrust/thrust/functional.h"
struct negate : public unary_function< T, T> {
# 361 "/home/normal/checkout/thrust/thrust/functional.h"
T operator()(const T &x) const { return -x; }
# 362 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 396 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 397 "/home/normal/checkout/thrust/thrust/functional.h"
struct absolute_value : public unary_function< T, T> {
# 401 "/home/normal/checkout/thrust/thrust/functional.h"
T operator()(const T &x) const { return (x < ((T)(0))) ? (-x) : x; }
# 402 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 423 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 424 "/home/normal/checkout/thrust/thrust/functional.h"
struct equal_to : public binary_function< T, T, bool> {
# 428 "/home/normal/checkout/thrust/thrust/functional.h"
bool operator()(const T &lhs, const T &rhs) const { return lhs == rhs; }
# 429 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 442 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 443 "/home/normal/checkout/thrust/thrust/functional.h"
struct not_equal_to : public binary_function< T, T, bool> {
# 447 "/home/normal/checkout/thrust/thrust/functional.h"
bool operator()(const T &lhs, const T &rhs) const { return lhs != rhs; }
# 448 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 461 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 462 "/home/normal/checkout/thrust/thrust/functional.h"
struct greater : public binary_function< T, T, bool> {
# 466 "/home/normal/checkout/thrust/thrust/functional.h"
bool operator()(const T &lhs, const T &rhs) const { return lhs > rhs; }
# 467 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 480 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 481 "/home/normal/checkout/thrust/thrust/functional.h"
struct less : public binary_function< T, T, bool> {
# 485 "/home/normal/checkout/thrust/thrust/functional.h"
bool operator()(const T &lhs, const T &rhs) const { return lhs < rhs; }
# 486 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 499 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 500 "/home/normal/checkout/thrust/thrust/functional.h"
struct greater_equal : public binary_function< T, T, bool> {
# 504 "/home/normal/checkout/thrust/thrust/functional.h"
bool operator()(const T &lhs, const T &rhs) const { return lhs >= rhs; }
# 505 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 518 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 519 "/home/normal/checkout/thrust/thrust/functional.h"
struct less_equal : public binary_function< T, T, bool> {
# 523 "/home/normal/checkout/thrust/thrust/functional.h"
bool operator()(const T &lhs, const T &rhs) const { return lhs <= rhs; }
# 524 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 546 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 547 "/home/normal/checkout/thrust/thrust/functional.h"
struct logical_and : public binary_function< T, T, bool> {
# 551 "/home/normal/checkout/thrust/thrust/functional.h"
bool operator()(const T &lhs, const T &rhs) const { return lhs && rhs; }
# 552 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 565 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 566 "/home/normal/checkout/thrust/thrust/functional.h"
struct logical_or : public binary_function< T, T, bool> {
# 570 "/home/normal/checkout/thrust/thrust/functional.h"
bool operator()(const T &lhs, const T &rhs) const { return lhs || rhs; }
# 571 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 598 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 599 "/home/normal/checkout/thrust/thrust/functional.h"
struct logical_not : public unary_function< T, bool> {
# 603 "/home/normal/checkout/thrust/thrust/functional.h"
bool operator()(const T &x) const { return !x; }
# 604 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 634 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 635 "/home/normal/checkout/thrust/thrust/functional.h"
struct identity : public unary_function< T, T> {
# 639 "/home/normal/checkout/thrust/thrust/functional.h"
const T &operator()(const T &x) const { return x; }
# 640 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 666 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 667 "/home/normal/checkout/thrust/thrust/functional.h"
struct maximum : public binary_function< T, T, T> {
# 671 "/home/normal/checkout/thrust/thrust/functional.h"
const T &operator()(const T &lhs, const T &rhs) const { return (lhs > rhs) ? lhs : rhs; }
# 672 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 698 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T>
# 699 "/home/normal/checkout/thrust/thrust/functional.h"
struct minimum : public binary_function< T, T, T> {
# 703 "/home/normal/checkout/thrust/thrust/functional.h"
const T &operator()(const T &lhs, const T &rhs) const { return (lhs < rhs) ? lhs : rhs; }
# 704 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 724 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T1, class T2>
# 725 "/home/normal/checkout/thrust/thrust/functional.h"
struct project1st : public binary_function< T1, T2, T1> {
# 729 "/home/normal/checkout/thrust/thrust/functional.h"
const T1 &operator()(const T1 &lhs, const T2 &rhs) const { return lhs; }
# 730 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 750 "/home/normal/checkout/thrust/thrust/functional.h"
template<class T1, class T2>
# 751 "/home/normal/checkout/thrust/thrust/functional.h"
struct project2nd : public binary_function< T1, T2, T2> {
# 755 "/home/normal/checkout/thrust/thrust/functional.h"
const T2 &operator()(const T1 &lhs, const T2 &rhs) const { return rhs; }
# 756 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 779 "/home/normal/checkout/thrust/thrust/functional.h"
template<class Predicate>
# 780 "/home/normal/checkout/thrust/thrust/functional.h"
struct unary_negate : public unary_function< typename Predicate::argument_type, bool> {
# 784 "/home/normal/checkout/thrust/thrust/functional.h"
explicit unary_negate(Predicate p) : pred(p) { }
# 789 "/home/normal/checkout/thrust/thrust/functional.h"
bool operator()(const typename Predicate::argument_type &x) { return !(pred)(x); }
# 791 "/home/normal/checkout/thrust/thrust/functional.h"
Predicate pred;
# 792 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 810 "/home/normal/checkout/thrust/thrust/functional.h"
template<class Predicate> unary_negate< Predicate> not1(const Predicate &);
# 824 "/home/normal/checkout/thrust/thrust/functional.h"
template<class Predicate>
# 825 "/home/normal/checkout/thrust/thrust/functional.h"
struct binary_negate : public binary_function< typename Predicate::first_argument_type, typename Predicate::second_argument_type, bool> {
# 831 "/home/normal/checkout/thrust/thrust/functional.h"
explicit binary_negate(Predicate p) : pred(p) { }
# 836 "/home/normal/checkout/thrust/thrust/functional.h"
bool operator()(const typename Predicate::first_argument_type &x, const typename Predicate::second_argument_type &y)
# 837 "/home/normal/checkout/thrust/thrust/functional.h"
{
# 838 "/home/normal/checkout/thrust/thrust/functional.h"
return !(pred)(x, y);
# 839 "/home/normal/checkout/thrust/thrust/functional.h"
}
# 841 "/home/normal/checkout/thrust/thrust/functional.h"
Predicate pred;
# 842 "/home/normal/checkout/thrust/thrust/functional.h"
};
# 860 "/home/normal/checkout/thrust/thrust/functional.h"
template<class BinaryPredicate> binary_negate< BinaryPredicate> not2(const BinaryPredicate &);
# 867 "/home/normal/checkout/thrust/thrust/functional.h"
}
# 19 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
namespace thrust {
# 22 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
namespace detail {
# 25 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
template<class Operation> struct unary_traits_imp;
# 28 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
template<class Operation>
# 29 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
struct unary_traits_imp< Operation *> {
# 31 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Operation function_type;
# 32 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef const function_type &param_type;
# 33 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef typename Operation::result_type result_type;
# 34 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef typename Operation::argument_type argument_type;
# 35 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
};
# 37 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
template<class Result, class Argument>
# 38 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
struct unary_traits_imp< Result (*)(Argument)> {
# 40 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Result (*function_type)(Argument);
# 41 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Result (*param_type)(Argument);
# 42 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Result result_type;
# 43 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Argument argument_type;
# 44 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
};
# 46 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
template<class Operation> struct binary_traits_imp;
# 49 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
template<class Operation>
# 50 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
struct binary_traits_imp< Operation *> {
# 52 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Operation function_type;
# 53 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef const function_type &param_type;
# 54 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef typename Operation::result_type result_type;
# 55 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef typename Operation::first_argument_type first_argument_type;
# 56 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef typename Operation::second_argument_type second_argument_type;
# 57 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
};
# 59 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
template<class Result, class Argument1, class Argument2>
# 60 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
struct binary_traits_imp< Result (*)(Argument1, Argument2)> {
# 62 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Result (*function_type)(Argument1, Argument2);
# 63 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Result (*param_type)(Argument1, Argument2);
# 64 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Result result_type;
# 65 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Argument1 first_argument_type;
# 66 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Argument2 second_argument_type;
# 67 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
};
# 69 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
}
# 71 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
template<class Operation>
# 72 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
struct unary_traits {
# 74 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef typename detail::unary_traits_imp< Operation *> ::function_type function_type;
# 75 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef typename detail::unary_traits_imp< Operation *> ::param_type param_type;
# 76 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef typename detail::unary_traits_imp< Operation *> ::result_type result_type;
# 77 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef typename detail::unary_traits_imp< Operation *> ::argument_type argument_type;
# 78 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
};
# 80 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
template<class Result, class Argument>
# 81 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
struct unary_traits< Result (*)(Argument)> {
# 83 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Result (*function_type)(Argument);
# 84 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Result (*param_type)(Argument);
# 85 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Result result_type;
# 86 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Argument argument_type;
# 87 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
};
# 89 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
template<class Operation>
# 90 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
struct binary_traits {
# 92 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef typename detail::binary_traits_imp< Operation *> ::function_type function_type;
# 93 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef typename detail::binary_traits_imp< Operation *> ::param_type param_type;
# 94 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef typename detail::binary_traits_imp< Operation *> ::result_type result_type;
# 95 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef typename detail::binary_traits_imp< Operation *> ::first_argument_type first_argument_type;
# 96 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef typename detail::binary_traits_imp< Operation *> ::second_argument_type second_argument_type;
# 97 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
};
# 99 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
template<class Result, class Argument1, class Argument2>
# 100 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
struct binary_traits< Result (*)(Argument1, Argument2)> {
# 102 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Result (*function_type)(Argument1, Argument2);
# 103 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Result (*param_type)(Argument1, Argument2);
# 104 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Result result_type;
# 105 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Argument1 first_argument_type;
# 106 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
typedef Argument2 second_argument_type;
# 107 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
};
# 109 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
template<class Predicate> unary_negate< Predicate>
# 110 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
not1(const Predicate &pred)
# 111 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
{
# 112 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
return ((unary_negate< Predicate> )(pred));
# 113 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
}
# 115 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
template<class BinaryPredicate> binary_negate< BinaryPredicate>
# 116 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
not2(const BinaryPredicate &pred)
# 117 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
{
# 118 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
return ((binary_negate< BinaryPredicate> )(pred));
# 119 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
}
# 121 "/home/normal/checkout/thrust/thrust/detail/functional.inl"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
namespace thrust {
# 27 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
namespace detail {
# 30 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
namespace host {
# 34 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
template<class InputIterator, class
# 35 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
OutputType, class
# 36 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
BinaryFunction> OutputType
# 37 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
reduce(InputIterator begin, InputIterator
# 38 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
end, OutputType
# 39 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
init, BinaryFunction
# 40 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
binary_op)
# 41 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
{
# 43 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
OutputType result = init;
# 45 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
while (begin != end)
# 46 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
{
# 47 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
result = binary_op(result, *begin);
# 48 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
begin++;
# 49 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
return result;
# 52 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
}
# 54 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
template<class InputIterator1, class
# 55 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
InputIterator2, class
# 56 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
OutputIterator1, class
# 57 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
OutputIterator2, class
# 58 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
BinaryPredicate, class
# 59 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
BinaryFunction> pair< OutputIterator1, OutputIterator2>
# 61 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
reduce_by_key(InputIterator1 keys_first, InputIterator1
# 62 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
keys_last, InputIterator2
# 63 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
values_first, OutputIterator1
# 64 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
keys_output, OutputIterator2
# 65 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
values_output, BinaryPredicate
# 66 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
binary_pred, BinaryFunction
# 67 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
binary_op)
# 68 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
{
# 69 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
typedef typename iterator_traits< InputIterator1> ::value_type InputKeyType;
# 70 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
typedef typename iterator_traits< OutputIterator2> ::value_type OutputValueType;
# 72 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
if (keys_first != keys_last)
# 73 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
{
# 74 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
InputKeyType temp_key = (*keys_first);
# 75 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
OutputValueType temp_value = (*values_first);
# 77 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
for ((++keys_first), (++values_first); keys_first != keys_last; (++keys_first), (++values_first))
# 80 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
{
# 81 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
InputKeyType key = (*keys_first);
# 82 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
OutputValueType value = (*values_first);
# 84 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
if (binary_pred(temp_key, key))
# 85 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
{
# 86 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
temp_value = binary_op(temp_value, value);
# 87 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
} else
# 89 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
{
# 90 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
(*keys_output) = temp_key;
# 91 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
(*values_output) = temp_value;
# 93 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
++keys_output;
# 94 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
++values_output;
# 96 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
temp_key = key;
# 97 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
temp_value = value;
# 98 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
}
# 99 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
}
# 101 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
(*keys_output) = temp_key;
# 102 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
(*values_output) = temp_value;
# 104 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
++keys_output;
# 105 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
++values_output;
# 106 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
}
# 108 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
return thrust::make_pair(keys_output, values_output);
# 109 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
}
# 111 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
}
# 112 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
}
# 113 "/home/normal/checkout/thrust/thrust/detail/host/reduce.h"
}
# 22 "/home/normal/checkout/thrust/thrust/detail/device_ptr_category.h"
namespace thrust {
# 24 "/home/normal/checkout/thrust/thrust/detail/device_ptr_category.h"
namespace detail {
# 29 "/home/normal/checkout/thrust/thrust/detail/device_ptr_category.h"
typedef random_access_cuda_device_iterator_tag device_ptr_category;
# 36 "/home/normal/checkout/thrust/thrust/detail/device_ptr_category.h"
}
# 37 "/home/normal/checkout/thrust/thrust/detail/device_ptr_category.h"
}
# 25 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.h"
namespace thrust {
# 27 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.h"
namespace detail {
# 29 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.h"
namespace device {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.h"
namespace cuda {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.h"
template<class InputIterator, class
# 35 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.h"
OutputType, class
# 36 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.h"
BinaryFunction> OutputType
# 34 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.h"
reduce(InputIterator, InputIterator, OutputType, BinaryFunction);
# 42 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.h"
}
# 43 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.h"
}
# 44 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.h"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.h"
}
# 31 "/home/normal/checkout/thrust/thrust/device_ptr.h"
namespace thrust {
# 41 "/home/normal/checkout/thrust/thrust/device_ptr.h"
template<class T> class device_reference;
# 61 "/home/normal/checkout/thrust/thrust/device_ptr.h"
template<class T> class device_ptr {
# 65 "/home/normal/checkout/thrust/thrust/device_ptr.h"
public: typedef detail::device_ptr_category iterator_category;
# 66 "/home/normal/checkout/thrust/thrust/device_ptr.h"
typedef typename detail::remove_const< T> ::type value_type;
# 67 "/home/normal/checkout/thrust/thrust/device_ptr.h"
typedef ptrdiff_t difference_type;
# 68 "/home/normal/checkout/thrust/thrust/device_ptr.h"
typedef thrust::device_ptr< T> pointer;
# 69 "/home/normal/checkout/thrust/thrust/device_ptr.h"
typedef device_reference< T> reference;
# 74 "/home/normal/checkout/thrust/thrust/device_ptr.h"
device_ptr() : mPtr((0)) { }
# 82 "/home/normal/checkout/thrust/thrust/device_ptr.h"
template<class Y> explicit
# 84 "/home/normal/checkout/thrust/thrust/device_ptr.h"
device_ptr(Y *ptr) : mPtr((ptr)) { }
# 90 "/home/normal/checkout/thrust/thrust/device_ptr.h"
device_ptr(const thrust::device_ptr< typename detail::remove_const< T> ::type> &ptr) : mPtr(((ptr.thrust::device_ptr< typename detail::remove_const< T> ::type> ::get()))) { }
# 98 "/home/normal/checkout/thrust/thrust/device_ptr.h"
template<class U>
# 100 "/home/normal/checkout/thrust/thrust/device_ptr.h"
operator thrust::device_ptr< U> () const
# 101 "/home/normal/checkout/thrust/thrust/device_ptr.h"
{ return ((thrust::device_ptr< U> )(static_cast< U *>(this->get()))); }
# 110 "/home/normal/checkout/thrust/thrust/device_ptr.h"
thrust::device_ptr< T> operator+(const difference_type &rhs) const { return ((thrust::device_ptr< T> )((mPtr) + rhs)); }
# 119 "/home/normal/checkout/thrust/thrust/device_ptr.h"
thrust::device_ptr< T> operator-(const difference_type &rhs) const { return ((thrust::device_ptr< T> )((mPtr) - rhs)); }
# 126 "/home/normal/checkout/thrust/thrust/device_ptr.h"
thrust::device_ptr< T> &operator++() { ++(mPtr); return *this; }
# 133 "/home/normal/checkout/thrust/thrust/device_ptr.h"
thrust::device_ptr< T> operator++(int)
# 134 "/home/normal/checkout/thrust/thrust/device_ptr.h"
{
# 135 "/home/normal/checkout/thrust/thrust/device_ptr.h"
thrust::device_ptr< T> copy(*this);
# 136 "/home/normal/checkout/thrust/thrust/device_ptr.h"
++(*this);
# 137 "/home/normal/checkout/thrust/thrust/device_ptr.h"
return copy;
# 138 "/home/normal/checkout/thrust/thrust/device_ptr.h"
}
# 145 "/home/normal/checkout/thrust/thrust/device_ptr.h"
thrust::device_ptr< T> &operator--() { --(mPtr); return *this; }
# 152 "/home/normal/checkout/thrust/thrust/device_ptr.h"
thrust::device_ptr< T> operator--(int)
# 153 "/home/normal/checkout/thrust/thrust/device_ptr.h"
{
# 154 "/home/normal/checkout/thrust/thrust/device_ptr.h"
thrust::device_ptr< T> copy(*this);
# 155 "/home/normal/checkout/thrust/thrust/device_ptr.h"
--(*this);
# 156 "/home/normal/checkout/thrust/thrust/device_ptr.h"
return copy;
# 157 "/home/normal/checkout/thrust/thrust/device_ptr.h"
}
# 166 "/home/normal/checkout/thrust/thrust/device_ptr.h"
thrust::device_ptr< T> &operator+=(difference_type rhs) { (mPtr) += rhs; return *this; }
# 175 "/home/normal/checkout/thrust/thrust/device_ptr.h"
thrust::device_ptr< T> &operator-=(difference_type rhs) { (mPtr) -= rhs; return *this; }
# 185 "/home/normal/checkout/thrust/thrust/device_ptr.h"
difference_type operator-(const thrust::device_ptr< T> &rhs) const { return (mPtr) - (rhs.mPtr); }
# 193 "/home/normal/checkout/thrust/thrust/device_ptr.h"
inline reference operator[](const difference_type &) const;
# 199 "/home/normal/checkout/thrust/thrust/device_ptr.h"
inline reference operator*() const;
# 205 "/home/normal/checkout/thrust/thrust/device_ptr.h"
T *get() const { return mPtr; }
# 208 "/home/normal/checkout/thrust/thrust/device_ptr.h"
private: T *mPtr;
# 209 "/home/normal/checkout/thrust/thrust/device_ptr.h"
};
# 219 "/home/normal/checkout/thrust/thrust/device_ptr.h"
template<class T1, class T2> inline bool operator==(const device_ptr< T1> &, const device_ptr< T2> &);
# 231 "/home/normal/checkout/thrust/thrust/device_ptr.h"
template<class T1, class T2> inline bool operator!=(const device_ptr< T1> &, const device_ptr< T2> &);
# 242 "/home/normal/checkout/thrust/thrust/device_ptr.h"
template<class T1, class T2> inline bool operator<(const device_ptr< T1> &, const device_ptr< T2> &);
# 253 "/home/normal/checkout/thrust/thrust/device_ptr.h"
template<class T1, class T2> inline bool operator<=(const device_ptr< T1> &, const device_ptr< T2> &);
# 264 "/home/normal/checkout/thrust/thrust/device_ptr.h"
template<class T1, class T2> inline bool operator>(const device_ptr< T1> &, const device_ptr< T2> &);
# 275 "/home/normal/checkout/thrust/thrust/device_ptr.h"
template<class T1, class T2> inline bool operator>=(const device_ptr< T1> &, const device_ptr< T2> &);
# 285 "/home/normal/checkout/thrust/thrust/device_ptr.h"
template<class E, class T, class Y> inline std::basic_ostream< E, T> &operator<<(std::basic_ostream< E, T> &, const device_ptr< Y> &);
# 304 "/home/normal/checkout/thrust/thrust/device_ptr.h"
template<class T> inline device_ptr< T> device_pointer_cast(T *);
# 314 "/home/normal/checkout/thrust/thrust/device_ptr.h"
template<class T> inline device_ptr< T> device_pointer_cast(const device_ptr< T> &);
# 324 "/home/normal/checkout/thrust/thrust/device_ptr.h"
template<class T> inline T *raw_pointer_cast(const device_ptr< T> &);
# 334 "/home/normal/checkout/thrust/thrust/device_ptr.h"
template<class T> inline T *raw_pointer_cast(T *);
# 341 "/home/normal/checkout/thrust/thrust/device_ptr.h"
}
# 30 "/home/normal/checkout/thrust/thrust/device_reference.h"
namespace thrust {
# 186 "/home/normal/checkout/thrust/thrust/device_reference.h"
template<class T>
# 187 "/home/normal/checkout/thrust/thrust/device_reference.h"
class device_reference {
# 190 "/home/normal/checkout/thrust/thrust/device_reference.h"
public: typedef device_ptr< T> pointer;
# 191 "/home/normal/checkout/thrust/thrust/device_reference.h"
typedef typename detail::remove_const< T> ::type value_type;
# 223 "/home/normal/checkout/thrust/thrust/device_reference.h"
template<class OtherT> inline device_reference(const thrust::device_reference< OtherT> &, typename detail::enable_if< (detail::is_convertible< typename thrust::device_reference< OtherT> ::pointer, device_ptr< T> > ::value), void> ::type * = (0));
# 269 "/home/normal/checkout/thrust/thrust/device_reference.h"
inline explicit device_reference(const pointer &);
# 279 "/home/normal/checkout/thrust/thrust/device_reference.h"
inline pointer operator&() const;
# 287 "/home/normal/checkout/thrust/thrust/device_reference.h"
thrust::device_reference< T> &operator=(const T &);
# 296 "/home/normal/checkout/thrust/thrust/device_reference.h"
thrust::device_reference< T> &operator=(const thrust::device_reference< T> &);
# 309 "/home/normal/checkout/thrust/thrust/device_reference.h"
template<class OtherT> thrust::device_reference< T> &operator=(const thrust::device_reference< OtherT> &);
# 353 "/home/normal/checkout/thrust/thrust/device_reference.h"
thrust::device_reference< T> &operator++();
# 401 "/home/normal/checkout/thrust/thrust/device_reference.h"
value_type operator++(int);
# 445 "/home/normal/checkout/thrust/thrust/device_reference.h"
thrust::device_reference< T> &operator+=(const T &);
# 488 "/home/normal/checkout/thrust/thrust/device_reference.h"
thrust::device_reference< T> &operator--();
# 536 "/home/normal/checkout/thrust/thrust/device_reference.h"
value_type operator--(int);
# 580 "/home/normal/checkout/thrust/thrust/device_reference.h"
thrust::device_reference< T> &operator-=(const T &);
# 624 "/home/normal/checkout/thrust/thrust/device_reference.h"
thrust::device_reference< T> &operator*=(const T &);
# 668 "/home/normal/checkout/thrust/thrust/device_reference.h"
thrust::device_reference< T> &operator/=(const T &);
# 712 "/home/normal/checkout/thrust/thrust/device_reference.h"
thrust::device_reference< T> &operator%=(const T &);
# 756 "/home/normal/checkout/thrust/thrust/device_reference.h"
thrust::device_reference< T> &operator<<=(const T &);
# 800 "/home/normal/checkout/thrust/thrust/device_reference.h"
thrust::device_reference< T> &operator>>=(const T &);
# 844 "/home/normal/checkout/thrust/thrust/device_reference.h"
thrust::device_reference< T> &operator&=(const T &);
# 888 "/home/normal/checkout/thrust/thrust/device_reference.h"
thrust::device_reference< T> &operator|=(const T &);
# 932 "/home/normal/checkout/thrust/thrust/device_reference.h"
thrust::device_reference< T> &operator^=(const T &);
# 940 "/home/normal/checkout/thrust/thrust/device_reference.h"
operator value_type() const;
# 944 "/home/normal/checkout/thrust/thrust/device_reference.h"
private: template<class OtherT> friend class device_reference;
# 947 "/home/normal/checkout/thrust/thrust/device_reference.h"
const pointer mPtr;
# 949 "/home/normal/checkout/thrust/thrust/device_reference.h"
template<class Pointer> inline void assign_from(Pointer, detail::true_type);
# 952 "/home/normal/checkout/thrust/thrust/device_reference.h"
template<class Pointer> inline void assign_from(Pointer, detail::false_type);
# 955 "/home/normal/checkout/thrust/thrust/device_reference.h"
inline value_type convert(detail::true_type) const;
# 957 "/home/normal/checkout/thrust/thrust/device_reference.h"
inline value_type convert(detail::false_type) const;
# 958 "/home/normal/checkout/thrust/thrust/device_reference.h"
};
# 963 "/home/normal/checkout/thrust/thrust/device_reference.h"
}
# 26 "/home/normal/checkout/thrust/thrust/copy.h"
namespace thrust {
# 73 "/home/normal/checkout/thrust/thrust/copy.h"
template<class InputIterator, class OutputIterator> OutputIterator copy(InputIterator, InputIterator, OutputIterator);
# 114 "/home/normal/checkout/thrust/thrust/copy.h"
template<class InputIterator, class
# 115 "/home/normal/checkout/thrust/thrust/copy.h"
PredicateIterator, class
# 116 "/home/normal/checkout/thrust/thrust/copy.h"
OutputIterator> OutputIterator
# 114 "/home/normal/checkout/thrust/thrust/copy.h"
copy_when(InputIterator, InputIterator, PredicateIterator, OutputIterator);
# 170 "/home/normal/checkout/thrust/thrust/copy.h"
template<class InputIterator, class
# 171 "/home/normal/checkout/thrust/thrust/copy.h"
PredicateIterator, class
# 172 "/home/normal/checkout/thrust/thrust/copy.h"
OutputIterator, class
# 173 "/home/normal/checkout/thrust/thrust/copy.h"
Predicate> OutputIterator
# 170 "/home/normal/checkout/thrust/thrust/copy.h"
copy_when(InputIterator, InputIterator, PredicateIterator, OutputIterator, Predicate);
# 236 "/home/normal/checkout/thrust/thrust/copy.h"
template<class InputIterator, class
# 237 "/home/normal/checkout/thrust/thrust/copy.h"
OutputIterator, class
# 238 "/home/normal/checkout/thrust/thrust/copy.h"
Predicate> OutputIterator
# 236 "/home/normal/checkout/thrust/thrust/copy.h"
copy_if(InputIterator, InputIterator, OutputIterator, Predicate);
# 270 "/home/normal/checkout/thrust/thrust/copy.h"
template<class InputIterator1, class
# 271 "/home/normal/checkout/thrust/thrust/copy.h"
InputIterator2, class
# 272 "/home/normal/checkout/thrust/thrust/copy.h"
OutputIterator, class
# 273 "/home/normal/checkout/thrust/thrust/copy.h"
Predicate> OutputIterator
# 270 "/home/normal/checkout/thrust/thrust/copy.h"
copy_if(InputIterator1, InputIterator1, InputIterator2, OutputIterator, Predicate);
# 283 "/home/normal/checkout/thrust/thrust/copy.h"
}
# 40 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
namespace std __attribute__((visibility("default"))) {
# 198 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp >
    bool
    binary_search ( _FIter, _FIter, const _Tp & );
# 202 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp, typename _Compare >
    bool
    binary_search ( _FIter, _FIter, const _Tp &, _Compare );
# 206 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _IIter, class _OIter> inline _OIter copy(_IIter, _IIter, _OIter);
# 210 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _BIter1, class _BIter2> inline _BIter2 copy_backward(_BIter1, _BIter1, _BIter2);
# 227 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp >
    pair < _FIter, _FIter >
    equal_range ( _FIter, _FIter, const _Tp & );
# 231 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp, typename _Compare >
    pair < _FIter, _FIter >
    equal_range ( _FIter, _FIter, const _Tp &, _Compare );
# 235 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _FIter, class _Tp> inline void fill(_FIter, _FIter, const _Tp &);
# 246 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _OIter, class _Size, class _Tp> inline _OIter fill_n(_OIter, _Size, const _Tp &);
# 252 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter1, typename _FIter2 >
    _FIter1
    find_end ( _FIter1, _FIter1, _FIter2, _FIter2 );
# 256 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter1, typename _FIter2, typename _BinaryPredicate >
    _FIter1
    find_end ( _FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate );
# 273 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2 >
    bool
    includes ( _IIter1, _IIter1, _IIter2, _IIter2 );
# 277 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _Compare >
    bool
    includes ( _IIter1, _IIter1, _IIter2, _IIter2, _Compare );
# 281 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter >
    void
    inplace_merge ( _BIter, _BIter, _BIter );
# 285 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter, typename _Compare >
    void
    inplace_merge ( _BIter, _BIter, _BIter, _Compare );
# 327 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _FIter1, class _FIter2> inline void iter_swap(_FIter1, _FIter2);
# 331 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp >
    _FIter
    lower_bound ( _FIter, _FIter, const _Tp & );
# 335 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp, typename _Compare >
    _FIter
    lower_bound ( _FIter, _FIter, const _Tp &, _Compare );
# 339 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    make_heap ( _RAIter, _RAIter );
# 343 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    make_heap ( _RAIter, _RAIter, _Compare );
# 347 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _Tp> inline const _Tp &max(const _Tp &, const _Tp &);
# 351 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _Tp, class _Compare> inline const _Tp &max(const _Tp &, const _Tp &, _Compare);
# 358 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _Tp> inline const _Tp &min(const _Tp &, const _Tp &);
# 362 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _Tp, class _Compare> inline const _Tp &min(const _Tp &, const _Tp &, _Compare);
# 412 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter >
    bool
    next_permutation ( _BIter, _BIter );
# 416 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter, typename _Compare >
    bool
    next_permutation ( _BIter, _BIter, _Compare );
# 429 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _RAIter >
    _RAIter
    partial_sort_copy ( _IIter, _IIter, _RAIter, _RAIter );
# 433 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _RAIter, typename _Compare >
    _RAIter
    partial_sort_copy ( _IIter, _IIter, _RAIter, _RAIter, _Compare );
# 450 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    pop_heap ( _RAIter, _RAIter );
# 454 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    pop_heap ( _RAIter, _RAIter, _Compare );
# 458 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter >
    bool
    prev_permutation ( _BIter, _BIter );
# 462 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter, typename _Compare >
    bool
    prev_permutation ( _BIter, _BIter, _Compare );
# 466 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    push_heap ( _RAIter, _RAIter );
# 470 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    push_heap ( _RAIter, _RAIter, _Compare );
# 476 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp >
    _FIter
    remove ( _FIter, _FIter, const _Tp & );
# 480 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Predicate >
    _FIter
    remove_if ( _FIter, _FIter, _Predicate );
# 484 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _OIter, typename _Tp >
    _OIter
    remove_copy ( _IIter, _IIter, _OIter, const _Tp & );
# 488 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _OIter, typename _Predicate >
    _OIter
    remove_copy_if ( _IIter, _IIter, _OIter, _Predicate );
# 494 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _OIter, typename _Tp >
    _OIter
    replace_copy ( _IIter, _IIter, _OIter, const _Tp &, const _Tp & );
# 498 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _Iter, typename _OIter, typename _Predicate, typename _Tp >
    _OIter
    replace_copy_if ( _Iter, _Iter, _OIter, _Predicate, const _Tp & );
# 504 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter >
    void
    reverse ( _BIter, _BIter );
# 508 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter, typename _OIter >
    _OIter
    reverse_copy ( _BIter, _BIter, _OIter );
# 512 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter >
    void
    rotate ( _FIter, _FIter, _FIter );
# 516 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _OIter >
    _OIter
    rotate_copy ( _FIter, _FIter, _FIter, _OIter );
# 527 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    sort_heap ( _RAIter, _RAIter );
# 531 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    sort_heap ( _RAIter, _RAIter, _Compare );
# 535 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter, typename _Predicate >
    _BIter
    stable_partition ( _BIter, _BIter, _Predicate );
# 539 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _Tp> inline void swap(_Tp &, _Tp &);
# 543 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _Tp, size_t _Nm> inline void swap(_Tp (&)[_Nm], _Tp (&)[_Nm]);
# 547 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _FIter1, class _FIter2> _FIter2 swap_ranges(_FIter1, _FIter1, _FIter2);
# 553 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter >
    _FIter
    unique ( _FIter, _FIter );
# 557 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _BinaryPredicate >
    _FIter
    unique ( _FIter, _FIter, _BinaryPredicate );
# 563 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp >
    _FIter
    upper_bound ( _FIter, _FIter, const _Tp & );
# 567 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp, typename _Compare >
    _FIter
    upper_bound ( _FIter, _FIter, const _Tp &, _Compare );
# 571 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
}
# 573 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
namespace std __attribute__((visibility("default"))) {
# 575 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter >
    _FIter
    adjacent_find ( _FIter, _FIter );
# 579 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _BinaryPredicate >
    _FIter
    adjacent_find ( _FIter, _FIter, _BinaryPredicate );
# 583 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _Tp >
    typename iterator_traits < _IIter > :: difference_type
    count ( _IIter, _IIter, const _Tp & );
# 587 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _Predicate >
    typename iterator_traits < _IIter > :: difference_type
    count_if ( _IIter, _IIter, _Predicate );
# 591 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _IIter1, class _IIter2> inline bool equal(_IIter1, _IIter1, _IIter2);
# 595 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _IIter1, class _IIter2, class _BinaryPredicate> inline bool equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);
# 599 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _Tp >
    _IIter
    find ( _IIter, _IIter, const _Tp & );
# 603 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter1, typename _FIter2 >
    _FIter1
    find_first_of ( _FIter1, _FIter1, _FIter2, _FIter2 );
# 607 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter1, typename _FIter2, typename _BinaryPredicate >
    _FIter1
    find_first_of ( _FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate );
# 611 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _Predicate >
    _IIter
    find_if ( _IIter, _IIter, _Predicate );
# 615 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _Funct >
    _Funct
    for_each ( _IIter, _IIter, _Funct );
# 619 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Generator >
    void
    generate ( _FIter, _FIter, _Generator );
# 630 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _OIter, typename _Size, typename _Generator >
    _OIter
    generate_n ( _OIter, _Size, _Generator );
# 634 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _IIter1, class _IIter2> inline bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);
# 638 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _IIter1, class _IIter2, class _Compare> bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);
# 642 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter >
    _FIter
    max_element ( _FIter, _FIter );
# 646 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Compare >
    _FIter
    max_element ( _FIter, _FIter, _Compare );
# 650 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter >
    _OIter
    merge ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter );
# 654 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare >
    _OIter
    merge ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare );
# 659 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter >
    _FIter
    min_element ( _FIter, _FIter );
# 663 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Compare >
    _FIter
    min_element ( _FIter, _FIter, _Compare );
# 667 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _IIter1, class _IIter2> pair< _IIter1, _IIter2> mismatch(_IIter1, _IIter1, _IIter2);
# 671 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template<class _IIter1, class _IIter2, class _BinaryPredicate> pair< _IIter1, _IIter2> mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);
# 675 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    nth_element ( _RAIter, _RAIter, _RAIter );
# 679 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    nth_element ( _RAIter, _RAIter, _RAIter, _Compare );
# 683 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    partial_sort ( _RAIter, _RAIter, _RAIter );
# 687 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    partial_sort ( _RAIter, _RAIter, _RAIter, _Compare );
# 691 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _BIter, typename _Predicate >
    _BIter
    partition ( _BIter, _BIter, _Predicate );
# 695 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    random_shuffle ( _RAIter, _RAIter );
# 699 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Generator >
    void
    random_shuffle ( _RAIter, _RAIter, _Generator & );
# 703 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Tp >
    void
    replace ( _FIter, _FIter, const _Tp &, const _Tp & );
# 707 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Predicate, typename _Tp >
    void
    replace_if ( _FIter, _FIter, _Predicate, const _Tp & );
# 711 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter1, typename _FIter2 >
    _FIter1
    search ( _FIter1, _FIter1, _FIter2, _FIter2 );
# 715 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter1, typename _FIter2, typename _BinaryPredicate >
    _FIter1
    search ( _FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate );
# 719 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Size, typename _Tp >
    _FIter
    search_n ( _FIter, _FIter, _Size, const _Tp & );
# 723 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate >
    _FIter
    search_n ( _FIter, _FIter, _Size, const _Tp &, _BinaryPredicate );
# 728 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter >
    _OIter
    set_difference ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter );
# 732 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare >
    _OIter
    set_difference ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare );
# 737 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter >
    _OIter
    set_intersection ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter );
# 741 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare >
    _OIter
    set_intersection ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare );
# 746 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter >
    _OIter
    set_symmetric_difference ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter );
# 750 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare >
    _OIter
    set_symmetric_difference ( _IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare );
# 756 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter >
    _OIter
    set_union ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter );
# 760 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare >
    _OIter
    set_union ( _IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare );
# 765 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    sort ( _RAIter, _RAIter );
# 769 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    sort ( _RAIter, _RAIter, _Compare );
# 773 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter >
    void
    stable_sort ( _RAIter, _RAIter );
# 777 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _RAIter, typename _Compare >
    void
    stable_sort ( _RAIter, _RAIter, _Compare );
# 781 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _OIter, typename _UnaryOperation >
    _OIter
    transform ( _IIter, _IIter, _OIter, _UnaryOperation );
# 785 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation >
    _OIter
    transform ( _IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation );
# 790 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _OIter >
    _OIter
    unique_copy ( _IIter, _IIter, _OIter );
# 794 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
template < typename _IIter, typename _OIter, typename _BinaryPredicate >
    _OIter
    unique_copy ( _IIter, _IIter, _OIter, _BinaryPredicate );
# 798 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
}
# 62 "/usr/include/c++/4.4/bits/stl_heap.h" 3
namespace std __attribute__((visibility("default"))) {
# 69 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance >
    _Distance
    __is_heap_until ( _RandomAccessIterator __first, _Distance __n )
    {
      _Distance __parent = 0;
      for ( _Distance __child = 1; __child < __n; ++ __child )
 {
   if ( __first [ __parent ] < __first [ __child ] )
     return __child;
   if ( ( __child & 1 ) == 0 )
     ++ __parent;
 }
      return __n;
    }
# 84 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance,
    typename _Compare >
    _Distance
    __is_heap_until ( _RandomAccessIterator __first, _Distance __n,
      _Compare __comp )
    {
      _Distance __parent = 0;
      for ( _Distance __child = 1; __child < __n; ++ __child )
 {
   if ( __comp ( __first [ __parent ], __first [ __child ] ) )
     return __child;
   if ( ( __child & 1 ) == 0 )
     ++ __parent;
 }
      return __n;
    }
# 103 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance >
    inline bool
    __is_heap ( _RandomAccessIterator __first, _Distance __n )
    { return std :: __is_heap_until ( __first, __n ) == __n; }
# 108 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare,
    typename _Distance >
    inline bool
    __is_heap ( _RandomAccessIterator __first, _Compare __comp, _Distance __n )
    { return std :: __is_heap_until ( __first, __n, __comp ) == __n; }
# 114 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    inline bool
    __is_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    { return std :: __is_heap ( __first, std :: distance ( __first, __last ) ); }
# 119 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline bool
    __is_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp )
    { return std :: __is_heap ( __first, __comp, std :: distance ( __first, __last ) ); }
# 128 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance, typename _Tp >
    void
    __push_heap ( _RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value )
    {
      _Distance __parent = ( __holeIndex - 1 ) / 2;
      while ( __holeIndex > __topIndex && * ( __first + __parent ) < __value )
 {
   * ( __first + __holeIndex ) = ( * ( __first + __parent ) );
   __holeIndex = __parent;
   __parent = ( __holeIndex - 1 ) / 2;
 }
      * ( __first + __holeIndex ) = ( __value );
    }
# 152 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    inline void
    push_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
   _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
   _DistanceType;





      ;
      ;

      _ValueType __value = ( * ( __last - 1 ) );
      std :: __push_heap ( __first, _DistanceType ( ( __last - __first ) - 1 ),
         _DistanceType ( 0 ), ( __value ) );
    }
# 173 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare >
    void
    __push_heap ( _RandomAccessIterator __first, _Distance __holeIndex,
  _Distance __topIndex, _Tp __value, _Compare __comp )
    {
      _Distance __parent = ( __holeIndex - 1 ) / 2;
      while ( __holeIndex > __topIndex
      && __comp ( * ( __first + __parent ), __value ) )
 {
   * ( __first + __holeIndex ) = ( * ( __first + __parent ) );
   __holeIndex = __parent;
   __parent = ( __holeIndex - 1 ) / 2;
 }
      * ( __first + __holeIndex ) = ( __value );
    }
# 201 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    push_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
   _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
   _DistanceType;




      ;
      ;

      _ValueType __value = ( * ( __last - 1 ) );
      std :: __push_heap ( __first, _DistanceType ( ( __last - __first ) - 1 ),
         _DistanceType ( 0 ), ( __value ), __comp );
    }
# 222 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance, typename _Tp >
    void
    __adjust_heap ( _RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value )
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while ( __secondChild < ( __len - 1 ) / 2 )
 {
   __secondChild = 2 * ( __secondChild + 1 );
   if ( * ( __first + __secondChild ) < * ( __first + ( __secondChild - 1 ) ) )
     __secondChild --;
   * ( __first + __holeIndex ) = ( * ( __first + __secondChild ) );
   __holeIndex = __secondChild;
 }
      if ( ( __len & 1 ) == 0 && __secondChild == ( __len - 2 ) / 2 )
 {
   __secondChild = 2 * ( __secondChild + 1 );
   * ( __first + __holeIndex ) = ( * ( __first + ( __secondChild - 1 ) ) );

   __holeIndex = __secondChild - 1;
 }
      std :: __push_heap ( __first, __holeIndex, __topIndex,
         ( __value ) );
    }
# 248 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    inline void
    __pop_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;

      _ValueType __value = ( * __result );
      * __result = ( * __first );
      std :: __adjust_heap ( __first, _DistanceType ( 0 ),
    _DistanceType ( __last - __first ),
    ( __value ) );
    }
# 274 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    inline void
    pop_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;





      ;
      ;

      -- __last;
      std :: __pop_heap ( __first, __last, __last );
    }
# 292 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare >
    void
    __adjust_heap ( _RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp )
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while ( __secondChild < ( __len - 1 ) / 2 )
 {
   __secondChild = 2 * ( __secondChild + 1 );
   if ( __comp ( * ( __first + __secondChild ),
       * ( __first + ( __secondChild - 1 ) ) ) )
     __secondChild --;
   * ( __first + __holeIndex ) = ( * ( __first + __secondChild ) );
   __holeIndex = __secondChild;
 }
      if ( ( __len & 1 ) == 0 && __secondChild == ( __len - 2 ) / 2 )
 {
   __secondChild = 2 * ( __secondChild + 1 );
   * ( __first + __holeIndex ) = ( * ( __first + ( __secondChild - 1 ) ) );

   __holeIndex = __secondChild - 1;
 }
      std :: __push_heap ( __first, __holeIndex, __topIndex,
         ( __value ), __comp );
    }
# 320 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    __pop_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;

      _ValueType __value = ( * __result );
      * __result = ( * __first );
      std :: __adjust_heap ( __first, _DistanceType ( 0 ),
    _DistanceType ( __last - __first ),
    ( __value ), __comp );
    }
# 348 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    pop_heap ( _RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp )
    {



      ;
      ;

      -- __last;
      std :: __pop_heap ( __first, __last, __last, __comp );
    }
# 371 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    void
    make_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
   _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
   _DistanceType;





      ;

      if ( __last - __first < 2 )
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = ( __len - 2 ) / 2;
      while ( true )
 {
   _ValueType __value = ( * ( __first + __parent ) );
   std :: __adjust_heap ( __first, __parent, __len, ( __value ) );
   if ( __parent == 0 )
     return;
   __parent --;
 }
    }
# 411 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    make_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
   _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
   _DistanceType;




      ;

      if ( __last - __first < 2 )
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = ( __len - 2 ) / 2;
      while ( true )
 {
   _ValueType __value = ( * ( __first + __parent ) );
   std :: __adjust_heap ( __first, __parent, __len, ( __value ),
        __comp );
   if ( __parent == 0 )
     return;
   __parent --;
 }
    }
# 450 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    void
    sort_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {





      ;
      ;

      while ( __last - __first > 1 )
 {
   -- __last;
   std :: __pop_heap ( __first, __last, __last );
 }
    }
# 479 "/usr/include/c++/4.4/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    sort_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp )
    {



      ;
      ;

      while ( __last - __first > 1 )
 {
   -- __last;
   std :: __pop_heap ( __first, __last, __last, __comp );
 }
    }
# 576 "/usr/include/c++/4.4/bits/stl_heap.h" 3
}
# 62 "/usr/include/c++/4.4/bits/stl_construct.h" 3
namespace std __attribute__((visibility("default"))) {
# 68 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template < typename _T1, typename _T2 >
    inline void
    _Construct ( _T1 * __p, const _T2 & __value )
    {


      :: new ( static_cast < void * > ( __p ) ) _T1 ( __value );
    }
# 80 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template < typename _Tp >
    inline void
    _Destroy ( _Tp * __pointer )
    { __pointer -> ~ _Tp ( ); }
# 85 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template<bool __T11>
# 86 "/usr/include/c++/4.4/bits/stl_construct.h" 3
struct _Destroy_aux {
# 88 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template < typename _ForwardIterator >
        static void
        __destroy ( _ForwardIterator __first, _ForwardIterator __last )
 {
   for (; __first != __last; ++ __first )
     std :: _Destroy ( & * __first );
 }
# 95 "/usr/include/c++/4.4/bits/stl_construct.h" 3
};
# 98 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template<> struct _Destroy_aux< true> {
# 100 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template < typename _ForwardIterator >
        static void
        __destroy ( _ForwardIterator, _ForwardIterator ) { }
# 103 "/usr/include/c++/4.4/bits/stl_construct.h" 3
};
# 110 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template < typename _ForwardIterator >
    inline void
    _Destroy ( _ForwardIterator __first, _ForwardIterator __last )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
                       _Value_type;
      std :: _Destroy_aux < __has_trivial_destructor ( _Value_type ) > ::
 __destroy ( __first, __last );
    }
# 126 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template<class _Tp> class allocator;
# 128 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template < typename _ForwardIterator, typename _Allocator >
    void
    _Destroy ( _ForwardIterator __first, _ForwardIterator __last,
      _Allocator & __alloc )
    {
      for (; __first != __last; ++ __first )
 __alloc . destroy ( & * __first );
    }
# 137 "/usr/include/c++/4.4/bits/stl_construct.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline void
    _Destroy ( _ForwardIterator __first, _ForwardIterator __last,
      allocator < _Tp > & )
    {
      _Destroy ( __first, __last );
    }
# 145 "/usr/include/c++/4.4/bits/stl_construct.h" 3
}
# 60 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
namespace std __attribute__((visibility("default"))) {
# 62 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template<bool __T12>
# 63 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
struct __uninitialized_copy {
# 65 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator >
        static _ForwardIterator
        uninitialized_copy ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result )
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++ __first, ++ __cur )
  :: new ( static_cast < void * > ( & * __cur ) ) typename
      iterator_traits < _ForwardIterator > :: value_type ( * __first );
       return __cur;
     }
   catch ( ... )
     {
       std :: _Destroy ( __result, __cur );
       throw;
     }
 }
# 84 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
};
# 87 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template<> struct __uninitialized_copy< true> {
# 89 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator >
        static _ForwardIterator
        uninitialized_copy ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result )
        { return std :: copy ( __first, __last, __result ); }
# 94 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
};
# 105 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator >
    inline _ForwardIterator
    uninitialized_copy ( _InputIterator __first, _InputIterator __last,
         _ForwardIterator __result )
    {
      typedef typename iterator_traits < _InputIterator > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType2;

      return std :: __uninitialized_copy < ( __is_pod ( _ValueType1 )
     && __is_pod ( _ValueType2 ) ) > ::
 uninitialized_copy ( __first, __last, __result );
    }
# 121 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template<bool __T13>
# 122 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
struct __uninitialized_fill {
# 124 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp >
        static void
        uninitialized_fill ( _ForwardIterator __first,
      _ForwardIterator __last, const _Tp & __x )
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++ __cur )
  std :: _Construct ( & * __cur, __x );
     }
   catch ( ... )
     {
       std :: _Destroy ( __first, __cur );
       throw;
     }
 }
# 141 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
};
# 144 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template<> struct __uninitialized_fill< true> {
# 146 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp >
        static void
        uninitialized_fill ( _ForwardIterator __first,
      _ForwardIterator __last, const _Tp & __x )
        { std :: fill ( __first, __last, __x ); }
# 151 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
};
# 162 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline void
    uninitialized_fill ( _ForwardIterator __first, _ForwardIterator __last,
         const _Tp & __x )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;

      std :: __uninitialized_fill < __is_pod ( _ValueType ) > ::
 uninitialized_fill ( __first, __last, __x );
    }
# 175 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template<bool __T14>
# 176 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
struct __uninitialized_fill_n {
# 178 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp >
        static void
        uninitialized_fill_n ( _ForwardIterator __first, _Size __n,
        const _Tp & __x )
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; -- __n, ++ __cur )
  std :: _Construct ( & * __cur, __x );
     }
   catch ( ... )
     {
       std :: _Destroy ( __first, __cur );
       throw;
     }
 }
# 195 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
};
# 198 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template<> struct __uninitialized_fill_n< true> {
# 200 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp >
        static void
        uninitialized_fill_n ( _ForwardIterator __first, _Size __n,
        const _Tp & __x )
        { std :: fill_n ( __first, __n, __x ); }
# 205 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
};
# 216 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp >
    inline void
    uninitialized_fill_n ( _ForwardIterator __first, _Size __n, const _Tp & __x )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;

      std :: __uninitialized_fill_n < __is_pod ( _ValueType ) > ::
 uninitialized_fill_n ( __first, __n, __x );
    }
# 233 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator,
    typename _Allocator >
    _ForwardIterator
    __uninitialized_copy_a ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator & __alloc )
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __first != __last; ++ __first, ++ __cur )
     __alloc . construct ( & * __cur, * __first );
   return __cur;
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __cur, __alloc );
   throw;
 }
    }
# 253 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator, typename _Tp >
    inline _ForwardIterator
    __uninitialized_copy_a ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator < _Tp > & )
    { return std :: uninitialized_copy ( __first, __last, __result ); }
# 259 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator,
    typename _Allocator >
    inline _ForwardIterator
    __uninitialized_move_a ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator & __alloc )
    {
      return std :: __uninitialized_copy_a ( ( __first ),
      ( __last ),
      __result, __alloc );
    }
# 270 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Allocator >
    void
    __uninitialized_fill_a ( _ForwardIterator __first, _ForwardIterator __last,
      const _Tp & __x, _Allocator & __alloc )
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __cur != __last; ++ __cur )
     __alloc . construct ( & * __cur, __x );
 }
      catch ( ... )
 {
   std :: _Destroy ( __first, __cur, __alloc );
   throw;
 }
    }
# 288 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Tp2 >
    inline void
    __uninitialized_fill_a ( _ForwardIterator __first, _ForwardIterator __last,
      const _Tp & __x, allocator < _Tp2 > & )
    { std :: uninitialized_fill ( __first, __last, __x ); }
# 294 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator >
    void
    __uninitialized_fill_n_a ( _ForwardIterator __first, _Size __n,
        const _Tp & __x, _Allocator & __alloc )
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __n > 0; -- __n, ++ __cur )
     __alloc . construct ( & * __cur, __x );
 }
      catch ( ... )
 {
   std :: _Destroy ( __first, __cur, __alloc );
   throw;
 }
    }
# 313 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2 >
    inline void
    __uninitialized_fill_n_a ( _ForwardIterator __first, _Size __n,
        const _Tp & __x, allocator < _Tp2 > & )
    { std :: uninitialized_fill_n ( __first, __n, __x ); }
# 330 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator >
    inline _ForwardIterator
    __uninitialized_copy_move ( _InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator & __alloc )
    {
      _ForwardIterator __mid = std :: __uninitialized_copy_a ( __first1, __last1,
          __result,
          __alloc );
      try
 {
   return std :: __uninitialized_move_a ( __first2, __last2, __mid, __alloc );
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __mid, __alloc );
   throw;
 }
    }
# 358 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator >
    inline _ForwardIterator
    __uninitialized_move_copy ( _InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator & __alloc )
    {
      _ForwardIterator __mid = std :: __uninitialized_move_a ( __first1, __last1,
          __result,
          __alloc );
      try
 {
   return std :: __uninitialized_copy_a ( __first2, __last2, __mid, __alloc );
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __mid, __alloc );
   throw;
 }
    }
# 385 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator >
    inline _ForwardIterator
    __uninitialized_fill_move ( _ForwardIterator __result, _ForwardIterator __mid,
         const _Tp & __x, _InputIterator __first,
         _InputIterator __last, _Allocator & __alloc )
    {
      std :: __uninitialized_fill_a ( __result, __mid, __x, __alloc );
      try
 {
   return std :: __uninitialized_move_a ( __first, __last, __mid, __alloc );
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __mid, __alloc );
   throw;
 }
    }
# 407 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator >
    inline void
    __uninitialized_move_fill ( _InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp & __x,
         _Allocator & __alloc )
    {
      _ForwardIterator __mid2 = std :: __uninitialized_move_a ( __first1, __last1,
           __first2,
           __alloc );
      try
 {
   std :: __uninitialized_fill_a ( __mid2, __last2, __x, __alloc );
 }
      catch ( ... )
 {
   std :: _Destroy ( __first2, __mid2, __alloc );
   throw;
 }
    }
# 476 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
}
# 64 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
namespace std __attribute__((visibility("default"))) {
# 83 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
template < typename _Tp >
    pair < _Tp *, ptrdiff_t >
    get_temporary_buffer ( ptrdiff_t __len )
    {
      const ptrdiff_t __max =
 __gnu_cxx :: __numeric_traits < ptrdiff_t > :: __max / sizeof ( _Tp );
      if ( __len > __max )
 __len = __max;

      while ( __len > 0 )
 {
   _Tp * __tmp = static_cast < _Tp * > ( :: operator new ( __len * sizeof ( _Tp ),
       std :: nothrow ) );
   if ( __tmp != 0 )
     return std :: pair < _Tp *, ptrdiff_t > ( __tmp, __len );
   __len /= 2;
 }
      return std :: pair < _Tp *, ptrdiff_t > ( static_cast < _Tp * > ( 0 ), 0 );
    }
# 110 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
template < typename _Tp >
    inline void
    return_temporary_buffer ( _Tp * __p )
    { :: operator delete ( __p, std :: nothrow ); }
# 121 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
template < typename _ForwardIterator, typename _Tp >
    class _Temporary_buffer
    {



    public :
      typedef _Tp value_type;
      typedef value_type * pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected :
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public :

      size_type
      size ( ) const
      { return _M_len; }


      size_type
      requested_size ( ) const
      { return _M_original_len; }


      iterator
      begin ( )
      { return _M_buffer; }


      iterator
      end ( )
      { return _M_buffer + _M_len; }





      _Temporary_buffer ( _ForwardIterator __first, _ForwardIterator __last );

      ~ _Temporary_buffer ( )
      {
 std :: _Destroy ( _M_buffer, _M_buffer + _M_len );
 std :: return_temporary_buffer ( _M_buffer );
      }

    private :

      _Temporary_buffer ( const _Temporary_buffer & );

      void
      operator = ( const _Temporary_buffer & );
    };
# 179 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
template < typename _ForwardIterator, typename _Tp >
    _Temporary_buffer < _ForwardIterator, _Tp > ::
    _Temporary_buffer ( _ForwardIterator __first, _ForwardIterator __last )
    : _M_original_len ( std :: distance ( __first, __last ) ),
      _M_len ( 0 ), _M_buffer ( 0 )
    {
      try
 {
   std :: pair < pointer, size_type > __p ( std :: get_temporary_buffer <
         value_type > ( _M_original_len ) );
   _M_buffer = __p . first;
   _M_len = __p . second;
   if ( ! __is_pod ( _Tp ) && _M_len > 0 )
     std :: uninitialized_fill_n ( _M_buffer, _M_len, * __first );
 }
      catch ( ... )
 {
   std :: return_temporary_buffer ( _M_buffer );
   _M_buffer = 0;
   _M_len = 0;
   throw;
 }
    }
# 203 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
}
# 69 "/usr/include/c++/4.4/bits/stl_algo.h" 3
namespace std __attribute__((visibility("default"))) {
# 83 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _Tp >
    inline const _Tp &
    __median ( const _Tp & __a, const _Tp & __b, const _Tp & __c )
    {


      if ( __a < __b )
 if ( __b < __c )
   return __b;
 else if ( __a < __c )
   return __c;
 else
   return __a;
      else if ( __a < __c )
 return __a;
      else if ( __b < __c )
 return __c;
      else
 return __b;
    }
# 117 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _Tp, typename _Compare >
    inline const _Tp &
    __median ( const _Tp & __a, const _Tp & __b, const _Tp & __c, _Compare __comp )
    {



      if ( __comp ( __a, __b ) )
 if ( __comp ( __b, __c ) )
   return __b;
 else if ( __comp ( __a, __c ) )
   return __c;
 else
   return __a;
      else if ( __comp ( __a, __c ) )
 return __a;
      else if ( __comp ( __b, __c ) )
 return __c;
      else
 return __b;
    }
# 142 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Tp >
    inline _InputIterator
    __find ( _InputIterator __first, _InputIterator __last,
    const _Tp & __val, input_iterator_tag )
    {
      while ( __first != __last && ! ( * __first == __val ) )
 ++ __first;
      return __first;
    }
# 153 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Predicate >
    inline _InputIterator
    __find_if ( _InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag )
    {
      while ( __first != __last && ! bool ( __pred ( * __first ) ) )
 ++ __first;
      return __first;
    }
# 164 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Tp >
    _RandomAccessIterator
    __find ( _RandomAccessIterator __first, _RandomAccessIterator __last,
    const _Tp & __val, random_access_iterator_tag )
    {
      typename iterator_traits < _RandomAccessIterator > :: difference_type
 __trip_count = ( __last - __first ) >> 2;

      for (; __trip_count > 0; -- __trip_count )
 {
   if ( * __first == __val )
     return __first;
   ++ __first;

   if ( * __first == __val )
     return __first;
   ++ __first;

   if ( * __first == __val )
     return __first;
   ++ __first;

   if ( * __first == __val )
     return __first;
   ++ __first;
 }

      switch ( __last - __first )
 {
 case 3 :
   if ( * __first == __val )
     return __first;
   ++ __first;
 case 2 :
   if ( * __first == __val )
     return __first;
   ++ __first;
 case 1 :
   if ( * __first == __val )
     return __first;
   ++ __first;
 case 0 :
 default :
   return __last;
 }
    }
# 212 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Predicate >
    _RandomAccessIterator
    __find_if ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag )
    {
      typename iterator_traits < _RandomAccessIterator > :: difference_type
 __trip_count = ( __last - __first ) >> 2;

      for (; __trip_count > 0; -- __trip_count )
 {
   if ( __pred ( * __first ) )
     return __first;
   ++ __first;

   if ( __pred ( * __first ) )
     return __first;
   ++ __first;

   if ( __pred ( * __first ) )
     return __first;
   ++ __first;

   if ( __pred ( * __first ) )
     return __first;
   ++ __first;
 }

      switch ( __last - __first )
 {
 case 3 :
   if ( __pred ( * __first ) )
     return __first;
   ++ __first;
 case 2 :
   if ( __pred ( * __first ) )
     return __first;
   ++ __first;
 case 1 :
   if ( __pred ( * __first ) )
     return __first;
   ++ __first;
 case 0 :
 default :
   return __last;
 }
    }
# 338 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Integer, typename _Tp >
    _ForwardIterator
    __search_n ( _ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp & __val,
        std :: forward_iterator_tag )
    {
      __first = std :: find ( __first, __last, __val );
      while ( __first != __last )
 {
   typename iterator_traits < _ForwardIterator > :: difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++ __i;
   while ( __i != __last && __n != 1 && * __i == __val )
     {
       ++ __i;
       -- __n;
     }
   if ( __n == 1 )
     return __first;
   if ( __i == __last )
     return __last;
   __first = std :: find ( ++ __i, __last, __val );
 }
      return __last;
    }
# 370 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIter, typename _Integer, typename _Tp >
    _RandomAccessIter
    __search_n ( _RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp & __val,
        std :: random_access_iterator_tag )
    {

      typedef typename std :: iterator_traits < _RandomAccessIter > :: difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if ( __tailSize < __pattSize )
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while ( 1 )
 {


   while ( ! ( * __lookAhead == __val ) )
     {
       if ( __tailSize < __pattSize )
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for ( _RandomAccessIter __backTrack = __lookAhead - 1;
        * __backTrack == __val; -- __backTrack )
     {
       if ( -- __remainder == 0 )
  return ( __lookAhead - __skipOffset );
     }
   if ( __remainder > __tailSize )
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }
# 423 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate >
    _ForwardIterator
    __search_n ( _ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp & __val,
        _BinaryPredicate __binary_pred, std :: forward_iterator_tag )
    {
      while ( __first != __last && ! bool ( __binary_pred ( * __first, __val ) ) )
        ++ __first;

      while ( __first != __last )
 {
   typename iterator_traits < _ForwardIterator > :: difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++ __i;
   while ( __i != __last && __n != 1 && bool ( __binary_pred ( * __i, __val ) ) )
     {
       ++ __i;
       -- __n;
     }
   if ( __n == 1 )
     return __first;
   if ( __i == __last )
     return __last;
   __first = ++ __i;
   while ( __first != __last
   && ! bool ( __binary_pred ( * __first, __val ) ) )
     ++ __first;
 }
      return __last;
    }
# 462 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIter, typename _Integer, typename _Tp,
    typename _BinaryPredicate >
    _RandomAccessIter
    __search_n ( _RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp & __val,
        _BinaryPredicate __binary_pred, std :: random_access_iterator_tag )
    {

      typedef typename std :: iterator_traits < _RandomAccessIter > :: difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if ( __tailSize < __pattSize )
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while ( 1 )
 {


   while ( ! bool ( __binary_pred ( * __lookAhead, __val ) ) )
     {
       if ( __tailSize < __pattSize )
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for ( _RandomAccessIter __backTrack = __lookAhead - 1;
        __binary_pred ( * __backTrack, __val ); -- __backTrack )
     {
       if ( -- __remainder == 0 )
  return ( __lookAhead - __skipOffset );
     }
   if ( __remainder > __tailSize )
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }
# 509 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    _ForwardIterator1
    __find_end ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag )
    {
      if ( __first2 == __last2 )
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while ( 1 )
     {
       _ForwardIterator1 __new_result
  = std :: search ( __first1, __last1, __first2, __last2 );
       if ( __new_result == __last1 )
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++ __first1;
  }
     }
 }
    }
# 536 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate >
    _ForwardIterator1
    __find_end ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp )
    {
      if ( __first2 == __last2 )
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while ( 1 )
     {
       _ForwardIterator1 __new_result
  = std :: search ( __first1, __last1, __first2,
      __last2, __comp );
       if ( __new_result == __last1 )
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++ __first1;
  }
     }
 }
    }
# 567 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator1, typename _BidirectionalIterator2 >
    _BidirectionalIterator1
    __find_end ( _BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag )
    {






      typedef reverse_iterator < _BidirectionalIterator1 > _RevIterator1;
      typedef reverse_iterator < _BidirectionalIterator2 > _RevIterator2;

      _RevIterator1 __rlast1 ( __first1 );
      _RevIterator2 __rlast2 ( __first2 );
      _RevIterator1 __rresult = std :: search ( _RevIterator1 ( __last1 ),
             __rlast1,
             _RevIterator2 ( __last2 ),
             __rlast2 );

      if ( __rresult == __rlast1 )
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult . base ( );
   std :: advance ( __result, - std :: distance ( __first2, __last2 ) );
   return __result;
 }
    }
# 601 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate >
    _BidirectionalIterator1
    __find_end ( _BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp )
    {






      typedef reverse_iterator < _BidirectionalIterator1 > _RevIterator1;
      typedef reverse_iterator < _BidirectionalIterator2 > _RevIterator2;

      _RevIterator1 __rlast1 ( __first1 );
      _RevIterator2 __rlast2 ( __first2 );
      _RevIterator1 __rresult = std :: search ( _RevIterator1 ( __last1 ), __rlast1,
         _RevIterator2 ( __last2 ), __rlast2,
         __comp );

      if ( __rresult == __rlast1 )
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult . base ( );
   std :: advance ( __result, - std :: distance ( __first2, __last2 ) );
   return __result;
 }
    }
# 661 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    inline _ForwardIterator1
    find_end ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2 )
    {






      ;
      ;

      return std :: __find_end ( __first1, __last1, __first2, __last2,
        std :: __iterator_category ( __first1 ),
        std :: __iterator_category ( __first2 ) );
    }
# 707 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate >
    inline _ForwardIterator1
    find_end ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp )
    {






      ;
      ;

      return std :: __find_end ( __first1, __last1, __first2, __last2,
        std :: __iterator_category ( __first1 ),
        std :: __iterator_category ( __first2 ),
        __comp );
    }
# 886 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator, typename _Tp >
    _OutputIterator
    remove_copy ( _InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp & __value )
    {






      ;

      for (; __first != __last; ++ __first )
 if ( ! ( * __first == __value ) )
   {
     * __result = * __first;
     ++ __result;
   }
      return __result;
    }
# 923 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _Predicate >
    _OutputIterator
    remove_copy_if ( _InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred )
    {






      ;

      for (; __first != __last; ++ __first )
 if ( ! bool ( __pred ( * __first ) ) )
   {
     * __result = * __first;
     ++ __result;
   }
      return __result;
    }
# 1098 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    _ForwardIterator
    remove ( _ForwardIterator __first, _ForwardIterator __last,
    const _Tp & __value )
    {





      ;

      __first = std :: find ( __first, __last, __value );
      if ( __first == __last )
        return __first;
      _ForwardIterator __result = __first;
      ++ __first;
      for (; __first != __last; ++ __first )
        if ( ! ( * __first == __value ) )
          {
            * __result = ( * __first );
            ++ __result;
          }
      return __result;
    }
# 1141 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate >
    _ForwardIterator
    remove_if ( _ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred )
    {





      ;

      __first = std :: find_if ( __first, __last, __pred );
      if ( __first == __last )
        return __first;
      _ForwardIterator __result = __first;
      ++ __first;
      for (; __first != __last; ++ __first )
        if ( ! bool ( __pred ( * __first ) ) )
          {
            * __result = ( * __first );
            ++ __result;
          }
      return __result;
    }
# 1181 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    _ForwardIterator
    unique ( _ForwardIterator __first, _ForwardIterator __last )
    {





      ;


      __first = std :: adjacent_find ( __first, __last );
      if ( __first == __last )
 return __last;


      _ForwardIterator __dest = __first;
      ++ __first;
      while ( ++ __first != __last )
 if ( ! ( * __dest == * __first ) )
   * ++ __dest = ( * __first );
      return ++ __dest;
    }
# 1221 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _BinaryPredicate >
    _ForwardIterator
    unique ( _ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred )
    {






      ;


      __first = std :: adjacent_find ( __first, __last, __binary_pred );
      if ( __first == __last )
 return __last;


      _ForwardIterator __dest = __first;
      ++ __first;
      while ( ++ __first != __last )
 if ( ! bool ( __binary_pred ( * __dest, * __first ) ) )
   * ++ __dest = ( * __first );
      return ++ __dest;
    }
# 1253 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _OutputIterator >
    _OutputIterator
    __unique_copy ( _ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result,
    forward_iterator_tag, output_iterator_tag )
    {

      _ForwardIterator __next = __first;
      * __result = * __first;
      while ( ++ __next != __last )
 if ( ! ( * __first == * __next ) )
   {
     __first = __next;
     * ++ __result = * __first;
   }
      return ++ __result;
    }
# 1276 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator >
    _OutputIterator
    __unique_copy ( _InputIterator __first, _InputIterator __last,
    _OutputIterator __result,
    input_iterator_tag, output_iterator_tag )
    {

      typename iterator_traits < _InputIterator > :: value_type __value = * __first;
      * __result = __value;
      while ( ++ __first != __last )
 if ( ! ( __value == * __first ) )
   {
     __value = * __first;
     * ++ __result = __value;
   }
      return ++ __result;
    }
# 1299 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _ForwardIterator >
    _ForwardIterator
    __unique_copy ( _InputIterator __first, _InputIterator __last,
    _ForwardIterator __result,
    input_iterator_tag, forward_iterator_tag )
    {

      * __result = * __first;
      while ( ++ __first != __last )
 if ( ! ( * __result == * __first ) )
   * ++ __result = * __first;
      return ++ __result;
    }
# 1319 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate >
    _OutputIterator
    __unique_copy ( _ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag )
    {





      _ForwardIterator __next = __first;
      * __result = * __first;
      while ( ++ __next != __last )
 if ( ! bool ( __binary_pred ( * __first, * __next ) ) )
   {
     __first = __next;
     * ++ __result = * __first;
   }
      return ++ __result;
    }
# 1348 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate >
    _OutputIterator
    __unique_copy ( _InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag )
    {





      typename iterator_traits < _InputIterator > :: value_type __value = * __first;
      * __result = __value;
      while ( ++ __first != __last )
 if ( ! bool ( __binary_pred ( __value, * __first ) ) )
   {
     __value = * __first;
     * ++ __result = __value;
   }
      return ++ __result;
    }
# 1377 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate >
    _ForwardIterator
    __unique_copy ( _InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag )
    {





      * __result = * __first;
      while ( ++ __first != __last )
 if ( ! bool ( __binary_pred ( * __result, * __first ) ) )
   * ++ __result = * __first;
      return ++ __result;
    }
# 1401 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    void
    __reverse ( _BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag )
    {
      while ( true )
 if ( __first == __last || __first == -- __last )
   return;
 else
   {
     std :: iter_swap ( __first, __last );
     ++ __first;
   }
    }
# 1421 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __reverse ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag )
    {
      if ( __first == __last )
 return;
      -- __last;
      while ( __first < __last )
 {
   std :: iter_swap ( __first, __last );
   ++ __first;
   -- __last;
 }
    }
# 1449 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    inline void
    reverse ( _BidirectionalIterator __first, _BidirectionalIterator __last )
    {



      ;
      std :: __reverse ( __first, __last, std :: __iterator_category ( __first ) );
    }
# 1476 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _OutputIterator >
    _OutputIterator
    reverse_copy ( _BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result )
    {





      ;

      while ( __first != __last )
 {
   -- __last;
   * __result = * __last;
   ++ __result;
 }
      return __result;
    }
# 1501 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _EuclideanRingElement >
    _EuclideanRingElement
    __gcd ( _EuclideanRingElement __m, _EuclideanRingElement __n )
    {
      while ( __n != 0 )
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }
# 1515 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    void
    __rotate ( _ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag )
    {
      if ( __first == __middle || __last == __middle )
 return;

      _ForwardIterator __first2 = __middle;
      do
 {
   std :: iter_swap ( __first, __first2 );
   ++ __first;
   ++ __first2;
   if ( __first == __middle )
     __middle = __first2;
 }
      while ( __first2 != __last );

      __first2 = __middle;

      while ( __first2 != __last )
 {
   std :: iter_swap ( __first, __first2 );
   ++ __first;
   ++ __first2;
   if ( __first == __middle )
     __middle = __first2;
   else if ( __first2 == __last )
     __first2 = __middle;
 }
    }
# 1551 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    void
    __rotate ( _BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag )
    {




      if ( __first == __middle || __last == __middle )
 return;

      std :: __reverse ( __first, __middle, bidirectional_iterator_tag ( ) );
      std :: __reverse ( __middle, __last, bidirectional_iterator_tag ( ) );

      while ( __first != __middle && __middle != __last )
 {
   std :: iter_swap ( __first, -- __last );
   ++ __first;
 }

      if ( __first == __middle )
 std :: __reverse ( __middle, __last, bidirectional_iterator_tag ( ) );
      else
 std :: __reverse ( __first, __middle, bidirectional_iterator_tag ( ) );
    }
# 1581 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __rotate ( _RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag )
    {




      if ( __first == __middle || __last == __middle )
 return;

      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _Distance;
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      const _Distance __n = __last - __first;
      const _Distance __k = __middle - __first;
      const _Distance __l = __n - __k;

      if ( __k == __l )
 {
   std :: swap_ranges ( __first, __middle, __middle );
   return;
 }

      const _Distance __d = std :: __gcd ( __n, __k );

      for ( _Distance __i = 0; __i < __d; __i ++ )
 {
   _ValueType __tmp = ( * __first );
   _RandomAccessIterator __p = __first;

   if ( __k < __l )
     {
       for ( _Distance __j = 0; __j < __l / __d; __j ++ )
  {
    if ( __p > __first + __l )
      {
        * __p = ( * ( __p - __l ) );
        __p -= __l;
      }

    * __p = ( * ( __p + __k ) );
    __p += __k;
  }
     }
   else
     {
       for ( _Distance __j = 0; __j < __k / __d - 1; __j ++ )
  {
    if ( __p < __last - __k )
      {
        * __p = ( * ( __p + __k ) );
        __p += __k;
      }
    * __p = ( * ( __p - __l ) );
    __p -= __l;
  }
     }

   * __p = ( __tmp );
   ++ __first;
 }
    }
# 1669 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    inline void
    rotate ( _ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last )
    {



      ;
      ;

      typedef typename iterator_traits < _ForwardIterator > :: iterator_category
 _IterType;
      std :: __rotate ( __first, __middle, __last, _IterType ( ) );
    }
# 1703 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _OutputIterator >
    _OutputIterator
    rotate_copy ( _ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result )
    {




      ;
      ;

      return std :: copy ( __first, __middle,
                       std :: copy ( __middle, __last, __result ) );
    }
# 1720 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate >
    _ForwardIterator
    __partition ( _ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag )
    {
      if ( __first == __last )
 return __first;

      while ( __pred ( * __first ) )
 if ( ++ __first == __last )
   return __first;

      _ForwardIterator __next = __first;

      while ( ++ __next != __last )
 if ( __pred ( * __next ) )
   {
     std :: iter_swap ( __first, __next );
     ++ __first;
   }

      return __first;
    }
# 1745 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Predicate >
    _BidirectionalIterator
    __partition ( _BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag )
    {
      while ( true )
 {
   while ( true )
     if ( __first == __last )
       return __first;
     else if ( __pred ( * __first ) )
       ++ __first;
     else
       break;
   -- __last;
   while ( true )
     if ( __first == __last )
       return __first;
     else if ( ! bool ( __pred ( * __last ) ) )
       -- __last;
     else
       break;
   std :: iter_swap ( __first, __last );
   ++ __first;
 }
    }
# 1775 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate, typename _Distance >
    _ForwardIterator
    __inplace_stable_partition ( _ForwardIterator __first,
          _ForwardIterator __last,
          _Predicate __pred, _Distance __len )
    {
      if ( __len == 1 )
 return __pred ( * __first ) ? __last : __first;
      _ForwardIterator __middle = __first;
      std :: advance ( __middle, __len / 2 );
      _ForwardIterator __begin = std :: __inplace_stable_partition ( __first,
         __middle,
         __pred,
         __len / 2 );
      _ForwardIterator __end = std :: __inplace_stable_partition ( __middle, __last,
              __pred,
              __len
              - __len / 2 );
      std :: rotate ( __begin, __middle, __end );
      std :: advance ( __begin, std :: distance ( __middle, __end ) );
      return __begin;
    }
# 1799 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance >
    _ForwardIterator
    __stable_partition_adaptive ( _ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size )
    {
      if ( __len <= __buffer_size )
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;
   for (; __first != __last; ++ __first )
     if ( __pred ( * __first ) )
       {
  * __result1 = * __first;
  ++ __result1;
       }
     else
       {
  * __result2 = * __first;
  ++ __result2;
       }
   std :: copy ( __buffer, __result2, __result1 );
   return __result1;
 }
      else
 {
   _ForwardIterator __middle = __first;
   std :: advance ( __middle, __len / 2 );
   _ForwardIterator __begin =
     std :: __stable_partition_adaptive ( __first, __middle, __pred,
          __len / 2, __buffer,
          __buffer_size );
   _ForwardIterator __end =
     std :: __stable_partition_adaptive ( __middle, __last, __pred,
          __len - __len / 2,
          __buffer, __buffer_size );
   std :: rotate ( __begin, __middle, __end );
   std :: advance ( __begin, std :: distance ( __middle, __end ) );
   return __begin;
 }
    }
# 1861 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate >
    _ForwardIterator
    stable_partition ( _ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred )
    {





      ;

      if ( __first == __last )
 return __first;
      else
 {
   typedef typename iterator_traits < _ForwardIterator > :: value_type
     _ValueType;
   typedef typename iterator_traits < _ForwardIterator > :: difference_type
     _DistanceType;

   _Temporary_buffer < _ForwardIterator, _ValueType > __buf ( __first,
        __last );
 if ( __buf . size ( ) > 0 )
   return
     std :: __stable_partition_adaptive ( __first, __last, __pred,
       _DistanceType ( __buf . requested_size ( ) ),
       __buf . begin ( ),
       _DistanceType ( __buf . size ( ) ) );
 else
   return
     std :: __inplace_stable_partition ( __first, __last, __pred,
      _DistanceType ( __buf . requested_size ( ) ) );
 }
    }
# 1898 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __heap_select ( _RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last )
    {
      std :: make_heap ( __first, __middle );
      for ( _RandomAccessIterator __i = __middle; __i < __last; ++ __i )
 if ( * __i < * __first )
   std :: __pop_heap ( __first, __middle, __i );
    }
# 1911 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    __heap_select ( _RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp )
    {
      std :: make_heap ( __first, __middle, __comp );
      for ( _RandomAccessIterator __i = __middle; __i < __last; ++ __i )
 if ( __comp ( * __i, * __first ) )
   std :: __pop_heap ( __first, __middle, __i, __comp );
    }
# 1943 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _RandomAccessIterator >
    _RandomAccessIterator
    partial_sort_copy ( _InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last )
    {
      typedef typename iterator_traits < _InputIterator > :: value_type
 _InputValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _OutputValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;
# 1963 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      if ( __result_first == __result_last )
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while ( __first != __last && __result_real_last != __result_last )
 {
   * __result_real_last = * __first;
   ++ __result_real_last;
   ++ __first;
 }
      std :: make_heap ( __result_first, __result_real_last );
      while ( __first != __last )
 {
   if ( * __first < * __result_first )
     std :: __adjust_heap ( __result_first, _DistanceType ( 0 ),
          _DistanceType ( __result_real_last
          - __result_first ),
          _InputValueType ( * __first ) );
   ++ __first;
 }
      std :: sort_heap ( __result_first, __result_real_last );
      return __result_real_last;
    }
# 2009 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _RandomAccessIterator, typename _Compare >
    _RandomAccessIterator
    partial_sort_copy ( _InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator > :: value_type
 _InputValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _OutputValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;
# 2033 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      if ( __result_first == __result_last )
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while ( __first != __last && __result_real_last != __result_last )
 {
   * __result_real_last = * __first;
   ++ __result_real_last;
   ++ __first;
 }
      std :: make_heap ( __result_first, __result_real_last, __comp );
      while ( __first != __last )
 {
   if ( __comp ( * __first, * __result_first ) )
     std :: __adjust_heap ( __result_first, _DistanceType ( 0 ),
          _DistanceType ( __result_real_last
          - __result_first ),
          _InputValueType ( * __first ),
          __comp );
   ++ __first;
 }
      std :: sort_heap ( __result_first, __result_real_last, __comp );
      return __result_real_last;
    }
# 2061 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Tp >
    void
    __unguarded_linear_insert ( _RandomAccessIterator __last, _Tp __val )
    {
      _RandomAccessIterator __next = __last;
      -- __next;
      while ( __val < * __next )
 {
   * __last = * __next;
   __last = __next;
   -- __next;
 }
      * __last = __val;
    }
# 2077 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Tp, typename _Compare >
    void
    __unguarded_linear_insert ( _RandomAccessIterator __last, _Tp __val,
         _Compare __comp )
    {
      _RandomAccessIterator __next = __last;
      -- __next;
      while ( __comp ( __val, * __next ) )
 {
   * __last = * __next;
   __last = __next;
   -- __next;
 }
      * __last = __val;
    }
# 2094 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __insertion_sort ( _RandomAccessIterator __first,
       _RandomAccessIterator __last )
    {
      if ( __first == __last )
 return;

      for ( _RandomAccessIterator __i = __first + 1; __i != __last; ++ __i )
 {
   typename iterator_traits < _RandomAccessIterator > :: value_type
     __val = * __i;
   if ( __val < * __first )
     {
       std :: copy_backward ( __first, __i, __i + 1 );
       * __first = __val;
     }
   else
     std :: __unguarded_linear_insert ( __i, __val );
 }
    }
# 2117 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    __insertion_sort ( _RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp )
    {
      if ( __first == __last ) return;

      for ( _RandomAccessIterator __i = __first + 1; __i != __last; ++ __i )
 {
   typename iterator_traits < _RandomAccessIterator > :: value_type
     __val = * __i;
   if ( __comp ( __val, * __first ) )
     {
       std :: copy_backward ( __first, __i, __i + 1 );
       * __first = __val;
     }
   else
     std :: __unguarded_linear_insert ( __i, __val, __comp );
 }
    }
# 2139 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    __unguarded_insertion_sort ( _RandomAccessIterator __first,
          _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      for ( _RandomAccessIterator __i = __first; __i != __last; ++ __i )
 std :: __unguarded_linear_insert ( __i, _ValueType ( * __i ) );
    }
# 2152 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    __unguarded_insertion_sort ( _RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      for ( _RandomAccessIterator __i = __first; __i != __last; ++ __i )
 std :: __unguarded_linear_insert ( __i, _ValueType ( * __i ), __comp );
    }
# 2168 "/usr/include/c++/4.4/bits/stl_algo.h" 3
enum { _S_threshold = 16};
# 2171 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __final_insertion_sort ( _RandomAccessIterator __first,
      _RandomAccessIterator __last )
    {
      if ( __last - __first > int ( _S_threshold ) )
 {
   std :: __insertion_sort ( __first, __first + int ( _S_threshold ) );
   std :: __unguarded_insertion_sort ( __first + int ( _S_threshold ), __last );
 }
      else
 std :: __insertion_sort ( __first, __last );
    }
# 2186 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    __final_insertion_sort ( _RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp )
    {
      if ( __last - __first > int ( _S_threshold ) )
 {
   std :: __insertion_sort ( __first, __first + int ( _S_threshold ), __comp );
   std :: __unguarded_insertion_sort ( __first + int ( _S_threshold ), __last,
       __comp );
 }
      else
 std :: __insertion_sort ( __first, __last, __comp );
    }
# 2202 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Tp >
    _RandomAccessIterator
    __unguarded_partition ( _RandomAccessIterator __first,
     _RandomAccessIterator __last, _Tp __pivot )
    {
      while ( true )
 {
   while ( * __first < __pivot )
     ++ __first;
   -- __last;
   while ( __pivot < * __last )
     -- __last;
   if ( ! ( __first < __last ) )
     return __first;
   std :: iter_swap ( __first, __last );
   ++ __first;
 }
    }
# 2222 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Tp, typename _Compare >
    _RandomAccessIterator
    __unguarded_partition ( _RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _Tp __pivot, _Compare __comp )
    {
      while ( true )
 {
   while ( __comp ( * __first, __pivot ) )
     ++ __first;
   -- __last;
   while ( __comp ( __pivot, * __last ) )
     -- __last;
   if ( ! ( __first < __last ) )
     return __first;
   std :: iter_swap ( __first, __last );
   ++ __first;
 }
    }
# 2243 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Size >
    void
    __introsort_loop ( _RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      while ( __last - __first > int ( _S_threshold ) )
 {
   if ( __depth_limit == 0 )
     {
       std :: partial_sort ( __first, __last, __last );
       return;
     }
   -- __depth_limit;
   _RandomAccessIterator __cut =
     std :: __unguarded_partition ( __first, __last,
           _ValueType ( std :: __median ( * __first,
        * ( __first
          + ( __last
             - __first )
          / 2 ),
        * ( __last
          - 1 ) ) ) );
   std :: __introsort_loop ( __cut, __last, __depth_limit );
   __last = __cut;
 }
    }
# 2275 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Size, typename _Compare >
    void
    __introsort_loop ( _RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      while ( __last - __first > int ( _S_threshold ) )
 {
   if ( __depth_limit == 0 )
     {
       std :: partial_sort ( __first, __last, __last, __comp );
       return;
     }
   -- __depth_limit;
   _RandomAccessIterator __cut =
     std :: __unguarded_partition ( __first, __last,
           _ValueType ( std :: __median ( * __first,
        * ( __first
          + ( __last
             - __first )
          / 2 ),
        * ( __last - 1 ),
        __comp ) ),
           __comp );
   std :: __introsort_loop ( __cut, __last, __depth_limit, __comp );
   __last = __cut;
 }
    }
# 2308 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _Size >
    inline _Size
    __lg ( _Size __n )
    {
      _Size __k;
      for ( __k = 0; __n != 0; __n >>= 1 )
 ++ __k;
      return __k - 1;
    }
# 2319 "/usr/include/c++/4.4/bits/stl_algo.h" 3
inline int __lg(int __n)
# 2320 "/usr/include/c++/4.4/bits/stl_algo.h" 3
{ return ((sizeof(int) * (8)) - (1)) - (__builtin_clz(__n)); }
# 2323 "/usr/include/c++/4.4/bits/stl_algo.h" 3
inline long __lg(long __n)
# 2324 "/usr/include/c++/4.4/bits/stl_algo.h" 3
{ return ((sizeof(long) * (8)) - (1)) - (__builtin_clzl(__n)); }
# 2327 "/usr/include/c++/4.4/bits/stl_algo.h" 3
inline long long __lg(long long __n)
# 2328 "/usr/include/c++/4.4/bits/stl_algo.h" 3
{ return ((sizeof(long long) * (8)) - (1)) - (__builtin_clzll(__n)); }
# 2332 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Size >
    void
    __introselect ( _RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      while ( __last - __first > 3 )
 {
   if ( __depth_limit == 0 )
     {
       std :: __heap_select ( __first, __nth + 1, __last );


       std :: iter_swap ( __first, __nth );
       return;
     }
   -- __depth_limit;
   _RandomAccessIterator __cut =
     std :: __unguarded_partition ( __first, __last,
           _ValueType ( std :: __median ( * __first,
        * ( __first
          + ( __last
             - __first )
          / 2 ),
        * ( __last
          - 1 ) ) ) );
   if ( __cut <= __nth )
     __first = __cut;
   else
     __last = __cut;
 }
      std :: __insertion_sort ( __first, __last );
    }
# 2368 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Size, typename _Compare >
    void
    __introselect ( _RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      while ( __last - __first > 3 )
 {
   if ( __depth_limit == 0 )
     {
       std :: __heap_select ( __first, __nth + 1, __last, __comp );

       std :: iter_swap ( __first, __nth );
       return;
     }
   -- __depth_limit;
   _RandomAccessIterator __cut =
     std :: __unguarded_partition ( __first, __last,
           _ValueType ( std :: __median ( * __first,
        * ( __first
          + ( __last
             - __first )
          / 2 ),
        * ( __last - 1 ),
        __comp ) ),
           __comp );
   if ( __cut <= __nth )
     __first = __cut;
   else
     __last = __cut;
 }
      std :: __insertion_sort ( __first, __last, __comp );
    }
# 2418 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    _ForwardIterator
    lower_bound ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;




      ;

      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( * __middle < __val )
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2469 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Compare >
    _ForwardIterator
    lower_bound ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val, _Compare __comp )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;





      ;


      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( __comp ( * __middle, __val ) )
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2518 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    _ForwardIterator
    upper_bound ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;




      ;

      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( __val < * __middle )
     __len = __half;
   else
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2569 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Compare >
    _ForwardIterator
    upper_bound ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val, _Compare __comp )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;





      ;


      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( __comp ( __val, * __middle ) )
     __len = __half;
   else
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2624 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    pair < _ForwardIterator, _ForwardIterator >
    equal_range ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;





      ;
      ;

      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle, __left, __right;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( * __middle < __val )
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
   else if ( __val < * __middle )
     __len = __half;
   else
     {
       __left = std :: lower_bound ( __first, __middle, __val );
       std :: advance ( __first, __len );
       __right = std :: upper_bound ( ++ __middle, __first, __val );
       return pair < _ForwardIterator, _ForwardIterator > ( __left, __right );
     }
 }
      return pair < _ForwardIterator, _ForwardIterator > ( __first, __first );
    }
# 2686 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Compare >
    pair < _ForwardIterator, _ForwardIterator >
    equal_range ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val,
  _Compare __comp )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;







      ;

      ;


      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle, __left, __right;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( __comp ( * __middle, __val ) )
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
   else if ( __comp ( __val, * __middle ) )
     __len = __half;
   else
     {
       __left = std :: lower_bound ( __first, __middle, __val, __comp );
       std :: advance ( __first, __len );
       __right = std :: upper_bound ( ++ __middle, __first, __val, __comp );
       return pair < _ForwardIterator, _ForwardIterator > ( __left, __right );
     }
 }
      return pair < _ForwardIterator, _ForwardIterator > ( __first, __first );
    }
# 2747 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    bool
    binary_search ( _ForwardIterator __first, _ForwardIterator __last,
                  const _Tp & __val )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;




      ;
      ;

      _ForwardIterator __i = std :: lower_bound ( __first, __last, __val );
      return __i != __last && ! ( __val < * __i );
    }
# 2780 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Compare >
    bool
    binary_search ( _ForwardIterator __first, _ForwardIterator __last,
                  const _Tp & __val, _Compare __comp )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;





      ;

      ;


      _ForwardIterator __i = std :: lower_bound ( __first, __last, __val, __comp );
      return __i != __last && ! bool ( __comp ( __val, * __i ) );
    }
# 2804 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3 >
    _BidirectionalIterator3
    __merge_backward ( _BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result )
    {
      if ( __first1 == __last1 )
 return std :: copy_backward ( __first2, __last2, __result );
      if ( __first2 == __last2 )
 return std :: copy_backward ( __first1, __last1, __result );
      -- __last1;
      -- __last2;
      while ( true )
 {
   if ( * __last2 < * __last1 )
     {
       * -- __result = * __last1;
       if ( __first1 == __last1 )
  return std :: copy_backward ( __first2, ++ __last2, __result );
       -- __last1;
     }
   else
     {
       * -- __result = * __last2;
       if ( __first2 == __last2 )
  return std :: copy_backward ( __first1, ++ __last1, __result );
       -- __last2;
     }
 }
    }
# 2839 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare >
    _BidirectionalIterator3
    __merge_backward ( _BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp )
    {
      if ( __first1 == __last1 )
 return std :: copy_backward ( __first2, __last2, __result );
      if ( __first2 == __last2 )
 return std :: copy_backward ( __first1, __last1, __result );
      -- __last1;
      -- __last2;
      while ( true )
 {
   if ( __comp ( * __last2, * __last1 ) )
     {
       * -- __result = * __last1;
       if ( __first1 == __last1 )
  return std :: copy_backward ( __first2, ++ __last2, __result );
       -- __last1;
     }
   else
     {
       * -- __result = * __last2;
       if ( __first2 == __last2 )
  return std :: copy_backward ( __first1, ++ __last1, __result );
       -- __last2;
     }
 }
    }
# 2875 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance >
    _BidirectionalIterator1
    __rotate_adaptive ( _BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size )
    {
      _BidirectionalIterator2 __buffer_end;
      if ( __len1 > __len2 && __len2 <= __buffer_size )
 {
   __buffer_end = std :: copy ( __middle, __last, __buffer );
   std :: copy_backward ( __first, __middle, __last );
   return std :: copy ( __buffer, __buffer_end, __first );
 }
      else if ( __len1 <= __buffer_size )
 {
   __buffer_end = std :: copy ( __first, __middle, __buffer );
   std :: copy ( __middle, __last, __first );
   return std :: copy_backward ( __buffer, __buffer_end, __last );
 }
      else
 {
   std :: rotate ( __first, __middle, __last );
   std :: advance ( __first, std :: distance ( __middle, __last ) );
   return __first;
 }
    }
# 2907 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Distance,
    typename _Pointer >
    void
    __merge_adaptive ( _BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size )
    {
      if ( __len1 <= __len2 && __len1 <= __buffer_size )
 {
   _Pointer __buffer_end = std :: copy ( __first, __middle, __buffer );
   std :: merge ( __buffer, __buffer_end, __middle, __last,
    __first );
 }
      else if ( __len2 <= __buffer_size )
 {
   _Pointer __buffer_end = std :: copy ( __middle, __last, __buffer );
   std :: __merge_backward ( __first, __middle, __buffer,
    __buffer_end, __last );
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if ( __len1 > __len2 )
     {
       __len11 = __len1 / 2;
       std :: advance ( __first_cut, __len11 );
       __second_cut = std :: lower_bound ( __middle, __last,
           * __first_cut );
       __len22 = std :: distance ( __middle, __second_cut );
     }
   else
     {
       __len22 = __len2 / 2;
       std :: advance ( __second_cut, __len22 );
       __first_cut = std :: upper_bound ( __first, __middle,
          * __second_cut );
       __len11 = std :: distance ( __first, __first_cut );
     }
   _BidirectionalIterator __new_middle =
     std :: __rotate_adaptive ( __first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size );
   std :: __merge_adaptive ( __first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size );
   std :: __merge_adaptive ( __new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer, __buffer_size );
 }
    }
# 2963 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare >
    void
    __merge_adaptive ( _BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp )
    {
      if ( __len1 <= __len2 && __len1 <= __buffer_size )
 {
   _Pointer __buffer_end = std :: copy ( __first, __middle, __buffer );
   std :: merge ( __buffer, __buffer_end, __middle, __last,
    __first, __comp );
 }
      else if ( __len2 <= __buffer_size )
 {
   _Pointer __buffer_end = std :: copy ( __middle, __last, __buffer );
   std :: __merge_backward ( __first, __middle, __buffer, __buffer_end,
    __last, __comp );
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if ( __len1 > __len2 )
     {
       __len11 = __len1 / 2;
       std :: advance ( __first_cut, __len11 );
       __second_cut = std :: lower_bound ( __middle, __last, * __first_cut,
           __comp );
       __len22 = std :: distance ( __middle, __second_cut );
     }
   else
     {
       __len22 = __len2 / 2;
       std :: advance ( __second_cut, __len22 );
       __first_cut = std :: upper_bound ( __first, __middle, * __second_cut,
          __comp );
       __len11 = std :: distance ( __first, __first_cut );
     }
   _BidirectionalIterator __new_middle =
     std :: __rotate_adaptive ( __first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size );
   std :: __merge_adaptive ( __first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp );
   std :: __merge_adaptive ( __new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp );
 }
    }
# 3021 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Distance >
    void
    __merge_without_buffer ( _BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2 )
    {
      if ( __len1 == 0 || __len2 == 0 )
 return;
      if ( __len1 + __len2 == 2 )
 {
   if ( * __middle < * __first )
     std :: iter_swap ( __first, __middle );
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if ( __len1 > __len2 )
 {
   __len11 = __len1 / 2;
   std :: advance ( __first_cut, __len11 );
   __second_cut = std :: lower_bound ( __middle, __last, * __first_cut );
   __len22 = std :: distance ( __middle, __second_cut );
 }
      else
 {
   __len22 = __len2 / 2;
   std :: advance ( __second_cut, __len22 );
   __first_cut = std :: upper_bound ( __first, __middle, * __second_cut );
   __len11 = std :: distance ( __first, __first_cut );
 }
      std :: rotate ( __first_cut, __middle, __second_cut );
      _BidirectionalIterator __new_middle = __first_cut;
      std :: advance ( __new_middle, std :: distance ( __middle, __second_cut ) );
      std :: __merge_without_buffer ( __first, __first_cut, __new_middle,
      __len11, __len22 );
      std :: __merge_without_buffer ( __new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22 );
    }
# 3064 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Distance,
    typename _Compare >
    void
    __merge_without_buffer ( _BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp )
    {
      if ( __len1 == 0 || __len2 == 0 )
 return;
      if ( __len1 + __len2 == 2 )
 {
   if ( __comp ( * __middle, * __first ) )
     std :: iter_swap ( __first, __middle );
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if ( __len1 > __len2 )
 {
   __len11 = __len1 / 2;
   std :: advance ( __first_cut, __len11 );
   __second_cut = std :: lower_bound ( __middle, __last, * __first_cut,
       __comp );
   __len22 = std :: distance ( __middle, __second_cut );
 }
      else
 {
   __len22 = __len2 / 2;
   std :: advance ( __second_cut, __len22 );
   __first_cut = std :: upper_bound ( __first, __middle, * __second_cut,
      __comp );
   __len11 = std :: distance ( __first, __first_cut );
 }
      std :: rotate ( __first_cut, __middle, __second_cut );
      _BidirectionalIterator __new_middle = __first_cut;
      std :: advance ( __new_middle, std :: distance ( __middle, __second_cut ) );
      std :: __merge_without_buffer ( __first, __first_cut, __new_middle,
      __len11, __len22, __comp );
      std :: __merge_without_buffer ( __new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp );
    }
# 3128 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    void
    inplace_merge ( _BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last )
    {
      typedef typename iterator_traits < _BidirectionalIterator > :: value_type
          _ValueType;
      typedef typename iterator_traits < _BidirectionalIterator > :: difference_type
          _DistanceType;





      ;
      ;

      if ( __first == __middle || __middle == __last )
 return;

      _DistanceType __len1 = std :: distance ( __first, __middle );
      _DistanceType __len2 = std :: distance ( __middle, __last );

      _Temporary_buffer < _BidirectionalIterator, _ValueType > __buf ( __first,
          __last );
      if ( __buf . begin ( ) == 0 )
 std :: __merge_without_buffer ( __first, __middle, __last, __len1, __len2 );
      else
 std :: __merge_adaptive ( __first, __middle, __last, __len1, __len2,
         __buf . begin ( ), _DistanceType ( __buf . size ( ) ) );
    }
# 3183 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Compare >
    void
    inplace_merge ( _BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp )
    {
      typedef typename iterator_traits < _BidirectionalIterator > :: value_type
          _ValueType;
      typedef typename iterator_traits < _BidirectionalIterator > :: difference_type
          _DistanceType;






      ;
      ;

      if ( __first == __middle || __middle == __last )
 return;

      const _DistanceType __len1 = std :: distance ( __first, __middle );
      const _DistanceType __len2 = std :: distance ( __middle, __last );

      _Temporary_buffer < _BidirectionalIterator, _ValueType > __buf ( __first,
          __last );
      if ( __buf . begin ( ) == 0 )
 std :: __merge_without_buffer ( __first, __middle, __last, __len1,
        __len2, __comp );
      else
 std :: __merge_adaptive ( __first, __middle, __last, __len1, __len2,
         __buf . begin ( ), _DistanceType ( __buf . size ( ) ),
         __comp );
    }
# 3220 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance >
    void
    __merge_sort_loop ( _RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result,
        _Distance __step_size )
    {
      const _Distance __two_step = 2 * __step_size;

      while ( __last - __first >= __two_step )
 {
   __result = std :: merge ( __first, __first + __step_size,
        __first + __step_size,
        __first + __two_step,
        __result );
   __first += __two_step;
 }

      __step_size = std :: min ( _Distance ( __last - __first ), __step_size );
      std :: merge ( __first, __first + __step_size,
       __first + __step_size, __last,
       __result );
    }
# 3245 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare >
    void
    __merge_sort_loop ( _RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp )
    {
      const _Distance __two_step = 2 * __step_size;

      while ( __last - __first >= __two_step )
 {
   __result = std :: merge ( __first, __first + __step_size,
    __first + __step_size, __first + __two_step,
    __result,
    __comp );
   __first += __two_step;
 }
      __step_size = std :: min ( _Distance ( __last - __first ), __step_size );

      std :: merge ( __first, __first + __step_size,
       __first + __step_size, __last, __result, __comp );
    }
# 3269 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Distance >
    void
    __chunk_insertion_sort ( _RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size )
    {
      while ( __last - __first >= __chunk_size )
 {
   std :: __insertion_sort ( __first, __first + __chunk_size );
   __first += __chunk_size;
 }
      std :: __insertion_sort ( __first, __last );
    }
# 3283 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Distance,
    typename _Compare >
    void
    __chunk_insertion_sort ( _RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp )
    {
      while ( __last - __first >= __chunk_size )
 {
   std :: __insertion_sort ( __first, __first + __chunk_size, __comp );
   __first += __chunk_size;
 }
      std :: __insertion_sort ( __first, __last, __comp );
    }
# 3298 "/usr/include/c++/4.4/bits/stl_algo.h" 3
enum { _S_chunk_size = 7};
# 3300 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Pointer >
    void
    __merge_sort_with_buffer ( _RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std :: __chunk_insertion_sort ( __first, __last, __step_size );

      while ( __step_size < __len )
 {
   std :: __merge_sort_loop ( __first, __last, __buffer, __step_size );
   __step_size *= 2;
   std :: __merge_sort_loop ( __buffer, __buffer_last, __first, __step_size );
   __step_size *= 2;
 }
    }
# 3324 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Pointer, typename _Compare >
    void
    __merge_sort_with_buffer ( _RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std :: __chunk_insertion_sort ( __first, __last, __step_size, __comp );

      while ( __step_size < __len )
 {
   std :: __merge_sort_loop ( __first, __last, __buffer,
     __step_size, __comp );
   __step_size *= 2;
   std :: __merge_sort_loop ( __buffer, __buffer_last, __first,
     __step_size, __comp );
   __step_size *= 2;
 }
    }
# 3350 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Pointer,
    typename _Distance >
    void
    __stable_sort_adaptive ( _RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size )
    {
      const _Distance __len = ( __last - __first + 1 ) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if ( __len > __buffer_size )
 {
   std :: __stable_sort_adaptive ( __first, __middle,
          __buffer, __buffer_size );
   std :: __stable_sort_adaptive ( __middle, __last,
          __buffer, __buffer_size );
 }
      else
 {
   std :: __merge_sort_with_buffer ( __first, __middle, __buffer );
   std :: __merge_sort_with_buffer ( __middle, __last, __buffer );
 }
      std :: __merge_adaptive ( __first, __middle, __last,
       _Distance ( __middle - __first ),
       _Distance ( __last - __middle ),
       __buffer, __buffer_size );
    }
# 3377 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare >
    void
    __stable_sort_adaptive ( _RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp )
    {
      const _Distance __len = ( __last - __first + 1 ) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if ( __len > __buffer_size )
 {
   std :: __stable_sort_adaptive ( __first, __middle, __buffer,
          __buffer_size, __comp );
   std :: __stable_sort_adaptive ( __middle, __last, __buffer,
          __buffer_size, __comp );
 }
      else
 {
   std :: __merge_sort_with_buffer ( __first, __middle, __buffer, __comp );
   std :: __merge_sort_with_buffer ( __middle, __last, __buffer, __comp );
 }
      std :: __merge_adaptive ( __first, __middle, __last,
       _Distance ( __middle - __first ),
       _Distance ( __last - __middle ),
       __buffer, __buffer_size,
       __comp );
    }
# 3407 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __inplace_stable_sort ( _RandomAccessIterator __first,
     _RandomAccessIterator __last )
    {
      if ( __last - __first < 15 )
 {
   std :: __insertion_sort ( __first, __last );
   return;
 }
      _RandomAccessIterator __middle = __first + ( __last - __first ) / 2;
      std :: __inplace_stable_sort ( __first, __middle );
      std :: __inplace_stable_sort ( __middle, __last );
      std :: __merge_without_buffer ( __first, __middle, __last,
      __middle - __first,
      __last - __middle );
    }
# 3426 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    __inplace_stable_sort ( _RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp )
    {
      if ( __last - __first < 15 )
 {
   std :: __insertion_sort ( __first, __last, __comp );
   return;
 }
      _RandomAccessIterator __middle = __first + ( __last - __first ) / 2;
      std :: __inplace_stable_sort ( __first, __middle, __comp );
      std :: __inplace_stable_sort ( __middle, __last, __comp );
      std :: __merge_without_buffer ( __first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp );
    }
# 3468 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2 >
    bool
    includes ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2 )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;






      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( * __first2 < * __first1 )
   return false;
 else if ( * __first1 < * __first2 )
   ++ __first1;
 else
   ++ __first1, ++ __first2;

      return __first2 == __last2;
    }
# 3517 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _Compare >
    bool
    includes ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 3536 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( __comp ( * __first2, * __first1 ) )
   return false;
 else if ( __comp ( * __first1, * __first2 ) )
   ++ __first1;
 else
   ++ __first1, ++ __first2;

      return __first2 == __last2;
    }
# 3572 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    bool
    next_permutation ( _BidirectionalIterator __first,
       _BidirectionalIterator __last )
    {





      ;

      if ( __first == __last )
 return false;
      _BidirectionalIterator __i = __first;
      ++ __i;
      if ( __i == __last )
 return false;
      __i = __last;
      -- __i;

      for (;; )
 {
   _BidirectionalIterator __ii = __i;
   -- __i;
   if ( * __i < * __ii )
     {
       _BidirectionalIterator __j = __last;
       while ( ! ( * __i < * -- __j ) )
  { }
       std :: iter_swap ( __i, __j );
       std :: reverse ( __ii, __last );
       return true;
     }
   if ( __i == __first )
     {
       std :: reverse ( __first, __last );
       return false;
     }
 }
    }
# 3629 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Compare >
    bool
    next_permutation ( _BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp )
    {






      ;

      if ( __first == __last )
 return false;
      _BidirectionalIterator __i = __first;
      ++ __i;
      if ( __i == __last )
 return false;
      __i = __last;
      -- __i;

      for (;; )
 {
   _BidirectionalIterator __ii = __i;
   -- __i;
   if ( __comp ( * __i, * __ii ) )
     {
       _BidirectionalIterator __j = __last;
       while ( ! bool ( __comp ( * __i, * -- __j ) ) )
  { }
       std :: iter_swap ( __i, __j );
       std :: reverse ( __ii, __last );
       return true;
     }
   if ( __i == __first )
     {
       std :: reverse ( __first, __last );
       return false;
     }
 }
    }
# 3685 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    bool
    prev_permutation ( _BidirectionalIterator __first,
       _BidirectionalIterator __last )
    {





      ;

      if ( __first == __last )
 return false;
      _BidirectionalIterator __i = __first;
      ++ __i;
      if ( __i == __last )
 return false;
      __i = __last;
      -- __i;

      for (;; )
 {
   _BidirectionalIterator __ii = __i;
   -- __i;
   if ( * __ii < * __i )
     {
       _BidirectionalIterator __j = __last;
       while ( ! ( * -- __j < * __i ) )
  { }
       std :: iter_swap ( __i, __j );
       std :: reverse ( __ii, __last );
       return true;
     }
   if ( __i == __first )
     {
       std :: reverse ( __first, __last );
       return false;
     }
 }
    }
# 3742 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Compare >
    bool
    prev_permutation ( _BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp )
    {






      ;

      if ( __first == __last )
 return false;
      _BidirectionalIterator __i = __first;
      ++ __i;
      if ( __i == __last )
 return false;
      __i = __last;
      -- __i;

      for (;; )
 {
   _BidirectionalIterator __ii = __i;
   -- __i;
   if ( __comp ( * __ii, * __i ) )
     {
       _BidirectionalIterator __j = __last;
       while ( ! bool ( __comp ( * -- __j, * __i ) ) )
  { }
       std :: iter_swap ( __i, __j );
       std :: reverse ( __ii, __last );
       return true;
     }
   if ( __i == __first )
     {
       std :: reverse ( __first, __last );
       return false;
     }
 }
    }
# 3802 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator, typename _Tp >
    _OutputIterator
    replace_copy ( _InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp & __old_value, const _Tp & __new_value )
    {






      ;

      for (; __first != __last; ++ __first, ++ __result )
 if ( * __first == __old_value )
   * __result = __new_value;
 else
   * __result = * __first;
      return __result;
    }
# 3839 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp >
    _OutputIterator
    replace_copy_if ( _InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp & __new_value )
    {






      ;

      for (; __first != __last; ++ __first, ++ __result )
 if ( __pred ( * __first ) )
   * __result = __new_value;
 else
   * __result = * __first;
      return __result;
    }
# 4176 "/usr/include/c++/4.4/bits/stl_algo.h" 3
}
# 4178 "/usr/include/c++/4.4/bits/stl_algo.h" 3
namespace std __attribute__((visibility("default"))) {
# 4192 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Function >
    _Function
    for_each ( _InputIterator __first, _InputIterator __last, _Function __f )
    {


      ;
      for (; __first != __last; ++ __first )
 __f ( * __first );
      return __f;
    }
# 4213 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Tp >
    inline _InputIterator
    find ( _InputIterator __first, _InputIterator __last,
  const _Tp & __val )
    {




      ;
      return std :: __find ( __first, __last, __val,
           std :: __iterator_category ( __first ) );
    }
# 4237 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Predicate >
    inline _InputIterator
    find_if ( _InputIterator __first, _InputIterator __last,
     _Predicate __pred )
    {




      ;
      return std :: __find_if ( __first, __last, __pred,
       std :: __iterator_category ( __first ) );
    }
# 4266 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _ForwardIterator >
    _InputIterator
    find_first_of ( _InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2 )
    {






      ;
      ;

      for (; __first1 != __last1; ++ __first1 )
 for ( _ForwardIterator __iter = __first2; __iter != __last2; ++ __iter )
   if ( * __first1 == * __iter )
     return __first1;
      return __last1;
    }
# 4305 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate >
    _InputIterator
    find_first_of ( _InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp )
    {






      ;
      ;

      for (; __first1 != __last1; ++ __first1 )
 for ( _ForwardIterator __iter = __first2; __iter != __last2; ++ __iter )
   if ( __comp ( * __first1, * __iter ) )
     return __first1;
      return __last1;
    }
# 4337 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    _ForwardIterator
    adjacent_find ( _ForwardIterator __first, _ForwardIterator __last )
    {




      ;
      if ( __first == __last )
 return __last;
      _ForwardIterator __next = __first;
      while ( ++ __next != __last )
 {
   if ( * __first == * __next )
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4369 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _BinaryPredicate >
    _ForwardIterator
    adjacent_find ( _ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred )
    {





      ;
      if ( __first == __last )
 return __last;
      _ForwardIterator __next = __first;
      while ( ++ __next != __last )
 {
   if ( __binary_pred ( * __first, * __next ) )
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4401 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Tp >
    typename iterator_traits < _InputIterator > :: difference_type
    count ( _InputIterator __first, _InputIterator __last, const _Tp & __value )
    {




      ;
      typename iterator_traits < _InputIterator > :: difference_type __n = 0;
      for (; __first != __last; ++ __first )
 if ( * __first == __value )
   ++ __n;
      return __n;
    }
# 4426 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Predicate >
    typename iterator_traits < _InputIterator > :: difference_type
    count_if ( _InputIterator __first, _InputIterator __last, _Predicate __pred )
    {




      ;
      typename iterator_traits < _InputIterator > :: difference_type __n = 0;
      for (; __first != __last; ++ __first )
 if ( __pred ( * __first ) )
   ++ __n;
      return __n;
    }
# 4466 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    _ForwardIterator1
    search ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2 )
    {






      ;
      ;


      if ( __first1 == __last1 || __first2 == __last2 )
 return __first1;


      _ForwardIterator2 __p1 ( __first2 );
      if ( ++ __p1 == __last2 )
 return std :: find ( __first1, __last1, * __first2 );


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;; )
 {
   __first1 = std :: find ( __first1, __last1, * __first2 );
   if ( __first1 == __last1 )
     return __last1;

   __p = __p1;
   __current = __first1;
   if ( ++ __current == __last1 )
     return __last1;

   while ( * __current == * __p )
     {
       if ( ++ __p == __last2 )
  return __first1;
       if ( ++ __current == __last1 )
  return __last1;
     }
   ++ __first1;
 }
      return __first1;
    }
# 4537 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate >
    _ForwardIterator1
    search ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate )
    {






      ;
      ;


      if ( __first1 == __last1 || __first2 == __last2 )
 return __first1;


      _ForwardIterator2 __p1 ( __first2 );
      if ( ++ __p1 == __last2 )
 {
   while ( __first1 != __last1
   && ! bool ( __predicate ( * __first1, * __first2 ) ) )
     ++ __first1;
   return __first1;
 }


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;; )
 {
   while ( __first1 != __last1
   && ! bool ( __predicate ( * __first1, * __first2 ) ) )
     ++ __first1;
   if ( __first1 == __last1 )
     return __last1;

   __p = __p1;
   __current = __first1;
   if ( ++ __current == __last1 )
     return __last1;

   while ( __predicate ( * __current, * __p ) )
     {
       if ( ++ __p == __last2 )
  return __first1;
       if ( ++ __current == __last1 )
  return __last1;
     }
   ++ __first1;
 }
      return __first1;
    }
# 4611 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Integer, typename _Tp >
    _ForwardIterator
    search_n ( _ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp & __val )
    {




      ;

      if ( __count <= 0 )
 return __first;
      if ( __count == 1 )
 return std :: find ( __first, __last, __val );
      return std :: __search_n ( __first, __last, __count, __val,
        std :: __iterator_category ( __first ) );
    }
# 4647 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate >
    _ForwardIterator
    search_n ( _ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp & __val,
      _BinaryPredicate __binary_pred )
    {




      ;

      if ( __count <= 0 )
 return __first;
      if ( __count == 1 )
 {
   while ( __first != __last && ! bool ( __binary_pred ( * __first, __val ) ) )
     ++ __first;
   return __first;
 }
      return std :: __search_n ( __first, __last, __count, __val, __binary_pred,
        std :: __iterator_category ( __first ) );
    }
# 4689 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation >
    _OutputIterator
    transform ( _InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op )
    {





      ;

      for (; __first != __last; ++ __first, ++ __result )
 * __result = __unary_op ( * __first );
      return __result;
    }
# 4725 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation >
    _OutputIterator
    transform ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op )
    {






      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2, ++ __result )
 * __result = __binary_op ( * __first1, * __first2 );
      return __result;
    }
# 4758 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    void
    replace ( _ForwardIterator __first, _ForwardIterator __last,
     const _Tp & __old_value, const _Tp & __new_value )
    {







      ;

      for (; __first != __last; ++ __first )
 if ( * __first == __old_value )
   * __first = __new_value;
    }
# 4790 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate, typename _Tp >
    void
    replace_if ( _ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp & __new_value )
    {







      ;

      for (; __first != __last; ++ __first )
 if ( __pred ( * __first ) )
   * __first = __new_value;
    }
# 4822 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Generator >
    void
    generate ( _ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen )
    {




      ;

      for (; __first != __last; ++ __first )
 * __first = __gen ( );
    }
# 4850 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _OutputIterator, typename _Size, typename _Generator >
    _OutputIterator
    generate_n ( _OutputIterator __first, _Size __n, _Generator __gen )
    {





      for (; __n > 0; -- __n, ++ __first )
 * __first = __gen ( );
      return __first;
    }
# 4886 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator >
    inline _OutputIterator
    unique_copy ( _InputIterator __first, _InputIterator __last,
  _OutputIterator __result )
    {






      ;

      if ( __first == __last )
 return __result;
      return std :: __unique_copy ( __first, __last, __result,
    std :: __iterator_category ( __first ),
    std :: __iterator_category ( __result ) );
    }
# 4925 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate >
    inline _OutputIterator
    unique_copy ( _InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred )
    {




      ;

      if ( __first == __last )
 return __result;
      return std :: __unique_copy ( __first, __last, __result, __binary_pred,
    std :: __iterator_category ( __first ),
    std :: __iterator_category ( __result ) );
    }
# 4957 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    random_shuffle ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {



      ;

      if ( __first != __last )
 for ( _RandomAccessIterator __i = __first + 1; __i != __last; ++ __i )
   std :: iter_swap ( __i, __first + ( std :: rand ( ) % ( ( __i - __first ) + 1 ) ) );
    }
# 4985 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _RandomNumberGenerator >
    void
    random_shuffle ( _RandomAccessIterator __first, _RandomAccessIterator __last,
     _RandomNumberGenerator & __rand )
    {



      ;

      if ( __first == __last )
 return;
      for ( _RandomAccessIterator __i = __first + 1; __i != __last; ++ __i )
 std :: iter_swap ( __i, __first + __rand ( ( __i - __first ) + 1 ) );
    }
# 5017 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate >
    inline _ForwardIterator
    partition ( _ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred )
    {





      ;

      return std :: __partition ( __first, __last, __pred,
         std :: __iterator_category ( __first ) );
    }
# 5051 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    partial_sort ( _RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;





      ;
      ;

      std :: __heap_select ( __first, __middle, __last );
      std :: sort_heap ( __first, __middle );
    }
# 5090 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    partial_sort ( _RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;






      ;
      ;

      std :: __heap_select ( __first, __middle, __last, __comp );
      std :: sort_heap ( __first, __middle, __comp );
    }
# 5128 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    nth_element ( _RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;





      ;
      ;

      if ( __first == __last || __nth == __last )
 return;

      std :: __introselect ( __first, __nth, __last,
    std :: __lg ( __last - __first ) * 2 );
    }
# 5167 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    nth_element ( _RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;






      ;
      ;

      if ( __first == __last || __nth == __last )
 return;

      std :: __introselect ( __first, __nth, __last,
    std :: __lg ( __last - __first ) * 2, __comp );
    }
# 5205 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    sort ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;





      ;

      if ( __first != __last )
 {
   std :: __introsort_loop ( __first, __last,
    std :: __lg ( __last - __first ) * 2 );
   std :: __final_insertion_sort ( __first, __last );
 }
    }
# 5241 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    sort ( _RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;






      ;

      if ( __first != __last )
 {
   std :: __introsort_loop ( __first, __last,
    std :: __lg ( __last - __first ) * 2, __comp );
   std :: __final_insertion_sort ( __first, __last, __comp );
 }
    }
# 5282 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator >
    _OutputIterator
    merge ( _InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5302 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 {
   if ( * __first2 < * __first1 )
     {
       * __result = * __first2;
       ++ __first2;
     }
   else
     {
       * __result = * __first1;
       ++ __first1;
     }
   ++ __result;
 }
      return std :: copy ( __first2, __last2, std :: copy ( __first1, __last1,
          __result ) );
    }
# 5345 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare >
    _OutputIterator
    merge ( _InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5366 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 {
   if ( __comp ( * __first2, * __first1 ) )
     {
       * __result = * __first2;
       ++ __first2;
     }
   else
     {
       * __result = * __first1;
       ++ __first1;
     }
   ++ __result;
 }
      return std :: copy ( __first2, __last2, std :: copy ( __first1, __last1,
          __result ) );
    }
# 5405 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    stable_sort ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;





      ;

      _Temporary_buffer < _RandomAccessIterator, _ValueType > __buf ( __first,
         __last );
      if ( __buf . begin ( ) == 0 )
 std :: __inplace_stable_sort ( __first, __last );
      else
 std :: __stable_sort_adaptive ( __first, __last, __buf . begin ( ),
        _DistanceType ( __buf . size ( ) ) );
    }
# 5447 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    stable_sort ( _RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;







      ;

      _Temporary_buffer < _RandomAccessIterator, _ValueType > __buf ( __first,
         __last );
      if ( __buf . begin ( ) == 0 )
 std :: __inplace_stable_sort ( __first, __last, __comp );
      else
 std :: __stable_sort_adaptive ( __first, __last, __buf . begin ( ),
        _DistanceType ( __buf . size ( ) ), __comp );
    }
# 5493 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator >
    _OutputIterator
    set_union ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5514 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 {
   if ( * __first1 < * __first2 )
     {
       * __result = * __first1;
       ++ __first1;
     }
   else if ( * __first2 < * __first1 )
     {
       * __result = * __first2;
       ++ __first2;
     }
   else
     {
       * __result = * __first1;
       ++ __first1;
       ++ __first2;
     }
   ++ __result;
 }
      return std :: copy ( __first2, __last2, std :: copy ( __first1, __last1,
          __result ) );
    }
# 5560 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare >
    _OutputIterator
    set_union ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5583 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 {
   if ( __comp ( * __first1, * __first2 ) )
     {
       * __result = * __first1;
       ++ __first1;
     }
   else if ( __comp ( * __first2, * __first1 ) )
     {
       * __result = * __first2;
       ++ __first2;
     }
   else
     {
       * __result = * __first1;
       ++ __first1;
       ++ __first2;
     }
   ++ __result;
 }
      return std :: copy ( __first2, __last2, std :: copy ( __first1, __last1,
          __result ) );
    }
# 5627 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator >
    _OutputIterator
    set_intersection ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5646 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( * __first1 < * __first2 )
   ++ __first1;
 else if ( * __first2 < * __first1 )
   ++ __first2;
 else
   {
     * __result = * __first1;
     ++ __first1;
     ++ __first2;
     ++ __result;
   }
      return __result;
    }
# 5684 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare >
    _OutputIterator
    set_intersection ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5705 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( __comp ( * __first1, * __first2 ) )
   ++ __first1;
 else if ( __comp ( * __first2, * __first1 ) )
   ++ __first2;
 else
   {
     * __result = * __first1;
     ++ __first1;
     ++ __first2;
     ++ __result;
   }
      return __result;
    }
# 5742 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator >
    _OutputIterator
    set_difference ( _InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5761 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( * __first1 < * __first2 )
   {
     * __result = * __first1;
     ++ __first1;
     ++ __result;
   }
 else if ( * __first2 < * __first1 )
   ++ __first2;
 else
   {
     ++ __first1;
     ++ __first2;
   }
      return std :: copy ( __first1, __last1, __result );
    }
# 5803 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare >
    _OutputIterator
    set_difference ( _InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5824 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( __comp ( * __first1, * __first2 ) )
   {
     * __result = * __first1;
     ++ __first1;
     ++ __result;
   }
 else if ( __comp ( * __first2, * __first1 ) )
   ++ __first2;
 else
   {
     ++ __first1;
     ++ __first2;
   }
      return std :: copy ( __first1, __last1, __result );
    }
# 5861 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator >
    _OutputIterator
    set_symmetric_difference ( _InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5882 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( * __first1 < * __first2 )
   {
     * __result = * __first1;
     ++ __first1;
     ++ __result;
   }
 else if ( * __first2 < * __first1 )
   {
     * __result = * __first2;
     ++ __first2;
     ++ __result;
   }
 else
   {
     ++ __first1;
     ++ __first2;
   }
      return std :: copy ( __first2, __last2, std :: copy ( __first1,
          __last1, __result ) );
    }
# 5927 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare >
    _OutputIterator
    set_symmetric_difference ( _InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 5951 "/usr/include/c++/4.4/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( __comp ( * __first1, * __first2 ) )
   {
     * __result = * __first1;
     ++ __first1;
     ++ __result;
   }
 else if ( __comp ( * __first2, * __first1 ) )
   {
     * __result = * __first2;
     ++ __first2;
     ++ __result;
   }
 else
   {
     ++ __first1;
     ++ __first2;
   }
      return std :: copy ( __first2, __last2,
         std :: copy ( __first1, __last1, __result ) );
    }
# 5984 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    _ForwardIterator
    min_element ( _ForwardIterator __first, _ForwardIterator __last )
    {




      ;

      if ( __first == __last )
 return __first;
      _ForwardIterator __result = __first;
      while ( ++ __first != __last )
 if ( * __first < * __result )
   __result = __first;
      return __result;
    }
# 6012 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Compare >
    _ForwardIterator
    min_element ( _ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp )
    {





      ;

      if ( __first == __last )
 return __first;
      _ForwardIterator __result = __first;
      while ( ++ __first != __last )
 if ( __comp ( * __first, * __result ) )
   __result = __first;
      return __result;
    }
# 6040 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    _ForwardIterator
    max_element ( _ForwardIterator __first, _ForwardIterator __last )
    {




      ;

      if ( __first == __last )
 return __first;
      _ForwardIterator __result = __first;
      while ( ++ __first != __last )
 if ( * __result < * __first )
   __result = __first;
      return __result;
    }
# 6068 "/usr/include/c++/4.4/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Compare >
    _ForwardIterator
    max_element ( _ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp )
    {





      ;

      if ( __first == __last ) return __first;
      _ForwardIterator __result = __first;
      while ( ++ __first != __last )
 if ( __comp ( * __result, * __first ) )
   __result = __first;
      return __result;
    }
# 6088 "/usr/include/c++/4.4/bits/stl_algo.h" 3
}
# 23 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
namespace detail {
# 29 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
namespace host {
# 33 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
template<class InputIterator1, class
# 34 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
InputIterator2, class
# 35 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
OutputIterator, class
# 36 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
Predicate> OutputIterator
# 37 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
copy_if(InputIterator1 first, InputIterator1
# 38 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
last, InputIterator2
# 39 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
stencil, OutputIterator
# 40 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
result, Predicate
# 41 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
pred)
# 42 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
{
# 43 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
while (first != last)
# 44 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
{
# 45 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
if (pred(*stencil))
# 46 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
{
# 47 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
(*result) = (*first);
# 48 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
++result;
# 49 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
++first;
# 52 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
++stencil;
# 53 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
}
# 55 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
return result;
# 56 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
}
# 58 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
}
# 60 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
}
# 62 "/home/normal/checkout/thrust/thrust/detail/host/copy.h"
}
# 21 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
namespace thrust {
# 24 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
struct _1;
# 29 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
struct _2;
# 35 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
template<bool GreaterEqual, bool LessEqual> struct minimum_category_impl;
# 48 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
template<class T1, class T2> struct error_not_related_by_convertibility;
# 52 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
template<> struct minimum_category_impl< true, false> {
# 54 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
template<class T1, class T2> struct apply {
# 56 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
typedef T2 type;
# 57 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
};
# 58 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
};
# 61 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
template<> struct minimum_category_impl< false, true> {
# 63 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
template<class T1, class T2> struct apply {
# 65 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
typedef T1 type;
# 66 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
};
# 67 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
};
# 70 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
template<> struct minimum_category_impl< true, true> {
# 72 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
template<class T1, class T2> struct apply {
# 75 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
typedef T1 type;
# 76 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
};
# 77 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
};
# 80 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
template<> struct minimum_category_impl< false, false> {
# 82 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
template<class T1, class T2> struct apply : public error_not_related_by_convertibility< T1, T2> {
# 85 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
};
# 86 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
};
# 88 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
template<class T1 = _1, class T2 = _2>
# 89 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
struct minimum_category {
# 94 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
typedef minimum_category_impl< is_convertible< T1, T2> ::value, is_convertible< T2, T1> ::value> outer;
# 96 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
typedef typename minimum_category_impl< is_convertible< T1, T2> ::value, is_convertible< T2, T1> ::value> ::template apply< T1, T2> inner;
# 97 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
typedef typename minimum_category_impl< is_convertible< T1, T2> ::value, is_convertible< T2, T1> ::value> ::template apply< T1, T2> ::type type;
# 100 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
};
# 103 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
template<> struct minimum_category< _1, _2> {
# 105 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
template<class T1, class T2>
# 106 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
struct apply : public detail::minimum_category< T1, T2> {
# 107 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
};
# 110 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
};
# 112 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
}
# 114 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_category.h"
}
# 19 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.h"
namespace thrust {
# 22 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.h"
namespace detail {
# 25 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.h"
namespace device {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.h"
namespace omp {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.h"
template<class InputIterator, class
# 32 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.h"
OutputIterator> OutputIterator
# 31 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.h"
copy_device_to_device(InputIterator, InputIterator, OutputIterator);
# 37 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.h"
}
# 39 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.h"
}
# 41 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.h"
}
# 43 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.h"
}
# 28 "/home/normal/checkout/thrust/thrust/distance.h"
namespace thrust {
# 47 "/home/normal/checkout/thrust/thrust/distance.h"
template<class InputIterator> inline typename iterator_traits< InputIterator> ::difference_type distance(InputIterator, InputIterator);
# 54 "/home/normal/checkout/thrust/thrust/distance.h"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
namespace device {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
namespace detail {
# 39 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
template<class InputIterator> inline typename iterator_traits< InputIterator> ::difference_type
# 41 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
distance(InputIterator first, InputIterator last, incrementable_traversal_tag)
# 43 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
{
# 44 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
typename iterator_traits< InputIterator> ::difference_type result = 0;
# 46 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
while (first != last)
# 47 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
{
# 48 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
++first;
# 49 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
++result;
# 50 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
}
# 52 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
return result;
# 53 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
}
# 55 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
template<class InputIterator> inline typename iterator_traits< InputIterator> ::difference_type
# 57 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
distance(InputIterator first, InputIterator last, random_access_traversal_tag)
# 59 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
{
# 60 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
return last - first;
# 61 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
}
# 63 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
}
# 65 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
template<class InputIterator> inline typename iterator_traits< InputIterator> ::difference_type
# 67 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
distance(InputIterator first, InputIterator last)
# 68 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
{
# 70 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
return detail::distance(first, last, typename iterator_traversal< InputIterator> ::type());
# 72 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
}
# 75 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
}
# 77 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
}
# 79 "/home/normal/checkout/thrust/thrust/detail/device/distance.h"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
namespace dispatch {
# 39 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
template<class InputIterator> inline typename iterator_traits< InputIterator> ::difference_type
# 41 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
distance(InputIterator first, InputIterator last, host_space_tag)
# 43 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
{
# 44 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
return std::distance(first, last);
# 45 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
template<class InputIterator> inline typename iterator_traits< InputIterator> ::difference_type
# 53 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
distance(InputIterator first, InputIterator last, device_space_tag)
# 55 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
{
# 56 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
return device::distance(first, last);
# 57 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
}
# 62 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
template<class InputIterator> inline typename iterator_traits< InputIterator> ::difference_type
# 64 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
distance(InputIterator first, InputIterator last, any_space_tag)
# 66 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
{
# 68 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
return device::distance(first, last);
# 69 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
}
# 71 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
}
# 73 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
}
# 75 "/home/normal/checkout/thrust/thrust/detail/dispatch/distance.h"
}
# 25 "/home/normal/checkout/thrust/thrust/detail/distance.inl"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/detail/distance.inl"
template<class InputIterator> inline typename iterator_traits< InputIterator> ::difference_type
# 30 "/home/normal/checkout/thrust/thrust/detail/distance.inl"
distance(InputIterator first, InputIterator last)
# 31 "/home/normal/checkout/thrust/thrust/detail/distance.inl"
{
# 33 "/home/normal/checkout/thrust/thrust/detail/distance.inl"
return detail::dispatch::distance(first, last, typename iterator_space< InputIterator> ::type());
# 35 "/home/normal/checkout/thrust/thrust/detail/distance.inl"
}
# 37 "/home/normal/checkout/thrust/thrust/detail/distance.inl"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class T> class device_ptr;
# 33 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
namespace detail {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class Pointer> class normal_iterator;
# 39 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class Iterator, class Space> class forced_iterator;
# 42 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class Value, class
# 46 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
Incrementable, class
# 47 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
Space> class constant_iterator;
# 51 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class UnaryFunc, class Iterator, class Reference, class Value> class transform_iterator;
# 54 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class Incrementable, class
# 55 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
Space, class
# 56 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
Traversal, class
# 57 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
Difference> class counting_iterator;
# 60 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class IteratorTuple> class zip_iterator;
# 63 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class BidirectionalIterator> class reverse_iterator;
# 66 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class ElementIterator, class IndexIterator> class permutation_iterator;
# 69 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
namespace detail {
# 72 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
namespace device {
# 75 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class > struct dereference_result { };
# 78 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class T>
# 79 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
struct dereference_result< T *> {
# 81 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
typedef T &type;
# 82 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
};
# 85 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class T> inline typename dereference_result< T *> ::type
# 88 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
dereference(T *ptr)
# 89 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
{
# 90 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
return *ptr;
# 91 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
}
# 93 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class T, class IndexType> inline typename dereference_result< T *> ::type
# 96 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
dereference(T *ptr, IndexType n)
# 97 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
{
# 98 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
return ptr[n];
# 99 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
}
# 104 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class T> inline typename dereference_result< device_ptr< T> > ::type dereference(device_ptr< T> );
# 109 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class T, class IndexType> inline typename dereference_result< device_ptr< T> > ::type dereference(device_ptr< T> , IndexType);
# 117 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class T> inline typename dereference_result< normal_iterator< device_ptr< T> > > ::type dereference(const normal_iterator< device_ptr< T> > &);
# 122 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class T, class IndexType> inline typename dereference_result< normal_iterator< device_ptr< T> > > ::type dereference(const normal_iterator< device_ptr< T> > &, IndexType);
# 129 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class Iterator, class Space> inline typename dereference_result< forced_iterator< Iterator, Space> > ::type dereference(const forced_iterator< Iterator, Space> &);
# 134 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class Iterator, class Space, class IndexType> inline typename dereference_result< forced_iterator< Iterator, Space> > ::type dereference(const forced_iterator< Iterator, Space> &, IndexType);
# 142 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class UnaryFunc, class Iterator, class Reference, class Value> inline typename dereference_result< transform_iterator< UnaryFunc, Iterator, Reference, Value> > ::type dereference(const transform_iterator< UnaryFunc, Iterator, Reference, Value> &);
# 147 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class UnaryFunc, class Iterator, class Reference, class Value, class IndexType> inline typename dereference_result< transform_iterator< UnaryFunc, Iterator, Reference, Value> > ::type dereference(const transform_iterator< UnaryFunc, Iterator, Reference, Value> &, IndexType);
# 155 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class Incrementable, class Space, class Traversal, class Difference> inline typename dereference_result< counting_iterator< Incrementable, Space, Traversal, Difference> > ::type dereference(const counting_iterator< Incrementable, Space, Traversal, Difference> &);
# 160 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class Incrementable, class Space, class Traversal, class Difference, class IndexType> inline typename dereference_result< counting_iterator< Incrementable, Space, Traversal, Difference> > ::type dereference(const counting_iterator< Incrementable, Space, Traversal, Difference> &, IndexType);
# 167 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class Value, class Incrementable, class Space> inline typename dereference_result< constant_iterator< Value, Incrementable, Space> > ::type dereference(const constant_iterator< Value, Incrementable, Space> &);
# 172 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class Value, class Incrementable, class Space, class IndexType> inline typename dereference_result< constant_iterator< Value, Incrementable, Space> > ::type dereference(const constant_iterator< Value, Incrementable, Space> &, IndexType);
# 179 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class IteratorTuple> inline typename dereference_result< zip_iterator< IteratorTuple> > ::type dereference(const zip_iterator< IteratorTuple> &);
# 184 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class IteratorTuple, class IndexType> inline typename dereference_result< zip_iterator< IteratorTuple> > ::type dereference(const zip_iterator< IteratorTuple> &, IndexType);
# 191 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class BidirectionalIterator> inline typename dereference_result< reverse_iterator< BidirectionalIterator> > ::type dereference(const reverse_iterator< BidirectionalIterator> &);
# 196 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class BidirectionalIterator, class IndexType> inline typename dereference_result< reverse_iterator< BidirectionalIterator> > ::type dereference(const reverse_iterator< BidirectionalIterator> &, IndexType);
# 203 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class ElementIterator, class IndexIterator> inline typename dereference_result< permutation_iterator< ElementIterator, IndexIterator> > ::type dereference(const permutation_iterator< ElementIterator, IndexIterator> &);
# 208 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
template<class ElementIterator, class IndexIterator, class IndexType> inline typename dereference_result< permutation_iterator< ElementIterator, IndexIterator> > ::type dereference(const permutation_iterator< ElementIterator, IndexIterator> &, IndexType);
# 213 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
}
# 215 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
}
# 217 "/home/normal/checkout/thrust/thrust/detail/device/dereference.h"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
namespace detail {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
namespace device {
# 35 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
namespace omp {
# 38 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
template<class InputIterator, class
# 39 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
OutputIterator> OutputIterator
# 40 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
copy_device_to_device(InputIterator first, InputIterator
# 41 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
last, OutputIterator
# 42 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
result)
# 43 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
{
# 44 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
typedef typename iterator_difference< InputIterator> ::type difference;
# 46 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
difference n = (last - first);
# 53 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
for (difference i = 0; i < n; ++i)
# 56 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
{
# 57 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
InputIterator first_temp = (first + i);
# 58 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
OutputIterator result_temp = (result + i);
# 60 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
dereference(result_temp) = dereference(first_temp);
# 61 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
}
# 63 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
return result + n;
# 64 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
}
# 66 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
}
# 68 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
}
# 70 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
}
# 72 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_device.inl"
}
# 19 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.h"
namespace thrust {
# 22 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.h"
namespace detail {
# 25 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.h"
namespace device {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.h"
namespace omp {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.h"
template<class InputIterator, class
# 32 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.h"
OutputIterator> OutputIterator
# 31 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.h"
copy_host_or_any_to_device(InputIterator, InputIterator, OutputIterator);
# 37 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.h"
}
# 39 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.h"
}
# 41 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.h"
}
# 43 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.h"
}
# 37 "/home/normal/checkout/thrust/thrust/detail/static_assert.h"
namespace thrust {
# 40 "/home/normal/checkout/thrust/thrust/detail/static_assert.h"
namespace detail {
# 44 "/home/normal/checkout/thrust/thrust/detail/static_assert.h"
template<bool x> struct STATIC_ASSERTION_FAILURE;
# 46 "/home/normal/checkout/thrust/thrust/detail/static_assert.h"
template<> struct STATIC_ASSERTION_FAILURE< true> { enum { value = 1}; };
# 49 "/home/normal/checkout/thrust/thrust/detail/static_assert.h"
template<int x> struct static_assert_test { };
# 51 "/home/normal/checkout/thrust/thrust/detail/static_assert.h"
template<class , bool x>
# 52 "/home/normal/checkout/thrust/thrust/detail/static_assert.h"
struct depend_on_instantiation {
# 54 "/home/normal/checkout/thrust/thrust/detail/static_assert.h"
static const bool value = x;
# 55 "/home/normal/checkout/thrust/thrust/detail/static_assert.h"
};
# 57 "/home/normal/checkout/thrust/thrust/detail/static_assert.h"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/static_assert.h"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
namespace device {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
namespace omp {
# 39 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
template<class InputIterator, class
# 40 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
OutputIterator> OutputIterator
# 41 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
copy_host_or_any_to_device(InputIterator first, InputIterator
# 42 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
last, OutputIterator
# 43 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
result)
# 44 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
{
# 50 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
typedef static_assert_test< sizeof(STATIC_ASSERTION_FAILURE< (bool)depend_on_instantiation< InputIterator, false> ::value> )> thrust_static_assert_typedef_51;
# 52 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
typedef typename iterator_difference< InputIterator> ::type difference;
# 54 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
difference n = (last - first);
# 70 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
return result + n;
# 71 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
}
# 73 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
}
# 75 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
}
# 77 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
}
# 79 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_host_or_any_to_device.inl"
}
# 19 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.h"
namespace thrust {
# 22 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.h"
namespace detail {
# 25 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.h"
namespace device {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.h"
namespace omp {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.h"
template<class InputIterator, class
# 32 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.h"
OutputIterator> OutputIterator
# 31 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.h"
copy_device_to_host_or_any(InputIterator, InputIterator, OutputIterator);
# 37 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.h"
}
# 39 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.h"
}
# 41 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.h"
}
# 43 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.h"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
namespace device {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
namespace omp {
# 39 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
template<class InputIterator, class
# 40 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
OutputIterator> OutputIterator
# 41 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
copy_device_to_host_or_any(InputIterator first, InputIterator
# 42 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
last, OutputIterator
# 43 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
result)
# 44 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
{
# 50 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
typedef static_assert_test< sizeof(STATIC_ASSERTION_FAILURE< (bool)depend_on_instantiation< InputIterator, false> ::value> )> thrust_static_assert_typedef_51;
# 53 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
typedef typename iterator_difference< InputIterator> ::type difference;
# 55 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
difference n = (last - first);
# 71 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
return result + n;
# 72 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
}
# 74 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
}
# 76 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
}
# 78 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
}
# 80 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy_device_to_host_or_any.inl"
}
# 28 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
namespace thrust {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
namespace detail {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
namespace device {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
namespace omp {
# 40 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
namespace dispatch {
# 44 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
namespace detail {
# 49 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
template<class InputIterator, class
# 50 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
OutputIterator> OutputIterator
# 51 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
copy(InputIterator first, InputIterator
# 52 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
last, OutputIterator
# 53 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
result, omp_device_space_tag, omp_device_space_tag)
# 56 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
{
# 57 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
return omp::copy_device_to_device(first, last, result);
# 58 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
}
# 62 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
template<class InputIterator, class
# 63 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
OutputIterator, class
# 64 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
HostOrAnySpaceTag> OutputIterator
# 65 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
copy(InputIterator first, InputIterator
# 66 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
last, OutputIterator
# 67 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
result, HostOrAnySpaceTag, omp_device_space_tag)
# 70 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
{
# 71 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
return omp::copy_host_or_any_to_device(first, last, result);
# 72 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
}
# 76 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
template<class InputIterator, class
# 77 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
OutputIterator, class
# 78 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
HostOrAnySpaceTag> OutputIterator
# 79 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
copy(InputIterator first, InputIterator
# 80 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
last, OutputIterator
# 81 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
result, omp_device_space_tag, HostOrAnySpaceTag)
# 84 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
{
# 85 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
return omp::copy_device_to_host_or_any(first, last, result);
# 86 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
}
# 88 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
}
# 91 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
template<class InputIterator, class
# 92 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
OutputIterator> OutputIterator
# 93 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
copy(InputIterator first, InputIterator
# 94 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
last, OutputIterator
# 95 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
result, random_access_traversal_tag)
# 97 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
{
# 99 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
return detail::copy(first, last, result, typename iterator_space< InputIterator> ::type(), typename iterator_space< OutputIterator> ::type());
# 102 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
}
# 105 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
template<class InputIterator, class
# 106 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
OutputIterator> OutputIterator
# 107 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
copy(InputIterator first, InputIterator
# 108 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
last, OutputIterator
# 109 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
result, incrementable_traversal_tag)
# 111 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
{
# 113 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
return std::copy(first, last, result);
# 114 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
}
# 116 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
}
# 118 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
}
# 120 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
}
# 122 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
}
# 124 "/home/normal/checkout/thrust/thrust/detail/device/omp/dispatch/copy.h"
}
# 22 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
namespace thrust {
# 24 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
namespace detail {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
namespace device {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
namespace omp {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
template<class InputIterator, class
# 34 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
OutputIterator> OutputIterator
# 35 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
copy(InputIterator first, InputIterator
# 36 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
last, OutputIterator
# 37 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
result)
# 38 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
{
# 39 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
typedef typename iterator_traversal< InputIterator> ::type traversal1;
# 40 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
typedef typename iterator_traversal< OutputIterator> ::type traversal2;
# 44 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
typedef typename minimum_category< typename iterator_traversal< InputIterator> ::type, typename iterator_traversal< OutputIterator> ::type> ::type minimum_traversal;
# 47 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
return dispatch::copy(first, last, result, minimum_traversal());
# 48 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
}
# 52 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
}
# 53 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
}
# 54 "/home/normal/checkout/thrust/thrust/detail/device/omp/copy.h"
}
# 21 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
namespace thrust {
# 24 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
namespace detail {
# 31 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
struct _1;
# 32 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
struct _2;
# 38 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
template<bool GreaterEqual, bool LessEqual> struct minimum_space_impl;
# 51 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
template<class T1, class T2> struct error_not_related_by_convertibility;
# 55 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
template<> struct minimum_space_impl< true, false> {
# 57 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
template<class T1, class T2> struct apply {
# 59 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
typedef T2 type;
# 60 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
};
# 61 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
};
# 64 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
template<> struct minimum_space_impl< false, true> {
# 66 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
template<class T1, class T2> struct apply {
# 68 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
typedef T1 type;
# 69 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
};
# 70 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
};
# 73 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
template<> struct minimum_space_impl< true, true> {
# 75 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
template<class T1, class T2> struct apply {
# 78 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
typedef T1 type;
# 79 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
};
# 80 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
};
# 83 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
template<> struct minimum_space_impl< false, false> {
# 85 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
template<class T1, class T2> struct apply : public error_not_related_by_convertibility< T1, T2> {
# 88 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
};
# 89 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
};
# 91 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
template<class T1 = _1, class T2 = _2>
# 92 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
struct minimum_space {
# 97 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
typedef minimum_space_impl< is_convertible< T1, T2> ::value, is_convertible< T2, T1> ::value> outer;
# 99 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
typedef typename minimum_space_impl< is_convertible< T1, T2> ::value, is_convertible< T2, T1> ::value> ::template apply< T1, T2> inner;
# 100 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
typedef typename minimum_space_impl< is_convertible< T1, T2> ::value, is_convertible< T2, T1> ::value> ::template apply< T1, T2> ::type type;
# 103 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
};
# 106 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
template<> struct minimum_space< _1, _2> {
# 108 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
template<class T1, class T2>
# 109 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
struct apply : public detail::minimum_space< T1, T2> {
# 110 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
};
# 113 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
};
# 115 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
}
# 117 "/home/normal/checkout/thrust/thrust/iterator/detail/minimum_space.h"
}
# 29 "/home/normal/checkout/thrust/thrust/device_malloc.h"
namespace thrust {
# 65 "/home/normal/checkout/thrust/thrust/device_malloc.h"
inline device_ptr< void> device_malloc(const size_t);
# 95 "/home/normal/checkout/thrust/thrust/device_malloc.h"
template<class T> inline device_ptr< T> device_malloc(const size_t);
# 101 "/home/normal/checkout/thrust/thrust/device_malloc.h"
}
# 41 "/usr/include/c++/4.4/stdexcept" 3
namespace std __attribute__((visibility("default"))) {
# 53 "/usr/include/c++/4.4/stdexcept" 3
class logic_error : public exception {
# 55 "/usr/include/c++/4.4/stdexcept" 3
string _M_msg;
# 60 "/usr/include/c++/4.4/stdexcept" 3
public: explicit logic_error(const string &);
# 63 "/usr/include/c++/4.4/stdexcept" 3
virtual ~logic_error() throw();
# 68 "/usr/include/c++/4.4/stdexcept" 3
virtual const char *what() const throw();
# 69 "/usr/include/c++/4.4/stdexcept" 3
};
# 73 "/usr/include/c++/4.4/stdexcept" 3
class domain_error : public logic_error {
# 76 "/usr/include/c++/4.4/stdexcept" 3
public: explicit domain_error(const string &);
# 77 "/usr/include/c++/4.4/stdexcept" 3
};
# 80 "/usr/include/c++/4.4/stdexcept" 3
class invalid_argument : public logic_error {
# 83 "/usr/include/c++/4.4/stdexcept" 3
public: explicit invalid_argument(const string &);
# 84 "/usr/include/c++/4.4/stdexcept" 3
};
# 88 "/usr/include/c++/4.4/stdexcept" 3
class length_error : public logic_error {
# 91 "/usr/include/c++/4.4/stdexcept" 3
public: explicit length_error(const string &);
# 92 "/usr/include/c++/4.4/stdexcept" 3
};
# 96 "/usr/include/c++/4.4/stdexcept" 3
class out_of_range : public logic_error {
# 99 "/usr/include/c++/4.4/stdexcept" 3
public: explicit out_of_range(const string &);
# 100 "/usr/include/c++/4.4/stdexcept" 3
};
# 107 "/usr/include/c++/4.4/stdexcept" 3
class runtime_error : public exception {
# 109 "/usr/include/c++/4.4/stdexcept" 3
string _M_msg;
# 114 "/usr/include/c++/4.4/stdexcept" 3
public: explicit runtime_error(const string &);
# 117 "/usr/include/c++/4.4/stdexcept" 3
virtual ~runtime_error() throw();
# 122 "/usr/include/c++/4.4/stdexcept" 3
virtual const char *what() const throw();
# 123 "/usr/include/c++/4.4/stdexcept" 3
};
# 126 "/usr/include/c++/4.4/stdexcept" 3
class range_error : public runtime_error {
# 129 "/usr/include/c++/4.4/stdexcept" 3
public: explicit range_error(const string &);
# 130 "/usr/include/c++/4.4/stdexcept" 3
};
# 133 "/usr/include/c++/4.4/stdexcept" 3
class overflow_error : public runtime_error {
# 136 "/usr/include/c++/4.4/stdexcept" 3
public: explicit overflow_error(const string &);
# 137 "/usr/include/c++/4.4/stdexcept" 3
};
# 140 "/usr/include/c++/4.4/stdexcept" 3
class underflow_error : public runtime_error {
# 143 "/usr/include/c++/4.4/stdexcept" 3
public: explicit underflow_error(const string &);
# 144 "/usr/include/c++/4.4/stdexcept" 3
};
# 148 "/usr/include/c++/4.4/stdexcept" 3
}
# 28 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
namespace thrust {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
namespace detail {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
namespace device {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
namespace generic {
# 40 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
template<unsigned DummyParameterToAvoidInstantiation> device_ptr< void>
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
malloc(const size_t n)
# 42 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
{
# 43 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
void *result = std::malloc(n);
# 45 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
if (!(result))
# 46 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
{
# 47 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
throw std::bad_alloc();
# 48 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
}
# 50 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
return ((device_ptr< void> )(result));
# 51 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
}
# 53 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
}
# 55 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
}
# 57 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/device/generic/malloc.h"
}
# 28 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
namespace thrust {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
namespace detail {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
namespace device {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
namespace cuda {
# 40 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
template<unsigned DummyParameterToPreventInstantiation> device_ptr< void>
# 41 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
malloc(const size_t n)
# 42 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
{
# 43 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
void *result = (0);
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
cudaError_t error = cudaMalloc(reinterpret_cast< void **>((&result)), n);
# 47 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
if (error)
# 48 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
{
# 49 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
throw std::bad_alloc();
# 50 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
}
# 52 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
return ((device_ptr< void> )(result));
# 53 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
}
# 55 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
}
# 57 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
}
# 61 "/home/normal/checkout/thrust/thrust/detail/device/cuda/malloc.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
namespace thrust {
# 27 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
namespace detail {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
namespace device {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
namespace cuda {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
template<unsigned __T15> device_ptr< void> malloc(const size_t);
# 40 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
}
# 42 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
namespace dispatch {
# 45 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
template<unsigned DummyParameterToAvoidInstantiation> device_ptr< void>
# 46 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
malloc(const size_t n, device_space_tag)
# 48 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
{
# 49 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
return thrust::detail::device::generic::malloc< 0U> (n);
# 50 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
}
# 52 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
template<unsigned DummyParameterToAvoidInstantiation> device_ptr< void>
# 53 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
malloc(const size_t n, cuda_device_space_tag)
# 55 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
{
# 56 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
return thrust::detail::device::cuda::malloc< 0U> (n);
# 57 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
}
# 61 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
}
# 63 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
}
# 65 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/malloc.h"
}
# 25 "/home/normal/checkout/thrust/thrust/detail/device_malloc.inl"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/detail/device_malloc.inl"
inline device_ptr< void> device_malloc(const size_t n)
# 29 "/home/normal/checkout/thrust/thrust/detail/device_malloc.inl"
{
# 30 "/home/normal/checkout/thrust/thrust/detail/device_malloc.inl"
typedef detail::eval_if< false, detail::identity_< any_space_tag> , detail::eval_if< false, detail::identity_< host_space_tag> , detail::eval_if< true, detail::device_iterator_category_to_backend_space< detail::random_access_cuda_device_iterator_tag> , void> > > ::type space;
# 32 "/home/normal/checkout/thrust/thrust/detail/device_malloc.inl"
return thrust::detail::device::dispatch::malloc< 0U> (n, space());
# 33 "/home/normal/checkout/thrust/thrust/detail/device_malloc.inl"
}
# 35 "/home/normal/checkout/thrust/thrust/detail/device_malloc.inl"
template<class T> inline device_ptr< T>
# 36 "/home/normal/checkout/thrust/thrust/detail/device_malloc.inl"
device_malloc(const size_t n)
# 37 "/home/normal/checkout/thrust/thrust/detail/device_malloc.inl"
{
# 38 "/home/normal/checkout/thrust/thrust/detail/device_malloc.inl"
return thrust::device_malloc(n * sizeof(T));
# 39 "/home/normal/checkout/thrust/thrust/detail/device_malloc.inl"
}
# 41 "/home/normal/checkout/thrust/thrust/detail/device_malloc.inl"
}
# 28 "/home/normal/checkout/thrust/thrust/device_free.h"
namespace thrust {
# 61 "/home/normal/checkout/thrust/thrust/device_free.h"
inline void device_free(device_ptr< void> );
# 66 "/home/normal/checkout/thrust/thrust/device_free.h"
}
# 43 "/usr/include/c++/4.4/iostream" 3
namespace std __attribute__((visibility("default"))) {
# 58 "/usr/include/c++/4.4/iostream" 3
extern istream cin;
# 59 "/usr/include/c++/4.4/iostream" 3
extern ostream cout;
# 60 "/usr/include/c++/4.4/iostream" 3
extern ostream cerr;
# 61 "/usr/include/c++/4.4/iostream" 3
extern ostream clog;
# 64 "/usr/include/c++/4.4/iostream" 3
extern wistream wcin;
# 65 "/usr/include/c++/4.4/iostream" 3
extern wostream wcout;
# 66 "/usr/include/c++/4.4/iostream" 3
extern wostream wcerr;
# 67 "/usr/include/c++/4.4/iostream" 3
extern wostream wclog;
# 72 "/usr/include/c++/4.4/iostream" 3
static ios_base::Init __ioinit;
# 74 "/usr/include/c++/4.4/iostream" 3
}
# 27 "/home/normal/checkout/thrust/thrust/detail/device/generic/free.h"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/generic/free.h"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/generic/free.h"
namespace device {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/generic/free.h"
namespace generic {
# 39 "/home/normal/checkout/thrust/thrust/detail/device/generic/free.h"
template<unsigned DummyParameterToAvoidInstantiation> void
# 40 "/home/normal/checkout/thrust/thrust/detail/device/generic/free.h"
free(device_ptr< void> ptr)
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/free.h"
{
# 42 "/home/normal/checkout/thrust/thrust/detail/device/generic/free.h"
return std::free(ptr.get());
# 43 "/home/normal/checkout/thrust/thrust/detail/device/generic/free.h"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/device/generic/free.h"
}
# 47 "/home/normal/checkout/thrust/thrust/detail/device/generic/free.h"
}
# 49 "/home/normal/checkout/thrust/thrust/detail/device/generic/free.h"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/device/generic/free.h"
}
# 43 "/usr/include/bits/errno.h" 3
extern "C" int *__errno_location() throw() __attribute__((__const__));
# 55 "/usr/include/errno.h" 3
extern "C" { extern char *program_invocation_name, *program_invocation_short_name; }
# 69 "/usr/include/errno.h" 3
typedef int error_t;
# 30 "/home/normal/checkout/thrust/thrust/system/error_code.h"
namespace thrust {
# 33 "/home/normal/checkout/thrust/thrust/system/error_code.h"
namespace experimental {
# 36 "/home/normal/checkout/thrust/thrust/system/error_code.h"
namespace system {
# 40 "/home/normal/checkout/thrust/thrust/system/error_code.h"
class error_condition;
# 41 "/home/normal/checkout/thrust/thrust/system/error_code.h"
class error_code;
# 42 "/home/normal/checkout/thrust/thrust/system/error_code.h"
class error_condition;
# 45 "/home/normal/checkout/thrust/thrust/system/error_code.h"
template<class T> struct is_error_code_enum : public thrust::detail::false_type { };
# 47 "/home/normal/checkout/thrust/thrust/system/error_code.h"
template<class T> struct is_error_condition_enum : public thrust::detail::false_type { };
# 51 "/home/normal/checkout/thrust/thrust/system/error_code.h"
namespace errc {
# 54 "/home/normal/checkout/thrust/thrust/system/error_code.h"
enum errc_t {
# 56 "/home/normal/checkout/thrust/thrust/system/error_code.h"
address_family_not_supported = 97,
# 57 "/home/normal/checkout/thrust/thrust/system/error_code.h"
address_in_use,
# 58 "/home/normal/checkout/thrust/thrust/system/error_code.h"
address_not_available,
# 59 "/home/normal/checkout/thrust/thrust/system/error_code.h"
already_connected = 106,
# 60 "/home/normal/checkout/thrust/thrust/system/error_code.h"
argument_list_too_long = 7,
# 61 "/home/normal/checkout/thrust/thrust/system/error_code.h"
argument_out_of_domain = 33,
# 62 "/home/normal/checkout/thrust/thrust/system/error_code.h"
bad_address = 14,
# 63 "/home/normal/checkout/thrust/thrust/system/error_code.h"
bad_file_descriptor = 9,
# 64 "/home/normal/checkout/thrust/thrust/system/error_code.h"
bad_message = 74,
# 65 "/home/normal/checkout/thrust/thrust/system/error_code.h"
broken_pipe = 32,
# 66 "/home/normal/checkout/thrust/thrust/system/error_code.h"
connection_aborted = 103,
# 67 "/home/normal/checkout/thrust/thrust/system/error_code.h"
connection_already_in_progress = 114,
# 68 "/home/normal/checkout/thrust/thrust/system/error_code.h"
connection_refused = 111,
# 69 "/home/normal/checkout/thrust/thrust/system/error_code.h"
connection_reset = 104,
# 70 "/home/normal/checkout/thrust/thrust/system/error_code.h"
cross_device_link = 18,
# 71 "/home/normal/checkout/thrust/thrust/system/error_code.h"
destination_address_required = 89,
# 72 "/home/normal/checkout/thrust/thrust/system/error_code.h"
device_or_resource_busy = 16,
# 73 "/home/normal/checkout/thrust/thrust/system/error_code.h"
directory_not_empty = 39,
# 74 "/home/normal/checkout/thrust/thrust/system/error_code.h"
executable_format_error = 8,
# 75 "/home/normal/checkout/thrust/thrust/system/error_code.h"
file_exists = 17,
# 76 "/home/normal/checkout/thrust/thrust/system/error_code.h"
file_too_large = 27,
# 77 "/home/normal/checkout/thrust/thrust/system/error_code.h"
filename_too_long = 36,
# 78 "/home/normal/checkout/thrust/thrust/system/error_code.h"
function_not_supported = 38,
# 79 "/home/normal/checkout/thrust/thrust/system/error_code.h"
host_unreachable = 113,
# 80 "/home/normal/checkout/thrust/thrust/system/error_code.h"
identifier_removed = 43,
# 81 "/home/normal/checkout/thrust/thrust/system/error_code.h"
illegal_byte_sequence = 84,
# 82 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inappropriate_io_control_operation = 25,
# 83 "/home/normal/checkout/thrust/thrust/system/error_code.h"
interrupted = 4,
# 84 "/home/normal/checkout/thrust/thrust/system/error_code.h"
invalid_argument = 22,
# 85 "/home/normal/checkout/thrust/thrust/system/error_code.h"
invalid_seek = 29,
# 86 "/home/normal/checkout/thrust/thrust/system/error_code.h"
io_error = 5,
# 87 "/home/normal/checkout/thrust/thrust/system/error_code.h"
is_a_directory = 21,
# 88 "/home/normal/checkout/thrust/thrust/system/error_code.h"
message_size = 90,
# 89 "/home/normal/checkout/thrust/thrust/system/error_code.h"
network_down = 100,
# 90 "/home/normal/checkout/thrust/thrust/system/error_code.h"
network_reset = 102,
# 91 "/home/normal/checkout/thrust/thrust/system/error_code.h"
network_unreachable = 101,
# 92 "/home/normal/checkout/thrust/thrust/system/error_code.h"
no_buffer_space = 105,
# 93 "/home/normal/checkout/thrust/thrust/system/error_code.h"
no_child_process = 10,
# 94 "/home/normal/checkout/thrust/thrust/system/error_code.h"
no_link = 67,
# 95 "/home/normal/checkout/thrust/thrust/system/error_code.h"
no_lock_available = 37,
# 96 "/home/normal/checkout/thrust/thrust/system/error_code.h"
no_message_available = 61,
# 97 "/home/normal/checkout/thrust/thrust/system/error_code.h"
no_message = 42,
# 98 "/home/normal/checkout/thrust/thrust/system/error_code.h"
no_protocol_option = 92,
# 99 "/home/normal/checkout/thrust/thrust/system/error_code.h"
no_space_on_device = 28,
# 100 "/home/normal/checkout/thrust/thrust/system/error_code.h"
no_stream_resources = 63,
# 101 "/home/normal/checkout/thrust/thrust/system/error_code.h"
no_such_device_or_address = 6,
# 102 "/home/normal/checkout/thrust/thrust/system/error_code.h"
no_such_device = 19,
# 103 "/home/normal/checkout/thrust/thrust/system/error_code.h"
no_such_file_or_directory = 2,
# 104 "/home/normal/checkout/thrust/thrust/system/error_code.h"
no_such_process,
# 105 "/home/normal/checkout/thrust/thrust/system/error_code.h"
not_a_directory = 20,
# 106 "/home/normal/checkout/thrust/thrust/system/error_code.h"
not_a_socket = 88,
# 107 "/home/normal/checkout/thrust/thrust/system/error_code.h"
not_a_stream = 60,
# 108 "/home/normal/checkout/thrust/thrust/system/error_code.h"
not_connected = 107,
# 109 "/home/normal/checkout/thrust/thrust/system/error_code.h"
not_enough_memory = 12,
# 110 "/home/normal/checkout/thrust/thrust/system/error_code.h"
not_supported = 95,
# 111 "/home/normal/checkout/thrust/thrust/system/error_code.h"
operation_canceled = 125,
# 112 "/home/normal/checkout/thrust/thrust/system/error_code.h"
operation_in_progress = 115,
# 113 "/home/normal/checkout/thrust/thrust/system/error_code.h"
operation_not_permitted = 1,
# 114 "/home/normal/checkout/thrust/thrust/system/error_code.h"
operation_not_supported = 95,
# 115 "/home/normal/checkout/thrust/thrust/system/error_code.h"
operation_would_block = 11,
# 119 "/home/normal/checkout/thrust/thrust/system/error_code.h"
owner_dead = 130,
# 122 "/home/normal/checkout/thrust/thrust/system/error_code.h"
permission_denied = 13,
# 123 "/home/normal/checkout/thrust/thrust/system/error_code.h"
protocol_error = 71,
# 124 "/home/normal/checkout/thrust/thrust/system/error_code.h"
protocol_not_supported = 93,
# 125 "/home/normal/checkout/thrust/thrust/system/error_code.h"
read_only_file_system = 30,
# 126 "/home/normal/checkout/thrust/thrust/system/error_code.h"
resource_deadlock_would_occur = 35,
# 127 "/home/normal/checkout/thrust/thrust/system/error_code.h"
resource_unavailable_try_again = 11,
# 128 "/home/normal/checkout/thrust/thrust/system/error_code.h"
result_out_of_range = 34,
# 132 "/home/normal/checkout/thrust/thrust/system/error_code.h"
state_not_recoverable = 131,
# 135 "/home/normal/checkout/thrust/thrust/system/error_code.h"
stream_timeout = 62,
# 136 "/home/normal/checkout/thrust/thrust/system/error_code.h"
text_file_busy = 26,
# 137 "/home/normal/checkout/thrust/thrust/system/error_code.h"
timed_out = 110,
# 138 "/home/normal/checkout/thrust/thrust/system/error_code.h"
too_many_files_open_in_system = 23,
# 139 "/home/normal/checkout/thrust/thrust/system/error_code.h"
too_many_files_open,
# 140 "/home/normal/checkout/thrust/thrust/system/error_code.h"
too_many_links = 31,
# 141 "/home/normal/checkout/thrust/thrust/system/error_code.h"
too_many_symbolic_link_levels = 40,
# 142 "/home/normal/checkout/thrust/thrust/system/error_code.h"
value_too_large = 75,
# 143 "/home/normal/checkout/thrust/thrust/system/error_code.h"
wrong_protocol_type = 91
# 144 "/home/normal/checkout/thrust/thrust/system/error_code.h"
};
# 146 "/home/normal/checkout/thrust/thrust/system/error_code.h"
}
# 149 "/home/normal/checkout/thrust/thrust/system/error_code.h"
template<> struct is_error_condition_enum< errc::errc_t> : public thrust::detail::true_type { };
# 154 "/home/normal/checkout/thrust/thrust/system/error_code.h"
class error_category {
# 157 "/home/normal/checkout/thrust/thrust/system/error_code.h"
public: inline virtual ~error_category();
# 165 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline virtual const char *name() const = 0;
# 169 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline virtual error_condition default_error_condition(int) const;
# 173 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline virtual bool equivalent(int, const error_condition &) const;
# 177 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline virtual bool equivalent(const error_code &, int) const;
# 181 "/home/normal/checkout/thrust/thrust/system/error_code.h"
virtual std::string message(int) const = 0;
# 185 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline bool operator==(const error_category &) const;
# 189 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline bool operator!=(const error_category &) const;
# 194 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline bool operator<(const error_category &) const;
# 195 "/home/normal/checkout/thrust/thrust/system/error_code.h"
};
# 206 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline const error_category &generic_category();
# 220 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline const error_category &system_category();
# 226 "/home/normal/checkout/thrust/thrust/system/error_code.h"
class error_code {
# 234 "/home/normal/checkout/thrust/thrust/system/error_code.h"
public: inline error_code();
# 239 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline error_code(int, const error_category &);
# 244 "/home/normal/checkout/thrust/thrust/system/error_code.h"
template<class ErrorCodeEnum> error_code(ErrorCodeEnum, typename thrust::detail::enable_if< (is_error_code_enum< ErrorCodeEnum> ::value), void> ::type * = (0));
# 252 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline void assign(int, const error_category &);
# 256 "/home/normal/checkout/thrust/thrust/system/error_code.h"
template<class ErrorCodeEnum> typename thrust::detail::enable_if< (is_error_code_enum< ErrorCodeEnum> ::value), error_code> ::type &operator=(ErrorCodeEnum);
# 262 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline void clear();
# 268 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline int value() const;
# 272 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline const error_category &category() const;
# 276 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline error_condition default_error_condition() const;
# 280 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline std::string message() const;
# 287 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline operator bool() const;
# 292 "/home/normal/checkout/thrust/thrust/system/error_code.h"
private: int m_val;
# 293 "/home/normal/checkout/thrust/thrust/system/error_code.h"
const error_category *m_cat;
# 296 "/home/normal/checkout/thrust/thrust/system/error_code.h"
};
# 305 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline error_code make_error_code(errc::errc_t);
# 310 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline bool operator<(const error_code &, const error_code &);
# 315 "/home/normal/checkout/thrust/thrust/system/error_code.h"
template<class charT, class traits> std::basic_ostream< charT, traits> &operator<<(std::basic_ostream< charT, traits> &, const error_code &);
# 329 "/home/normal/checkout/thrust/thrust/system/error_code.h"
class error_condition {
# 333 "/home/normal/checkout/thrust/thrust/system/error_code.h"
public: inline error_condition();
# 335 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline error_condition(int, const error_category &);
# 337 "/home/normal/checkout/thrust/thrust/system/error_code.h"
template<class ErrorConditionEnum> error_condition(ErrorConditionEnum, typename thrust::detail::enable_if< (is_error_condition_enum< ErrorConditionEnum> ::value), void> ::type * = (0));
# 342 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline void assign(int, const error_category &);
# 344 "/home/normal/checkout/thrust/thrust/system/error_code.h"
template<class ErrorConditionEnum> typename thrust::detail::enable_if< (is_error_condition_enum< ErrorConditionEnum> ::value), error_code> ::type &operator=(ErrorConditionEnum);
# 348 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline void clear();
# 351 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline int value() const;
# 353 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline const error_category &category() const;
# 355 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline std::string message() const;
# 360 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline operator bool() const;
# 366 "/home/normal/checkout/thrust/thrust/system/error_code.h"
private: int m_val;
# 367 "/home/normal/checkout/thrust/thrust/system/error_code.h"
const error_category *m_cat;
# 371 "/home/normal/checkout/thrust/thrust/system/error_code.h"
};
# 380 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline error_condition make_error_condition(errc::errc_t);
# 385 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline bool operator<(const error_condition &, const error_condition &);
# 393 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline bool operator==(const error_code &, const error_code &);
# 398 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline bool operator==(const error_code &, const error_condition &);
# 403 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline bool operator==(const error_condition &, const error_code &);
# 408 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline bool operator==(const error_condition &, const error_condition &);
# 413 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline bool operator!=(const error_code &, const error_code &);
# 418 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline bool operator!=(const error_code &, const error_condition &);
# 423 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline bool operator!=(const error_condition &, const error_code &);
# 428 "/home/normal/checkout/thrust/thrust/system/error_code.h"
inline bool operator!=(const error_condition &, const error_condition &);
# 431 "/home/normal/checkout/thrust/thrust/system/error_code.h"
}
# 434 "/home/normal/checkout/thrust/thrust/system/error_code.h"
using system::error_category;
# 435 "/home/normal/checkout/thrust/thrust/system/error_code.h"
using system::error_code;
# 436 "/home/normal/checkout/thrust/thrust/system/error_code.h"
using system::error_condition;
# 437 "/home/normal/checkout/thrust/thrust/system/error_code.h"
using system::is_error_code_enum;
# 438 "/home/normal/checkout/thrust/thrust/system/error_code.h"
using system::is_error_condition_enum;
# 439 "/home/normal/checkout/thrust/thrust/system/error_code.h"
using system::make_error_code;
# 440 "/home/normal/checkout/thrust/thrust/system/error_code.h"
using system::make_error_condition;
# 443 "/home/normal/checkout/thrust/thrust/system/error_code.h"
namespace errc = system::errc;
# 445 "/home/normal/checkout/thrust/thrust/system/error_code.h"
using system::generic_category;
# 446 "/home/normal/checkout/thrust/thrust/system/error_code.h"
using system::system_category;
# 448 "/home/normal/checkout/thrust/thrust/system/error_code.h"
}
# 450 "/home/normal/checkout/thrust/thrust/system/error_code.h"
}
# 74 "/usr/include/c++/4.4/cstring" 3
namespace std __attribute__((visibility("default"))) {
# 76 "/usr/include/c++/4.4/cstring" 3
using ::memchr;
# 77 "/usr/include/c++/4.4/cstring" 3
using ::memcmp;
# 78 "/usr/include/c++/4.4/cstring" 3
using ::memcpy;
# 79 "/usr/include/c++/4.4/cstring" 3
using ::memmove;
# 80 "/usr/include/c++/4.4/cstring" 3
using ::memset;
# 81 "/usr/include/c++/4.4/cstring" 3
using ::strcat;
# 82 "/usr/include/c++/4.4/cstring" 3
using ::strcmp;
# 83 "/usr/include/c++/4.4/cstring" 3
using ::strcoll;
# 84 "/usr/include/c++/4.4/cstring" 3
using ::strcpy;
# 85 "/usr/include/c++/4.4/cstring" 3
using ::strcspn;
# 86 "/usr/include/c++/4.4/cstring" 3
using ::strerror;
# 87 "/usr/include/c++/4.4/cstring" 3
using ::strlen;
# 88 "/usr/include/c++/4.4/cstring" 3
using ::strncat;
# 89 "/usr/include/c++/4.4/cstring" 3
using ::strncmp;
# 90 "/usr/include/c++/4.4/cstring" 3
using ::strncpy;
# 91 "/usr/include/c++/4.4/cstring" 3
using ::strspn;
# 92 "/usr/include/c++/4.4/cstring" 3
using ::strtok;
# 93 "/usr/include/c++/4.4/cstring" 3
using ::strxfrm;
# 94 "/usr/include/c++/4.4/cstring" 3
using ::strchr;
# 95 "/usr/include/c++/4.4/cstring" 3
using ::strpbrk;
# 96 "/usr/include/c++/4.4/cstring" 3
using ::strrchr;
# 97 "/usr/include/c++/4.4/cstring" 3
using ::strstr;
# 121 "/usr/include/c++/4.4/cstring" 3
}
# 24 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
namespace thrust {
# 27 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
namespace experimental {
# 30 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
namespace system {
# 34 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
inline error_category::~error_category()
# 35 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
{
# 36 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
;
# 37 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 41 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
inline error_condition error_category::default_error_condition(int ev) const
# 42 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
{
# 43 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
return error_condition(ev, *this);
# 44 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 48 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
inline bool error_category::equivalent(int code, const error_condition &condition) const
# 49 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
{
# 50 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
return (((this->default_error_condition(code))) == (condition));
# 51 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 55 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
inline bool error_category::equivalent(const error_code &code, int condition) const
# 56 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
{
# 57 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
return (((*this)) == ((code.category()))) && (code.value() == condition);
# 58 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 62 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
inline bool error_category::operator==(const error_category &rhs) const
# 63 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
{
# 64 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
return this == (&rhs);
# 65 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 69 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
inline bool error_category::operator!=(const error_category &rhs) const
# 70 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
{
# 71 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
return !(((*this)) == (rhs));
# 72 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 76 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
inline bool error_category::operator<(const error_category &rhs) const
# 77 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
{
# 78 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
return less< const error_category *> ()((this), ((&rhs)));
# 79 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 82 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
namespace detail {
# 86 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
class generic_error_category : public error_category {
# 90 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
public: generic_error_category() { }
# 92 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
virtual const char *name() const
# 93 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
{
# 94 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
return "generic";
# 95 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 97 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
virtual std::string message(int ev) const
# 98 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
{
# 99 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
static const std::string unknown_err("Unknown error");
# 103 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
const char *c_str = (std::strerror(ev));
# 104 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
return ((c_str) ? ((std::string)(c_str)) : unknown_err);
# 105 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 106 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
};
# 109 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
class system_error_category : public error_category {
# 113 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
public: system_error_category() { }
# 115 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
virtual const char *name() const
# 116 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
{
# 117 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
return "system";
# 118 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 120 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
virtual std::string message(int ev) const
# 121 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
{
# 122 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
return generic_category().message(ev);
# 123 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 125 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
virtual error_condition default_error_condition(int ev) const
# 126 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
{
# 127 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
using namespace errc;
# 129 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
switch (ev)
# 130 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
{
# 131 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 97: return make_error_condition(address_family_not_supported);
# 132 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 98: return make_error_condition(address_in_use);
# 133 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 99: return make_error_condition(address_not_available);
# 134 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 106: return make_error_condition(already_connected);
# 135 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 7: return make_error_condition(argument_list_too_long);
# 136 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 33: return make_error_condition(argument_out_of_domain);
# 137 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 14: return make_error_condition(bad_address);
# 138 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 9: return make_error_condition(bad_file_descriptor);
# 139 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 74: return make_error_condition(bad_message);
# 140 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 32: return make_error_condition(broken_pipe);
# 141 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 103: return make_error_condition(connection_aborted);
# 142 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 114: return make_error_condition(connection_already_in_progress);
# 143 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 111: return make_error_condition(connection_refused);
# 144 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 104: return make_error_condition(connection_reset);
# 145 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 18: return make_error_condition(cross_device_link);
# 146 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 89: return make_error_condition(destination_address_required);
# 147 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 16: return make_error_condition(device_or_resource_busy);
# 148 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 39: return make_error_condition(directory_not_empty);
# 149 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 8: return make_error_condition(executable_format_error);
# 150 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 17: return make_error_condition(file_exists);
# 151 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 27: return make_error_condition(file_too_large);
# 152 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 36: return make_error_condition(filename_too_long);
# 153 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 38: return make_error_condition(function_not_supported);
# 154 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 113: return make_error_condition(host_unreachable);
# 155 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 43: return make_error_condition(identifier_removed);
# 156 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 84: return make_error_condition(illegal_byte_sequence);
# 157 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 25: return make_error_condition(inappropriate_io_control_operation);
# 158 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 4: return make_error_condition(interrupted);
# 159 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 22: return make_error_condition(invalid_argument);
# 160 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 29: return make_error_condition(invalid_seek);
# 161 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 5: return make_error_condition(io_error);
# 162 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 21: return make_error_condition(is_a_directory);
# 163 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 90: return make_error_condition(message_size);
# 164 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 100: return make_error_condition(network_down);
# 165 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 102: return make_error_condition(network_reset);
# 166 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 101: return make_error_condition(network_unreachable);
# 167 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 105: return make_error_condition(no_buffer_space);
# 168 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 10: return make_error_condition(no_child_process);
# 169 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 67: return make_error_condition(no_link);
# 170 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 37: return make_error_condition(no_lock_available);
# 171 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 61: return make_error_condition(no_message_available);
# 172 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 42: return make_error_condition(no_message);
# 173 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 92: return make_error_condition(no_protocol_option);
# 174 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 28: return make_error_condition(no_space_on_device);
# 175 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 63: return make_error_condition(no_stream_resources);
# 176 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 6: return make_error_condition(no_such_device_or_address);
# 177 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 19: return make_error_condition(no_such_device);
# 178 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 2: return make_error_condition(no_such_file_or_directory);
# 179 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 3: return make_error_condition(no_such_process);
# 180 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 20: return make_error_condition(not_a_directory);
# 181 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 88: return make_error_condition(not_a_socket);
# 182 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 60: return make_error_condition(not_a_stream);
# 183 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 107: return make_error_condition(not_connected);
# 184 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 12: return make_error_condition(not_enough_memory);
# 185 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 95: return make_error_condition(not_supported);
# 186 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 125: return make_error_condition(operation_canceled);
# 187 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 115: return make_error_condition(operation_in_progress);
# 188 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 1: return make_error_condition(operation_not_permitted);
# 195 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 11: return make_error_condition(operation_would_block);
# 199 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 130: return make_error_condition(owner_dead);
# 202 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 13: return make_error_condition(permission_denied);
# 203 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 71: return make_error_condition(protocol_error);
# 204 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 93: return make_error_condition(protocol_not_supported);
# 205 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 30: return make_error_condition(read_only_file_system);
# 206 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 35: return make_error_condition(resource_deadlock_would_occur);
# 213 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 34: return make_error_condition(result_out_of_range);
# 217 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 131: return make_error_condition(state_not_recoverable);
# 220 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 62: return make_error_condition(stream_timeout);
# 221 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 26: return make_error_condition(text_file_busy);
# 222 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 110: return make_error_condition(timed_out);
# 223 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 23: return make_error_condition(too_many_files_open_in_system);
# 224 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 24: return make_error_condition(too_many_files_open);
# 225 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 31: return make_error_condition(too_many_links);
# 226 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 40: return make_error_condition(too_many_symbolic_link_levels);
# 227 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 75: return make_error_condition(value_too_large);
# 228 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
case 91: return make_error_condition(wrong_protocol_type);
# 229 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
default: return error_condition(ev, system_category());
# 230 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 231 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 232 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
};
# 235 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 238 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
inline const error_category &generic_category()
# 239 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
{
# 240 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
static const detail::generic_error_category result;
# 241 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
return result;
# 242 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 245 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
inline const error_category &system_category()
# 246 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
{
# 247 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
static const detail::system_error_category result;
# 248 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
return result;
# 249 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 252 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 254 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 256 "/home/normal/checkout/thrust/thrust/system/detail/error_category.inl"
}
# 22 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
namespace thrust {
# 25 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
namespace experimental {
# 28 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
namespace system {
# 32 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline error_code::error_code() : m_val(0), m_cat((&system_category()))
# 34 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 35 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
;
# 36 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 40 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline error_code::error_code(int val, const error_category &cat) : m_val(val), m_cat((&cat))
# 42 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 43 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
;
# 44 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 47 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
template<class ErrorCodeEnum>
# 49 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
error_code::error_code(ErrorCodeEnum e, typename thrust::detail::enable_if< (is_error_code_enum< ErrorCodeEnum> ::value), void> ::type *)
# 51 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 52 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
(*this) = make_error_code(e);
# 53 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 57 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline void error_code::assign(int val, const error_category &cat)
# 58 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 59 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
(m_val) = val;
# 60 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
(m_cat) = (&cat);
# 61 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 64 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
template<class ErrorCodeEnum> typename thrust::detail::enable_if< (is_error_code_enum< ErrorCodeEnum> ::value), error_code> ::type &
# 67 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
error_code::operator=(ErrorCodeEnum e)
# 68 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 69 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
(*this) = make_error_code(e);
# 70 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return *this;
# 71 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 75 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline void error_code::clear()
# 76 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 77 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
(m_val) = 0;
# 78 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
(m_cat) = (&system_category());
# 79 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 83 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline int error_code::value() const
# 84 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 85 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return m_val;
# 86 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 90 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline const error_category &error_code::category() const
# 91 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 92 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return *(m_cat);
# 93 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 97 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline error_condition error_code::default_error_condition() const
# 98 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 99 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return this->category().default_error_condition(this->value());
# 100 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 104 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline std::string error_code::message() const
# 105 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 106 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return this->category().message(this->value());
# 107 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 111 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline error_code::operator bool() const
# 112 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 113 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return this->value() != 0;
# 114 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 117 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline error_code make_error_code(errc::errc_t e)
# 118 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 119 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return error_code(static_cast< int>(e), generic_category());
# 120 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 123 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline bool operator<(const error_code &lhs, const error_code &rhs)
# 124 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 125 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return ((lhs.category()) < ((rhs.category()))) || (((lhs.category()) == ((rhs.category()))) && (lhs.value() < rhs.value()));
# 126 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 129 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
template<class charT, class traits> std::basic_ostream< charT, traits> &
# 131 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
operator<<(std::basic_ostream< charT, traits> &os, const error_code &ec)
# 132 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 133 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return ((os << ec.category().name()) << ':') << ec.value();
# 134 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 137 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline bool operator==(const error_code &lhs, const error_code &rhs)
# 138 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 139 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return ((lhs.category()) == ((rhs.category()))) && (lhs.value() == rhs.value());
# 140 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 143 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline bool operator==(const error_code &lhs, const error_condition &rhs)
# 144 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 145 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return lhs.category().equivalent(lhs.value(), rhs) || rhs.category().equivalent(lhs, rhs.value());
# 146 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 149 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline bool operator==(const error_condition &lhs, const error_code &rhs)
# 150 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 151 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return rhs.category().equivalent(lhs.value(), lhs) || lhs.category().equivalent(rhs, lhs.value());
# 152 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 155 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline bool operator==(const error_condition &lhs, const error_condition &rhs)
# 156 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 157 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return ((lhs.category()) == ((rhs.category()))) && (lhs.value() == rhs.value());
# 158 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 161 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline bool operator!=(const error_code &lhs, const error_code &rhs)
# 162 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 163 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return !((lhs) == (rhs));
# 164 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 167 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline bool operator!=(const error_code &lhs, const error_condition &rhs)
# 168 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 169 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return !((lhs) == (rhs));
# 170 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 173 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline bool operator!=(const error_condition &lhs, const error_code &rhs)
# 174 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 175 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return !((lhs) == (rhs));
# 176 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 179 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
inline bool operator!=(const error_condition &lhs, const error_condition &rhs)
# 180 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
{
# 181 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
return !((lhs) == (rhs));
# 182 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 185 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 187 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 189 "/home/normal/checkout/thrust/thrust/system/detail/error_code.inl"
}
# 23 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
namespace experimental {
# 29 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
namespace system {
# 33 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
inline error_condition::error_condition() : m_val(0), m_cat((&generic_category()))
# 35 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
{
# 36 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
;
# 37 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
}
# 41 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
inline error_condition::error_condition(int val, const error_category &cat) : m_val(val), m_cat((&cat))
# 43 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
{
# 44 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
;
# 45 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
}
# 48 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
template<class ErrorConditionEnum>
# 50 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
error_condition::error_condition(ErrorConditionEnum e, typename thrust::detail::enable_if< (is_error_condition_enum< ErrorConditionEnum> ::value), void> ::type *)
# 52 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
{
# 53 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
(*this) = make_error_condition(e);
# 54 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
}
# 58 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
inline void error_condition::assign(int val, const error_category &cat)
# 59 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
{
# 60 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
(m_val) = val;
# 61 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
(m_cat) = (&cat);
# 62 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
}
# 65 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
template<class ErrorConditionEnum> typename thrust::detail::enable_if< (is_error_condition_enum< ErrorConditionEnum> ::value), error_code> ::type &
# 68 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
error_condition::operator=(ErrorConditionEnum e)
# 69 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
{
# 70 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
(*this) = make_error_condition(e);
# 71 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
return *this;
# 72 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
}
# 76 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
inline void error_condition::clear()
# 77 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
{
# 78 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
(m_val) = 0;
# 79 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
(m_cat) = (&generic_category());
# 80 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
}
# 84 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
inline int error_condition::value() const
# 85 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
{
# 86 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
return m_val;
# 87 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
}
# 91 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
inline const error_category &error_condition::category() const
# 92 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
{
# 93 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
return *(m_cat);
# 94 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
}
# 98 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
inline std::string error_condition::message() const
# 99 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
{
# 100 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
return this->category().message(this->value());
# 101 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
}
# 105 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
inline error_condition::operator bool() const
# 106 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
{
# 107 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
return this->value() != 0;
# 108 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
}
# 111 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
inline error_condition make_error_condition(errc::errc_t e)
# 112 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
{
# 113 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
return error_condition(static_cast< int>(e), generic_category());
# 114 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
}
# 117 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
inline bool operator<(const error_condition &lhs, const error_condition &
# 118 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
rhs)
# 119 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
{
# 120 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
return ((lhs.category()) < ((rhs.category()))) || (((lhs.category()) == ((rhs.category()))) && (lhs.value() < rhs.value()));
# 121 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
}
# 124 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
}
# 126 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
}
# 128 "/home/normal/checkout/thrust/thrust/system/detail/error_condition.inl"
}
# 28 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
namespace thrust {
# 31 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
namespace experimental {
# 34 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
namespace system {
# 43 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
namespace cuda_errc {
# 47 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
enum cuda_errc_t {
# 51 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
success,
# 52 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
missing_configuration,
# 53 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
memory_allocation,
# 54 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
initialization_error,
# 55 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
launch_failure,
# 56 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
prior_launch_failure,
# 57 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
launch_timeout,
# 58 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
launch_out_of_resources,
# 59 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
invalid_device_function,
# 60 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
invalid_configuration,
# 61 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
invalid_device,
# 62 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
invalid_value,
# 63 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
invalid_pitch_value,
# 64 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
invalid_symbol,
# 65 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
map_buffer_object_failed,
# 66 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
unmap_buffer_object_failed,
# 67 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
invalid_host_pointer,
# 68 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
invalid_device_pointer,
# 69 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
invalid_texture,
# 70 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
invalid_texture_binding,
# 71 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
invalid_channel_descriptor,
# 72 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
invalid_memcpy_direction,
# 73 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
address_of_constant_error,
# 74 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
texture_fetch_failed,
# 75 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
texture_not_bound,
# 76 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
synchronization_error,
# 77 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
invalid_filter_setting,
# 78 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
invalid_norm_setting,
# 79 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
mixed_device_execution,
# 80 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
cuda_runtime_unloading,
# 81 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
unknown,
# 82 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
not_yet_implemented,
# 83 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
memory_value_too_large,
# 84 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
invalid_resource_handle,
# 85 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
not_ready,
# 86 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
cuda_runtime_is_newer_than_driver,
# 87 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
set_on_active_process_error,
# 88 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
no_device = 38,
# 89 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
ecc_uncorrectable,
# 90 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
startup_failure = 127,
# 91 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
api_failure_base = 10000
# 92 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
};
# 94 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
}
# 98 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
template<> struct is_error_code_enum< cuda_errc::cuda_errc_t> : public thrust::detail::true_type { };
# 104 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
inline error_code make_error_code(cuda_errc::cuda_errc_t);
# 110 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
inline error_condition make_error_condition(cuda_errc::cuda_errc_t);
# 123 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
inline const error_category &cuda_category();
# 126 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
}
# 128 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
using system::cuda_category;
# 131 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
namespace cuda_errc = system::cuda_errc;
# 133 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
}
# 135 "/home/normal/checkout/thrust/thrust/system/cuda_error.h"
}
# 22 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
namespace thrust {
# 25 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
namespace experimental {
# 28 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
namespace system {
# 32 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
inline error_code make_error_code(cuda_errc::cuda_errc_t e)
# 33 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
{
# 34 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
return error_code(static_cast< int>(e), cuda_category());
# 35 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
}
# 38 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
inline error_condition make_error_condition(cuda_errc::cuda_errc_t e)
# 39 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
{
# 40 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
return error_condition(static_cast< int>(e), cuda_category());
# 41 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
}
# 44 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
namespace detail {
# 48 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
class cuda_error_category : public error_category {
# 52 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
public: cuda_error_category() { }
# 54 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
virtual const char *name() const
# 55 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
{
# 56 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
return "cuda";
# 57 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
}
# 59 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
virtual std::string message(int ev) const
# 60 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
{
# 61 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
static const std::string unknown_err("Unknown error");
# 62 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
const char *c_str = ::cudaGetErrorString(static_cast< cudaError_t>(ev));
# 63 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
return ((c_str) ? ((std::string)(c_str)) : unknown_err);
# 64 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
}
# 66 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
virtual error_condition default_error_condition(int ev) const
# 67 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
{
# 68 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
using namespace cuda_errc;
# 70 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
switch (ev)
# 71 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
{
# 72 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaSuccess: return make_error_condition(success);
# 73 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorMissingConfiguration: return make_error_condition(missing_configuration);
# 74 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorMemoryAllocation: return make_error_condition(memory_allocation);
# 75 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInitializationError: return make_error_condition(initialization_error);
# 76 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorLaunchFailure: return make_error_condition(launch_failure);
# 77 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorPriorLaunchFailure: return make_error_condition(prior_launch_failure);
# 78 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorLaunchTimeout: return make_error_condition(launch_timeout);
# 79 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorLaunchOutOfResources: return make_error_condition(launch_out_of_resources);
# 80 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInvalidDeviceFunction: return make_error_condition(invalid_device_function);
# 81 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInvalidConfiguration: return make_error_condition(invalid_configuration);
# 82 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInvalidDevice: return make_error_condition(invalid_device);
# 83 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInvalidValue: return make_error_condition(invalid_value);
# 84 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInvalidPitchValue: return make_error_condition(invalid_pitch_value);
# 85 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInvalidSymbol: return make_error_condition(invalid_symbol);
# 86 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorMapBufferObjectFailed: return make_error_condition(map_buffer_object_failed);
# 87 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorUnmapBufferObjectFailed: return make_error_condition(unmap_buffer_object_failed);
# 88 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInvalidHostPointer: return make_error_condition(invalid_host_pointer);
# 89 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInvalidDevicePointer: return make_error_condition(invalid_device_pointer);
# 90 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInvalidTexture: return make_error_condition(invalid_texture);
# 91 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInvalidTextureBinding: return make_error_condition(invalid_texture_binding);
# 92 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInvalidChannelDescriptor: return make_error_condition(invalid_channel_descriptor);
# 93 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInvalidMemcpyDirection: return make_error_condition(invalid_memcpy_direction);
# 94 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorAddressOfConstant: return make_error_condition(address_of_constant_error);
# 95 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorTextureFetchFailed: return make_error_condition(texture_fetch_failed);
# 96 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorTextureNotBound: return make_error_condition(texture_not_bound);
# 97 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorSynchronizationError: return make_error_condition(synchronization_error);
# 98 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInvalidFilterSetting: return make_error_condition(invalid_filter_setting);
# 99 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInvalidNormSetting: return make_error_condition(invalid_norm_setting);
# 100 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorMixedDeviceExecution: return make_error_condition(mixed_device_execution);
# 101 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorCudartUnloading: return make_error_condition(cuda_runtime_unloading);
# 102 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorUnknown: return make_error_condition(unknown);
# 103 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorNotYetImplemented: return make_error_condition(not_yet_implemented);
# 104 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorMemoryValueTooLarge: return make_error_condition(memory_value_too_large);
# 105 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInvalidResourceHandle: return make_error_condition(invalid_resource_handle);
# 106 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorNotReady: return make_error_condition(not_ready);
# 107 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorInsufficientDriver: return make_error_condition(cuda_runtime_is_newer_than_driver);
# 108 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorSetOnActiveProcess: return make_error_condition(set_on_active_process_error);
# 109 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorNoDevice: return make_error_condition(no_device);
# 110 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorECCUncorrectable: return make_error_condition(ecc_uncorrectable);
# 111 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorStartupFailure: return make_error_condition(startup_failure);
# 112 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
case cudaErrorApiFailureBase: return make_error_condition(api_failure_base);
# 113 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
default: return system_category().default_error_condition(ev);
# 114 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
}
# 115 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
}
# 116 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
};
# 118 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
}
# 121 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
inline const error_category &cuda_category()
# 122 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
{
# 123 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
static const detail::cuda_error_category result;
# 124 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
return result;
# 125 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
}
# 127 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
}
# 129 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
}
# 131 "/home/normal/checkout/thrust/thrust/system/detail/cuda_error.inl"
}
# 31 "/home/normal/checkout/thrust/thrust/system/system_error.h"
namespace thrust {
# 34 "/home/normal/checkout/thrust/thrust/system/system_error.h"
namespace experimental {
# 37 "/home/normal/checkout/thrust/thrust/system/system_error.h"
namespace system {
# 51 "/home/normal/checkout/thrust/thrust/system/system_error.h"
class system_error : public std::runtime_error {
# 57 "/home/normal/checkout/thrust/thrust/system/system_error.h"
public: inline system_error(error_code, const std::string &);
# 59 "/home/normal/checkout/thrust/thrust/system/system_error.h"
inline system_error(error_code, const char *);
# 61 "/home/normal/checkout/thrust/thrust/system/system_error.h"
inline system_error(error_code);
# 63 "/home/normal/checkout/thrust/thrust/system/system_error.h"
inline system_error(int, const error_category &, const std::string &);
# 65 "/home/normal/checkout/thrust/thrust/system/system_error.h"
inline system_error(int, const error_category &, const char *);
# 67 "/home/normal/checkout/thrust/thrust/system/system_error.h"
inline system_error(int, const error_category &);
# 69 "/home/normal/checkout/thrust/thrust/system/system_error.h"
virtual ~system_error() throw() { }
# 71 "/home/normal/checkout/thrust/thrust/system/system_error.h"
inline const error_code &code() const throw();
# 73 "/home/normal/checkout/thrust/thrust/system/system_error.h"
inline virtual const char *what() const throw();
# 78 "/home/normal/checkout/thrust/thrust/system/system_error.h"
private: error_code m_error_code;
# 79 "/home/normal/checkout/thrust/thrust/system/system_error.h"
mutable std::string m_what;
# 83 "/home/normal/checkout/thrust/thrust/system/system_error.h"
};
# 85 "/home/normal/checkout/thrust/thrust/system/system_error.h"
}
# 88 "/home/normal/checkout/thrust/thrust/system/system_error.h"
using system::system_error;
# 90 "/home/normal/checkout/thrust/thrust/system/system_error.h"
}
# 92 "/home/normal/checkout/thrust/thrust/system/system_error.h"
}
# 22 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
namespace thrust {
# 25 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
namespace experimental {
# 28 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
namespace system {
# 33 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
inline system_error::system_error(error_code ec, const std::string &what_arg) : std::runtime_error(what_arg), m_error_code(ec)
# 35 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
{
# 37 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
}
# 41 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
inline system_error::system_error(error_code ec, const char *what_arg) : std::runtime_error(what_arg), m_error_code(ec)
# 43 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
{
# 44 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
;
# 45 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
}
# 49 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
inline system_error::system_error(error_code ec) : std::runtime_error(""), m_error_code(ec)
# 51 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
{
# 52 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
;
# 53 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
}
# 57 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
inline system_error::system_error(int ev, const error_category &ecat, const std::string &what_arg) : std::runtime_error(what_arg), m_error_code(ev, ecat)
# 59 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
{
# 60 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
;
# 61 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
}
# 65 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
inline system_error::system_error(int ev, const error_category &ecat, const char *what_arg) : std::runtime_error(what_arg), m_error_code(ev, ecat)
# 67 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
{
# 68 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
;
# 69 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
}
# 73 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
inline system_error::system_error(int ev, const error_category &ecat) : std::runtime_error(""), m_error_code(ev, ecat)
# 75 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
{
# 76 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
;
# 77 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
}
# 81 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
inline const error_code &system_error::code() const throw()
# 82 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
{
# 83 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
return m_error_code;
# 84 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
}
# 88 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
inline const char *system_error::what() const throw()
# 89 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
{
# 90 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
if ((m_what).empty())
# 91 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
{
# 92 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
try
# 93 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
{
# 94 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
(((m_what)) = (this->std::runtime_error::what()));
# 95 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
if ((m_error_code))
# 96 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
{
# 97 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
if (!(m_what).empty()) { (((m_what)) += ((": "))); }
# 98 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
(((m_what)) += (((m_error_code).message())));
# 99 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
}
# 100 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
}
# 101 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
catch (...)
# 102 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
{
# 103 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
return this->std::runtime_error::what();
# 104 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
}
# 105 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
}
# 107 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
return (m_what).c_str();
# 108 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
}
# 111 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
}
# 113 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
}
# 115 "/home/normal/checkout/thrust/thrust/system/detail/system_error.inl"
}
# 29 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
namespace thrust {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
namespace device {
# 35 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
namespace cuda {
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
template<unsigned DummyParameterToAvoidInstantiation> void
# 39 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
free(device_ptr< void> ptr)
# 40 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
{
# 41 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
cudaError_t error = cudaFree(ptr.get());
# 43 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
if (error)
# 44 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
{
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
throw experimental::system::system_error(error, thrust::experimental::cuda_category());
# 46 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
}
# 47 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
}
# 49 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
}
# 50 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
}
# 52 "/home/normal/checkout/thrust/thrust/detail/device/cuda/free.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
namespace device {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
namespace dispatch {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
template<unsigned DummyParameterToAvoidInstantiation> void
# 34 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
free(device_ptr< void> ptr, device_space_tag)
# 36 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
{
# 37 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
thrust::detail::device::generic::free< 0U> (ptr);
# 38 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
}
# 41 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
template<unsigned DummyParameterToAvoidInstantiation> void
# 42 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
free(device_ptr< void> ptr, cuda_device_space_tag)
# 44 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
{
# 45 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
thrust::detail::device::cuda::free< 0U> (ptr);
# 46 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
}
# 48 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
}
# 49 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
}
# 50 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/free.h"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/device_free.inl"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/device_free.inl"
inline void device_free(device_ptr< void> ptr)
# 30 "/home/normal/checkout/thrust/thrust/detail/device_free.inl"
{
# 31 "/home/normal/checkout/thrust/thrust/detail/device_free.inl"
typedef detail::eval_if< false, detail::identity_< any_space_tag> , detail::eval_if< false, detail::identity_< host_space_tag> , detail::eval_if< true, detail::device_iterator_category_to_backend_space< detail::random_access_cuda_device_iterator_tag> , void> > > ::type space;
# 32 "/home/normal/checkout/thrust/thrust/detail/device_free.inl"
detail::device::dispatch::free< 0U> (ptr, space());
# 33 "/home/normal/checkout/thrust/thrust/detail/device_free.inl"
}
# 35 "/home/normal/checkout/thrust/thrust/detail/device_free.inl"
}
# 21 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
namespace thrust {
# 24 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
namespace detail {
# 27 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
namespace device {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
namespace generic {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
template<unsigned DummyParameterToAvoidInstantiation> void
# 35 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
no_throw_free(device_ptr< void> ptr) throw()
# 36 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
{
# 37 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
try
# 38 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
{
# 39 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
thrust::device_free(ptr);
# 40 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
}
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
catch (...)
# 42 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
{
# 43 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
;
# 44 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
}
# 48 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
}
# 50 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
}
# 52 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
}
# 54 "/home/normal/checkout/thrust/thrust/detail/device/generic/no_throw_free.h"
}
# 22 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
namespace thrust {
# 25 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
namespace device {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
namespace cuda {
# 35 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
template<unsigned DummyParameterToAvoidInstantiation> void
# 36 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
no_throw_free(device_ptr< void> ptr) throw()
# 37 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
{
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
try
# 39 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
{
# 41 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
cudaFree(ptr.get());
# 42 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
}
# 43 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
catch (...)
# 44 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
{
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
;
# 46 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
}
# 47 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
}
# 50 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
}
# 52 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
}
# 54 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
}
# 56 "/home/normal/checkout/thrust/thrust/detail/device/cuda/no_throw_free.h"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
namespace detail {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
namespace device {
# 35 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
namespace dispatch {
# 39 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
template<unsigned DummyParameterToAvoidInstantiation> void
# 40 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
no_throw_free(device_ptr< void> ptr, device_space_tag) throw()
# 42 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
{
# 43 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
thrust::detail::device::generic::no_throw_free< 0U> (ptr);
# 44 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
}
# 47 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
template<unsigned DummyParameterToAvoidInstantiation> void
# 48 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
no_throw_free(device_ptr< void> ptr, cuda_device_space_tag) throw()
# 50 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
{
# 51 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
thrust::detail::device::cuda::no_throw_free< 0U> (ptr);
# 52 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
}
# 54 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
}
# 57 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
}
# 61 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/no_throw_free.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/no_throw_free.h"
namespace thrust {
# 27 "/home/normal/checkout/thrust/thrust/detail/device/no_throw_free.h"
namespace detail {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/no_throw_free.h"
namespace device {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/no_throw_free.h"
inline void no_throw_free(device_ptr< void> ptr) throw()
# 35 "/home/normal/checkout/thrust/thrust/detail/device/no_throw_free.h"
{
# 36 "/home/normal/checkout/thrust/thrust/detail/device/no_throw_free.h"
typedef eval_if< false, identity_< any_space_tag> , eval_if< false, identity_< host_space_tag> , eval_if< true, device_iterator_category_to_backend_space< random_access_cuda_device_iterator_tag> , void> > > ::type Space;
# 38 "/home/normal/checkout/thrust/thrust/detail/device/no_throw_free.h"
thrust::detail::device::dispatch::no_throw_free< 0U> (ptr, Space());
# 39 "/home/normal/checkout/thrust/thrust/detail/device/no_throw_free.h"
}
# 42 "/home/normal/checkout/thrust/thrust/detail/device/no_throw_free.h"
}
# 44 "/home/normal/checkout/thrust/thrust/detail/device/no_throw_free.h"
}
# 46 "/home/normal/checkout/thrust/thrust/detail/device/no_throw_free.h"
}
# 146 "/usr/include/c++/4.4/limits" 3
namespace std __attribute__((visibility("default"))) {
# 153 "/usr/include/c++/4.4/limits" 3
enum float_round_style {
# 155 "/usr/include/c++/4.4/limits" 3
round_indeterminate = (-1),
# 156 "/usr/include/c++/4.4/limits" 3
round_toward_zero,
# 157 "/usr/include/c++/4.4/limits" 3
round_to_nearest,
# 158 "/usr/include/c++/4.4/limits" 3
round_toward_infinity,
# 159 "/usr/include/c++/4.4/limits" 3
round_toward_neg_infinity
# 160 "/usr/include/c++/4.4/limits" 3
};
# 168 "/usr/include/c++/4.4/limits" 3
enum float_denorm_style {
# 171 "/usr/include/c++/4.4/limits" 3
denorm_indeterminate = (-1),
# 173 "/usr/include/c++/4.4/limits" 3
denorm_absent,
# 175 "/usr/include/c++/4.4/limits" 3
denorm_present
# 176 "/usr/include/c++/4.4/limits" 3
};
# 188 "/usr/include/c++/4.4/limits" 3
struct __numeric_limits_base {
# 192 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = false;
# 197 "/usr/include/c++/4.4/limits" 3
static const int digits = 0;
# 199 "/usr/include/c++/4.4/limits" 3
static const int digits10 = 0;
# 201 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = false;
# 205 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = false;
# 210 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = false;
# 213 "/usr/include/c++/4.4/limits" 3
static const int radix = 0;
# 217 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 220 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 224 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 227 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 230 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 233 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 236 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 238 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 241 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 245 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 249 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = false;
# 254 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = false;
# 257 "/usr/include/c++/4.4/limits" 3
static const bool traps = false;
# 259 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 263 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 264 "/usr/include/c++/4.4/limits" 3
};
# 277 "/usr/include/c++/4.4/limits" 3
template < typename _Tp >
    struct numeric_limits : public __numeric_limits_base
    {


      static _Tp min ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp max ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }


      static _Tp epsilon ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp round_error ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp infinity ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp quiet_NaN ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }


      static _Tp signaling_NaN ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }



      static _Tp denorm_min ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }
    };
# 308 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< bool> {
# 310 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 312 "/usr/include/c++/4.4/limits" 3
static bool min() throw()
# 313 "/usr/include/c++/4.4/limits" 3
{ return false; }
# 314 "/usr/include/c++/4.4/limits" 3
static bool max() throw()
# 315 "/usr/include/c++/4.4/limits" 3
{ return true; }
# 317 "/usr/include/c++/4.4/limits" 3
static const int digits = 1;
# 318 "/usr/include/c++/4.4/limits" 3
static const int digits10 = 0;
# 319 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = false;
# 320 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 321 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 322 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 323 "/usr/include/c++/4.4/limits" 3
static bool epsilon() throw()
# 324 "/usr/include/c++/4.4/limits" 3
{ return false; }
# 325 "/usr/include/c++/4.4/limits" 3
static bool round_error() throw()
# 326 "/usr/include/c++/4.4/limits" 3
{ return false; }
# 328 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 329 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 330 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 331 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 333 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 334 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 335 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 336 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 337 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 339 "/usr/include/c++/4.4/limits" 3
static bool infinity() throw()
# 340 "/usr/include/c++/4.4/limits" 3
{ return false; }
# 341 "/usr/include/c++/4.4/limits" 3
static bool quiet_NaN() throw()
# 342 "/usr/include/c++/4.4/limits" 3
{ return false; }
# 343 "/usr/include/c++/4.4/limits" 3
static bool signaling_NaN() throw()
# 344 "/usr/include/c++/4.4/limits" 3
{ return false; }
# 345 "/usr/include/c++/4.4/limits" 3
static bool denorm_min() throw()
# 346 "/usr/include/c++/4.4/limits" 3
{ return false; }
# 348 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 349 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 350 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = false;
# 355 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 356 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 357 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 358 "/usr/include/c++/4.4/limits" 3
};
# 362 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< char> {
# 364 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 366 "/usr/include/c++/4.4/limits" 3
static char min() throw()
# 367 "/usr/include/c++/4.4/limits" 3
{ return (((char)(-1)) < 0) ? (((char)1) << ((sizeof(char) * (8)) - (((char)(-1)) < 0))) : ((char)0); }
# 368 "/usr/include/c++/4.4/limits" 3
static char max() throw()
# 369 "/usr/include/c++/4.4/limits" 3
{ return (((char)(-1)) < 0) ? ((((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1) : (~((char)0)); }
# 371 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(char) * (8)) - (((char)(-1)) < 0));
# 372 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(char) * (8)) - (((char)(-1)) < 0)) * (643)) / (2136));
# 373 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = (((char)(-1)) < 0);
# 374 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 375 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 376 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 377 "/usr/include/c++/4.4/limits" 3
static char epsilon() throw()
# 378 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 379 "/usr/include/c++/4.4/limits" 3
static char round_error() throw()
# 380 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 382 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 383 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 384 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 385 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 387 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 388 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 389 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 390 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 391 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 393 "/usr/include/c++/4.4/limits" 3
static char infinity() throw()
# 394 "/usr/include/c++/4.4/limits" 3
{ return (char)0; }
# 395 "/usr/include/c++/4.4/limits" 3
static char quiet_NaN() throw()
# 396 "/usr/include/c++/4.4/limits" 3
{ return (char)0; }
# 397 "/usr/include/c++/4.4/limits" 3
static char signaling_NaN() throw()
# 398 "/usr/include/c++/4.4/limits" 3
{ return (char)0; }
# 399 "/usr/include/c++/4.4/limits" 3
static char denorm_min() throw()
# 400 "/usr/include/c++/4.4/limits" 3
{ return static_cast< char>(0); }
# 402 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 403 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 404 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 406 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 407 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 408 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 409 "/usr/include/c++/4.4/limits" 3
};
# 413 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< signed char> {
# 415 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 417 "/usr/include/c++/4.4/limits" 3
static signed char min() throw()
# 418 "/usr/include/c++/4.4/limits" 3
{ return (-127) - 1; }
# 419 "/usr/include/c++/4.4/limits" 3
static signed char max() throw()
# 420 "/usr/include/c++/4.4/limits" 3
{ return 127; }
# 422 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0));
# 423 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)) * (643)) / (2136));
# 424 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 425 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 426 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 427 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 428 "/usr/include/c++/4.4/limits" 3
static signed char epsilon() throw()
# 429 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 430 "/usr/include/c++/4.4/limits" 3
static signed char round_error() throw()
# 431 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 433 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 434 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 435 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 436 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 438 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 439 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 440 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 441 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 442 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 444 "/usr/include/c++/4.4/limits" 3
static signed char infinity() throw()
# 445 "/usr/include/c++/4.4/limits" 3
{ return static_cast< signed char>(0); }
# 446 "/usr/include/c++/4.4/limits" 3
static signed char quiet_NaN() throw()
# 447 "/usr/include/c++/4.4/limits" 3
{ return static_cast< signed char>(0); }
# 448 "/usr/include/c++/4.4/limits" 3
static signed char signaling_NaN() throw()
# 449 "/usr/include/c++/4.4/limits" 3
{ return static_cast< signed char>(0); }
# 450 "/usr/include/c++/4.4/limits" 3
static signed char denorm_min() throw()
# 451 "/usr/include/c++/4.4/limits" 3
{ return static_cast< signed char>(0); }
# 453 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 454 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 455 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 457 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 458 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 459 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 460 "/usr/include/c++/4.4/limits" 3
};
# 464 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< unsigned char> {
# 466 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 468 "/usr/include/c++/4.4/limits" 3
static unsigned char min() throw()
# 469 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 470 "/usr/include/c++/4.4/limits" 3
static unsigned char max() throw()
# 471 "/usr/include/c++/4.4/limits" 3
{ return ((127) * 2U) + (1); }
# 473 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0));
# 474 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)) * (643)) / (2136));
# 475 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = false;
# 476 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 477 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 478 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 479 "/usr/include/c++/4.4/limits" 3
static unsigned char epsilon() throw()
# 480 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 481 "/usr/include/c++/4.4/limits" 3
static unsigned char round_error() throw()
# 482 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 484 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 485 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 486 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 487 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 489 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 490 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 491 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 492 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 493 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 495 "/usr/include/c++/4.4/limits" 3
static unsigned char infinity() throw()
# 496 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned char>(0); }
# 497 "/usr/include/c++/4.4/limits" 3
static unsigned char quiet_NaN() throw()
# 498 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned char>(0); }
# 499 "/usr/include/c++/4.4/limits" 3
static unsigned char signaling_NaN() throw()
# 500 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned char>(0); }
# 501 "/usr/include/c++/4.4/limits" 3
static unsigned char denorm_min() throw()
# 502 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned char>(0); }
# 504 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 505 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 506 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 508 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 509 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 510 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 511 "/usr/include/c++/4.4/limits" 3
};
# 515 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< wchar_t> {
# 517 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 519 "/usr/include/c++/4.4/limits" 3
static wchar_t min() throw()
# 520 "/usr/include/c++/4.4/limits" 3
{ return (((wchar_t)(-1)) < 0) ? (((wchar_t)1) << ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0))) : ((wchar_t)0); }
# 521 "/usr/include/c++/4.4/limits" 3
static wchar_t max() throw()
# 522 "/usr/include/c++/4.4/limits" 3
{ return (((wchar_t)(-1)) < 0) ? ((((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1) : (~((wchar_t)0)); }
# 524 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0));
# 525 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) * (643)) / (2136));
# 526 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = (((wchar_t)(-1)) < 0);
# 527 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 528 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 529 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 530 "/usr/include/c++/4.4/limits" 3
static wchar_t epsilon() throw()
# 531 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 532 "/usr/include/c++/4.4/limits" 3
static wchar_t round_error() throw()
# 533 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 535 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 536 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 537 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 538 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 540 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 541 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 542 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 543 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 544 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 546 "/usr/include/c++/4.4/limits" 3
static wchar_t infinity() throw()
# 547 "/usr/include/c++/4.4/limits" 3
{ return (wchar_t)0; }
# 548 "/usr/include/c++/4.4/limits" 3
static wchar_t quiet_NaN() throw()
# 549 "/usr/include/c++/4.4/limits" 3
{ return (wchar_t)0; }
# 550 "/usr/include/c++/4.4/limits" 3
static wchar_t signaling_NaN() throw()
# 551 "/usr/include/c++/4.4/limits" 3
{ return (wchar_t)0; }
# 552 "/usr/include/c++/4.4/limits" 3
static wchar_t denorm_min() throw()
# 553 "/usr/include/c++/4.4/limits" 3
{ return (wchar_t)0; }
# 555 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 556 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 557 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 559 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 560 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 561 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 562 "/usr/include/c++/4.4/limits" 3
};
# 670 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< short> {
# 672 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 674 "/usr/include/c++/4.4/limits" 3
static short min() throw()
# 675 "/usr/include/c++/4.4/limits" 3
{ return (-32767) - 1; }
# 676 "/usr/include/c++/4.4/limits" 3
static short max() throw()
# 677 "/usr/include/c++/4.4/limits" 3
{ return 32767; }
# 679 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(short) * (8)) - (((short)(-1)) < 0));
# 680 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(short) * (8)) - (((short)(-1)) < 0)) * (643)) / (2136));
# 681 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 682 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 683 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 684 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 685 "/usr/include/c++/4.4/limits" 3
static short epsilon() throw()
# 686 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 687 "/usr/include/c++/4.4/limits" 3
static short round_error() throw()
# 688 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 690 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 691 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 692 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 693 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 695 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 696 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 697 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 698 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 699 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 701 "/usr/include/c++/4.4/limits" 3
static short infinity() throw()
# 702 "/usr/include/c++/4.4/limits" 3
{ return (short)0; }
# 703 "/usr/include/c++/4.4/limits" 3
static short quiet_NaN() throw()
# 704 "/usr/include/c++/4.4/limits" 3
{ return (short)0; }
# 705 "/usr/include/c++/4.4/limits" 3
static short signaling_NaN() throw()
# 706 "/usr/include/c++/4.4/limits" 3
{ return (short)0; }
# 707 "/usr/include/c++/4.4/limits" 3
static short denorm_min() throw()
# 708 "/usr/include/c++/4.4/limits" 3
{ return (short)0; }
# 710 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 711 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 712 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 714 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 715 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 716 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 717 "/usr/include/c++/4.4/limits" 3
};
# 721 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< unsigned short> {
# 723 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 725 "/usr/include/c++/4.4/limits" 3
static unsigned short min() throw()
# 726 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 727 "/usr/include/c++/4.4/limits" 3
static unsigned short max() throw()
# 728 "/usr/include/c++/4.4/limits" 3
{ return ((32767) * 2U) + (1); }
# 730 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0));
# 731 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)) * (643)) / (2136));
# 732 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = false;
# 733 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 734 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 735 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 736 "/usr/include/c++/4.4/limits" 3
static unsigned short epsilon() throw()
# 737 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 738 "/usr/include/c++/4.4/limits" 3
static unsigned short round_error() throw()
# 739 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 741 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 742 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 743 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 744 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 746 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 747 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 748 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 749 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 750 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 752 "/usr/include/c++/4.4/limits" 3
static unsigned short infinity() throw()
# 753 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned short>(0); }
# 754 "/usr/include/c++/4.4/limits" 3
static unsigned short quiet_NaN() throw()
# 755 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned short>(0); }
# 756 "/usr/include/c++/4.4/limits" 3
static unsigned short signaling_NaN() throw()
# 757 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned short>(0); }
# 758 "/usr/include/c++/4.4/limits" 3
static unsigned short denorm_min() throw()
# 759 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned short>(0); }
# 761 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 762 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 763 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 765 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 766 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 767 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 768 "/usr/include/c++/4.4/limits" 3
};
# 772 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< int> {
# 774 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 776 "/usr/include/c++/4.4/limits" 3
static int min() throw()
# 777 "/usr/include/c++/4.4/limits" 3
{ return (-2147483647) - 1; }
# 778 "/usr/include/c++/4.4/limits" 3
static int max() throw()
# 779 "/usr/include/c++/4.4/limits" 3
{ return 2147483647; }
# 781 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(int) * (8)) - (((int)(-1)) < 0));
# 782 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(int) * (8)) - (((int)(-1)) < 0)) * (643)) / (2136));
# 783 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 784 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 785 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 786 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 787 "/usr/include/c++/4.4/limits" 3
static int epsilon() throw()
# 788 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 789 "/usr/include/c++/4.4/limits" 3
static int round_error() throw()
# 790 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 792 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 793 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 794 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 795 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 797 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 798 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 799 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 800 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 801 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 803 "/usr/include/c++/4.4/limits" 3
static int infinity() throw()
# 804 "/usr/include/c++/4.4/limits" 3
{ return static_cast< int>(0); }
# 805 "/usr/include/c++/4.4/limits" 3
static int quiet_NaN() throw()
# 806 "/usr/include/c++/4.4/limits" 3
{ return static_cast< int>(0); }
# 807 "/usr/include/c++/4.4/limits" 3
static int signaling_NaN() throw()
# 808 "/usr/include/c++/4.4/limits" 3
{ return static_cast< int>(0); }
# 809 "/usr/include/c++/4.4/limits" 3
static int denorm_min() throw()
# 810 "/usr/include/c++/4.4/limits" 3
{ return static_cast< int>(0); }
# 812 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 813 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 814 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 816 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 817 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 818 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 819 "/usr/include/c++/4.4/limits" 3
};
# 823 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< unsigned> {
# 825 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 827 "/usr/include/c++/4.4/limits" 3
static unsigned min() throw()
# 828 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 829 "/usr/include/c++/4.4/limits" 3
static unsigned max() throw()
# 830 "/usr/include/c++/4.4/limits" 3
{ return ((2147483647) * 2U) + (1); }
# 832 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0)));
# 833 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))) * (643)) / (2136));
# 834 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = false;
# 835 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 836 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 837 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 838 "/usr/include/c++/4.4/limits" 3
static unsigned epsilon() throw()
# 839 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 840 "/usr/include/c++/4.4/limits" 3
static unsigned round_error() throw()
# 841 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 843 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 844 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 845 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 846 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 848 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 849 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 850 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 851 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 852 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 854 "/usr/include/c++/4.4/limits" 3
static unsigned infinity() throw()
# 855 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned>(0); }
# 856 "/usr/include/c++/4.4/limits" 3
static unsigned quiet_NaN() throw()
# 857 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned>(0); }
# 858 "/usr/include/c++/4.4/limits" 3
static unsigned signaling_NaN() throw()
# 859 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned>(0); }
# 860 "/usr/include/c++/4.4/limits" 3
static unsigned denorm_min() throw()
# 861 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned>(0); }
# 863 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 864 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 865 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 867 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 868 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 869 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 870 "/usr/include/c++/4.4/limits" 3
};
# 874 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< long> {
# 876 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 878 "/usr/include/c++/4.4/limits" 3
static long min() throw()
# 879 "/usr/include/c++/4.4/limits" 3
{ return (-2147483647L) - (1); }
# 880 "/usr/include/c++/4.4/limits" 3
static long max() throw()
# 881 "/usr/include/c++/4.4/limits" 3
{ return 2147483647L; }
# 883 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(long) * (8)) - (((long)(-1)) < (0)));
# 884 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(long) * (8)) - (((long)(-1)) < (0))) * (643)) / (2136));
# 885 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 886 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 887 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 888 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 889 "/usr/include/c++/4.4/limits" 3
static long epsilon() throw()
# 890 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 891 "/usr/include/c++/4.4/limits" 3
static long round_error() throw()
# 892 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 894 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 895 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 896 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 897 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 899 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 900 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 901 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 902 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 903 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 905 "/usr/include/c++/4.4/limits" 3
static long infinity() throw()
# 906 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long>(0); }
# 907 "/usr/include/c++/4.4/limits" 3
static long quiet_NaN() throw()
# 908 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long>(0); }
# 909 "/usr/include/c++/4.4/limits" 3
static long signaling_NaN() throw()
# 910 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long>(0); }
# 911 "/usr/include/c++/4.4/limits" 3
static long denorm_min() throw()
# 912 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long>(0); }
# 914 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 915 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 916 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 918 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 919 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 920 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 921 "/usr/include/c++/4.4/limits" 3
};
# 925 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< unsigned long> {
# 927 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 929 "/usr/include/c++/4.4/limits" 3
static unsigned long min() throw()
# 930 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 931 "/usr/include/c++/4.4/limits" 3
static unsigned long max() throw()
# 932 "/usr/include/c++/4.4/limits" 3
{ return ((2147483647L) * 2UL) + (1); }
# 934 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0)));
# 935 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))) * (643)) / (2136));
# 936 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = false;
# 937 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 938 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 939 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 940 "/usr/include/c++/4.4/limits" 3
static unsigned long epsilon() throw()
# 941 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 942 "/usr/include/c++/4.4/limits" 3
static unsigned long round_error() throw()
# 943 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 945 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 946 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 947 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 948 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 950 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 951 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 952 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 953 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 954 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 956 "/usr/include/c++/4.4/limits" 3
static unsigned long infinity() throw()
# 957 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long>(0); }
# 958 "/usr/include/c++/4.4/limits" 3
static unsigned long quiet_NaN() throw()
# 959 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long>(0); }
# 960 "/usr/include/c++/4.4/limits" 3
static unsigned long signaling_NaN() throw()
# 961 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long>(0); }
# 962 "/usr/include/c++/4.4/limits" 3
static unsigned long denorm_min() throw()
# 963 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long>(0); }
# 965 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 966 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 967 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 969 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 970 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 971 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 972 "/usr/include/c++/4.4/limits" 3
};
# 976 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< long long> {
# 978 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 980 "/usr/include/c++/4.4/limits" 3
static long long min() throw()
# 981 "/usr/include/c++/4.4/limits" 3
{ return (-9223372036854775807LL) - (1); }
# 982 "/usr/include/c++/4.4/limits" 3
static long long max() throw()
# 983 "/usr/include/c++/4.4/limits" 3
{ return 9223372036854775807LL; }
# 985 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(long long) * (8)) - (((long long)(-1)) < (0)));
# 986 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(long long) * (8)) - (((long long)(-1)) < (0))) * (643)) / (2136));
# 987 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 988 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 989 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 990 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 991 "/usr/include/c++/4.4/limits" 3
static long long epsilon() throw()
# 992 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 993 "/usr/include/c++/4.4/limits" 3
static long long round_error() throw()
# 994 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 996 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 997 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 998 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 999 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 1001 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 1002 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 1003 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 1004 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 1005 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 1007 "/usr/include/c++/4.4/limits" 3
static long long infinity() throw()
# 1008 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long long>(0); }
# 1009 "/usr/include/c++/4.4/limits" 3
static long long quiet_NaN() throw()
# 1010 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long long>(0); }
# 1011 "/usr/include/c++/4.4/limits" 3
static long long signaling_NaN() throw()
# 1012 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long long>(0); }
# 1013 "/usr/include/c++/4.4/limits" 3
static long long denorm_min() throw()
# 1014 "/usr/include/c++/4.4/limits" 3
{ return static_cast< long long>(0); }
# 1016 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 1017 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 1018 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 1020 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 1021 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 1022 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 1023 "/usr/include/c++/4.4/limits" 3
};
# 1027 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< unsigned long long> {
# 1029 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 1031 "/usr/include/c++/4.4/limits" 3
static unsigned long long min() throw()
# 1032 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 1033 "/usr/include/c++/4.4/limits" 3
static unsigned long long max() throw()
# 1034 "/usr/include/c++/4.4/limits" 3
{ return ((9223372036854775807LL) * 2ULL) + (1); }
# 1036 "/usr/include/c++/4.4/limits" 3
static const int digits = ((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0)));
# 1037 "/usr/include/c++/4.4/limits" 3
static const int digits10 = ((((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))) * (643)) / (2136));
# 1038 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = false;
# 1039 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = true;
# 1040 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = true;
# 1041 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 1042 "/usr/include/c++/4.4/limits" 3
static unsigned long long epsilon() throw()
# 1043 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 1044 "/usr/include/c++/4.4/limits" 3
static unsigned long long round_error() throw()
# 1045 "/usr/include/c++/4.4/limits" 3
{ return 0; }
# 1047 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = 0;
# 1048 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = 0;
# 1049 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 0;
# 1050 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 0;
# 1052 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = false;
# 1053 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = false;
# 1054 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = false;
# 1055 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 1056 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 1058 "/usr/include/c++/4.4/limits" 3
static unsigned long long infinity() throw()
# 1059 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long long>(0); }
# 1060 "/usr/include/c++/4.4/limits" 3
static unsigned long long quiet_NaN() throw()
# 1061 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long long>(0); }
# 1062 "/usr/include/c++/4.4/limits" 3
static unsigned long long signaling_NaN() throw()
# 1063 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long long>(0); }
# 1064 "/usr/include/c++/4.4/limits" 3
static unsigned long long denorm_min() throw()
# 1065 "/usr/include/c++/4.4/limits" 3
{ return static_cast< unsigned long long>(0); }
# 1067 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = false;
# 1068 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 1069 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = true;
# 1071 "/usr/include/c++/4.4/limits" 3
static const bool traps = true;
# 1072 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 1073 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_toward_zero;
# 1074 "/usr/include/c++/4.4/limits" 3
};
# 1078 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< float> {
# 1080 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 1082 "/usr/include/c++/4.4/limits" 3
static float min() throw()
# 1083 "/usr/include/c++/4.4/limits" 3
{ return (1.175494351e-38F); }
# 1084 "/usr/include/c++/4.4/limits" 3
static float max() throw()
# 1085 "/usr/include/c++/4.4/limits" 3
{ return (3.402823466e+38F); }
# 1087 "/usr/include/c++/4.4/limits" 3
static const int digits = 24;
# 1088 "/usr/include/c++/4.4/limits" 3
static const int digits10 = 6;
# 1089 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 1090 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = false;
# 1091 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = false;
# 1092 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 1093 "/usr/include/c++/4.4/limits" 3
static float epsilon() throw()
# 1094 "/usr/include/c++/4.4/limits" 3
{ return (1.192092896e-07F); }
# 1095 "/usr/include/c++/4.4/limits" 3
static float round_error() throw()
# 1096 "/usr/include/c++/4.4/limits" 3
{ return (0.5F); }
# 1098 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = (-125);
# 1099 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = (-37);
# 1100 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 128;
# 1101 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 38;
# 1103 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = (1);
# 1104 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = (1);
# 1105 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = has_quiet_NaN;
# 1106 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_present;
# 1108 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 1110 "/usr/include/c++/4.4/limits" 3
static float infinity() throw()
# 1111 "/usr/include/c++/4.4/limits" 3
{ return __builtin_huge_valf(); }
# 1112 "/usr/include/c++/4.4/limits" 3
static float quiet_NaN() throw()
# 1113 "/usr/include/c++/4.4/limits" 3
{ return __builtin_nanf(""); }
# 1114 "/usr/include/c++/4.4/limits" 3
static float signaling_NaN() throw()
# 1115 "/usr/include/c++/4.4/limits" 3
{ return __builtin_nansf(""); }
# 1116 "/usr/include/c++/4.4/limits" 3
static float denorm_min() throw()
# 1117 "/usr/include/c++/4.4/limits" 3
{ return (1.401298464e-45F); }
# 1119 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = ((has_infinity && has_quiet_NaN) && ((denorm_present) == (denorm_present)));
# 1121 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 1122 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = false;
# 1124 "/usr/include/c++/4.4/limits" 3
static const bool traps = false;
# 1125 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 1126 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_to_nearest;
# 1127 "/usr/include/c++/4.4/limits" 3
};
# 1135 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< double> {
# 1137 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 1139 "/usr/include/c++/4.4/limits" 3
static double min() throw()
# 1140 "/usr/include/c++/4.4/limits" 3
{ return (2.225073858507201383e-308); }
# 1141 "/usr/include/c++/4.4/limits" 3
static double max() throw()
# 1142 "/usr/include/c++/4.4/limits" 3
{ return (1.797693134862315708e+308); }
# 1144 "/usr/include/c++/4.4/limits" 3
static const int digits = 53;
# 1145 "/usr/include/c++/4.4/limits" 3
static const int digits10 = 15;
# 1146 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 1147 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = false;
# 1148 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = false;
# 1149 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 1150 "/usr/include/c++/4.4/limits" 3
static double epsilon() throw()
# 1151 "/usr/include/c++/4.4/limits" 3
{ return (2.220446049250313081e-16); }
# 1152 "/usr/include/c++/4.4/limits" 3
static double round_error() throw()
# 1153 "/usr/include/c++/4.4/limits" 3
{ return (0.5); }
# 1155 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = (-1021);
# 1156 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = (-307);
# 1157 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 1024;
# 1158 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 308;
# 1160 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = (1);
# 1161 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = (1);
# 1162 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = has_quiet_NaN;
# 1163 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_present;
# 1165 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 1167 "/usr/include/c++/4.4/limits" 3
static double infinity() throw()
# 1168 "/usr/include/c++/4.4/limits" 3
{ return __builtin_huge_val(); }
# 1169 "/usr/include/c++/4.4/limits" 3
static double quiet_NaN() throw()
# 1170 "/usr/include/c++/4.4/limits" 3
{ return __builtin_nan(""); }
# 1171 "/usr/include/c++/4.4/limits" 3
static double signaling_NaN() throw()
# 1172 "/usr/include/c++/4.4/limits" 3
{ return __builtin_nans(""); }
# 1173 "/usr/include/c++/4.4/limits" 3
static double denorm_min() throw()
# 1174 "/usr/include/c++/4.4/limits" 3
{ return (4.940656458412465442e-324); }
# 1176 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = ((has_infinity && has_quiet_NaN) && ((denorm_present) == (denorm_present)));
# 1178 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 1179 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = false;
# 1181 "/usr/include/c++/4.4/limits" 3
static const bool traps = false;
# 1182 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 1183 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_to_nearest;
# 1184 "/usr/include/c++/4.4/limits" 3
};
# 1192 "/usr/include/c++/4.4/limits" 3
template<> struct numeric_limits< long double> {
# 1194 "/usr/include/c++/4.4/limits" 3
static const bool is_specialized = true;
# 1196 "/usr/include/c++/4.4/limits" 3
static long double min() throw()
# 1197 "/usr/include/c++/4.4/limits" 3
{ return (0.0L); }
# 1198 "/usr/include/c++/4.4/limits" 3
static long double max() throw()
# 1199 "/usr/include/c++/4.4/limits" 3
{ return ((__builtin_huge_vall())); }
# 1201 "/usr/include/c++/4.4/limits" 3
static const int digits = 64;
# 1202 "/usr/include/c++/4.4/limits" 3
static const int digits10 = 18;
# 1203 "/usr/include/c++/4.4/limits" 3
static const bool is_signed = true;
# 1204 "/usr/include/c++/4.4/limits" 3
static const bool is_integer = false;
# 1205 "/usr/include/c++/4.4/limits" 3
static const bool is_exact = false;
# 1206 "/usr/include/c++/4.4/limits" 3
static const int radix = 2;
# 1207 "/usr/include/c++/4.4/limits" 3
static long double epsilon() throw()
# 1208 "/usr/include/c++/4.4/limits" 3
{ return (1.084202172485504434e-19L); }
# 1209 "/usr/include/c++/4.4/limits" 3
static long double round_error() throw()
# 1210 "/usr/include/c++/4.4/limits" 3
{ return (0.5L); }
# 1212 "/usr/include/c++/4.4/limits" 3
static const int min_exponent = (-16381);
# 1213 "/usr/include/c++/4.4/limits" 3
static const int min_exponent10 = (-4931);
# 1214 "/usr/include/c++/4.4/limits" 3
static const int max_exponent = 16384;
# 1215 "/usr/include/c++/4.4/limits" 3
static const int max_exponent10 = 4932;
# 1217 "/usr/include/c++/4.4/limits" 3
static const bool has_infinity = (1);
# 1218 "/usr/include/c++/4.4/limits" 3
static const bool has_quiet_NaN = (1);
# 1219 "/usr/include/c++/4.4/limits" 3
static const bool has_signaling_NaN = has_quiet_NaN;
# 1220 "/usr/include/c++/4.4/limits" 3
static const float_denorm_style has_denorm = denorm_present;
# 1222 "/usr/include/c++/4.4/limits" 3
static const bool has_denorm_loss = false;
# 1225 "/usr/include/c++/4.4/limits" 3
static long double infinity() throw()
# 1226 "/usr/include/c++/4.4/limits" 3
{ return __builtin_huge_vall(); }
# 1227 "/usr/include/c++/4.4/limits" 3
static long double quiet_NaN() throw()
# 1228 "/usr/include/c++/4.4/limits" 3
{ return __builtin_nanl(""); }
# 1229 "/usr/include/c++/4.4/limits" 3
static long double signaling_NaN() throw()
# 1230 "/usr/include/c++/4.4/limits" 3
{ return __builtin_nansl(""); }
# 1231 "/usr/include/c++/4.4/limits" 3
static long double denorm_min() throw()
# 1232 "/usr/include/c++/4.4/limits" 3
{ return (0.0L); }
# 1234 "/usr/include/c++/4.4/limits" 3
static const bool is_iec559 = ((has_infinity && has_quiet_NaN) && ((denorm_present) == (denorm_present)));
# 1236 "/usr/include/c++/4.4/limits" 3
static const bool is_bounded = true;
# 1237 "/usr/include/c++/4.4/limits" 3
static const bool is_modulo = false;
# 1239 "/usr/include/c++/4.4/limits" 3
static const bool traps = false;
# 1240 "/usr/include/c++/4.4/limits" 3
static const bool tinyness_before = false;
# 1241 "/usr/include/c++/4.4/limits" 3
static const float_round_style round_style = round_to_nearest;
# 1242 "/usr/include/c++/4.4/limits" 3
};
# 1248 "/usr/include/c++/4.4/limits" 3
}
# 27 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
namespace device {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
template<class T>
# 37 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
class internal_allocator {
# 40 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
public: typedef T value_type;
# 41 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
typedef device_ptr< T> pointer;
# 42 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
typedef device_ptr< const T> const_pointer;
# 43 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
typedef device_reference< T> reference;
# 44 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
typedef device_reference< const T> const_reference;
# 45 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
typedef size_t size_type;
# 46 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
typedef typename device_ptr< T> ::difference_type difference_type;
# 49 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
template<class U>
# 50 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
struct rebind {
# 52 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
typedef device::internal_allocator< U> other;
# 53 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
};
# 55 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
internal_allocator() { }
# 57 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
~internal_allocator() { }
# 59 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
internal_allocator(const device::internal_allocator< T> &) { }
# 61 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
template<class U>
# 62 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
internal_allocator(const device::internal_allocator< U> &) { }
# 65 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
pointer address(reference r) { return &r; }
# 67 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
const_pointer address(const_reference r) { return &r; }
# 70 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
pointer allocate(size_type cnt, const_pointer = ((const_pointer)((T *)0)))
# 72 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
{
# 73 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
if (cnt > this->max_size())
# 74 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
{
# 75 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
throw std::bad_alloc();
# 76 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
}
# 78 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
return ((pointer)(device_malloc< T> (cnt)));
# 79 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
}
# 81 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
void deallocate(pointer p, size_type cnt) throw()
# 82 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
{
# 83 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
device::no_throw_free(p);
# 84 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
}
# 86 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
size_type max_size() const
# 87 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
{
# 88 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
return std::numeric_limits< unsigned> ::max() / sizeof(T);
# 89 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
}
# 91 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
bool operator==(const device::internal_allocator< T> &) { return true; }
# 93 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
bool operator!=(const device::internal_allocator< T> &a) { return !this->operator==(a); }
# 94 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
};
# 96 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
}
# 98 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
}
# 100 "/home/normal/checkout/thrust/thrust/detail/device/internal_allocator.h"
}
# 23 "/home/normal/checkout/thrust/thrust/iterator/detail/is_iterator_category.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/iterator/detail/is_iterator_category.h"
namespace detail {
# 29 "/home/normal/checkout/thrust/thrust/iterator/detail/is_iterator_category.h"
template<class T>
# 30 "/home/normal/checkout/thrust/thrust/iterator/detail/is_iterator_category.h"
struct is_host_iterator_category : public or_< is_convertible< T, std::input_iterator_tag> , is_convertible< T, std::output_iterator_tag> , integral_constant< bool, false> > {
# 36 "/home/normal/checkout/thrust/thrust/iterator/detail/is_iterator_category.h"
};
# 38 "/home/normal/checkout/thrust/thrust/iterator/detail/is_iterator_category.h"
template<class T>
# 39 "/home/normal/checkout/thrust/thrust/iterator/detail/is_iterator_category.h"
struct is_device_iterator_category : public or_< is_convertible< T, input_device_iterator_tag> , is_convertible< T, output_device_iterator_tag> , integral_constant< bool, false> > {
# 45 "/home/normal/checkout/thrust/thrust/iterator/detail/is_iterator_category.h"
};
# 48 "/home/normal/checkout/thrust/thrust/iterator/detail/is_iterator_category.h"
template<class T>
# 49 "/home/normal/checkout/thrust/thrust/iterator/detail/is_iterator_category.h"
struct is_iterator_category : public or_< is_host_iterator_category< T> , is_device_iterator_category< T> , integral_constant< bool, false> > {
# 55 "/home/normal/checkout/thrust/thrust/iterator/detail/is_iterator_category.h"
};
# 57 "/home/normal/checkout/thrust/thrust/iterator/detail/is_iterator_category.h"
}
# 59 "/home/normal/checkout/thrust/thrust/iterator/detail/is_iterator_category.h"
}
# 26 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
namespace experimental {
# 32 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
namespace detail {
# 77 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
template<class Space, class Traversal, class ValueParam, class Reference> struct iterator_facade_default_category;
# 97 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
template<class Traversal, class ValueParam, class Reference>
# 98 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
struct iterator_facade_default_category_host : public thrust::detail::eval_if< thrust::detail::and_< thrust::detail::is_reference< Reference> , thrust::detail::is_convertible< Traversal, forward_traversal_tag> > ::value, thrust::detail::eval_if< thrust::detail::is_convertible< Traversal, random_access_traversal_tag> ::value, thrust::detail::identity_< std::random_access_iterator_tag> , thrust::detail::eval_if< thrust::detail::is_convertible< Traversal, bidirectional_traversal_tag> ::value, std::bidirectional_iterator_tag, std::forward_iterator_tag> > , thrust::detail::eval_if< thrust::detail::and_< thrust::detail::is_convertible< Traversal, single_pass_traversal_tag> , thrust::detail::is_convertible< Reference, ValueParam> > ::value, thrust::detail::identity_< std::input_iterator_tag> , thrust::detail::identity_< Traversal> > > {
# 123 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
};
# 127 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
template<class Traversal, class ValueParam, class Reference>
# 128 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
struct iterator_facade_default_category_device : public thrust::detail::eval_if< thrust::detail::and_< thrust::detail::is_device_reference< Reference> , thrust::detail::is_convertible< Traversal, forward_traversal_tag> > ::value, thrust::detail::eval_if< thrust::detail::is_convertible< Traversal, random_access_traversal_tag> ::value, thrust::detail::identity_< random_access_device_iterator_tag> , thrust::detail::eval_if< thrust::detail::is_convertible< Traversal, bidirectional_traversal_tag> ::value, thrust::detail::identity_< bidirectional_device_iterator_tag> , thrust::detail::identity_< forward_device_iterator_tag> > > , thrust::detail::eval_if< thrust::detail::and_< thrust::detail::is_convertible< Traversal, single_pass_traversal_tag> , thrust::detail::is_convertible< Reference, ValueParam> > ::value, thrust::detail::identity_< input_device_iterator_tag> , thrust::detail::identity_< Traversal> > > {
# 153 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
};
# 157 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
template<class Traversal, class ValueParam, class Reference>
# 158 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
struct iterator_facade_default_category_cuda_device : public thrust::detail::eval_if< thrust::detail::and_< thrust::detail::is_device_reference< Reference> , thrust::detail::is_convertible< Traversal, forward_traversal_tag> > ::value, thrust::detail::eval_if< thrust::detail::is_convertible< Traversal, random_access_traversal_tag> ::value, thrust::detail::identity_< thrust::detail::random_access_cuda_device_iterator_tag> , thrust::detail::eval_if< thrust::detail::is_convertible< Traversal, bidirectional_traversal_tag> ::value, thrust::detail::identity_< thrust::detail::bidirectional_cuda_device_iterator_tag> , thrust::detail::identity_< thrust::detail::forward_cuda_device_iterator_tag> > > , thrust::detail::eval_if< thrust::detail::and_< thrust::detail::is_convertible< Traversal, single_pass_traversal_tag> , thrust::detail::is_convertible< Reference, ValueParam> > ::value, thrust::detail::identity_< thrust::detail::input_cuda_device_iterator_tag> , thrust::detail::identity_< Traversal> > > {
# 183 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
};
# 187 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
template<class Traversal, class ValueParam, class Reference>
# 188 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
struct iterator_facade_default_category_omp_device : public thrust::detail::eval_if< thrust::detail::and_< thrust::detail::is_device_reference< Reference> , thrust::detail::is_convertible< Traversal, forward_traversal_tag> > ::value, thrust::detail::eval_if< thrust::detail::is_convertible< Traversal, random_access_traversal_tag> ::value, thrust::detail::identity_< thrust::detail::random_access_omp_device_iterator_tag> , thrust::detail::eval_if< thrust::detail::is_convertible< Traversal, bidirectional_traversal_tag> ::value, thrust::detail::identity_< thrust::detail::bidirectional_omp_device_iterator_tag> , thrust::detail::identity_< thrust::detail::forward_omp_device_iterator_tag> > > , thrust::detail::eval_if< thrust::detail::and_< thrust::detail::is_convertible< Traversal, single_pass_traversal_tag> , thrust::detail::is_convertible< Reference, ValueParam> > ::value, thrust::detail::identity_< thrust::detail::input_omp_device_iterator_tag> , thrust::detail::identity_< Traversal> > > {
# 213 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
};
# 217 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
template<class Traversal, class ValueParam, class Reference>
# 218 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
struct iterator_facade_default_category_any : public thrust::detail::eval_if< thrust::detail::and_< thrust::detail::is_reference< Reference> , thrust::detail::is_convertible< Traversal, forward_traversal_tag> > ::value, thrust::detail::eval_if< thrust::detail::is_convertible< Traversal, random_access_traversal_tag> ::value, thrust::detail::identity_< random_access_universal_iterator_tag> , thrust::detail::eval_if< thrust::detail::is_convertible< Traversal, bidirectional_traversal_tag> ::value, bidirectional_universal_iterator_tag, forward_universal_iterator_tag> > , thrust::detail::eval_if< thrust::detail::and_< thrust::detail::is_convertible< Traversal, single_pass_traversal_tag> , thrust::detail::is_convertible< Reference, ValueParam> > ::value, thrust::detail::identity_< input_universal_iterator_tag> , thrust::detail::identity_< Traversal> > > {
# 247 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
};
# 250 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
template<class Space, class Traversal, class ValueParam, class Reference>
# 251 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
struct iterator_facade_default_category : public thrust::detail::eval_if< thrust::detail::is_convertible< Space, any_space_tag> ::value, iterator_facade_default_category_any< Traversal, ValueParam, Reference> , thrust::detail::eval_if< thrust::detail::is_convertible< Space, host_space_tag> ::value, iterator_facade_default_category_host< Traversal, ValueParam, Reference> , thrust::detail::eval_if< thrust::detail::is_convertible< Space, thrust::detail::cuda_device_space_tag> ::value, iterator_facade_default_category_cuda_device< Traversal, ValueParam, Reference> , thrust::detail::eval_if< thrust::detail::is_convertible< Space, thrust::detail::omp_device_space_tag> ::value, iterator_facade_default_category_omp_device< Traversal, ValueParam, Reference> , thrust::detail::eval_if< thrust::detail::is_convertible< Space, device_space_tag> ::value, iterator_facade_default_category_device< Traversal, ValueParam, Reference> , thrust::detail::identity_< Traversal> > > > > > {
# 284 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
};
# 287 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
template<class Category, class Space, class Traversal>
# 288 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
struct iterator_category_with_space_and_traversal : public Category, public Space, public Traversal {
# 291 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
};
# 293 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
template<class Space, class Traversal, class ValueParam, class Reference>
# 294 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
struct iterator_facade_category_impl {
# 298 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
typedef typename iterator_facade_default_category< Space, Traversal, ValueParam, Reference> ::type category;
# 315 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
typedef typename thrust::detail::eval_if< thrust::detail::and_< thrust::detail::is_same< Traversal, typename thrust::detail::iterator_category_to_traversal< typename iterator_facade_default_category< Space, Traversal, ValueParam, Reference> ::type> ::type> , thrust::detail::is_same< Space, typename thrust::detail::iterator_category_to_space< typename iterator_facade_default_category< Space, Traversal, ValueParam, Reference> ::type> ::type> > ::value, thrust::detail::identity_< typename iterator_facade_default_category< Space, Traversal, ValueParam, Reference> ::type> , thrust::detail::identity_< iterator_category_with_space_and_traversal< typename iterator_facade_default_category< Space, Traversal, ValueParam, Reference> ::type, Space, Traversal> > > ::type type;
# 316 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
};
# 319 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
template<class CategoryOrSpace, class
# 320 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
CategoryOrTraversal, class
# 321 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
ValueParam, class
# 322 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
Reference>
# 323 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
struct iterator_facade_category {
# 330 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
typedef typename thrust::detail::eval_if< thrust::detail::is_iterator_category< CategoryOrTraversal> ::value, thrust::detail::identity_< CategoryOrTraversal> , iterator_facade_category_impl< CategoryOrSpace, CategoryOrTraversal, ValueParam, Reference> > ::type type;
# 331 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
};
# 333 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
template<class ValueParam, class
# 334 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
CategoryOrSpace, class
# 335 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
CategoryOrTraversal, class
# 336 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
Reference, class
# 337 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
Difference>
# 338 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
struct iterator_facade_types {
# 342 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
typedef typename iterator_facade_category< CategoryOrSpace, CategoryOrTraversal, ValueParam, Reference> ::type iterator_category;
# 344 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
typedef typename thrust::detail::remove_const< ValueParam> ::type value_type;
# 345 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
};
# 347 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
}
# 349 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
}
# 351 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_facade.inl"
}
# 22 "/home/normal/checkout/thrust/thrust/iterator/detail/distance_from_result.h"
namespace thrust {
# 25 "/home/normal/checkout/thrust/thrust/iterator/detail/distance_from_result.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/iterator/detail/distance_from_result.h"
template<class Iterator1, class Iterator2>
# 29 "/home/normal/checkout/thrust/thrust/iterator/detail/distance_from_result.h"
struct distance_from_result : public eval_if< is_convertible< Iterator2, Iterator1> ::value, iterator_difference< Iterator1> , iterator_difference< Iterator2> > {
# 35 "/home/normal/checkout/thrust/thrust/iterator/detail/distance_from_result.h"
};
# 37 "/home/normal/checkout/thrust/thrust/iterator/detail/distance_from_result.h"
}
# 39 "/home/normal/checkout/thrust/thrust/iterator/detail/distance_from_result.h"
}
# 44 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
namespace thrust {
# 47 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
namespace experimental {
# 52 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived, class Pointer, class Value, class Space, class Traversal, class Reference, class Difference> class iterator_facade;
# 54 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
class iterator_core_access {
# 57 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived, class Pointer, class Value, class Space, class Traversal, class Reference, class Difference> friend class iterator_facade;
# 60 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived1, class Pointer1, class Value1, class Space1, class Traversal1, class Reference1, class Difference1, class
# 61 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived2, class Pointer2, class Value2, class Space2, class Traversal2, class Reference2, class Difference2> friend inline bool
# 60 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator==(const iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> &, const iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> &);
# 66 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived1, class Pointer1, class Value1, class Space1, class Traversal1, class Reference1, class Difference1, class
# 67 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived2, class Pointer2, class Value2, class Space2, class Traversal2, class Reference2, class Difference2> friend inline bool
# 66 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator!=(const iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> &, const iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> &);
# 72 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived1, class Pointer1, class Value1, class Space1, class Traversal1, class Reference1, class Difference1, class
# 73 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived2, class Pointer2, class Value2, class Space2, class Traversal2, class Reference2, class Difference2> friend inline bool
# 72 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator<(const iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> &, const iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> &);
# 78 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived1, class Pointer1, class Value1, class Space1, class Traversal1, class Reference1, class Difference1, class
# 79 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived2, class Pointer2, class Value2, class Space2, class Traversal2, class Reference2, class Difference2> friend inline bool
# 78 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator>(const iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> &, const iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> &);
# 84 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived1, class Pointer1, class Value1, class Space1, class Traversal1, class Reference1, class Difference1, class
# 85 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived2, class Pointer2, class Value2, class Space2, class Traversal2, class Reference2, class Difference2> friend inline bool
# 84 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator<=(const iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> &, const iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> &);
# 90 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived1, class Pointer1, class Value1, class Space1, class Traversal1, class Reference1, class Difference1, class
# 91 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived2, class Pointer2, class Value2, class Space2, class Traversal2, class Reference2, class Difference2> friend inline bool
# 90 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator>=(const iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> &, const iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> &);
# 97 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived1, class Pointer1, class Value1, class Space1, class Traversal1, class Reference1, class Difference1, class
# 98 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived2, class Pointer2, class Value2, class Space2, class Traversal2, class Reference2, class Difference2> friend inline typename thrust::detail::distance_from_result< iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> , iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> > ::type
# 97 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator-(const iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> &, const iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> &);
# 107 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Facade> static typename Facade::reference
# 109 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
dereference(const Facade &f)
# 110 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 111 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return (f.Facade::dereference());
# 112 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 114 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Facade> static void
# 116 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
increment(Facade &f)
# 117 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 118 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
(f.Facade::increment());
# 119 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 121 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Facade> static void
# 123 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
decrement(Facade &f)
# 124 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 125 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
(f.Facade::decrement());
# 126 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 128 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Facade1, class Facade2> static bool
# 130 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
equal(const Facade1 &f1, const Facade2 &f2)
# 131 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 132 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return (f1.Facade1::equal(f2));
# 133 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 150 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Facade> static void
# 152 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
advance(Facade &f, typename Facade::difference_type n)
# 153 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 154 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
(f.Facade::advance(n));
# 155 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 159 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Facade1, class Facade2> static typename Facade1::difference_type
# 162 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
distance_from(const Facade1 &f1, const Facade2 &f2, thrust::detail::true_type)
# 163 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 164 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return -(f1.Facade1::distance_to(f2));
# 165 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 169 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Facade1, class Facade2> static typename Facade2::difference_type
# 172 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
distance_from(const Facade1 &f1, const Facade2 &f2, thrust::detail::false_type)
# 173 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 174 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return (f2.Facade2::distance_to(f1));
# 175 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 177 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Facade1, class Facade2> static typename thrust::detail::distance_from_result< Facade1, Facade2> ::type
# 180 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
distance_from(const Facade1 &f1, const Facade2 &f2)
# 181 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 184 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return distance_from(f1, f2, typename thrust::detail::is_convertible< Facade2, Facade1> ::type());
# 186 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 191 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived, class Pointer, class Value, class Space, class Traversal, class Reference, class Difference> static Derived &
# 193 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
derived(iterator_facade< Derived, Pointer, Value, Space, Traversal, Reference, Difference> &facade)
# 194 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 195 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return *(static_cast< Derived *>((&facade)));
# 196 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 198 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived, class Pointer, class Value, class Space, class Traversal, class Reference, class Difference> static const Derived &
# 200 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
derived(const iterator_facade< Derived, Pointer, Value, Space, Traversal, Reference, Difference> &facade)
# 201 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 202 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return *(static_cast< const Derived *>((&facade)));
# 203 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 209 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
};
# 212 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived, class Pointer, class Value, class Space, class Traversal, class Reference, class Difference>
# 213 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
class iterator_facade {
# 220 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived &derived()
# 221 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 222 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return *(static_cast< Derived *>(this));
# 223 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 226 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
const Derived &derived() const
# 227 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 228 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return *(static_cast< const Derived *>(this));
# 229 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 233 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
typedef detail::iterator_facade_types< Value, Space, Traversal, Reference, Difference> associated_types;
# 236 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
public: typedef typename detail::iterator_facade_types< Value, Space, Traversal, Reference, Difference> ::value_type value_type;
# 237 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
typedef Reference reference;
# 238 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
typedef Pointer pointer;
# 239 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
typedef Difference difference_type;
# 240 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
typedef typename detail::iterator_facade_types< Value, Space, Traversal, Reference, Difference> ::iterator_category iterator_category;
# 243 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
reference operator*() const
# 244 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 245 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return iterator_core_access::dereference(this->derived());
# 246 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 251 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
pointer operator->() const
# 252 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 253 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return this->derived();
# 254 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 259 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
reference operator[](difference_type n) const
# 260 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 261 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return *(this->derived() + n);
# 262 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 265 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived &operator++()
# 266 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 267 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
iterator_core_access::increment(this->derived());
# 268 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return this->derived();
# 269 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 272 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived operator++(int)
# 273 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 274 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived tmp(this->derived());
# 275 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
++(*this);
# 276 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return tmp;
# 277 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 280 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived &operator--()
# 281 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 282 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
iterator_core_access::decrement(this->derived());
# 283 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return this->derived();
# 284 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 287 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived operator--(int)
# 288 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 289 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived tmp(this->derived());
# 290 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
--(*this);
# 291 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return tmp;
# 292 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 295 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived &operator+=(difference_type n)
# 296 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 297 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
iterator_core_access::advance(this->derived(), n);
# 298 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return this->derived();
# 299 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 302 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived &operator-=(difference_type n)
# 303 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 304 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
iterator_core_access::advance(this->derived(), -n);
# 305 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return this->derived();
# 306 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 309 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived operator-(difference_type n) const
# 310 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 311 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived result(this->derived());
# 312 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return result -= n;
# 313 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 316 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
protected: typedef experimental::iterator_facade< Derived, Pointer, Value, Space, Traversal, Reference, Difference> iterator_facade_;
# 318 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
};
# 321 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived1, class Pointer1, class Value1, class Space1, class Traversal1, class Reference1, class Difference1, class
# 322 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived2, class Pointer2, class Value2, class Space2, class Traversal2, class Reference2, class Difference2> inline bool
# 327 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator==(const iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> &lhs, const iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> &
# 328 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
rhs)
# 329 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 330 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return iterator_core_access::equal(*(static_cast< const Derived1 *>((&lhs))), *(static_cast< const Derived2 *>((&rhs))));
# 333 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 335 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived1, class Pointer1, class Value1, class Space1, class Traversal1, class Reference1, class Difference1, class
# 336 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived2, class Pointer2, class Value2, class Space2, class Traversal2, class Reference2, class Difference2> inline bool
# 341 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator!=(const iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> &lhs, const iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> &
# 342 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
rhs)
# 343 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 344 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return !iterator_core_access::equal(*(static_cast< const Derived1 *>((&lhs))), *(static_cast< const Derived2 *>((&rhs))));
# 347 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 349 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived1, class Pointer1, class Value1, class Space1, class Traversal1, class Reference1, class Difference1, class
# 350 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived2, class Pointer2, class Value2, class Space2, class Traversal2, class Reference2, class Difference2> inline bool
# 355 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator<(const iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> &lhs, const iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> &
# 356 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
rhs)
# 357 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 358 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return 0 > iterator_core_access::distance_from(*(static_cast< const Derived1 *>((&lhs))), *(static_cast< const Derived2 *>((&rhs))));
# 361 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 363 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived1, class Pointer1, class Value1, class Space1, class Traversal1, class Reference1, class Difference1, class
# 364 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived2, class Pointer2, class Value2, class Space2, class Traversal2, class Reference2, class Difference2> inline bool
# 369 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator>(const iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> &lhs, const iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> &
# 370 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
rhs)
# 371 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 372 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return 0 < iterator_core_access::distance_from(*(static_cast< const Derived1 *>((&lhs))), *(static_cast< const Derived2 *>((&rhs))));
# 375 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 377 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived1, class Pointer1, class Value1, class Space1, class Traversal1, class Reference1, class Difference1, class
# 378 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived2, class Pointer2, class Value2, class Space2, class Traversal2, class Reference2, class Difference2> inline bool
# 383 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator<=(const iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> &lhs, const iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> &
# 384 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
rhs)
# 385 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 386 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return 0 >= iterator_core_access::distance_from(*(static_cast< const Derived1 *>((&lhs))), *(static_cast< const Derived2 *>((&rhs))));
# 389 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 391 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived1, class Pointer1, class Value1, class Space1, class Traversal1, class Reference1, class Difference1, class
# 392 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived2, class Pointer2, class Value2, class Space2, class Traversal2, class Reference2, class Difference2> inline bool
# 397 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator>=(const iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> &lhs, const iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> &
# 398 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
rhs)
# 399 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 400 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return 0 <= iterator_core_access::distance_from(*(static_cast< const Derived1 *>((&lhs))), *(static_cast< const Derived2 *>((&rhs))));
# 403 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 406 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived1, class Pointer1, class Value1, class Space1, class Traversal1, class Reference1, class Difference1, class
# 407 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived2, class Pointer2, class Value2, class Space2, class Traversal2, class Reference2, class Difference2> inline typename thrust::detail::distance_from_result< iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> , iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> > ::type
# 416 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator-(const iterator_facade< Derived1, Pointer1, Value1, Space1, Traversal1, Reference1, Difference1> &lhs, const iterator_facade< Derived2, Pointer2, Value2, Space2, Traversal2, Reference2, Difference2> &
# 417 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
rhs)
# 418 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 419 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return iterator_core_access::distance_from(*(static_cast< const Derived1 *>((&lhs))), *(static_cast< const Derived2 *>((&rhs))));
# 422 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 425 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived, class Pointer, class Value, class Space, class Traversal, class Reference, class Difference> inline Derived
# 427 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator+(const iterator_facade< Derived, Pointer, Value, Space, Traversal, Reference, Difference> &i, typename Derived::difference_type
# 428 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
n)
# 429 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 430 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived tmp(static_cast< const Derived &>(i));
# 431 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return tmp += n;
# 432 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 434 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
template<class Derived, class Pointer, class Value, class Space, class Traversal, class Reference, class Difference> inline Derived
# 436 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
operator+(typename Derived::difference_type n, const iterator_facade< Derived, Pointer, Value, Space, Traversal, Reference, Difference> &
# 437 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
i)
# 438 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
{
# 439 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
Derived tmp(static_cast< const Derived &>(i));
# 440 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
return tmp += n;
# 441 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 443 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 445 "/home/normal/checkout/thrust/thrust/iterator/iterator_facade.h"
}
# 24 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
struct use_default;
# 30 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
namespace experimental {
# 33 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
namespace detail {
# 39 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
template<class T, class DefaultNullaryFn>
# 40 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
struct ia_dflt_help : public thrust::detail::eval_if< thrust::detail::is_same< T, use_default> ::value, DefaultNullaryFn, thrust::detail::identity_< T> > {
# 47 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
};
# 52 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
template<class
# 53 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
Derived, class
# 54 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
Base, class
# 55 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
Pointer, class
# 56 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
Value, class
# 57 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
Space, class
# 58 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
Traversal, class
# 59 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
Reference, class
# 60 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
Difference>
# 62 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
struct iterator_adaptor_base {
# 67 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
typedef typename ia_dflt_help< Value, iterator_value< Base> > ::type value;
# 72 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
typedef typename ia_dflt_help< Space, iterator_space< Base> > ::type space;
# 77 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
typedef typename ia_dflt_help< Traversal, iterator_traversal< Base> > ::type traversal;
# 86 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
typedef typename ia_dflt_help< Reference, thrust::detail::eval_if< thrust::detail::is_same< Value, use_default> ::value, iterator_reference< Base> , thrust::detail::add_reference< Value> > > ::type reference;
# 91 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
typedef typename ia_dflt_help< Difference, iterator_difference< Base> > ::type difference;
# 101 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
typedef iterator_facade< Derived, Pointer, typename ia_dflt_help< Value, iterator_value< Base> > ::type, typename ia_dflt_help< Space, iterator_space< Base> > ::type, typename ia_dflt_help< Traversal, iterator_traversal< Base> > ::type, typename ia_dflt_help< Reference, thrust::detail::eval_if< thrust::detail::is_same< Value, use_default> ::value, iterator_reference< Base> , thrust::detail::add_reference< Value> > > ::type, typename ia_dflt_help< Difference, iterator_difference< Base> > ::type> type;
# 102 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
};
# 104 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
}
# 106 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
}
# 108 "/home/normal/checkout/thrust/thrust/iterator/detail/iterator_adaptor.inl"
}
# 38 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
namespace thrust {
# 41 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
struct use_default { };
# 43 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
namespace experimental {
# 46 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
template<class
# 47 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
Derived, class
# 48 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
Base, class
# 49 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
Pointer, class
# 56 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
Value, class
# 57 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
Space, class
# 58 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
Traversal, class
# 59 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
Reference, class
# 60 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
Difference = use_default>
# 62 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
class iterator_adaptor : public detail::iterator_adaptor_base< Derived, Base, Pointer, Value, Space, Traversal, Reference, Difference> ::type {
# 67 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
friend class iterator_core_access;
# 72 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
protected: typedef typename detail::iterator_adaptor_base< Derived, Base, Pointer, Value, Space, Traversal, Reference, Difference> ::type super_t;
# 76 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
public: iterator_adaptor() { }
# 79 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
explicit iterator_adaptor(const Base &iter) : m_iterator(iter)
# 81 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
{ }
# 83 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
typedef Base base_type;
# 85 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
typedef typename detail::iterator_adaptor_base< Derived, Base, Pointer, Value, Space, Traversal, Reference, Difference> ::type::reference reference;
# 87 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
typedef typename detail::iterator_adaptor_base< Derived, Base, Pointer, Value, Space, Traversal, Reference, Difference> ::type::difference_type difference_type;
# 90 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
const Base &base() const
# 91 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
{ return m_iterator; }
# 94 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
protected: typedef experimental::iterator_adaptor< Derived, Base, Pointer, Value, Space, Traversal, Reference, Difference> iterator_adaptor_;
# 97 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
const Base &base_reference() const
# 98 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
{ return m_iterator; }
# 101 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
Base &base_reference()
# 102 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
{ return m_iterator; }
# 107 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
private: reference dereference() const
# 108 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
{ return *(m_iterator); }
# 110 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
template<class OtherDerived, class OtherIterator, class P, class V, class S, class T, class R, class D> bool
# 112 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
equal(const experimental::iterator_adaptor< OtherDerived, OtherIterator, P, V, S, T, R, D> &x) const
# 113 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
{ return (m_iterator) == (x.experimental::iterator_adaptor< OtherDerived, OtherIterator, P, V, S, T, R, D> ::base()); }
# 116 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
void advance(difference_type n)
# 117 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
{
# 119 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
(m_iterator) += n;
# 120 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
}
# 123 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
void increment()
# 124 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
{ ++(m_iterator); }
# 127 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
void decrement()
# 128 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
{
# 130 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
--(m_iterator);
# 131 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
}
# 133 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
template<class OtherDerived, class OtherIterator, class P, class V, class S, class T, class R, class D> difference_type
# 135 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
distance_to(const experimental::iterator_adaptor< OtherDerived, OtherIterator, P, V, S, T, R, D> &y) const
# 136 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
{ return (y.experimental::iterator_adaptor< OtherDerived, OtherIterator, P, V, S, T, R, D> ::base()) - (m_iterator); }
# 139 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
Base m_iterator;
# 140 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
};
# 142 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
}
# 144 "/home/normal/checkout/thrust/thrust/iterator/iterator_adaptor.h"
}
# 31 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
namespace thrust {
# 34 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
namespace detail {
# 37 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
template<class Pointer>
# 38 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
class normal_iterator : public experimental::iterator_adaptor< normal_iterator< Pointer> , Pointer, Pointer, use_default, use_default, use_default, use_default, use_default> {
# 53 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
public: normal_iterator() { }
# 56 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
normal_iterator(Pointer p) : experimental::iterator_adaptor< detail::normal_iterator< Pointer> , Pointer, Pointer, use_default, use_default, use_default, use_default, use_default> ::iterator_adaptor_(p)
# 57 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
{ }
# 61 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
template<class OtherIterator>
# 63 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
normal_iterator(const OtherIterator &other) : experimental::iterator_adaptor< detail::normal_iterator< Pointer> , Pointer, Pointer, use_default, use_default, use_default, use_default, use_default> ::iterator_adaptor_((other.OtherIterator::base()))
# 64 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
{ }
# 66 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
};
# 69 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
template<class T> struct is_trivial_iterator< normal_iterator< T> > : public true_type { };
# 73 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
namespace device {
# 78 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
template<class T>
# 79 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
struct dereference_result< normal_iterator< device_ptr< T> > > {
# 81 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
typedef typename device::dereference_result< device_ptr< T> > ::type type;
# 82 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
};
# 86 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
template<class T> inline typename dereference_result< device_ptr< T> > ::type dereference(device_ptr< T> );
# 91 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
template<class T, class IndexType> inline typename dereference_result< device_ptr< T> > ::type dereference(device_ptr< T> , IndexType);
# 96 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
template<class T> inline typename dereference_result< normal_iterator< device_ptr< T> > > ::type
# 99 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
dereference(const normal_iterator< device_ptr< T> > &iter)
# 100 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
{
# 101 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
return dereference((iter.normal_iterator< device_ptr< T> > ::base()));
# 102 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
}
# 104 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
template<class T, class IndexType> inline typename dereference_result< normal_iterator< device_ptr< T> > > ::type
# 107 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
dereference(const normal_iterator< device_ptr< T> > &iter, IndexType n)
# 108 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
{
# 109 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
return dereference((iter.normal_iterator< device_ptr< T> > ::base()), n);
# 110 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
}
# 112 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
}
# 114 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
}
# 116 "/home/normal/checkout/thrust/thrust/iterator/detail/normal_iterator.h"
}
# 60 "/usr/include/c++/4.4/bits/stl_raw_storage_iter.h" 3
namespace std __attribute__((visibility("default"))) {
# 66 "/usr/include/c++/4.4/bits/stl_raw_storage_iter.h" 3
template < class _OutputIterator, class _Tp >
    class raw_storage_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _OutputIterator _M_iter;

    public :
      explicit
      raw_storage_iterator ( _OutputIterator __x )
      : _M_iter ( __x ) { }

      raw_storage_iterator &
      operator * ( ) { return * this; }

      raw_storage_iterator &
      operator = ( const _Tp & __element )
      {
 std :: _Construct ( & * _M_iter, __element );
 return * this;
      }

      raw_storage_iterator < _OutputIterator, _Tp > &
      operator ++ ( )
      {
 ++ _M_iter;
 return * this;
      }

      raw_storage_iterator < _OutputIterator, _Tp >
      operator ++ ( int )
      {
 raw_storage_iterator < _OutputIterator, _Tp > __tmp = * this;
 ++ _M_iter;
 return __tmp;
      }
    };
# 104 "/usr/include/c++/4.4/bits/stl_raw_storage_iter.h" 3
}
# 36 "/usr/include/c++/4.4/backward/_ptr.h" 3
namespace std __attribute__((visibility("default"))) {
# 45 "/usr/include/c++/4.4/backward/_ptr.h" 3
template < typename _Tp1 >
    struct _ptr_ref
    {
      _Tp1 * _M_ptr;

      explicit
      _ptr_ref ( _Tp1 * __p ) : _M_ptr ( __p ) { }
    };
# 84 "/usr/include/c++/4.4/backward/_ptr.h" 3
template < typename _Tp >
    class _ptr
    {
    private :
      _Tp * _M_ptr;

    public :

      typedef _Tp element_type;







      explicit
      _ptr ( element_type * __p = 0 ) throw ( ) : _M_ptr ( __p ) { }
# 110 "/usr/include/c++/4.4/backward/_ptr.h" 3
      _ptr ( _ptr & __a ) throw ( ) : _M_ptr ( __a . release ( ) ) { }
# 122 "/usr/include/c++/4.4/backward/_ptr.h" 3
      template < typename _Tp1 >
        _ptr ( _ptr < _Tp1 > & __a ) throw ( ) : _M_ptr ( __a . release ( ) ) { }
# 133 "/usr/include/c++/4.4/backward/_ptr.h" 3
      _ptr &
      operator = ( _ptr & __a ) throw ( )
      {
 reset ( __a . release ( ) );
 return * this;
      }
# 150 "/usr/include/c++/4.4/backward/_ptr.h" 3
      template < typename _Tp1 >
        _ptr &
        operator = ( _ptr < _Tp1 > & __a ) throw ( )
        {
   reset ( __a . release ( ) );
   return * this;
 }
# 168 "/usr/include/c++/4.4/backward/_ptr.h" 3
      ~ _ptr ( ) { delete _M_ptr; }
# 178 "/usr/include/c++/4.4/backward/_ptr.h" 3
      element_type &
      operator * ( ) const throw ( )
      {
 ;
 return * _M_ptr;
      }







      element_type *
      operator -> ( ) const throw ( )
      {
 ;
 return _M_ptr;
      }
# 208 "/usr/include/c++/4.4/backward/_ptr.h" 3
      element_type *
      get ( ) const throw ( ) { return _M_ptr; }
# 222 "/usr/include/c++/4.4/backward/_ptr.h" 3
      element_type *
      release ( ) throw ( )
      {
 element_type * __tmp = _M_ptr;
 _M_ptr = 0;
 return __tmp;
      }
# 237 "/usr/include/c++/4.4/backward/_ptr.h" 3
      void
      reset ( element_type * __p = 0 ) throw ( )
      {
 if ( __p != _M_ptr )
   {
     delete _M_ptr;
     _M_ptr = __p;
   }
      }
# 258 "/usr/include/c++/4.4/backward/_ptr.h" 3
      _ptr ( _ptr_ref < element_type > __ref ) throw ( )
      : _M_ptr ( __ref . _M_ptr ) { }

      _ptr &
      operator = ( _ptr_ref < element_type > __ref ) throw ( )
      {
 if ( __ref . _M_ptr != this -> get ( ) )
   {
     delete _M_ptr;
     _M_ptr = __ref . _M_ptr;
   }
 return * this;
      }

      template < typename _Tp1 >
        operator _ptr_ref < _Tp1 > ( ) throw ( )
        { return _ptr_ref < _Tp1 > ( this -> release ( ) ); }

      template < typename _Tp1 >
        operator _ptr < _Tp1 > ( ) throw ( )
        { return _ptr < _Tp1 > ( this -> release ( ) ); }
    };
# 284 "/usr/include/c++/4.4/backward/_ptr.h" 3
template<> class _ptr< void> {
# 287 "/usr/include/c++/4.4/backward/_ptr.h" 3
public: typedef void element_type;
# 288 "/usr/include/c++/4.4/backward/_ptr.h" 3
};
# 290 "/usr/include/c++/4.4/backward/_ptr.h" 3
}
# 28 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
namespace thrust {
# 32 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
template<class T> class device_malloc_allocator;
# 34 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
namespace detail {
# 38 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
template<class > class normal_iterator;
# 40 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
template<class T, class Space>
# 41 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
struct choose_raw_buffer_allocator : public eval_if< is_convertible< Space, any_space_tag> ::value, void, eval_if< is_convertible< Space, host_space_tag> ::value, identity_< std::allocator< T> > , eval_if< is_convertible< Space, device_space_tag> ::value, identity_< device::internal_allocator< T> > , void> > > {
# 66 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
};
# 69 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
template<class T, class Space>
# 70 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
class raw_buffer {
# 73 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
public: typedef typename choose_raw_buffer_allocator< T, Space> ::type allocator_type;
# 74 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
typedef T value_type;
# 75 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
typedef typename choose_raw_buffer_allocator< T, Space> ::type::pointer pointer;
# 76 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
typedef typename choose_raw_buffer_allocator< T, Space> ::type::const_pointer const_pointer;
# 77 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
typedef typename choose_raw_buffer_allocator< T, Space> ::type::reference reference;
# 78 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
typedef typename choose_raw_buffer_allocator< T, Space> ::type::const_reference const_reference;
# 79 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
typedef size_t size_type;
# 80 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
typedef typename choose_raw_buffer_allocator< T, Space> ::type::difference_type difference_type;
# 82 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
typedef normal_iterator< typename choose_raw_buffer_allocator< T, Space> ::type::pointer> iterator;
# 83 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
typedef normal_iterator< typename choose_raw_buffer_allocator< T, Space> ::type::const_pointer> const_iterator;
# 85 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
explicit raw_buffer(size_type);
# 87 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
template<class InputIterator> raw_buffer(InputIterator, InputIterator);
# 90 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
~raw_buffer();
# 92 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
size_type size() const;
# 94 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
iterator begin();
# 96 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
const_iterator begin() const;
# 98 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
const_iterator cbegin() const;
# 100 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
iterator end();
# 102 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
const_iterator end() const;
# 104 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
const_iterator cend() const;
# 106 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
reference operator[](size_type);
# 108 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
const_reference operator[](size_type) const;
# 112 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
protected: allocator_type m_allocator;
# 114 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
iterator m_begin, m_end;
# 118 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
private: detail::raw_buffer< T, Space> &operator=(const detail::raw_buffer< T, Space> &);
# 119 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
};
# 122 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
template<class T>
# 123 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
class raw_omp_device_buffer : public raw_buffer< T, omp_device_space_tag> {
# 127 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
typedef raw_buffer< T, omp_device_space_tag> super_t;
# 130 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
public: explicit raw_omp_device_buffer(typename raw_buffer< T, omp_device_space_tag> ::size_type n) : raw_buffer< T, omp_device_space_tag> (n) { }
# 132 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
template<class InputIterator>
# 133 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
raw_omp_device_buffer(InputIterator first, InputIterator last) : raw_buffer< T, omp_device_space_tag> (first, last) { }
# 134 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
};
# 136 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
template<class T>
# 137 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
class raw_cuda_device_buffer : public raw_buffer< T, cuda_device_space_tag> {
# 141 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
typedef raw_buffer< T, cuda_device_space_tag> super_t;
# 144 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
public: explicit raw_cuda_device_buffer(typename raw_buffer< T, cuda_device_space_tag> ::size_type n) : raw_buffer< T, cuda_device_space_tag> (n) { }
# 146 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
template<class InputIterator>
# 147 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
raw_cuda_device_buffer(InputIterator first, InputIterator last) : raw_buffer< T, cuda_device_space_tag> (first, last) { }
# 148 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
};
# 150 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
template<class T>
# 151 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
class raw_host_buffer : public raw_buffer< T, host_space_tag> {
# 155 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
typedef raw_buffer< T, host_space_tag> super_t;
# 158 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
public: explicit raw_host_buffer(typename raw_buffer< T, host_space_tag> ::size_type n) : raw_buffer< T, host_space_tag> (n) { }
# 160 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
template<class InputIterator>
# 161 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
raw_host_buffer(InputIterator first, InputIterator last) : raw_buffer< T, host_space_tag> (first, last) { }
# 162 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
};
# 164 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
}
# 166 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.h"
}
# 22 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
namespace thrust {
# 25 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
namespace detail {
# 29 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
template<class T, class Space>
# 31 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
raw_buffer< T, Space> ::raw_buffer(size_type n)
# 32 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
{
# 33 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
(m_begin) = ((m_allocator).choose_raw_buffer_allocator< T, Space> ::type::allocate(n));
# 34 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
(m_end) = ((m_begin) + n);
# 35 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
}
# 38 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
template<class T, class Space>
# 39 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
template<class InputIterator>
# 41 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
raw_buffer< T, Space> ::raw_buffer(InputIterator first, InputIterator last)
# 42 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
{
# 43 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
size_type n = (thrust::distance(first, last));
# 44 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
(m_begin) = ((m_allocator).choose_raw_buffer_allocator< T, Space> ::type::allocate(n));
# 45 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
(m_end) = ((m_begin) + n);
# 46 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
thrust::copy(first, last, this->begin());
# 47 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
}
# 50 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
template<class T, class Space>
# 52 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
raw_buffer< T, Space> ::~raw_buffer()
# 53 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
{
# 54 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
if (this->size() > (0))
# 55 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
{
# 56 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
((m_allocator).choose_raw_buffer_allocator< T, Space> ::type::deallocate(&(*(m_begin)), this->size()));
# 57 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
(m_end) = (m_begin);
# 58 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
}
# 62 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
template<class T, class Space> typename raw_buffer< T, Space> ::size_type
# 64 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
raw_buffer< T, Space> ::size() const
# 65 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
{
# 66 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
return (m_end) - (m_begin);
# 67 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
}
# 70 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
template<class T, class Space> typename raw_buffer< T, Space> ::iterator
# 72 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
raw_buffer< T, Space> ::begin()
# 73 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
{
# 74 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
return m_begin;
# 75 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
}
# 78 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
template<class T, class Space> typename raw_buffer< T, Space> ::const_iterator
# 80 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
raw_buffer< T, Space> ::begin() const
# 81 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
{
# 82 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
return m_begin;
# 83 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
}
# 86 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
template<class T, class Space> typename raw_buffer< T, Space> ::const_iterator
# 88 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
raw_buffer< T, Space> ::cbegin() const
# 89 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
{
# 90 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
return m_begin;
# 91 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
}
# 94 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
template<class T, class Space> typename raw_buffer< T, Space> ::iterator
# 96 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
raw_buffer< T, Space> ::end()
# 97 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
{
# 98 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
return m_end;
# 99 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
}
# 102 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
template<class T, class Space> typename raw_buffer< T, Space> ::const_iterator
# 104 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
raw_buffer< T, Space> ::end() const
# 105 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
{
# 106 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
return m_end;
# 107 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
}
# 110 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
template<class T, class Space> typename raw_buffer< T, Space> ::const_iterator
# 112 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
raw_buffer< T, Space> ::cend() const
# 113 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
{
# 114 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
return m_end;
# 115 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
}
# 118 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
template<class T, class Space> typename raw_buffer< T, Space> ::reference
# 120 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
raw_buffer< T, Space> ::operator[](size_type n)
# 121 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
{
# 122 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
return (m_begin)[n];
# 123 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
}
# 126 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
template<class T, class Space> typename raw_buffer< T, Space> ::const_reference
# 128 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
raw_buffer< T, Space> ::operator[](size_type n) const
# 129 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
{
# 130 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
return (m_begin)[n];
# 131 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
}
# 134 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
}
# 136 "/home/normal/checkout/thrust/thrust/detail/raw_buffer.inl"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/device/is_trivial_copy.h"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/is_trivial_copy.h"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/is_trivial_copy.h"
namespace device {
# 40 "/home/normal/checkout/thrust/thrust/detail/device/is_trivial_copy.h"
template<class FromIterator, class ToIterator>
# 41 "/home/normal/checkout/thrust/thrust/detail/device/is_trivial_copy.h"
struct is_trivial_copy : public integral_constant< bool, ((is_same< typename iterator_value< FromIterator> ::type, typename iterator_value< ToIterator> ::type> ::value && is_trivial_iterator< FromIterator> ::value) && is_trivial_iterator< ToIterator> ::value)> {
# 52 "/home/normal/checkout/thrust/thrust/detail/device/is_trivial_copy.h"
};
# 54 "/home/normal/checkout/thrust/thrust/detail/device/is_trivial_copy.h"
}
# 56 "/home/normal/checkout/thrust/thrust/detail/device/is_trivial_copy.h"
}
# 58 "/home/normal/checkout/thrust/thrust/detail/device/is_trivial_copy.h"
}
# 31 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
namespace thrust {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
namespace detail {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
namespace device {
# 40 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
namespace cuda {
# 43 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
namespace detail {
# 46 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
inline void checked_cudaMemcpy(void *dst, const void *src, size_t count, cudaMemcpyKind kind)
# 47 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
{
# 48 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
cudaError_t error = cudaMemcpy(dst, src, count, kind);
# 49 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
if (error)
# 50 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
{
# 51 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
throw ((std::runtime_error)(((((std::string)("CUDA error: "))) + (((std::string)(cudaGetErrorString(error)))))));
# 52 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
}
# 53 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
}
# 56 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
template<class SrcSpace, class
# 57 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
DstSpace>
# 58 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
struct is_host_to_device : public integral_constant< bool, (is_convertible< SrcSpace, host_space_tag> ::value && is_convertible< DstSpace, device_space_tag> ::value)> {
# 64 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
};
# 67 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
template<class SrcSpace, class
# 68 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
DstSpace>
# 69 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
struct is_device_to_host : public integral_constant< bool, (is_convertible< SrcSpace, device_space_tag> ::value && is_convertible< DstSpace, host_space_tag> ::value)> {
# 75 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
};
# 78 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
template<class SrcSpace, class
# 79 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
DstSpace>
# 80 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
struct is_device_to_device : public integral_constant< bool, (is_convertible< SrcSpace, device_space_tag> ::value && is_convertible< DstSpace, device_space_tag> ::value)> {
# 86 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
};
# 89 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
template<class SrcSpace, class
# 90 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
DstSpace>
# 91 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
struct cuda_memcpy_kind : public eval_if< is_host_to_device< SrcSpace, DstSpace> ::value, integral_constant< cudaMemcpyKind, cudaMemcpyHostToDevice> , eval_if< is_device_to_host< SrcSpace, DstSpace> ::value, integral_constant< cudaMemcpyKind, cudaMemcpyDeviceToHost> , eval_if< is_device_to_device< SrcSpace, DstSpace> ::value, integral_constant< cudaMemcpyKind, cudaMemcpyDeviceToDevice> , void> > > ::type {
# 107 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
};
# 109 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
}
# 112 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
template<class RandomAccessIterator1, class
# 113 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
Size, class
# 114 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
RandomAccessIterator2> void
# 115 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
trivial_copy_n(RandomAccessIterator1 first, Size
# 116 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
n, RandomAccessIterator2
# 117 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
result)
# 118 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
{
# 119 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
typedef typename iterator_value< RandomAccessIterator1> ::type T;
# 121 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
typedef typename iterator_space< RandomAccessIterator1> ::type SrcSpace;
# 122 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
typedef typename iterator_space< RandomAccessIterator2> ::type DstSpace;
# 124 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
void *dst = (thrust::raw_pointer_cast(&(*result)));
# 125 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
const void *src = (thrust::raw_pointer_cast(&(*first)));
# 127 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
detail::checked_cudaMemcpy(dst, src, n * sizeof(typename iterator_value< RandomAccessIterator1> ::type), detail::cuda_memcpy_kind< typename iterator_space< RandomAccessIterator1> ::type, typename iterator_space< RandomAccessIterator2> ::type> ::value);
# 128 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
}
# 131 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
}
# 133 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
}
# 135 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
}
# 137 "/home/normal/checkout/thrust/thrust/detail/device/cuda/trivial_copy.h"
}
# 25 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
namespace detail {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
template<class , class > class raw_buffer;
# 34 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
namespace device {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
namespace cuda {
# 42 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
template<class InputIterator, class
# 43 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
RandomAccessIterator> RandomAccessIterator
# 44 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
copy_cross_space(InputIterator begin, InputIterator
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
end, RandomAccessIterator
# 46 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
result, incrementable_traversal_tag, random_access_traversal_tag)
# 49 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
{
# 54 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
typedef typename iterator_value< InputIterator> ::type InputType;
# 55 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
typedef typename iterator_space< InputIterator> ::type InputSpace;
# 58 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
raw_buffer< typename iterator_value< InputIterator> ::type, typename iterator_space< InputIterator> ::type> temp(begin, end);
# 59 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
result = thrust::copy((temp.raw_buffer< typename iterator_value< InputIterator> ::type, typename iterator_space< InputIterator> ::type> ::begin()), (temp.raw_buffer< typename iterator_value< InputIterator> ::type, typename iterator_space< InputIterator> ::type> ::end()), result);
# 61 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
return result;
# 62 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
}
# 66 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
template<class RandomAccessIterator, class
# 67 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
OutputIterator> OutputIterator
# 68 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
copy_cross_space(RandomAccessIterator begin, RandomAccessIterator
# 69 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
end, OutputIterator
# 70 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
result, random_access_traversal_tag, incrementable_traversal_tag)
# 73 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
{
# 78 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
typedef typename iterator_value< RandomAccessIterator> ::type InputType;
# 79 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
typedef typename iterator_space< OutputIterator> ::type OutputSpace;
# 82 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
raw_buffer< typename iterator_value< RandomAccessIterator> ::type, typename iterator_space< OutputIterator> ::type> temp(begin, end);
# 83 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
result = thrust::copy((temp.raw_buffer< typename iterator_value< RandomAccessIterator> ::type, typename iterator_space< OutputIterator> ::type> ::begin()), (temp.raw_buffer< typename iterator_value< RandomAccessIterator> ::type, typename iterator_space< OutputIterator> ::type> ::end()), result);
# 85 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
return result;
# 86 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
}
# 90 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
template<class RandomAccessIterator1, class
# 91 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
RandomAccessIterator2> RandomAccessIterator2
# 92 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
copy_cross_space(RandomAccessIterator1 begin, RandomAccessIterator1
# 93 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
end, RandomAccessIterator2
# 94 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
result, random_access_traversal_tag, random_access_traversal_tag, true_type)
# 98 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
{
# 105 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
typename iterator_traits< RandomAccessIterator1> ::difference_type n = (end - begin);
# 107 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
cuda::trivial_copy_n(begin, n, result);
# 109 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
return result + n;
# 110 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
}
# 113 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
namespace detail {
# 117 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
template<class RandomAccessIterator1, class
# 118 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
RandomAccessIterator2> RandomAccessIterator2
# 119 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
non_trivial_random_access_copy_cross_space(RandomAccessIterator1 begin, RandomAccessIterator1
# 120 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
end, RandomAccessIterator2
# 121 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
result, false_type)
# 123 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
{
# 125 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
typedef typename iterator_value< RandomAccessIterator2> ::type OutputType;
# 126 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
typedef typename iterator_space< RandomAccessIterator1> ::type InputSpace;
# 129 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
raw_buffer< typename iterator_value< RandomAccessIterator2> ::type, typename iterator_space< RandomAccessIterator1> ::type> temp(begin, end);
# 130 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
result = thrust::copy((temp.raw_buffer< typename iterator_value< RandomAccessIterator2> ::type, typename iterator_space< RandomAccessIterator1> ::type> ::begin()), (temp.raw_buffer< typename iterator_value< RandomAccessIterator2> ::type, typename iterator_space< RandomAccessIterator1> ::type> ::end()), result);
# 132 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
return result;
# 133 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
}
# 135 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
template<class RandomAccessIterator1, class
# 136 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
RandomAccessIterator2> RandomAccessIterator2
# 137 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
non_trivial_random_access_copy_cross_space(RandomAccessIterator1 begin, RandomAccessIterator1
# 138 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
end, RandomAccessIterator2
# 139 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
result, true_type)
# 141 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
{
# 143 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
typedef typename iterator_value< RandomAccessIterator1> ::type InputType;
# 144 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
typedef typename iterator_space< RandomAccessIterator2> ::type OutputSpace;
# 146 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
typename iterator_difference< RandomAccessIterator1> ::type n = (thrust::distance(begin, end));
# 149 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
raw_buffer< typename iterator_value< RandomAccessIterator1> ::type, typename iterator_space< RandomAccessIterator2> ::type> temp(n);
# 152 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
cuda::trivial_copy_n(begin, n, (temp.raw_buffer< typename iterator_value< RandomAccessIterator1> ::type, typename iterator_space< RandomAccessIterator2> ::type> ::begin()));
# 155 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
result = thrust::copy((temp.raw_buffer< typename iterator_value< RandomAccessIterator1> ::type, typename iterator_space< RandomAccessIterator2> ::type> ::begin()), (temp.raw_buffer< typename iterator_value< RandomAccessIterator1> ::type, typename iterator_space< RandomAccessIterator2> ::type> ::end()), result);
# 157 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
return result;
# 158 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
}
# 160 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
}
# 164 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
template<class RandomAccessIterator1, class
# 165 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
RandomAccessIterator2> RandomAccessIterator2
# 166 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
copy_cross_space(RandomAccessIterator1 begin, RandomAccessIterator1
# 167 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
end, RandomAccessIterator2
# 168 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
result, random_access_traversal_tag, random_access_traversal_tag, false_type)
# 172 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
{
# 179 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
return detail::non_trivial_random_access_copy_cross_space(begin, end, result, typename is_trivial_iterator< RandomAccessIterator1> ::type());
# 181 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
}
# 184 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
template<class RandomAccessIterator1, class
# 185 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
RandomAccessIterator2> RandomAccessIterator2
# 186 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
copy_cross_space(RandomAccessIterator1 begin, RandomAccessIterator1
# 187 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
end, RandomAccessIterator2
# 188 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
result, random_access_traversal_tag
# 189 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
input_traversal, random_access_traversal_tag
# 190 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
output_traversal)
# 191 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
{
# 193 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
return copy_cross_space(begin, end, result, input_traversal, output_traversal, typename is_trivial_copy< RandomAccessIterator1, RandomAccessIterator2> ::type());
# 195 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
}
# 201 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
template<class InputIterator, class
# 202 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
OutputIterator> OutputIterator
# 203 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
copy_cross_space(InputIterator begin, InputIterator
# 204 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
end, OutputIterator
# 205 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
result)
# 206 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
{
# 207 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
return copy_cross_space(begin, end, result, typename iterator_traversal< InputIterator> ::type(), typename iterator_traversal< OutputIterator> ::type());
# 210 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
}
# 212 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
}
# 214 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
}
# 216 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
}
# 218 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_cross_space.h"
}
# 28 "/home/normal/checkout/thrust/thrust/transform.h"
namespace thrust {
# 77 "/home/normal/checkout/thrust/thrust/transform.h"
template<class InputIterator, class
# 78 "/home/normal/checkout/thrust/thrust/transform.h"
OutputIterator, class
# 79 "/home/normal/checkout/thrust/thrust/transform.h"
UnaryFunction> OutputIterator
# 77 "/home/normal/checkout/thrust/thrust/transform.h"
transform(InputIterator, InputIterator, OutputIterator, UnaryFunction);
# 130 "/home/normal/checkout/thrust/thrust/transform.h"
template<class InputIterator1, class
# 131 "/home/normal/checkout/thrust/thrust/transform.h"
InputIterator2, class
# 132 "/home/normal/checkout/thrust/thrust/transform.h"
OutputIterator, class
# 133 "/home/normal/checkout/thrust/thrust/transform.h"
BinaryFunction> OutputIterator
# 130 "/home/normal/checkout/thrust/thrust/transform.h"
transform(InputIterator1, InputIterator1, InputIterator2, OutputIterator, BinaryFunction);
# 191 "/home/normal/checkout/thrust/thrust/transform.h"
template<class InputIterator1, class
# 192 "/home/normal/checkout/thrust/thrust/transform.h"
InputIterator2, class
# 193 "/home/normal/checkout/thrust/thrust/transform.h"
ForwardIterator, class
# 194 "/home/normal/checkout/thrust/thrust/transform.h"
UnaryFunction, class
# 195 "/home/normal/checkout/thrust/thrust/transform.h"
Predicate> ForwardIterator
# 191 "/home/normal/checkout/thrust/thrust/transform.h"
transform_if(InputIterator1, InputIterator1, InputIterator2, ForwardIterator, UnaryFunction, Predicate);
# 258 "/home/normal/checkout/thrust/thrust/transform.h"
template<class InputIterator1, class
# 259 "/home/normal/checkout/thrust/thrust/transform.h"
InputIterator2, class
# 260 "/home/normal/checkout/thrust/thrust/transform.h"
InputIterator3, class
# 261 "/home/normal/checkout/thrust/thrust/transform.h"
ForwardIterator, class
# 262 "/home/normal/checkout/thrust/thrust/transform.h"
BinaryFunction, class
# 263 "/home/normal/checkout/thrust/thrust/transform.h"
Predicate> ForwardIterator
# 258 "/home/normal/checkout/thrust/thrust/transform.h"
transform_if(InputIterator1, InputIterator1, InputIterator2, InputIterator3, ForwardIterator, BinaryFunction, Predicate);
# 275 "/home/normal/checkout/thrust/thrust/transform.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
namespace thrust {
# 27 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
namespace detail {
# 30 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
namespace host {
# 33 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
template<class InputIterator, class
# 34 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
OutputIterator, class
# 35 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
UnaryFunction> OutputIterator
# 36 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
transform(InputIterator first, InputIterator last, OutputIterator
# 37 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
result, UnaryFunction
# 38 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
unary_op)
# 39 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
{
# 40 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
for (; first != last; (++first), (++result))
# 41 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
{
# 42 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
(*result) = unary_op(*first);
# 43 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
return result;
# 46 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
}
# 48 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
template<class InputIterator1, class
# 49 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
InputIterator2, class
# 50 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
OutputIterator, class
# 51 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
BinaryFunction> OutputIterator
# 52 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
transform(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 53 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
first2, OutputIterator
# 54 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
result, BinaryFunction
# 55 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
binary_op)
# 56 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
{
# 57 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
for (; first1 != last1; ((++first1), (++first2)), (++result))
# 58 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
{
# 59 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
(*result) = binary_op(*first1, *first2);
# 60 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
}
# 62 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
return result;
# 63 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
}
# 65 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
template<class InputIterator1, class
# 66 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
InputIterator2, class
# 67 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
ForwardIterator, class
# 68 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
UnaryFunction, class
# 69 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
Predicate> ForwardIterator
# 70 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
transform_if(InputIterator1 first, InputIterator1 last, InputIterator2
# 71 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
stencil, ForwardIterator
# 72 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
result, UnaryFunction
# 73 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
unary_op, Predicate
# 74 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
pred)
# 75 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
{
# 76 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
for (; first != last; ((++first), (++stencil)), (++result))
# 77 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
{
# 78 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
if (pred(*stencil))
# 79 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
{
# 80 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
(*result) = unary_op(*first);
# 81 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
}
# 82 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
}
# 84 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
return result;
# 85 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
}
# 88 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
template<class InputIterator1, class
# 89 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
InputIterator2, class
# 90 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
InputIterator3, class
# 91 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
ForwardIterator, class
# 92 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
BinaryFunction, class
# 93 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
Predicate> ForwardIterator
# 94 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
transform_if(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 95 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
first2, InputIterator3
# 96 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
stencil, ForwardIterator
# 97 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
result, BinaryFunction
# 98 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
binary_op, Predicate
# 99 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
pred)
# 100 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
{
# 101 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
for (; first1 != last1; (((++first1), (++first2)), (++stencil)), (++result))
# 102 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
{
# 103 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
if (pred(*stencil))
# 104 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
{
# 105 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
(*result) = binary_op(*first1, *first2);
# 106 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
}
# 107 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
}
# 109 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
return result;
# 110 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
}
# 112 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
}
# 114 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
}
# 116 "/home/normal/checkout/thrust/thrust/detail/host/transform.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
namespace device {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
namespace generic {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
template<class InputIterator, class
# 34 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
OutputIterator, class
# 35 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
UnaryFunction> OutputIterator
# 33 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
transform(InputIterator, InputIterator, OutputIterator, UnaryFunction);
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
template<class InputIterator1, class
# 42 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
InputIterator2, class
# 43 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
OutputIterator, class
# 44 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
BinaryFunction> OutputIterator
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
transform(InputIterator1, InputIterator1, InputIterator2, OutputIterator, BinaryFunction);
# 51 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
template<class InputIterator1, class
# 52 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
InputIterator2, class
# 53 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
ForwardIterator, class
# 54 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
UnaryFunction, class
# 55 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
Predicate> ForwardIterator
# 51 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
transform_if(InputIterator1, InputIterator1, InputIterator2, ForwardIterator, UnaryFunction, Predicate);
# 63 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
template<class InputIterator1, class
# 64 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
InputIterator2, class
# 65 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
InputIterator3, class
# 66 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
ForwardIterator, class
# 67 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
BinaryFunction, class
# 68 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
Predicate> ForwardIterator
# 63 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
transform_if(InputIterator1, InputIterator1, InputIterator2, InputIterator3, ForwardIterator, BinaryFunction, Predicate);
# 76 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
}
# 77 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
}
# 78 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
}
# 79 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.h"
}
# 25 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.h"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.h"
namespace detail {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.h"
namespace device {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.h"
namespace cuda {
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.h"
template<class InputIterator, class
# 39 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.h"
UnaryFunction> void
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.h"
for_each(InputIterator, InputIterator, UnaryFunction);
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.h"
}
# 47 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.h"
}
# 49 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.h"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.h"
}
# 19 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.h"
namespace thrust {
# 22 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.h"
namespace detail {
# 25 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.h"
namespace device {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.h"
namespace cuda {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.h"
template<class NullaryFunction, class Size> void launch_closure(NullaryFunction, Size);
# 34 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.h"
}
# 36 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.h"
}
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.h"
}
# 40 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.h"
}
# 37 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
namespace thrust {
# 40 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
namespace experimental {
# 43 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
namespace arch {
# 50 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
inline size_t num_multiprocessors(const cudaDeviceProp &);
# 51 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
inline size_t num_multiprocessors();
# 58 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
inline size_t max_active_threads_per_multiprocessor(const cudaDeviceProp &);
# 59 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
inline size_t max_active_threads_per_multiprocessor();
# 65 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
inline size_t max_active_threads(const cudaDeviceProp &);
# 66 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
inline size_t max_active_threads();
# 73 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
inline dim3 max_grid_dimensions(const cudaDeviceProp &);
# 74 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
inline dim3 max_grid_dimensions();
# 80 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
inline size_t max_active_blocks_per_multiprocessor(const cudaDeviceProp &, const cudaFuncAttributes &, const size_t, const size_t);
# 85 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
template<class KernelFunction> size_t max_active_blocks(KernelFunction, const size_t, const size_t);
# 92 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
inline size_t max_blocksize_with_highest_occupancy(const cudaDeviceProp &, const cudaFuncAttributes &, size_t = (0));
# 96 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
template<class KernelFunction> size_t max_blocksize_with_highest_occupancy(KernelFunction, size_t = (0));
# 101 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
inline size_t max_blocksize(const cudaDeviceProp &, const cudaFuncAttributes &, size_t = (0));
# 105 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
template<class KernelFunction> size_t max_blocksize(KernelFunction, size_t = (0));
# 108 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
}
# 109 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
}
# 110 "/home/normal/checkout/thrust/thrust/experimental/arch.h"
}
# 22 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
namespace thrust {
# 25 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
namespace util {
# 32 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
template<class L, class R> inline L
# 33 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
divide_ri(const L x, const R y)
# 34 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
{
# 35 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
return (x + (y - 1)) / y;
# 36 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
}
# 39 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
template<class L, class R> inline L
# 40 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
divide_rz(const L x, const R y)
# 41 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
{
# 42 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
return x / y;
# 43 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
}
# 46 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
template<class L, class R> inline L
# 47 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
round_i(const L x, const R y) { return y * divide_ri(x, y); }
# 50 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
template<class L, class R> inline L
# 51 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
round_z(const L x, const R y) { return y * divide_rz(x, y); }
# 53 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
}
# 55 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
}
# 57 "/home/normal/checkout/thrust/thrust/detail/util/blocking.h"
}
# 31 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
namespace thrust {
# 33 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
namespace experimental {
# 35 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
namespace arch {
# 37 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
namespace detail {
# 40 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
inline void checked_get_current_device_properties(cudaDeviceProp &props)
# 41 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 42 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
int current_device = (-1);
# 44 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
cudaError_t error = cudaGetDevice(&current_device);
# 46 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
if (error)
# 47 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 48 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
throw system::system_error(error, thrust::experimental::cuda_category());
# 49 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 51 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
if (current_device < 0) {
# 52 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
throw system::system_error(thrust::experimental::cuda_errc::no_device, thrust::experimental::cuda_category()); }
# 54 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
error = cudaGetDeviceProperties(&props, current_device);
# 56 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
if (error)
# 57 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 58 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
throw system::system_error(error, thrust::experimental::cuda_category());
# 59 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 60 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 62 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
template<class KernelFunction> void
# 63 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
checked_get_function_attributes(cudaFuncAttributes &attributes, KernelFunction kernel)
# 64 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 65 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
cudaError_t error = (cudaFuncGetAttributes(&attributes, kernel));
# 67 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
if (error)
# 68 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 69 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
throw system::system_error(error, thrust::experimental::cuda_category());
# 70 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 71 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 73 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 76 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
inline size_t num_multiprocessors(const cudaDeviceProp &properties)
# 77 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 78 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return properties.multiProcessorCount;
# 79 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 82 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
inline size_t max_active_threads_per_multiprocessor(const cudaDeviceProp &properties)
# 83 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 86 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
static const size_t max_active_threads_by_compute_capability[3][4] = {{(0), (0), (0), (0)}, {(768), (768), (1024), (1024)}, {(1536), (1536), (1536), (1536)}};
# 92 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
if (((properties.major) > 2) || ((properties.minor) > 3)) {
# 93 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return ((max_active_threads_by_compute_capability)[2])[3]; } else {
# 95 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return ((max_active_threads_by_compute_capability)[properties.major])[properties.minor]; }
# 96 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 99 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
inline size_t max_active_threads(const cudaDeviceProp &properties)
# 100 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 101 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return num_multiprocessors(properties) * max_active_threads_per_multiprocessor(properties);
# 102 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 105 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
inline dim3 max_grid_dimensions(const cudaDeviceProp &properties)
# 106 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 107 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return make_uint3((properties.maxGridSize)[0], (properties.maxGridSize)[1], (properties.maxGridSize)[2]);
# 108 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 111 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
inline size_t max_active_blocks_per_multiprocessor(const cudaDeviceProp &properties, const cudaFuncAttributes &
# 112 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
attributes, size_t
# 113 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
CTA_SIZE, size_t
# 114 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
dynamic_smem_bytes)
# 115 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 118 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
const size_t regAllocationUnit = ((((properties.major) < 2) && ((properties.minor) < 2)) ? 256 : 512);
# 119 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
const size_t warpAllocationMultiple = (2);
# 120 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
const size_t smemAllocationUnit = (512);
# 121 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
const size_t maxThreadsPerSM = max_active_threads_per_multiprocessor(properties);
# 122 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
const size_t maxBlocksPerSM = (8);
# 125 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
const size_t numWarps = thrust::detail::util::round_i(thrust::detail::util::divide_ri(CTA_SIZE, properties.warpSize), warpAllocationMultiple);
# 128 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
const size_t regsPerCTA = thrust::detail::util::round_i(((attributes.numRegs) * (properties.warpSize)) * numWarps, regAllocationUnit);
# 130 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
const size_t smemBytes = ((attributes.sharedSizeBytes) + dynamic_smem_bytes);
# 131 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
const size_t smemPerCTA = thrust::detail::util::round_i(smemBytes, smemAllocationUnit);
# 133 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
const size_t ctaLimitRegs = ((regsPerCTA > (0)) ? ((properties.regsPerBlock) / regsPerCTA) : maxBlocksPerSM);
# 134 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
const size_t ctaLimitSMem = ((smemPerCTA > (0)) ? ((properties.sharedMemPerBlock) / smemPerCTA) : maxBlocksPerSM);
# 135 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
const size_t ctaLimitThreads = (maxThreadsPerSM / CTA_SIZE);
# 137 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return std::min< unsigned> (ctaLimitRegs, std::min< unsigned> (ctaLimitSMem, std::min< unsigned> (ctaLimitThreads, maxBlocksPerSM)));
# 138 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 144 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
inline size_t num_multiprocessors()
# 145 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 146 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
cudaDeviceProp properties;
# 147 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
detail::checked_get_current_device_properties(properties);
# 148 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return num_multiprocessors(properties);
# 149 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 151 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
inline size_t max_active_threads_per_multiprocessor()
# 152 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 153 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
cudaDeviceProp properties;
# 154 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
detail::checked_get_current_device_properties(properties);
# 155 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return max_active_threads_per_multiprocessor(properties);
# 156 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 158 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
inline size_t max_active_threads()
# 159 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 160 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
cudaDeviceProp properties;
# 161 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
detail::checked_get_current_device_properties(properties);
# 162 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return max_active_threads(properties);
# 163 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 165 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
inline dim3 max_grid_dimensions()
# 166 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 167 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
cudaDeviceProp properties;
# 168 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
detail::checked_get_current_device_properties(properties);
# 169 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return max_grid_dimensions(properties);
# 170 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 172 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
template<class KernelFunction> size_t
# 173 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
max_active_blocks(KernelFunction kernel, const size_t CTA_SIZE, const size_t dynamic_smem_bytes)
# 174 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 175 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
cudaDeviceProp properties;
# 176 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
detail::checked_get_current_device_properties(properties);
# 178 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
cudaFuncAttributes attributes;
# 179 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
detail::checked_get_function_attributes(attributes, kernel);
# 181 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return num_multiprocessors(properties) * max_active_blocks_per_multiprocessor(properties, attributes, CTA_SIZE, dynamic_smem_bytes);
# 182 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 184 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
inline size_t max_blocksize_with_highest_occupancy(const cudaDeviceProp &properties, const cudaFuncAttributes &
# 185 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
attributes, size_t
# 186 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
dynamic_smem_bytes_per_thread)
# 187 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 188 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
size_t max_occupancy = max_active_threads_per_multiprocessor(properties);
# 190 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
size_t largest_blocksize = (std::min(properties.maxThreadsPerBlock, attributes.maxThreadsPerBlock));
# 192 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
size_t granularity = (properties.warpSize);
# 194 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
size_t max_blocksize = (0);
# 195 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
size_t highest_occupancy = (0);
# 197 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
for (size_t blocksize = largest_blocksize; blocksize != (0); blocksize -= granularity)
# 198 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 199 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
size_t occupancy = (blocksize * max_active_blocks_per_multiprocessor(properties, attributes, blocksize, dynamic_smem_bytes_per_thread * blocksize));
# 201 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
if (occupancy > highest_occupancy)
# 202 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 203 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
max_blocksize = blocksize;
# 204 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
highest_occupancy = occupancy;
# 205 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 208 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
if (highest_occupancy == max_occupancy) {
# 209 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return max_blocksize; }
# 210 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 212 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return max_blocksize;
# 213 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 215 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
template<class KernelFunction> size_t
# 216 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
max_blocksize_with_highest_occupancy(KernelFunction kernel, size_t dynamic_smem_bytes_per_thread)
# 217 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 218 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
cudaDeviceProp properties;
# 219 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
detail::checked_get_current_device_properties(properties);
# 221 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
cudaFuncAttributes attributes;
# 222 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
detail::checked_get_function_attributes(attributes, kernel);
# 224 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return max_blocksize_with_highest_occupancy(properties, attributes, dynamic_smem_bytes_per_thread);
# 225 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 229 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
inline size_t max_blocksize(const cudaDeviceProp &properties, const cudaFuncAttributes &
# 230 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
attributes, size_t
# 231 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
dynamic_smem_bytes_per_thread)
# 232 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 233 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
size_t largest_blocksize = (std::min(properties.maxThreadsPerBlock, attributes.maxThreadsPerBlock));
# 236 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
size_t granularity = (32);
# 238 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
for (size_t blocksize = largest_blocksize; blocksize != (0); blocksize -= granularity)
# 239 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 240 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
if ((0) < max_active_blocks_per_multiprocessor(properties, attributes, blocksize, dynamic_smem_bytes_per_thread * blocksize)) {
# 241 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return blocksize; }
# 242 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 244 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return 0;
# 245 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 247 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
template<class KernelFunction> size_t
# 248 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
max_blocksize(KernelFunction kernel, size_t dynamic_smem_bytes_per_thread)
# 249 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
{
# 250 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
cudaDeviceProp properties;
# 251 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
detail::checked_get_current_device_properties(properties);
# 253 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
cudaFuncAttributes attributes;
# 254 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
detail::checked_get_function_attributes(attributes, kernel);
# 256 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
return max_blocksize(properties, attributes, dynamic_smem_bytes_per_thread);
# 257 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 259 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 260 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 261 "/home/normal/checkout/thrust/thrust/experimental/arch.inl"
}
# 28 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
namespace thrust {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
namespace detail {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
namespace device {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
namespace cuda {
# 40 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
namespace detail {
# 43 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
template<class NullaryFunction> static void
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
__wrapper__device_stub_launch_closure_by_value(NullaryFunction &f);
# 43 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
template<class NullaryFunction> void
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
launch_closure_by_value(NullaryFunction f)
# 46 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
{__wrapper__device_stub_launch_closure_by_value<NullaryFunction>(f);
# 48 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
}
# 50 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
template<class NullaryFunction> static void
# 52 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
__wrapper__device_stub_launch_closure_by_pointer(const NullaryFunction *&f);
# 50 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
template<class NullaryFunction> void
# 52 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
launch_closure_by_pointer(const NullaryFunction *f)
# 53 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
{__wrapper__device_stub_launch_closure_by_pointer<NullaryFunction>(f);
# 57 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
template<class NullaryFunction, bool
# 60 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
launch_by_value = (sizeof(NullaryFunction) <= (256))>
# 61 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
struct closure_launcher {
# 63 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
template<class Size> static void
# 64 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
launch(NullaryFunction f, Size n)
# 65 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
{
# 66 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
const size_t block_size = (experimental::arch::max_blocksize_with_highest_occupancy(&detail::launch_closure_by_value< NullaryFunction> ));
# 67 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
const size_t max_blocks = (experimental::arch::max_active_blocks(&detail::launch_closure_by_value< NullaryFunction> , block_size, 0));
# 68 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
const size_t num_blocks = (std::min(max_blocks, (n + (block_size - (1))) / block_size));
# 70 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
cudaConfigureCall(num_blocks, block_size) ? ((void)0) : (detail::launch_closure_by_value)(f);
# 71 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
}
# 72 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
};
# 74 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
template<class NullaryFunction>
# 75 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
struct closure_launcher< NullaryFunction, false> {
# 77 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
template<class Size> static void
# 78 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
launch(NullaryFunction f, Size n)
# 79 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
{
# 80 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
const size_t block_size = (experimental::arch::max_blocksize_with_highest_occupancy(&detail::launch_closure_by_pointer< NullaryFunction> ));
# 81 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
const size_t max_blocks = (experimental::arch::max_active_blocks(&detail::launch_closure_by_pointer< NullaryFunction> , block_size, 0));
# 82 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
const size_t num_blocks = (std::min(max_blocks, (n + (block_size - (1))) / block_size));
# 85 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
device_ptr< void> temp_ptr = thrust::detail::device::cuda::malloc< 0U> (sizeof(NullaryFunction));
# 88 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
device_ptr< NullaryFunction> f_ptr(reinterpret_cast< NullaryFunction *>(temp_ptr.get()));
# 91 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
(*f_ptr) = f;
# 94 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
cudaConfigureCall(num_blocks, block_size) ? ((void)0) : (detail::launch_closure_by_pointer)((f_ptr.device_ptr< NullaryFunction> ::get()));
# 97 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
cuda::free< 0> (f_ptr);
# 98 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
}
# 99 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
};
# 101 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
}
# 103 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
template<class NullaryFunction, class Size> void
# 104 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
launch_closure(NullaryFunction f, Size n)
# 105 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
{
# 106 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
detail::closure_launcher< NullaryFunction, (sizeof(NullaryFunction) <= 256U)> ::launch(f, n);
# 107 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
}
# 109 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
}
# 111 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
}
# 113 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
}
# 115 "/home/normal/checkout/thrust/thrust/detail/device/cuda/launch_closure.inl"
}
# 29 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
namespace thrust {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
namespace device {
# 35 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
namespace cuda {
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
template<class RandomAccessIterator, class
# 39 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
Size, class
# 40 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
UnaryFunction>
# 41 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
struct for_each_n_closure {
# 43 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
typedef void result_type;
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
RandomAccessIterator first;
# 46 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
Size n;
# 47 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
UnaryFunction f;
# 49 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
for_each_n_closure(RandomAccessIterator first_, Size
# 50 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
n_, UnaryFunction
# 51 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
f_) : first(first_), n(n_), f(f_)
# 55 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
{ }
# 60 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
result_type operator()()
# 61 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
{volatile int ___ = 1;
# 75 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
exit(___);}
# 77 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
};
# 80 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
template<class InputIterator, class
# 81 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
UnaryFunction> void
# 82 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
for_each(InputIterator first, InputIterator
# 83 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
last, UnaryFunction
# 84 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
f)
# 85 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
{
# 91 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
typedef static_assert_test< sizeof(STATIC_ASSERTION_FAILURE< (bool)depend_on_instantiation< InputIterator, true> ::value> )> thrust_static_assert_typedef_91;
# 93 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
if (first >= last) { return; }
# 95 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
typedef typename iterator_traits< InputIterator> ::difference_type difference_type;
# 97 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
difference_type n = (last - first);
# 99 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
if ((sizeof(typename iterator_traits< InputIterator> ::difference_type) > sizeof(unsigned)) && (n > ((difference_type)(std::numeric_limits< unsigned> ::max()))))
# 101 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
{
# 103 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
typedef for_each_n_closure< InputIterator, typename iterator_traits< InputIterator> ::difference_type, UnaryFunction> Closure;
# 104 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
Closure closure(first, last - first, f);
# 105 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
launch_closure(closure, last - first);
# 106 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
} else
# 108 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
{
# 110 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
typedef for_each_n_closure< InputIterator, unsigned, UnaryFunction> Closure;
# 111 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
Closure closure(first, static_cast< unsigned>(n), f);
# 112 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
launch_closure(closure, static_cast< unsigned>(n));
# 113 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
}
# 115 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
}
# 118 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
}
# 119 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
}
# 120 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
}
# 121 "/home/normal/checkout/thrust/thrust/detail/device/cuda/for_each.inl"
}
# 25 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.h"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.h"
namespace detail {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.h"
namespace device {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.h"
namespace omp {
# 38 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.h"
template<class InputIterator, class
# 39 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.h"
UnaryFunction> void
# 38 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.h"
for_each(InputIterator, InputIterator, UnaryFunction);
# 45 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.h"
}
# 47 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.h"
}
# 49 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.h"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.h"
}
# 28 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
namespace detail {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
namespace device {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
namespace omp {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
template<class InputIterator, class
# 38 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
UnaryFunction> void
# 39 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
for_each(InputIterator first, InputIterator
# 40 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
last, UnaryFunction
# 41 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
f)
# 42 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
{
# 48 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
typedef static_assert_test< sizeof(STATIC_ASSERTION_FAILURE< (bool)depend_on_instantiation< InputIterator, false> ::value> )> thrust_static_assert_typedef_49;
# 51 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
typedef typename iterator_difference< InputIterator> ::type difference;
# 52 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
difference n = (thrust::distance(first, last));
# 67 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
}
# 70 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
}
# 71 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
}
# 72 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
}
# 73 "/home/normal/checkout/thrust/thrust/detail/device/omp/for_each.inl"
}
# 23 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
namespace detail {
# 29 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
namespace device {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
namespace dispatch {
# 35 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
template<class InputIterator, class
# 36 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
UnaryFunction> void
# 37 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
for_each(InputIterator first, InputIterator
# 38 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
last, UnaryFunction
# 39 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
f, omp_device_space_tag)
# 41 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
{
# 42 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
omp::for_each(first, last, f);
# 43 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
template<class InputIterator, class
# 46 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
UnaryFunction> void
# 47 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
for_each(InputIterator first, InputIterator
# 48 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
last, UnaryFunction
# 49 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
f, cuda_device_space_tag)
# 51 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
{
# 52 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
cuda::for_each(first, last, f);
# 53 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
}
# 55 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
}
# 57 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
}
# 61 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/for_each.h"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/device/for_each.h"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/for_each.h"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/for_each.h"
namespace device {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/for_each.h"
template<class InputIterator, class
# 37 "/home/normal/checkout/thrust/thrust/detail/device/for_each.h"
UnaryFunction> void
# 38 "/home/normal/checkout/thrust/thrust/detail/device/for_each.h"
for_each(InputIterator first, InputIterator
# 39 "/home/normal/checkout/thrust/thrust/detail/device/for_each.h"
last, UnaryFunction
# 40 "/home/normal/checkout/thrust/thrust/detail/device/for_each.h"
f)
# 41 "/home/normal/checkout/thrust/thrust/detail/device/for_each.h"
{
# 43 "/home/normal/checkout/thrust/thrust/detail/device/for_each.h"
dispatch::for_each(first, last, f, typename iterator_space< InputIterator> ::type());
# 45 "/home/normal/checkout/thrust/thrust/detail/device/for_each.h"
}
# 47 "/home/normal/checkout/thrust/thrust/detail/device/for_each.h"
}
# 49 "/home/normal/checkout/thrust/thrust/detail/device/for_each.h"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/device/for_each.h"
}
# 28 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
namespace thrust {
# 32 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
struct null_type { };
# 36 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
inline bool operator==(const null_type &, const null_type &) { return true; }
# 39 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
inline bool operator>=(const null_type &, const null_type &) { return true; }
# 42 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
inline bool operator<=(const null_type &, const null_type &) { return true; }
# 45 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
inline bool operator!=(const null_type &, const null_type &) { return false; }
# 48 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
inline bool operator<(const null_type &, const null_type &) { return false; }
# 51 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
inline bool operator>(const null_type &, const null_type &) { return false; }
# 54 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class
# 55 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
T0 = null_type, class T1 = null_type, class T2 = null_type, class
# 56 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
T3 = null_type, class T4 = null_type, class T5 = null_type, class
# 57 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
T6 = null_type, class T7 = null_type, class T8 = null_type, class
# 58 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
T9 = null_type> class tuple;
# 62 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<int i, class T> struct tuple_element;
# 65 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T>
# 66 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
struct tuple_element< 0, T> {
# 68 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename T::head_type type;
# 69 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 71 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<int N, class T>
# 72 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
struct tuple_element< N, const T> {
# 75 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
private: typedef typename T::tail_type Next;
# 76 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename thrust::tuple_element< (N - 1), typename T::tail_type> ::type unqualified_type;
# 79 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
public: typedef typename detail::add_const< typename thrust::tuple_element< (N - 1), typename T::tail_type> ::type> ::type type;
# 80 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 82 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T>
# 83 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
struct tuple_element< 0, const T> {
# 85 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename detail::add_const< typename T::head_type> ::type type;
# 86 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 91 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T> struct tuple_size;
# 95 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<> struct tuple_size< tuple< null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> > {
# 97 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
static const int value = 0;
# 98 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 101 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<> struct tuple_size< null_type> {
# 103 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
static const int value = 0;
# 104 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 109 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
namespace detail {
# 112 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class HT, class TT> struct cons;
# 114 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 118 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T> struct access_traits {
# 120 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef const T &const_type;
# 121 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef T &non_const_type;
# 123 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef const typename detail::remove_cv< T> ::type &parameter_type;
# 130 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 132 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T> struct access_traits< T &> {
# 134 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef T &const_type;
# 135 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef T &non_const_type;
# 137 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef T &parameter_type;
# 138 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 141 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<int N, class HT, class TT> inline typename access_traits< typename tuple_element< N, detail::cons< HT, TT> > ::type> ::non_const_type get(detail::cons< HT, TT> &);
# 150 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<int N, class HT, class TT> inline typename access_traits< typename tuple_element< N, detail::cons< HT, TT> > ::type> ::const_type get(const detail::cons< HT, TT> &);
# 159 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
namespace detail {
# 164 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T> class generate_error;
# 170 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<int N>
# 171 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
struct get_class {
# 173 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class RET, class HT, class TT> static RET
# 175 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
get(const cons< HT, TT> &t)
# 176 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 179 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return detail::get_class< (N - 1)> ::template get< RET> ((t.cons< HT, TT> ::tail));
# 183 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 185 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class RET, class HT, class TT> static RET
# 187 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
get(cons< HT, TT> &t)
# 188 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 191 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return detail::get_class< (N - 1)> ::template get< RET> ((t.cons< HT, TT> ::tail));
# 195 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 196 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 199 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<> struct get_class< 0> {
# 201 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class RET, class HT, class TT> static RET
# 203 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
get(const cons< HT, TT> &t)
# 204 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 205 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return t.cons< HT, TT> ::head;
# 206 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 208 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class RET, class HT, class TT> static RET
# 210 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
get(cons< HT, TT> &t)
# 211 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 212 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return t.cons< HT, TT> ::head;
# 213 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 214 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 217 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<bool If, class Then, class Else> struct IF {
# 219 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef Then RET;
# 220 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 222 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class Then, class Else> struct IF< false, Then, Else> {
# 224 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef Else RET;
# 225 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 233 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T> class non_storeable_type {
# 236 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
inline non_storeable_type();
# 237 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 239 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T> struct wrap_non_storeable_type {
# 246 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef T type;
# 247 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 249 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<> struct wrap_non_storeable_type< void> {
# 251 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef non_storeable_type< void> type;
# 252 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 255 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class HT, class TT>
# 256 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
struct cons {
# 258 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef HT head_type;
# 259 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef TT tail_type;
# 262 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename wrap_non_storeable_type< HT> ::type stored_head_type;
# 264 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
stored_head_type head;
# 265 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
tail_type tail;
# 269 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typename access_traits< typename wrap_non_storeable_type< HT> ::type> ::non_const_type get_head() { return head; }
# 273 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typename access_traits< TT> ::non_const_type get_tail() { return tail; }
# 277 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typename access_traits< typename wrap_non_storeable_type< HT> ::type> ::const_type get_head() const { return head; }
# 281 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typename access_traits< TT> ::const_type get_tail() const { return tail; }
# 284 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
cons() : head(), tail() { }
# 293 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
cons(typename access_traits< typename wrap_non_storeable_type< HT> ::type> ::parameter_type h, const tail_type &
# 294 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
t) : head(h), tail(t)
# 295 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{ }
# 297 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T1, class T2, class T3, class T4, class T5, class
# 298 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
T6, class T7, class T8, class T9, class T10>
# 300 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
cons(T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5, T6 &
# 301 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
t6, T7 &t7, T8 &t8, T9 &t9, T10 &t10) : head(t1), tail(t2, t3, t4, t5, t6, t7, t8, t9, t10, static_cast< const null_type &>(null_type()))
# 304 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{ }
# 306 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T2, class T3, class T4, class T5, class
# 307 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
T6, class T7, class T8, class T9, class T10>
# 309 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
cons(const null_type &, T2 &t2, T3 &t3, T4 &t4, T5 &t5, T6 &
# 310 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
t6, T7 &t7, T8 &t8, T9 &t9, T10 &t10) : head(), tail(t2, t3, t4, t5, t6, t7, t8, t9, t10, static_cast< const null_type &>(null_type()))
# 313 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{ }
# 316 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class HT2, class TT2>
# 318 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
cons(const detail::cons< HT2, TT2> &u) : head((u.detail::cons< HT2, TT2> ::head)), tail((u.detail::cons< HT2, TT2> ::tail)) { }
# 320 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class HT2, class TT2> detail::cons< HT, TT> &
# 322 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
operator=(const detail::cons< HT2, TT2> &u) {
# 323 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
(head) = (u.detail::cons< HT2, TT2> ::head); (tail) = (u.detail::cons< HT2, TT2> ::tail); return *this;
# 324 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 329 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
detail::cons< HT, TT> &operator=(const detail::cons< HT, TT> &u) {
# 330 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
(head) = (u.head); (tail) = (u.tail); return *this;
# 331 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 342 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<int N> typename access_traits< typename tuple_element< N, detail::cons< HT, TT> > ::type> ::non_const_type
# 347 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
get() {
# 348 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return thrust::get< N> (*this);
# 349 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 351 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<int N> typename access_traits< typename tuple_element< N, detail::cons< HT, TT> > ::type> ::const_type
# 356 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
get() const {
# 357 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return thrust::get< N> (*this);
# 358 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 359 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 361 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class HT>
# 362 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
struct cons< HT, null_type> {
# 364 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef HT head_type;
# 365 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef null_type tail_type;
# 366 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef cons< HT, null_type> self_type;
# 369 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename wrap_non_storeable_type< HT> ::type stored_head_type;
# 370 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
stored_head_type head;
# 374 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typename access_traits< typename wrap_non_storeable_type< HT> ::type> ::non_const_type get_head() { return head; }
# 377 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
null_type get_tail() { return null_type(); }
# 381 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typename access_traits< typename wrap_non_storeable_type< HT> ::type> ::const_type get_head() const { return head; }
# 384 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
const null_type get_tail() const { return null_type(); }
# 387 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
cons() : head() { }
# 390 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
cons(typename access_traits< typename wrap_non_storeable_type< HT> ::type> ::parameter_type h, const null_type & = (null_type())) : head(h)
# 392 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{ }
# 394 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T1>
# 396 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
cons(T1 &t1, const null_type &, const null_type &, const null_type &, const null_type &, const null_type &, const null_type &, const null_type &, const null_type &, const null_type &) : head(t1)
# 399 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{ }
# 402 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
cons(const null_type &, const null_type &, const null_type &, const null_type &, const null_type &, const null_type &, const null_type &, const null_type &, const null_type &, const null_type &) : head()
# 406 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{ }
# 408 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class HT2>
# 410 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
cons(const detail::cons< HT2, null_type> &u) : head((u.detail::cons< HT2, null_type> ::head)) { }
# 412 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class HT2> cons< HT, null_type> &
# 414 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
operator=(const detail::cons< HT2, null_type> &u)
# 415 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 416 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
(head) = (u.detail::cons< HT2, null_type> ::head);
# 417 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return *this;
# 418 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 423 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
cons< HT, null_type> &operator=(const cons< HT, null_type> &u) { (head) = (u.head); return *this; }
# 425 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<int N> typename access_traits< typename tuple_element< N, cons< HT, null_type> > ::type> ::non_const_type
# 432 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
get()
# 433 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 434 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return thrust::get< N> (*this);
# 435 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 437 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<int N> typename access_traits< typename tuple_element< N, cons< HT, null_type> > ::type> ::const_type
# 444 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
get() const
# 445 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 446 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return thrust::get< N> (*this);
# 447 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 448 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 450 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2, class T3, class T4, class
# 451 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
T5, class T6, class T7, class T8, class T9>
# 452 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
struct map_tuple_to_cons {
# 457 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef cons< T0, typename detail::map_tuple_to_cons< T1, T2, T3, T4, T5, T6, T7, T8, T9, null_type> ::type> type;
# 458 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 462 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<> struct map_tuple_to_cons< null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> {
# 464 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef null_type type;
# 465 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 483 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T>
# 484 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
struct make_tuple_traits {
# 485 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef T type;
# 493 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 507 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T>
# 508 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
struct make_tuple_traits< T &> {
# 511 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename generate_error< T &> ::do_not_use_with_reference_type error;
# 512 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 518 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T, int n> struct make_tuple_traits< T [n]> {
# 519 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef const T (&type)[n];
# 520 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 522 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T, int n>
# 523 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
struct make_tuple_traits< const T [n]> {
# 524 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef const T (&type)[n];
# 525 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 527 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T, int n> struct make_tuple_traits< volatile T [n]> {
# 528 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef const volatile T (&type)[n];
# 529 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 531 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T, int n>
# 532 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
struct make_tuple_traits< const volatile T [n]> {
# 533 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef const volatile T (&type)[n];
# 534 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 550 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class
# 551 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
T0 = null_type, class T1 = null_type, class T2 = null_type, class
# 552 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
T3 = null_type, class T4 = null_type, class T5 = null_type, class
# 553 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
T6 = null_type, class T7 = null_type, class T8 = null_type, class
# 554 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
T9 = null_type>
# 556 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
struct make_tuple_mapper {
# 567 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef tuple< typename make_tuple_traits< T0> ::type, typename make_tuple_traits< T1> ::type, typename make_tuple_traits< T2> ::type, typename make_tuple_traits< T3> ::type, typename make_tuple_traits< T4> ::type, typename make_tuple_traits< T5> ::type, typename make_tuple_traits< T6> ::type, typename make_tuple_traits< T7> ::type, typename make_tuple_traits< T8> ::type, typename make_tuple_traits< T9> ::type> type;
# 568 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
};
# 570 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 573 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<int N, class HT, class TT> inline typename access_traits< typename tuple_element< N, detail::cons< HT, TT> > ::type> ::non_const_type
# 578 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
get(detail::cons< HT, TT> &c)
# 579 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 585 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return detail::get_class< N> ::template get< typename access_traits< typename tuple_element< N, detail::cons< HT, TT> > ::type> ::non_const_type, HT, TT> (c);
# 592 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 598 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<int N, class HT, class TT> inline typename access_traits< typename tuple_element< N, detail::cons< HT, TT> > ::type> ::const_type
# 603 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
get(const detail::cons< HT, TT> &c)
# 604 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 610 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return detail::get_class< N> ::template get< typename access_traits< typename tuple_element< N, detail::cons< HT, TT> > ::type> ::const_type, HT, TT> (c);
# 617 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 620 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0> inline typename detail::make_tuple_mapper< T0, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> ::type
# 623 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
make_tuple(const T0 &t0)
# 624 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 625 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename detail::make_tuple_mapper< T0, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> ::type t;
# 626 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return ((t)(t0));
# 627 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 629 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1> inline typename detail::make_tuple_mapper< T0, T1, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> ::type
# 632 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
make_tuple(const T0 &t0, const T1 &t1)
# 633 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 634 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename detail::make_tuple_mapper< T0, T1, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> ::type t;
# 635 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return t(t0, t1);
# 636 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 638 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2> inline typename detail::make_tuple_mapper< T0, T1, T2, null_type, null_type, null_type, null_type, null_type, null_type, null_type> ::type
# 641 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
make_tuple(const T0 &t0, const T1 &t1, const T2 &t2)
# 642 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 643 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename detail::make_tuple_mapper< T0, T1, T2, null_type, null_type, null_type, null_type, null_type, null_type, null_type> ::type t;
# 644 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return t(t0, t1, t2);
# 645 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 647 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2, class T3> inline typename detail::make_tuple_mapper< T0, T1, T2, T3, null_type, null_type, null_type, null_type, null_type, null_type> ::type
# 650 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
make_tuple(const T0 &t0, const T1 &t1, const T2 &t2, const T3 &t3)
# 651 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 652 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename detail::make_tuple_mapper< T0, T1, T2, T3, null_type, null_type, null_type, null_type, null_type, null_type> ::type t;
# 653 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return t(t0, t1, t2, t3);
# 654 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 656 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2, class T3, class T4> inline typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, null_type, null_type, null_type, null_type, null_type> ::type
# 659 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
make_tuple(const T0 &t0, const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4)
# 660 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 661 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, null_type, null_type, null_type, null_type, null_type> ::type t;
# 662 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return t(t0, t1, t2, t3, t4);
# 663 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 665 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2, class T3, class T4, class T5> inline typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, T5, null_type, null_type, null_type, null_type> ::type
# 668 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
make_tuple(const T0 &t0, const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4, const T5 &t5)
# 669 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 670 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, T5, null_type, null_type, null_type, null_type> ::type t;
# 671 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return t(t0, t1, t2, t3, t4, t5);
# 672 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 674 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6> inline typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, T5, T6, null_type, null_type, null_type> ::type
# 677 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
make_tuple(const T0 &t0, const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4, const T5 &t5, const T6 &t6)
# 678 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 679 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, T5, T6, null_type, null_type, null_type> ::type t;
# 680 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return t(t0, t1, t2, t3, t4, t5, t6);
# 681 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 683 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7> inline typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, T5, T6, T7, null_type, null_type> ::type
# 686 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
make_tuple(const T0 &t0, const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4, const T5 &t5, const T6 &t6, const T7 &t7)
# 687 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 688 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, T5, T6, T7, null_type, null_type> ::type t;
# 689 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return t(t0, t1, t2, t3, t4, t5, t6, t7);
# 690 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 692 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8> inline typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, T5, T6, T7, T8, null_type> ::type
# 695 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
make_tuple(const T0 &t0, const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4, const T5 &t5, const T6 &t6, const T7 &t7, const T8 &t8)
# 696 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 697 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, T5, T6, T7, T8, null_type> ::type t;
# 698 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return t(t0, t1, t2, t3, t4, t5, t6, t7, t8);
# 699 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 701 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9> inline typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type
# 704 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
make_tuple(const T0 &t0, const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4, const T5 &t5, const T6 &t6, const T7 &t7, const T8 &t8, const T9 &t9)
# 705 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 706 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
typedef typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type t;
# 707 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return t(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9);
# 708 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 711 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0> inline tuple< T0 &, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type>
# 713 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
tie(T0 &t0)
# 714 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 715 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return ((tuple< T0 &, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> )(t0));
# 716 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 718 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1> inline tuple< T0 &, T1 &, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type>
# 720 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
tie(T0 &t0, T1 &t1)
# 721 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 722 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return tuple< T0 &, T1 &, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> (t0, t1);
# 723 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 725 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2> inline tuple< T0 &, T1 &, T2 &, null_type, null_type, null_type, null_type, null_type, null_type, null_type>
# 727 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
tie(T0 &t0, T1 &t1, T2 &t2)
# 728 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 729 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return tuple< T0 &, T1 &, T2 &, null_type, null_type, null_type, null_type, null_type, null_type, null_type> (t0, t1, t2);
# 730 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 732 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2, class T3> inline tuple< T0 &, T1 &, T2 &, T3 &, null_type, null_type, null_type, null_type, null_type, null_type>
# 734 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3)
# 735 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 736 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return tuple< T0 &, T1 &, T2 &, T3 &, null_type, null_type, null_type, null_type, null_type, null_type> (t0, t1, t2, t3);
# 737 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 739 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2, class T3, class T4> inline tuple< T0 &, T1 &, T2 &, T3 &, T4 &, null_type, null_type, null_type, null_type, null_type>
# 741 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4)
# 742 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 743 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return tuple< T0 &, T1 &, T2 &, T3 &, T4 &, null_type, null_type, null_type, null_type, null_type> (t0, t1, t2, t3, t4);
# 744 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 746 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2, class T3, class T4, class T5> inline tuple< T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, null_type, null_type, null_type, null_type>
# 748 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5)
# 749 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 750 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return tuple< T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, null_type, null_type, null_type, null_type> (t0, t1, t2, t3, t4, t5);
# 751 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 753 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6> inline tuple< T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &, null_type, null_type, null_type>
# 755 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5, T6 &t6)
# 756 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 757 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return tuple< T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &, null_type, null_type, null_type> (t0, t1, t2, t3, t4, t5, t6);
# 758 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 760 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7> inline tuple< T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &, T7 &, null_type, null_type>
# 762 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5, T6 &t6, T7 &t7)
# 763 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 764 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return tuple< T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &, T7 &, null_type, null_type> (t0, t1, t2, t3, t4, t5, t6, t7);
# 765 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 767 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8> inline tuple< T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &, T7 &, T8 &, null_type>
# 769 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5, T6 &t6, T7 &t7, T8 &t8)
# 770 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 771 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return tuple< T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &, T7 &, T8 &, null_type> (t0, t1, t2, t3, t4, t5, t6, t7, t8);
# 772 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 774 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9> inline tuple< T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &, T7 &, T8 &, T9 &>
# 776 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5, T6 &t6, T7 &t7, T8 &t8, T9 &t9)
# 777 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 778 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return tuple< T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &, T7 &, T8 &, T9 &> (t0, t1, t2, t3, t4, t5, t6, t7, t8, t9);
# 779 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 783 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
namespace detail {
# 786 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T1, class T2> inline bool
# 788 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
eq(const T1 &lhs, const T2 &rhs) {
# 789 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return ((lhs.T1::get_head()) == (rhs.T2::get_head())) && eq((lhs.T1::get_tail()), (rhs.T2::get_tail()));
# 791 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 793 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<> inline bool eq< null_type, null_type> (const null_type &, const null_type &) { return true; }
# 795 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T1, class T2> inline bool
# 797 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
neq(const T1 &lhs, const T2 &rhs) {
# 798 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return ((lhs.T1::get_head()) != (rhs.T2::get_head())) || neq((lhs.T1::get_tail()), (rhs.T2::get_tail()));
# 800 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 803 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<> inline bool neq< null_type, null_type> (const null_type &, const null_type &) { return false; }
# 805 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T1, class T2> inline bool
# 807 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
lt(const T1 &lhs, const T2 &rhs) {
# 808 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return ((lhs.T1::get_head()) < (rhs.T2::get_head())) || ((!((rhs.T2::get_head()) < (lhs.T1::get_head()))) && lt((lhs.T1::get_tail()), (rhs.T2::get_tail())));
# 811 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 814 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<> inline bool lt< null_type, null_type> (const null_type &, const null_type &) { return false; }
# 816 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T1, class T2> inline bool
# 818 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
gt(const T1 &lhs, const T2 &rhs) {
# 819 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return ((lhs.T1::get_head()) > (rhs.T2::get_head())) || ((!((rhs.T2::get_head()) > (lhs.T1::get_head()))) && gt((lhs.T1::get_tail()), (rhs.T2::get_tail())));
# 822 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 825 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<> inline bool gt< null_type, null_type> (const null_type &, const null_type &) { return false; }
# 827 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T1, class T2> inline bool
# 829 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
lte(const T1 &lhs, const T2 &rhs) {
# 830 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return ((lhs.T1::get_head()) <= (rhs.T2::get_head())) && ((!((rhs.T2::get_head()) <= (lhs.T1::get_head()))) || lte((lhs.T1::get_tail()), (rhs.T2::get_tail())));
# 833 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 836 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<> inline bool lte< null_type, null_type> (const null_type &, const null_type &) { return true; }
# 838 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T1, class T2> inline bool
# 840 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
gte(const T1 &lhs, const T2 &rhs) {
# 841 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return ((lhs.T1::get_head()) >= (rhs.T2::get_head())) && ((!((rhs.T2::get_head()) >= (lhs.T1::get_head()))) || gte((lhs.T1::get_tail()), (rhs.T2::get_tail())));
# 844 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 847 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<> inline bool gte< null_type, null_type> (const null_type &, const null_type &) { return true; }
# 849 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 855 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T1, class T2, class S1, class S2> inline bool
# 857 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
operator==(const detail::cons< T1, T2> &lhs, const detail::cons< S1, S2> &rhs)
# 858 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 863 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return detail::eq(lhs, rhs);
# 864 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 868 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T1, class T2, class S1, class S2> inline bool
# 870 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
operator!=(const detail::cons< T1, T2> &lhs, const detail::cons< S1, S2> &rhs)
# 871 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 876 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return detail::neq(lhs, rhs);
# 877 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 880 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T1, class T2, class S1, class S2> inline bool
# 882 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
operator<(const detail::cons< T1, T2> &lhs, const detail::cons< S1, S2> &rhs)
# 883 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 888 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return detail::lt(lhs, rhs);
# 889 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 892 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T1, class T2, class S1, class S2> inline bool
# 894 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
operator>(const detail::cons< T1, T2> &lhs, const detail::cons< S1, S2> &rhs)
# 895 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 900 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return detail::gt(lhs, rhs);
# 901 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 904 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T1, class T2, class S1, class S2> inline bool
# 906 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
operator<=(const detail::cons< T1, T2> &lhs, const detail::cons< S1, S2> &rhs)
# 907 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 912 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return detail::lte(lhs, rhs);
# 913 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 916 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
template<class T1, class T2, class S1, class S2> inline bool
# 918 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
operator>=(const detail::cons< T1, T2> &lhs, const detail::cons< S1, S2> &rhs)
# 919 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
{
# 924 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
return detail::gte(lhs, rhs);
# 925 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 927 "/home/normal/checkout/thrust/thrust/detail/tuple.inl"
}
# 33 "/home/normal/checkout/thrust/thrust/tuple.h"
namespace thrust {
# 43 "/home/normal/checkout/thrust/thrust/tuple.h"
struct null_type;
# 57 "/home/normal/checkout/thrust/thrust/tuple.h"
template<int N, class T>
# 58 "/home/normal/checkout/thrust/thrust/tuple.h"
struct tuple_element {
# 61 "/home/normal/checkout/thrust/thrust/tuple.h"
private: typedef typename T::tail_type Next;
# 66 "/home/normal/checkout/thrust/thrust/tuple.h"
public: typedef typename thrust::tuple_element< (N - 1), typename T::tail_type> ::type type;
# 67 "/home/normal/checkout/thrust/thrust/tuple.h"
};
# 77 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T>
# 78 "/home/normal/checkout/thrust/thrust/tuple.h"
struct tuple_size {
# 82 "/home/normal/checkout/thrust/thrust/tuple.h"
static const int value = ((1 + thrust::tuple_size< typename T::tail_type> ::value));
# 83 "/home/normal/checkout/thrust/thrust/tuple.h"
};
# 110 "/home/normal/checkout/thrust/thrust/tuple.h"
template<int N, class HT, class TT> inline typename access_traits< typename tuple_element< N, detail::cons< HT, TT> > ::type> ::non_const_type get(detail::cons< HT, TT> &);
# 141 "/home/normal/checkout/thrust/thrust/tuple.h"
template<int N, class HT, class TT> inline typename access_traits< typename tuple_element< N, detail::cons< HT, TT> > ::type> ::const_type get(const detail::cons< HT, TT> &);
# 184 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2, class T3, class T4, class
# 185 "/home/normal/checkout/thrust/thrust/tuple.h"
T5, class T6, class T7, class T8, class T9>
# 186 "/home/normal/checkout/thrust/thrust/tuple.h"
class tuple : public detail::map_tuple_to_cons< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type {
# 193 "/home/normal/checkout/thrust/thrust/tuple.h"
typedef typename detail::map_tuple_to_cons< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type inherited;
# 197 "/home/normal/checkout/thrust/thrust/tuple.h"
public: tuple() { }
# 200 "/home/normal/checkout/thrust/thrust/tuple.h"
tuple(typename access_traits< T0> ::parameter_type t0) : detail::map_tuple_to_cons< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type(t0, static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()))
# 210 "/home/normal/checkout/thrust/thrust/tuple.h"
{ }
# 213 "/home/normal/checkout/thrust/thrust/tuple.h"
tuple(typename access_traits< T0> ::parameter_type t0, typename access_traits< T1> ::parameter_type
# 214 "/home/normal/checkout/thrust/thrust/tuple.h"
t1) : detail::map_tuple_to_cons< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type(t0, t1, static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()))
# 223 "/home/normal/checkout/thrust/thrust/tuple.h"
{ }
# 226 "/home/normal/checkout/thrust/thrust/tuple.h"
tuple(typename access_traits< T0> ::parameter_type t0, typename access_traits< T1> ::parameter_type
# 227 "/home/normal/checkout/thrust/thrust/tuple.h"
t1, typename access_traits< T2> ::parameter_type
# 228 "/home/normal/checkout/thrust/thrust/tuple.h"
t2) : detail::map_tuple_to_cons< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type(t0, t1, t2, static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()))
# 236 "/home/normal/checkout/thrust/thrust/tuple.h"
{ }
# 239 "/home/normal/checkout/thrust/thrust/tuple.h"
tuple(typename access_traits< T0> ::parameter_type t0, typename access_traits< T1> ::parameter_type
# 240 "/home/normal/checkout/thrust/thrust/tuple.h"
t1, typename access_traits< T2> ::parameter_type
# 241 "/home/normal/checkout/thrust/thrust/tuple.h"
t2, typename access_traits< T3> ::parameter_type
# 242 "/home/normal/checkout/thrust/thrust/tuple.h"
t3) : detail::map_tuple_to_cons< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type(t0, t1, t2, t3, static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()))
# 249 "/home/normal/checkout/thrust/thrust/tuple.h"
{ }
# 252 "/home/normal/checkout/thrust/thrust/tuple.h"
tuple(typename access_traits< T0> ::parameter_type t0, typename access_traits< T1> ::parameter_type
# 253 "/home/normal/checkout/thrust/thrust/tuple.h"
t1, typename access_traits< T2> ::parameter_type
# 254 "/home/normal/checkout/thrust/thrust/tuple.h"
t2, typename access_traits< T3> ::parameter_type
# 255 "/home/normal/checkout/thrust/thrust/tuple.h"
t3, typename access_traits< T4> ::parameter_type
# 256 "/home/normal/checkout/thrust/thrust/tuple.h"
t4) : detail::map_tuple_to_cons< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type(t0, t1, t2, t3, t4, static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()))
# 262 "/home/normal/checkout/thrust/thrust/tuple.h"
{ }
# 265 "/home/normal/checkout/thrust/thrust/tuple.h"
tuple(typename access_traits< T0> ::parameter_type t0, typename access_traits< T1> ::parameter_type
# 266 "/home/normal/checkout/thrust/thrust/tuple.h"
t1, typename access_traits< T2> ::parameter_type
# 267 "/home/normal/checkout/thrust/thrust/tuple.h"
t2, typename access_traits< T3> ::parameter_type
# 268 "/home/normal/checkout/thrust/thrust/tuple.h"
t3, typename access_traits< T4> ::parameter_type
# 269 "/home/normal/checkout/thrust/thrust/tuple.h"
t4, typename access_traits< T5> ::parameter_type
# 270 "/home/normal/checkout/thrust/thrust/tuple.h"
t5) : detail::map_tuple_to_cons< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type(t0, t1, t2, t3, t4, t5, static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()))
# 275 "/home/normal/checkout/thrust/thrust/tuple.h"
{ }
# 278 "/home/normal/checkout/thrust/thrust/tuple.h"
tuple(typename access_traits< T0> ::parameter_type t0, typename access_traits< T1> ::parameter_type
# 279 "/home/normal/checkout/thrust/thrust/tuple.h"
t1, typename access_traits< T2> ::parameter_type
# 280 "/home/normal/checkout/thrust/thrust/tuple.h"
t2, typename access_traits< T3> ::parameter_type
# 281 "/home/normal/checkout/thrust/thrust/tuple.h"
t3, typename access_traits< T4> ::parameter_type
# 282 "/home/normal/checkout/thrust/thrust/tuple.h"
t4, typename access_traits< T5> ::parameter_type
# 283 "/home/normal/checkout/thrust/thrust/tuple.h"
t5, typename access_traits< T6> ::parameter_type
# 284 "/home/normal/checkout/thrust/thrust/tuple.h"
t6) : detail::map_tuple_to_cons< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type(t0, t1, t2, t3, t4, t5, t6, static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()))
# 288 "/home/normal/checkout/thrust/thrust/tuple.h"
{ }
# 291 "/home/normal/checkout/thrust/thrust/tuple.h"
tuple(typename access_traits< T0> ::parameter_type t0, typename access_traits< T1> ::parameter_type
# 292 "/home/normal/checkout/thrust/thrust/tuple.h"
t1, typename access_traits< T2> ::parameter_type
# 293 "/home/normal/checkout/thrust/thrust/tuple.h"
t2, typename access_traits< T3> ::parameter_type
# 294 "/home/normal/checkout/thrust/thrust/tuple.h"
t3, typename access_traits< T4> ::parameter_type
# 295 "/home/normal/checkout/thrust/thrust/tuple.h"
t4, typename access_traits< T5> ::parameter_type
# 296 "/home/normal/checkout/thrust/thrust/tuple.h"
t5, typename access_traits< T6> ::parameter_type
# 297 "/home/normal/checkout/thrust/thrust/tuple.h"
t6, typename access_traits< T7> ::parameter_type
# 298 "/home/normal/checkout/thrust/thrust/tuple.h"
t7) : detail::map_tuple_to_cons< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type(t0, t1, t2, t3, t4, t5, t6, t7, static_cast< const null_type &>(null_type()), static_cast< const null_type &>(null_type()))
# 301 "/home/normal/checkout/thrust/thrust/tuple.h"
{ }
# 304 "/home/normal/checkout/thrust/thrust/tuple.h"
tuple(typename access_traits< T0> ::parameter_type t0, typename access_traits< T1> ::parameter_type
# 305 "/home/normal/checkout/thrust/thrust/tuple.h"
t1, typename access_traits< T2> ::parameter_type
# 306 "/home/normal/checkout/thrust/thrust/tuple.h"
t2, typename access_traits< T3> ::parameter_type
# 307 "/home/normal/checkout/thrust/thrust/tuple.h"
t3, typename access_traits< T4> ::parameter_type
# 308 "/home/normal/checkout/thrust/thrust/tuple.h"
t4, typename access_traits< T5> ::parameter_type
# 309 "/home/normal/checkout/thrust/thrust/tuple.h"
t5, typename access_traits< T6> ::parameter_type
# 310 "/home/normal/checkout/thrust/thrust/tuple.h"
t6, typename access_traits< T7> ::parameter_type
# 311 "/home/normal/checkout/thrust/thrust/tuple.h"
t7, typename access_traits< T8> ::parameter_type
# 312 "/home/normal/checkout/thrust/thrust/tuple.h"
t8) : detail::map_tuple_to_cons< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type(t0, t1, t2, t3, t4, t5, t6, t7, t8, static_cast< const null_type &>(null_type()))
# 314 "/home/normal/checkout/thrust/thrust/tuple.h"
{ }
# 317 "/home/normal/checkout/thrust/thrust/tuple.h"
tuple(typename access_traits< T0> ::parameter_type t0, typename access_traits< T1> ::parameter_type
# 318 "/home/normal/checkout/thrust/thrust/tuple.h"
t1, typename access_traits< T2> ::parameter_type
# 319 "/home/normal/checkout/thrust/thrust/tuple.h"
t2, typename access_traits< T3> ::parameter_type
# 320 "/home/normal/checkout/thrust/thrust/tuple.h"
t3, typename access_traits< T4> ::parameter_type
# 321 "/home/normal/checkout/thrust/thrust/tuple.h"
t4, typename access_traits< T5> ::parameter_type
# 322 "/home/normal/checkout/thrust/thrust/tuple.h"
t5, typename access_traits< T6> ::parameter_type
# 323 "/home/normal/checkout/thrust/thrust/tuple.h"
t6, typename access_traits< T7> ::parameter_type
# 324 "/home/normal/checkout/thrust/thrust/tuple.h"
t7, typename access_traits< T8> ::parameter_type
# 325 "/home/normal/checkout/thrust/thrust/tuple.h"
t8, typename access_traits< T9> ::parameter_type
# 326 "/home/normal/checkout/thrust/thrust/tuple.h"
t9) : detail::map_tuple_to_cons< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9)
# 327 "/home/normal/checkout/thrust/thrust/tuple.h"
{ }
# 330 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class U1, class U2>
# 332 "/home/normal/checkout/thrust/thrust/tuple.h"
tuple(const detail::cons< U1, U2> &p) : detail::map_tuple_to_cons< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type(p) { }
# 334 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class U1, class U2> thrust::tuple< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> &
# 336 "/home/normal/checkout/thrust/thrust/tuple.h"
operator=(const detail::cons< U1, U2> &k)
# 337 "/home/normal/checkout/thrust/thrust/tuple.h"
{
# 338 "/home/normal/checkout/thrust/thrust/tuple.h"
detail::map_tuple_to_cons< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type::operator=(k);
# 339 "/home/normal/checkout/thrust/thrust/tuple.h"
return *this;
# 340 "/home/normal/checkout/thrust/thrust/tuple.h"
}
# 342 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class U1, class U2> thrust::tuple< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> &
# 344 "/home/normal/checkout/thrust/thrust/tuple.h"
operator=(const pair< U1, U2> &k) {
# 346 "/home/normal/checkout/thrust/thrust/tuple.h"
(this->head) = (k.pair< U1, U2> ::first);
# 347 "/home/normal/checkout/thrust/thrust/tuple.h"
((this->tail).head) = (k.pair< U1, U2> ::second);
# 348 "/home/normal/checkout/thrust/thrust/tuple.h"
return *this;
# 349 "/home/normal/checkout/thrust/thrust/tuple.h"
}
# 353 "/home/normal/checkout/thrust/thrust/tuple.h"
};
# 359 "/home/normal/checkout/thrust/thrust/tuple.h"
template<> class tuple< null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> : public null_type {
# 363 "/home/normal/checkout/thrust/thrust/tuple.h"
public: typedef null_type inherited;
# 364 "/home/normal/checkout/thrust/thrust/tuple.h"
};
# 376 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0> inline typename detail::make_tuple_mapper< T0, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> ::type make_tuple(const T0 &);
# 392 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1> inline typename detail::make_tuple_mapper< T0, T1, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> ::type make_tuple(const T0 &, const T1 &);
# 403 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0> inline tuple< T0 &, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> tie(T0 &);
# 418 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1> inline tuple< T0 &, T1 &, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> tie(T0 &, T1 &);
# 426 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2> inline typename detail::make_tuple_mapper< T0, T1, T2, null_type, null_type, null_type, null_type, null_type, null_type, null_type> ::type make_tuple(const T0 &, const T1 &, const T2 &);
# 431 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2, class T3> inline typename detail::make_tuple_mapper< T0, T1, T2, T3, null_type, null_type, null_type, null_type, null_type, null_type> ::type make_tuple(const T0 &, const T1 &, const T2 &, const T3 &);
# 436 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2, class T3, class T4> inline typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, null_type, null_type, null_type, null_type, null_type> ::type make_tuple(const T0 &, const T1 &, const T2 &, const T3 &, const T4 &);
# 441 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2, class T3, class T4, class T5> inline typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, T5, null_type, null_type, null_type, null_type> ::type make_tuple(const T0 &, const T1 &, const T2 &, const T3 &, const T4 &, const T5 &);
# 446 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6> inline typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, T5, T6, null_type, null_type, null_type> ::type make_tuple(const T0 &, const T1 &, const T2 &, const T3 &, const T4 &, const T5 &, const T6 &);
# 451 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7> inline typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, T5, T6, T7, null_type, null_type> ::type make_tuple(const T0 &, const T1 &, const T2 &, const T3 &, const T4 &, const T5 &, const T6 &, const T7 &);
# 456 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8> inline typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, T5, T6, T7, T8, null_type> ::type make_tuple(const T0 &, const T1 &, const T2 &, const T3 &, const T4 &, const T5 &, const T6 &, const T7 &, const T8 &);
# 461 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9> inline typename detail::make_tuple_mapper< T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> ::type make_tuple(const T0 &, const T1 &, const T2 &, const T3 &, const T4 &, const T5 &, const T6 &, const T7 &, const T8 &, const T9 &);
# 466 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2> inline tuple< T0 &, T1 &, T2 &, null_type, null_type, null_type, null_type, null_type, null_type, null_type> tie(T0 &, T1 &, T2 &);
# 470 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2, class T3> inline tuple< T0 &, T1 &, T2 &, T3 &, null_type, null_type, null_type, null_type, null_type, null_type> tie(T0 &, T1 &, T2 &, T3 &);
# 474 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2, class T3, class T4> inline tuple< T0 &, T1 &, T2 &, T3 &, T4 &, null_type, null_type, null_type, null_type, null_type> tie(T0 &, T1 &, T2 &, T3 &, T4 &);
# 478 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2, class T3, class T4, class T5> inline tuple< T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, null_type, null_type, null_type, null_type> tie(T0 &, T1 &, T2 &, T3 &, T4 &, T5 &);
# 482 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6> inline tuple< T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &, null_type, null_type, null_type> tie(T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &);
# 486 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7> inline tuple< T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &, T7 &, null_type, null_type> tie(T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &, T7 &);
# 490 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8> inline tuple< T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &, T7 &, T8 &, null_type> tie(T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &, T7 &, T8 &);
# 494 "/home/normal/checkout/thrust/thrust/tuple.h"
template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9> inline tuple< T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &, T7 &, T8 &, T9 &> tie(T0 &, T1 &, T2 &, T3 &, T4 &, T5 &, T6 &, T7 &, T8 &, T9 &);
# 500 "/home/normal/checkout/thrust/thrust/tuple.h"
inline bool operator==(const null_type &, const null_type &);
# 503 "/home/normal/checkout/thrust/thrust/tuple.h"
inline bool operator>=(const null_type &, const null_type &);
# 506 "/home/normal/checkout/thrust/thrust/tuple.h"
inline bool operator<=(const null_type &, const null_type &);
# 509 "/home/normal/checkout/thrust/thrust/tuple.h"
inline bool operator!=(const null_type &, const null_type &);
# 512 "/home/normal/checkout/thrust/thrust/tuple.h"
inline bool operator<(const null_type &, const null_type &);
# 515 "/home/normal/checkout/thrust/thrust/tuple.h"
inline bool operator>(const null_type &, const null_type &);
# 523 "/home/normal/checkout/thrust/thrust/tuple.h"
}
# 21 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
namespace thrust {
# 24 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
namespace detail {
# 27 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class Tuple,
# 28 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class > class UnaryMetaFunction, unsigned
# 29 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
sz = tuple_size< Tuple> ::value> struct tuple_meta_transform;
# 32 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class Tuple,
# 33 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class > class UnaryMetaFunction>
# 34 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
struct tuple_meta_transform< Tuple, UnaryMetaFunction, (0)> {
# 36 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
typedef null_type type;
# 37 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
};
# 39 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class Tuple,
# 40 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class > class UnaryMetaFunction>
# 41 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
struct tuple_meta_transform< Tuple, UnaryMetaFunction, (1)> {
# 45 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
typedef tuple< typename UnaryMetaFunction< typename tuple_element< 0, Tuple> ::type> ::type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> type;
# 46 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
};
# 48 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class Tuple,
# 49 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class > class UnaryMetaFunction>
# 50 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
struct tuple_meta_transform< Tuple, UnaryMetaFunction, (2)> {
# 55 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
typedef tuple< typename UnaryMetaFunction< typename tuple_element< 0, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 1, Tuple> ::type> ::type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> type;
# 56 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
};
# 58 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class Tuple,
# 59 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class > class UnaryMetaFunction>
# 60 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
struct tuple_meta_transform< Tuple, UnaryMetaFunction, (3)> {
# 66 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
typedef tuple< typename UnaryMetaFunction< typename tuple_element< 0, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 1, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 2, Tuple> ::type> ::type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> type;
# 67 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
};
# 69 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class Tuple,
# 70 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class > class UnaryMetaFunction>
# 71 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
struct tuple_meta_transform< Tuple, UnaryMetaFunction, (4)> {
# 78 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
typedef tuple< typename UnaryMetaFunction< typename tuple_element< 0, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 1, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 2, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 3, Tuple> ::type> ::type, null_type, null_type, null_type, null_type, null_type, null_type> type;
# 79 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
};
# 81 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class Tuple,
# 82 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class > class UnaryMetaFunction>
# 83 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
struct tuple_meta_transform< Tuple, UnaryMetaFunction, (5)> {
# 91 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
typedef tuple< typename UnaryMetaFunction< typename tuple_element< 0, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 1, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 2, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 3, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 4, Tuple> ::type> ::type, null_type, null_type, null_type, null_type, null_type> type;
# 92 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
};
# 94 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class Tuple,
# 95 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class > class UnaryMetaFunction>
# 96 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
struct tuple_meta_transform< Tuple, UnaryMetaFunction, (6)> {
# 105 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
typedef tuple< typename UnaryMetaFunction< typename tuple_element< 0, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 1, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 2, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 3, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 4, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 5, Tuple> ::type> ::type, null_type, null_type, null_type, null_type> type;
# 106 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
};
# 108 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class Tuple,
# 109 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class > class UnaryMetaFunction>
# 110 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
struct tuple_meta_transform< Tuple, UnaryMetaFunction, (7)> {
# 120 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
typedef tuple< typename UnaryMetaFunction< typename tuple_element< 0, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 1, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 2, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 3, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 4, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 5, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 6, Tuple> ::type> ::type, null_type, null_type, null_type> type;
# 121 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
};
# 123 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class Tuple,
# 124 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class > class UnaryMetaFunction>
# 125 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
struct tuple_meta_transform< Tuple, UnaryMetaFunction, (8)> {
# 136 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
typedef tuple< typename UnaryMetaFunction< typename tuple_element< 0, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 1, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 2, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 3, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 4, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 5, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 6, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 7, Tuple> ::type> ::type, null_type, null_type> type;
# 137 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
};
# 139 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class Tuple,
# 140 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class > class UnaryMetaFunction>
# 141 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
struct tuple_meta_transform< Tuple, UnaryMetaFunction, (9)> {
# 153 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
typedef tuple< typename UnaryMetaFunction< typename tuple_element< 0, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 1, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 2, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 3, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 4, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 5, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 6, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 7, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 8, Tuple> ::type> ::type, null_type> type;
# 154 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
};
# 156 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class Tuple,
# 157 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
template<class > class UnaryMetaFunction>
# 158 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
struct tuple_meta_transform< Tuple, UnaryMetaFunction, (10)> {
# 171 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
typedef tuple< typename UnaryMetaFunction< typename tuple_element< 0, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 1, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 2, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 3, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 4, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 5, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 6, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 7, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 8, Tuple> ::type> ::type, typename UnaryMetaFunction< typename tuple_element< 9, Tuple> ::type> ::type> type;
# 172 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
};
# 174 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
}
# 176 "/home/normal/checkout/thrust/thrust/detail/tuple_meta_transform.h"
}
# 22 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
namespace thrust {
# 25 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class Tuple,
# 29 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class > class UnaryMetaFunction, class
# 30 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
UnaryFunction, unsigned
# 31 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
sz = tuple_size< Tuple> ::value> struct tuple_transform_functor;
# 35 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class Tuple,
# 36 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class > class UnaryMetaFunction, class
# 37 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
UnaryFunction>
# 38 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
struct tuple_transform_functor< Tuple, UnaryMetaFunction, UnaryFunction, (0)> {
# 42 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
static typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type do_it(const Tuple &t, UnaryFunction f)
# 43 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
{
# 44 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
return null_type();
# 45 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
}
# 46 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
};
# 49 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class Tuple,
# 50 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class > class UnaryMetaFunction, class
# 51 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
UnaryFunction>
# 52 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
struct tuple_transform_functor< Tuple, UnaryMetaFunction, UnaryFunction, (1)> {
# 56 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
static typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type do_it(const Tuple &t, UnaryFunction f)
# 57 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
{
# 58 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
typedef typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type XfrmTuple;
# 60 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
return ((XfrmTuple)(f(thrust::get< 0> (t))));
# 61 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
}
# 62 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
};
# 65 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class Tuple,
# 66 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class > class UnaryMetaFunction, class
# 67 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
UnaryFunction>
# 68 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
struct tuple_transform_functor< Tuple, UnaryMetaFunction, UnaryFunction, (2)> {
# 72 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
static typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type do_it(const Tuple &t, UnaryFunction f)
# 73 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
{
# 74 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
typedef typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type XfrmTuple;
# 76 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
return XfrmTuple(f(thrust::get< 0> (t)), f(thrust::get< 1> (t)));
# 78 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
}
# 79 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
};
# 82 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class Tuple,
# 83 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class > class UnaryMetaFunction, class
# 84 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
UnaryFunction>
# 85 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
struct tuple_transform_functor< Tuple, UnaryMetaFunction, UnaryFunction, (3)> {
# 89 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
static typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type do_it(const Tuple &t, UnaryFunction f)
# 90 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
{
# 91 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
typedef typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type XfrmTuple;
# 93 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
return XfrmTuple(f(thrust::get< 0> (t)), f(thrust::get< 1> (t)), f(thrust::get< 2> (t)));
# 96 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
}
# 97 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
};
# 100 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class Tuple,
# 101 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class > class UnaryMetaFunction, class
# 102 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
UnaryFunction>
# 103 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
struct tuple_transform_functor< Tuple, UnaryMetaFunction, UnaryFunction, (4)> {
# 107 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
static typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type do_it(const Tuple &t, UnaryFunction f)
# 108 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
{
# 109 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
typedef typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type XfrmTuple;
# 111 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
return XfrmTuple(f(thrust::get< 0> (t)), f(thrust::get< 1> (t)), f(thrust::get< 2> (t)), f(thrust::get< 3> (t)));
# 115 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
}
# 116 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
};
# 119 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class Tuple,
# 120 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class > class UnaryMetaFunction, class
# 121 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
UnaryFunction>
# 122 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
struct tuple_transform_functor< Tuple, UnaryMetaFunction, UnaryFunction, (5)> {
# 126 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
static typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type do_it(const Tuple &t, UnaryFunction f)
# 127 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
{
# 128 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
typedef typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type XfrmTuple;
# 130 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
return XfrmTuple(f(thrust::get< 0> (t)), f(thrust::get< 1> (t)), f(thrust::get< 2> (t)), f(thrust::get< 3> (t)), f(thrust::get< 4> (t)));
# 135 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
}
# 136 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
};
# 139 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class Tuple,
# 140 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class > class UnaryMetaFunction, class
# 141 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
UnaryFunction>
# 142 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
struct tuple_transform_functor< Tuple, UnaryMetaFunction, UnaryFunction, (6)> {
# 146 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
static typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type do_it(const Tuple &t, UnaryFunction f)
# 147 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
{
# 148 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
typedef typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type XfrmTuple;
# 150 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
return XfrmTuple(f(thrust::get< 0> (t)), f(thrust::get< 1> (t)), f(thrust::get< 2> (t)), f(thrust::get< 3> (t)), f(thrust::get< 4> (t)), f(thrust::get< 5> (t)));
# 156 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
}
# 157 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
};
# 160 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class Tuple,
# 161 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class > class UnaryMetaFunction, class
# 162 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
UnaryFunction>
# 163 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
struct tuple_transform_functor< Tuple, UnaryMetaFunction, UnaryFunction, (7)> {
# 167 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
static typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type do_it(const Tuple &t, UnaryFunction f)
# 168 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
{
# 169 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
typedef typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type XfrmTuple;
# 171 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
return XfrmTuple(f(thrust::get< 0> (t)), f(thrust::get< 1> (t)), f(thrust::get< 2> (t)), f(thrust::get< 3> (t)), f(thrust::get< 4> (t)), f(thrust::get< 5> (t)), f(thrust::get< 6> (t)));
# 178 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
}
# 179 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
};
# 182 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class Tuple,
# 183 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class > class UnaryMetaFunction, class
# 184 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
UnaryFunction>
# 185 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
struct tuple_transform_functor< Tuple, UnaryMetaFunction, UnaryFunction, (8)> {
# 189 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
static typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type do_it(const Tuple &t, UnaryFunction f)
# 190 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
{
# 191 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
typedef typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type XfrmTuple;
# 193 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
return XfrmTuple(f(thrust::get< 0> (t)), f(thrust::get< 1> (t)), f(thrust::get< 2> (t)), f(thrust::get< 3> (t)), f(thrust::get< 4> (t)), f(thrust::get< 5> (t)), f(thrust::get< 6> (t)), f(thrust::get< 7> (t)));
# 201 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
}
# 202 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
};
# 205 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class Tuple,
# 206 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class > class UnaryMetaFunction, class
# 207 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
UnaryFunction>
# 208 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
struct tuple_transform_functor< Tuple, UnaryMetaFunction, UnaryFunction, (9)> {
# 212 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
static typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type do_it(const Tuple &t, UnaryFunction f)
# 213 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
{
# 214 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
typedef typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type XfrmTuple;
# 216 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
return XfrmTuple(f(thrust::get< 0> (t)), f(thrust::get< 1> (t)), f(thrust::get< 2> (t)), f(thrust::get< 3> (t)), f(thrust::get< 4> (t)), f(thrust::get< 5> (t)), f(thrust::get< 6> (t)), f(thrust::get< 7> (t)), f(thrust::get< 8> (t)));
# 225 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
}
# 226 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
};
# 229 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class Tuple,
# 230 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class > class UnaryMetaFunction, class
# 231 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
UnaryFunction>
# 232 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
struct tuple_transform_functor< Tuple, UnaryMetaFunction, UnaryFunction, (10)> {
# 236 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
static typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type do_it(const Tuple &t, UnaryFunction f)
# 237 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
{
# 238 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
typedef typename tuple_meta_transform< Tuple, UnaryMetaFunction, tuple_size< Tuple> ::value> ::type XfrmTuple;
# 240 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
return XfrmTuple(f(thrust::get< 0> (t)), f(thrust::get< 1> (t)), f(thrust::get< 2> (t)), f(thrust::get< 3> (t)), f(thrust::get< 4> (t)), f(thrust::get< 5> (t)), f(thrust::get< 6> (t)), f(thrust::get< 7> (t)), f(thrust::get< 8> (t)), f(thrust::get< 9> (t)));
# 250 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
}
# 251 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
};
# 254 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
template<class Tuple, class
# 255 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
UnaryFunction> typename tuple_meta_transform< Tuple, UnaryFunction::template apply, tuple_size< Tuple> ::value> ::type
# 258 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
tuple_transform(const Tuple &t, UnaryFunction f)
# 259 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
{
# 260 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
return tuple_transform_functor< Tuple, UnaryFunction::template apply, UnaryFunction, tuple_size< Tuple> ::value> ::do_it(t, f);
# 261 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
}
# 263 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
}
# 265 "/home/normal/checkout/thrust/thrust/detail/tuple_transform.h"
}
# 30 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
namespace thrust {
# 34 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class IteratorTuple> class zip_iterator;
# 36 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
namespace detail {
# 41 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct _1;
# 42 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct _2;
# 45 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
namespace device {
# 51 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<> struct dereference_result< _1> {
# 53 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class T>
# 54 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct apply : public device::dereference_result< T> { };
# 55 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 57 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
}
# 62 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class DiffType>
# 63 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
class advance_iterator {
# 67 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
public: advance_iterator(DiffType step) : m_step(step) { }
# 69 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class Iterator> void
# 71 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
operator()(Iterator &it) const
# 72 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
{ it += (m_step); }
# 75 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
private: DiffType m_step;
# 76 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 79 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct increment_iterator {
# 81 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class Iterator> void
# 83 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
operator()(Iterator &it)
# 84 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
{ ++it; }
# 85 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 88 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct decrement_iterator {
# 90 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class Iterator> void
# 92 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
operator()(Iterator &it)
# 93 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
{ --it; }
# 94 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 97 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct dereference_iterator {
# 99 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class Iterator>
# 100 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct apply {
# 104 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef typename iterator_traits< Iterator> ::reference type;
# 105 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 107 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class Iterator> typename apply< Iterator> ::type
# 109 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
operator()(const Iterator &it)
# 110 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
{ return *it; }
# 111 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 114 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct device_dereference_iterator {
# 116 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class Iterator>
# 117 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct apply {
# 121 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef typename device::dereference_result< Iterator> ::type type;
# 122 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 124 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class Iterator> typename apply< Iterator> ::type
# 126 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
operator()(const Iterator &it)
# 127 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
{ return device::dereference(it); }
# 128 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 131 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class IndexType>
# 132 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct device_dereference_iterator_with_index {
# 134 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class Iterator>
# 135 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct apply {
# 139 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef typename device::dereference_result< Iterator> ::type type;
# 140 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 142 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class Iterator> typename apply< Iterator> ::type
# 144 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
operator()(const Iterator &it)
# 145 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
{ return device::dereference(it, n); }
# 147 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
IndexType n;
# 148 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 153 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
namespace tuple_impl_specific {
# 157 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class UnaryMetaFunctionClass, class Arg>
# 158 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct apply1 : public UnaryMetaFunctionClass::template apply< Arg> {
# 161 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 167 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class X>
# 168 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct lambda {
# 170 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef X type;
# 171 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 174 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<template<class > class X>
# 175 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct lambda< X< _1> > {
# 178 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct type {
# 180 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class Arg>
# 181 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct apply {
# 183 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef typename X< Arg> ::type type;
# 184 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 185 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 186 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 191 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class UnaryMetaFunctionClass, class Arg1, class Arg2>
# 192 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct apply2 : public UnaryMetaFunctionClass::template apply< Arg1, Arg2> {
# 195 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 202 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class Tuple, class BinaryMetaFun, class StartType> struct tuple_meta_accumulate;
# 205 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class
# 206 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
Tuple, class
# 207 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
BinaryMetaFun, class
# 208 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
StartType>
# 210 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct tuple_meta_accumulate_impl {
# 222 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef typename apply2< BinaryMetaFun, typename Tuple::head_type, typename tuple_meta_accumulate< typename Tuple::tail_type, BinaryMetaFun, StartType> ::type> ::type type;
# 223 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 226 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class
# 227 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
Tuple, class
# 228 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
BinaryMetaFun, class
# 229 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
StartType>
# 231 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct tuple_meta_accumulate : public eval_if< is_same< Tuple, null_type> ::value, identity_< StartType> , tuple_meta_accumulate_impl< Tuple, BinaryMetaFun, StartType> > {
# 242 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 266 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class Fun> Fun
# 268 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
tuple_for_each(null_type, Fun f)
# 269 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
{
# 270 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
return f;
# 271 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
}
# 274 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class Tuple, class Fun> Fun
# 276 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
tuple_for_each(Tuple &t, Fun f)
# 277 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
{
# 278 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
f((t.Tuple::get_head()));
# 279 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
return tuple_for_each((t.Tuple::get_tail()), f);
# 280 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
}
# 290 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
inline bool tuple_equal(null_type, null_type)
# 291 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
{ return true; }
# 294 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class Tuple1, class Tuple2> bool
# 296 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
tuple_equal(const Tuple1 &t1, const Tuple2 &t2)
# 297 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
{
# 298 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
return ((t1.Tuple1::get_head()) == (t2.Tuple2::get_head())) && tuple_equal((t1.Tuple1::get_tail()), (t2.Tuple2::get_tail()));
# 300 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
}
# 302 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
}
# 306 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct _1 { };
# 307 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct _2 { };
# 311 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class T>
# 312 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct iterator_reference : public thrust::iterator_reference< T> {
# 315 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 318 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<> struct iterator_reference< _1> {
# 320 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class T>
# 321 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct apply : public thrust::iterator_reference< T> { };
# 322 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 324 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
namespace zip_iterator_base_ns {
# 328 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class T>
# 329 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct iterator_value : public thrust::iterator_value< T> {
# 332 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 335 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<> struct iterator_value< _1> {
# 337 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class T>
# 338 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct apply : public thrust::iterator_value< T> { };
# 339 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 341 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
}
# 347 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class IteratorTuple>
# 348 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct tuple_of_references : public tuple_meta_transform< IteratorTuple, iterator_reference, tuple_size< IteratorTuple> ::value> {
# 354 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 359 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class IteratorTuple>
# 360 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct tuple_of_dereference_result : public tuple_meta_transform< IteratorTuple, device::dereference_result, tuple_size< IteratorTuple> ::value> {
# 366 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 372 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class IteratorTuple>
# 373 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct tuple_of_value_types : public tuple_meta_transform< IteratorTuple, iterator_value, tuple_size< IteratorTuple> ::value> {
# 379 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 386 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class IteratorTuple>
# 387 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct minimum_traversal_category_in_iterator_tuple {
# 392 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef typename tuple_meta_transform< IteratorTuple, iterator_traversal, tuple_size< IteratorTuple> ::value> ::type tuple_of_traversal_tags;
# 398 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef typename tuple_impl_specific::tuple_meta_accumulate< typename tuple_meta_transform< IteratorTuple, iterator_traversal, tuple_size< IteratorTuple> ::value> ::type, minimum_category< _1, _2> , random_access_traversal_tag> ::type type;
# 399 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 405 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class IteratorTuple>
# 406 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct minimum_space_in_iterator_tuple {
# 411 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef typename tuple_meta_transform< IteratorTuple, iterator_space, tuple_size< IteratorTuple> ::value> ::type tuple_of_space_tags;
# 417 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef typename tuple_impl_specific::tuple_meta_accumulate< typename tuple_meta_transform< IteratorTuple, iterator_space, tuple_size< IteratorTuple> ::value> ::type, minimum_space< _1, _2> , any_space_tag> ::type type;
# 418 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 441 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
template<class IteratorTuple>
# 442 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
struct zip_iterator_base {
# 447 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef typename tuple_of_references< IteratorTuple> ::type reference;
# 451 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef typename tuple_of_value_types< IteratorTuple> ::type value_type;
# 455 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef reference *pointer;
# 460 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef typename iterator_traits< typename tuple_element< 0, IteratorTuple> ::type> ::difference_type difference_type;
# 465 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef typename minimum_space_in_iterator_tuple< IteratorTuple> ::type space;
# 470 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef typename minimum_traversal_category_in_iterator_tuple< IteratorTuple> ::type traversal_category;
# 484 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
typedef experimental::iterator_facade< zip_iterator< IteratorTuple> , typename tuple_of_references< IteratorTuple> ::type *, typename tuple_of_value_types< IteratorTuple> ::type, typename minimum_space_in_iterator_tuple< IteratorTuple> ::type, typename minimum_traversal_category_in_iterator_tuple< IteratorTuple> ::type, typename tuple_of_references< IteratorTuple> ::type, typename iterator_traits< typename tuple_element< 0, IteratorTuple> ::type> ::difference_type> type;
# 485 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
};
# 487 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
}
# 489 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator_base.h"
}
# 34 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
namespace thrust {
# 134 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
template<class IteratorTuple>
# 135 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
class zip_iterator : public detail::zip_iterator_base< IteratorTuple> ::type {
# 142 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
public: inline zip_iterator();
# 150 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
inline zip_iterator(IteratorTuple);
# 159 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
inline const IteratorTuple &get_iterator_tuple() const;
# 165 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
private: typedef typename detail::zip_iterator_base< IteratorTuple> ::type super_t;
# 167 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
friend class experimental::iterator_core_access;
# 172 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
inline typename detail::zip_iterator_base< IteratorTuple> ::type::reference dereference() const;
# 176 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
template<class OtherIteratorTuple> inline bool equal(const thrust::zip_iterator< OtherIteratorTuple> &) const;
# 182 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
inline void advance(typename detail::zip_iterator_base< IteratorTuple> ::type::difference_type);
# 186 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
inline void increment();
# 190 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
inline void decrement();
# 193 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
template<class OtherIteratorTuple> inline typename detail::zip_iterator_base< IteratorTuple> ::type::difference_type distance_to(const thrust::zip_iterator< OtherIteratorTuple> &) const;
# 199 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
IteratorTuple m_iterator_tuple;
# 203 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
};
# 213 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
template<class IteratorTuple> zip_iterator< IteratorTuple> make_zip_iterator(IteratorTuple);
# 223 "/home/normal/checkout/thrust/thrust/iterator/zip_iterator.h"
}
# 22 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
template<class IteratorTuple> inline
# 28 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
zip_iterator< IteratorTuple> ::zip_iterator()
# 29 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
{
# 30 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
}
# 33 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
template<class IteratorTuple> inline
# 35 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
zip_iterator< IteratorTuple> ::zip_iterator(IteratorTuple iterator_tuple) : m_iterator_tuple(iterator_tuple)
# 37 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
{
# 38 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
}
# 41 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
template<class IteratorTuple> inline const IteratorTuple &
# 43 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
zip_iterator< IteratorTuple> ::get_iterator_tuple() const
# 44 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
{
# 45 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
return m_iterator_tuple;
# 46 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
}
# 49 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
template<class IteratorTuple> inline typename detail::zip_iterator_base< IteratorTuple> ::type::reference
# 52 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
zip_iterator< IteratorTuple> ::dereference() const
# 53 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
{
# 54 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
using namespace detail::tuple_impl_specific;
# 56 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
return detail::tuple_transform(this->get_iterator_tuple(), detail::dereference_iterator());
# 57 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
}
# 60 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
template<class IteratorTuple>
# 61 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
template<class OtherIteratorTuple> inline bool
# 63 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
zip_iterator< IteratorTuple> ::equal(const thrust::zip_iterator< OtherIteratorTuple> &other) const
# 64 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
{
# 65 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
return this->get_iterator_tuple() == (other.thrust::zip_iterator< OtherIteratorTuple> ::get_iterator_tuple());
# 66 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
}
# 69 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
template<class IteratorTuple> inline void
# 71 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
zip_iterator< IteratorTuple> ::advance(typename detail::zip_iterator_base< IteratorTuple> ::type::difference_type n)
# 72 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
{
# 73 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
using namespace detail::tuple_impl_specific;
# 75 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
tuple_for_each(m_iterator_tuple, ((detail::advance_iterator< typename detail::zip_iterator_base< IteratorTuple> ::type::difference_type> )(n)));
# 76 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
}
# 79 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
template<class IteratorTuple> inline void
# 81 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
zip_iterator< IteratorTuple> ::increment()
# 82 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
{
# 83 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
using namespace detail::tuple_impl_specific;
# 85 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
tuple_for_each(m_iterator_tuple, detail::increment_iterator());
# 86 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
}
# 89 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
template<class IteratorTuple> inline void
# 91 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
zip_iterator< IteratorTuple> ::decrement()
# 92 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
{
# 93 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
using namespace detail::tuple_impl_specific;
# 95 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
tuple_for_each(m_iterator_tuple, detail::decrement_iterator());
# 96 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
}
# 99 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
template<class IteratorTuple>
# 100 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
template<class OtherIteratorTuple> inline typename detail::zip_iterator_base< IteratorTuple> ::type::difference_type
# 103 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
zip_iterator< IteratorTuple> ::distance_to(const thrust::zip_iterator< OtherIteratorTuple> &other) const
# 104 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
{
# 105 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
return get< 0> ((other.thrust::zip_iterator< OtherIteratorTuple> ::get_iterator_tuple())) - get< 0> (this->get_iterator_tuple());
# 106 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
}
# 109 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
template<class IteratorTuple> zip_iterator< IteratorTuple>
# 110 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
make_zip_iterator(IteratorTuple t)
# 111 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
{
# 112 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
return ((zip_iterator< IteratorTuple> )(t));
# 113 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
}
# 116 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
namespace detail {
# 119 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
namespace device {
# 123 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
template<class DeviceIteratorTuple>
# 124 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
struct dereference_result< zip_iterator< DeviceIteratorTuple> > {
# 129 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
typedef typename tuple_of_dereference_result< DeviceIteratorTuple> ::type type;
# 130 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
};
# 133 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
template<class IteratorTuple> inline typename dereference_result< zip_iterator< IteratorTuple> > ::type
# 136 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
dereference(const zip_iterator< IteratorTuple> &iter)
# 137 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
{
# 138 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
using namespace tuple_impl_specific;
# 140 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
return thrust::detail::tuple_transform((iter.zip_iterator< IteratorTuple> ::get_iterator_tuple()), device_dereference_iterator());
# 141 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
}
# 144 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
template<class IteratorTuple, class IndexType> inline typename dereference_result< zip_iterator< IteratorTuple> > ::type
# 147 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
dereference(const zip_iterator< IteratorTuple> &iter, IndexType
# 148 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
n)
# 149 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
{
# 150 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
using namespace tuple_impl_specific;
# 152 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
device_dereference_iterator_with_index< IndexType> f;
# 153 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
(f.device_dereference_iterator_with_index< IndexType> ::n) = n;
# 155 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
return thrust::detail::tuple_transform((iter.zip_iterator< IteratorTuple> ::get_iterator_tuple()), f);
# 156 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
}
# 159 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
}
# 161 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
}
# 163 "/home/normal/checkout/thrust/thrust/iterator/detail/zip_iterator.inl"
}
# 29 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
namespace thrust {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
namespace device {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
template<class InputIterator, class UnaryFunction> void for_each(InputIterator, InputIterator, UnaryFunction);
# 39 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
namespace generic {
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
namespace detail {
# 44 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
template<class UnaryFunction>
# 45 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
struct unary_transform_functor {
# 47 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
UnaryFunction f;
# 49 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
unary_transform_functor(UnaryFunction f_) : f(f_)
# 51 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
{ }
# 53 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
template<class Tuple> void
# 55 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
operator()(Tuple t)
# 56 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
{
# 57 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
thrust::get< 1> (t) = (f)(thrust::get< 0> (t));
# 58 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
};
# 62 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
template<class BinaryFunction>
# 63 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
struct binary_transform_functor {
# 65 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
BinaryFunction f;
# 67 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
binary_transform_functor(BinaryFunction f_) : f(f_)
# 69 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
{ }
# 71 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
template<class Tuple> void
# 73 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
operator()(Tuple t)
# 74 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
{
# 75 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
thrust::get< 2> (t) = (f)(thrust::get< 0> (t), thrust::get< 1> (t));
# 76 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
}
# 77 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
};
# 80 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
template<class UnaryFunction, class Predicate>
# 81 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
struct unary_transform_if_functor {
# 83 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
UnaryFunction unary_op;
# 84 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
Predicate pred;
# 86 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
unary_transform_if_functor(UnaryFunction _unary_op, Predicate _pred) : unary_op(_unary_op), pred(_pred)
# 87 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
{ }
# 89 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
template<class Tuple> void
# 91 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
operator()(Tuple t)
# 92 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
{
# 93 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
if ((pred)(thrust::get< 1> (t))) {
# 94 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
thrust::get< 2> (t) = (unary_op)(thrust::get< 0> (t)); }
# 95 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
}
# 96 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
};
# 99 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
template<class BinaryFunction, class Predicate>
# 100 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
struct binary_transform_if_functor {
# 102 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
BinaryFunction binary_op;
# 103 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
Predicate pred;
# 105 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
binary_transform_if_functor(BinaryFunction _binary_op, Predicate _pred) : binary_op(_binary_op), pred(_pred)
# 106 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
{ }
# 108 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
template<class Tuple> void
# 110 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
operator()(Tuple t)
# 111 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
{
# 112 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
if ((pred)(thrust::get< 2> (t))) {
# 113 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
thrust::get< 3> (t) = (binary_op)(thrust::get< 0> (t), thrust::get< 1> (t)); }
# 114 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
}
# 115 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
};
# 117 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
}
# 120 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
template<class InputIterator, class
# 121 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
OutputIterator, class
# 122 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
UnaryFunction> OutputIterator
# 123 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
transform(InputIterator first, InputIterator last, OutputIterator
# 124 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
result, UnaryFunction
# 125 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
unary_op)
# 126 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
{
# 127 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
detail::unary_transform_functor< UnaryFunction> func(unary_op);
# 129 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
device::for_each(thrust::make_zip_iterator(thrust::make_tuple(first, result)), thrust::make_zip_iterator(thrust::make_tuple(first, result)) + thrust::distance(first, last), func);
# 133 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
return result + (last - first);
# 134 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
}
# 137 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
template<class InputIterator1, class
# 138 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
InputIterator2, class
# 139 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
OutputIterator, class
# 140 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
BinaryFunction> OutputIterator
# 141 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
transform(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 142 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
first2, OutputIterator
# 143 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
result, BinaryFunction
# 144 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
binary_op)
# 145 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
{
# 146 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
detail::binary_transform_functor< BinaryFunction> func(binary_op);
# 148 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
device::for_each(thrust::make_zip_iterator(thrust::make_tuple(first1, first2, result)), thrust::make_zip_iterator(thrust::make_tuple(first1, first2, result)) + thrust::distance(first1, last1), func);
# 152 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
return result + (last1 - first1);
# 153 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
}
# 156 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
template<class InputIterator1, class
# 157 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
InputIterator2, class
# 158 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
ForwardIterator, class
# 159 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
UnaryFunction, class
# 160 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
Predicate> ForwardIterator
# 161 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
transform_if(InputIterator1 first, InputIterator1 last, InputIterator2
# 162 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
stencil, ForwardIterator
# 163 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
result, UnaryFunction
# 164 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
unary_op, Predicate
# 165 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
pred)
# 166 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
{
# 167 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
detail::unary_transform_if_functor< UnaryFunction, Predicate> func(unary_op, pred);
# 169 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
device::for_each(thrust::make_zip_iterator(thrust::make_tuple(first, stencil, result)), thrust::make_zip_iterator(thrust::make_tuple(first, stencil, result)) + thrust::distance(first, last), func);
# 173 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
return result + (last - first);
# 174 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
}
# 177 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
template<class InputIterator1, class
# 178 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
InputIterator2, class
# 179 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
InputIterator3, class
# 180 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
ForwardIterator, class
# 181 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
BinaryFunction, class
# 182 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
Predicate> ForwardIterator
# 183 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
transform_if(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 184 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
first2, InputIterator3
# 185 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
stencil, ForwardIterator
# 186 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
result, BinaryFunction
# 187 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
binary_op, Predicate
# 188 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
pred)
# 189 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
{
# 190 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
detail::binary_transform_if_functor< BinaryFunction, Predicate> func(binary_op, pred);
# 192 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
device::for_each(thrust::make_zip_iterator(thrust::make_tuple(first1, first2, stencil, result)), thrust::make_zip_iterator(thrust::make_tuple(first1, first2, stencil, result)) + thrust::distance(first1, last1), func);
# 196 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
return result + (last1 - first1);
# 197 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
}
# 199 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
}
# 200 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
}
# 201 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
}
# 202 "/home/normal/checkout/thrust/thrust/detail/device/generic/transform.inl"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
namespace detail {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
namespace device {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
template<class InputIterator, class
# 34 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
OutputIterator, class
# 35 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
UnaryFunction> OutputIterator
# 36 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
transform(InputIterator first, InputIterator last, OutputIterator
# 37 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
result, UnaryFunction
# 38 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
unary_op)
# 39 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
{
# 40 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
return generic::transform(first, last, result, unary_op);
# 41 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
}
# 43 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
template<class InputIterator1, class
# 44 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
InputIterator2, class
# 45 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
OutputIterator, class
# 46 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
BinaryFunction> OutputIterator
# 47 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
transform(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 48 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
first2, OutputIterator
# 49 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
result, BinaryFunction
# 50 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
binary_op)
# 51 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
{
# 52 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
return generic::transform(first1, last1, first2, result, binary_op);
# 53 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
}
# 56 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
template<class InputIterator1, class
# 57 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
InputIterator2, class
# 58 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
ForwardIterator, class
# 59 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
UnaryFunction, class
# 60 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
Predicate> ForwardIterator
# 61 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
transform_if(InputIterator1 first, InputIterator1 last, InputIterator2
# 62 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
stencil, ForwardIterator
# 63 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
result, UnaryFunction
# 64 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
unary_op, Predicate
# 65 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
pred)
# 66 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
{
# 67 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
return generic::transform_if(first, last, stencil, result, unary_op, pred);
# 68 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
}
# 71 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
template<class InputIterator1, class
# 72 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
InputIterator2, class
# 73 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
InputIterator3, class
# 74 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
ForwardIterator, class
# 75 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
BinaryFunction, class
# 76 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
Predicate> ForwardIterator
# 77 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
transform_if(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 78 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
first2, InputIterator3
# 79 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
stencil, ForwardIterator
# 80 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
result, BinaryFunction
# 81 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
binary_op, Predicate
# 82 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
pred)
# 83 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
{
# 84 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
return generic::transform_if(first1, last1, first2, stencil, result, binary_op, pred);
# 85 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
}
# 87 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
}
# 88 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
}
# 89 "/home/normal/checkout/thrust/thrust/detail/device/transform.h"
}
# 29 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
namespace thrust {
# 32 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
namespace detail {
# 35 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
namespace dispatch {
# 42 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
template<class InputIterator, class
# 43 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
OutputIterator, class
# 44 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
UnaryFunction> OutputIterator
# 45 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
transform(InputIterator first, InputIterator last, OutputIterator
# 46 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
result, UnaryFunction
# 47 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
unary_op, host_space_tag, host_space_tag)
# 50 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
{
# 51 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
return host::transform(first, last, result, unary_op);
# 52 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
}
# 55 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
template<class InputIterator1, class
# 56 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
InputIterator2, class
# 57 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
OutputIterator, class
# 58 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
BinaryFunction> OutputIterator
# 59 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
transform(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 60 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
first2, OutputIterator
# 61 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
result, BinaryFunction
# 62 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
binary_op, host_space_tag, host_space_tag, host_space_tag)
# 66 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
{
# 67 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
return host::transform(first1, last1, first2, result, binary_op);
# 68 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
}
# 71 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
template<class InputIterator1, class
# 72 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
InputIterator2, class
# 73 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
ForwardIterator, class
# 74 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
UnaryFunction, class
# 75 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
Predicate> ForwardIterator
# 76 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
transform_if(InputIterator1 first, InputIterator1 last, InputIterator2
# 77 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
stencil, ForwardIterator
# 78 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
result, UnaryFunction
# 79 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
unary_op, Predicate
# 80 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
pred, host_space_tag, host_space_tag, host_space_tag)
# 84 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
{
# 85 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
return host::transform_if(first, last, stencil, result, unary_op, pred);
# 86 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
}
# 89 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
template<class InputIterator1, class
# 90 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
InputIterator2, class
# 91 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
InputIterator3, class
# 92 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
ForwardIterator, class
# 93 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
UnaryFunction, class
# 94 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
Predicate> ForwardIterator
# 95 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
transform_if(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 96 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
first2, InputIterator3
# 97 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
stencil, ForwardIterator
# 98 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
result, UnaryFunction
# 99 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
unary_op, Predicate
# 100 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
pred, host_space_tag, host_space_tag, host_space_tag, host_space_tag)
# 105 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
{
# 106 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
return host::transform_if(first1, last1, first2, stencil, result, unary_op, pred);
# 107 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
}
# 114 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
template<class InputIterator, class
# 115 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
OutputIterator, class
# 116 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
UnaryFunction> OutputIterator
# 117 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
transform(InputIterator first, InputIterator last, OutputIterator
# 118 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
result, UnaryFunction
# 119 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
unary_op, device_space_tag, device_space_tag)
# 122 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
{
# 123 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
return device::transform(first, last, result, unary_op);
# 124 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
}
# 127 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
template<class InputIterator1, class
# 128 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
InputIterator2, class
# 129 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
OutputIterator, class
# 130 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
BinaryFunction> OutputIterator
# 131 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
transform(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 132 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
first2, OutputIterator
# 133 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
result, BinaryFunction
# 134 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
binary_op, device_space_tag, device_space_tag, device_space_tag)
# 138 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
{
# 139 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
return device::transform(first1, last1, first2, result, binary_op);
# 140 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
}
# 143 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
template<class InputIterator1, class
# 144 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
InputIterator2, class
# 145 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
ForwardIterator, class
# 146 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
UnaryFunction, class
# 147 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
Predicate> ForwardIterator
# 148 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
transform_if(InputIterator1 first, InputIterator1 last, InputIterator2
# 149 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
stencil, ForwardIterator
# 150 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
result, UnaryFunction
# 151 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
unary_op, Predicate
# 152 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
pred, device_space_tag, device_space_tag, device_space_tag)
# 156 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
{
# 157 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
return device::transform_if(first, last, stencil, result, unary_op, pred);
# 158 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
}
# 161 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
template<class InputIterator1, class
# 162 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
InputIterator2, class
# 163 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
InputIterator3, class
# 164 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
ForwardIterator, class
# 165 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
BinaryFunction, class
# 166 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
Predicate> ForwardIterator
# 167 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
transform_if(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 168 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
first2, InputIterator3
# 169 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
stencil, ForwardIterator
# 170 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
result, BinaryFunction
# 171 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
binary_op, Predicate
# 172 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
pred, device_space_tag, device_space_tag, device_space_tag, device_space_tag)
# 177 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
{
# 178 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
return device::transform_if(first1, last1, first2, stencil, result, binary_op, pred);
# 179 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
}
# 181 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
}
# 183 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
}
# 185 "/home/normal/checkout/thrust/thrust/detail/dispatch/transform.h"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
template<class InputIterator, class
# 30 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
OutputIterator, class
# 31 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
UnaryFunction> OutputIterator
# 32 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
transform(InputIterator first, InputIterator last, OutputIterator
# 33 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
result, UnaryFunction
# 34 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
op)
# 35 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
{
# 37 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
return detail::dispatch::transform(first, last, result, op, typename iterator_space< InputIterator> ::type(), typename iterator_space< OutputIterator> ::type());
# 40 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
}
# 43 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
template<class InputIterator1, class
# 44 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
InputIterator2, class
# 45 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
OutputIterator, class
# 46 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
BinaryFunction> OutputIterator
# 47 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
transform(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 48 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
first2, OutputIterator
# 49 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
result, BinaryFunction
# 50 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
op)
# 51 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
{
# 53 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
return detail::dispatch::transform(first1, last1, first2, result, op, typename iterator_space< InputIterator1> ::type(), typename iterator_space< InputIterator2> ::type(), typename iterator_space< OutputIterator> ::type());
# 57 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
}
# 60 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
template<class InputIterator1, class
# 61 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
InputIterator2, class
# 62 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
ForwardIterator, class
# 63 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
UnaryFunction, class
# 64 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
Predicate> ForwardIterator
# 65 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
transform_if(InputIterator1 first, InputIterator1 last, InputIterator2
# 66 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
stencil, ForwardIterator
# 67 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
result, UnaryFunction
# 68 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
unary_op, Predicate
# 69 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
pred)
# 70 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
{
# 72 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
return detail::dispatch::transform_if(first, last, stencil, result, unary_op, pred, typename iterator_space< InputIterator1> ::type(), typename iterator_space< InputIterator2> ::type(), typename iterator_space< ForwardIterator> ::type());
# 76 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
}
# 78 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
template<class InputIterator1, class
# 79 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
InputIterator2, class
# 80 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
InputIterator3, class
# 81 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
ForwardIterator, class
# 82 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
BinaryFunction, class
# 83 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
Predicate> ForwardIterator
# 84 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
transform_if(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 85 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
first2, InputIterator3
# 86 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
stencil, ForwardIterator
# 87 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
result, BinaryFunction
# 88 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
binary_op, Predicate
# 89 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
pred)
# 90 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
{
# 92 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
return detail::dispatch::transform_if(first1, last1, first2, stencil, result, binary_op, pred, typename iterator_space< InputIterator1> ::type(), typename iterator_space< InputIterator2> ::type(), typename iterator_space< InputIterator3> ::type(), typename iterator_space< ForwardIterator> ::type());
# 97 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
}
# 99 "/home/normal/checkout/thrust/thrust/detail/transform.inl"
}
# 34 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
namespace thrust {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
namespace detail {
# 40 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
namespace device {
# 44 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
template<class InputIterator, class
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
OutputIterator, class
# 46 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
UnaryFunction> OutputIterator
# 44 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
transform(InputIterator, InputIterator, OutputIterator, UnaryFunction);
# 49 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
namespace cuda {
# 52 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
namespace detail {
# 55 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
template<class InputIterator, class
# 56 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
OutputIterator> OutputIterator
# 57 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
copy_device_to_device(InputIterator begin, InputIterator
# 58 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
end, OutputIterator
# 59 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
result, false_type)
# 61 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
{
# 63 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
typedef typename iterator_traits< InputIterator> ::value_type InputType;
# 66 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
return device::transform(begin, end, result, identity< typename iterator_traits< InputIterator> ::value_type> ());
# 82 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
}
# 85 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
template<class InputIterator, class
# 86 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
OutputIterator> OutputIterator
# 87 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
copy_device_to_device(InputIterator begin, InputIterator
# 88 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
end, OutputIterator
# 89 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
result, true_type)
# 91 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
{
# 96 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
typename iterator_traits< OutputIterator> ::difference_type n = (end - begin);
# 98 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
cuda::trivial_copy_n(begin, n, result);
# 100 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
return result + n;
# 101 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
}
# 103 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
}
# 109 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
template<class InputIterator, class
# 110 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
OutputIterator> OutputIterator
# 111 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
copy_device_to_device(InputIterator begin, InputIterator
# 112 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
end, OutputIterator
# 113 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
result)
# 114 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
{
# 115 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
typedef typename iterator_traits< InputIterator> ::value_type InputType;
# 116 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
typedef typename iterator_traits< OutputIterator> ::value_type OutputType;
# 118 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
const bool use_trivial_copy = ((is_same< typename iterator_traits< InputIterator> ::value_type, typename iterator_traits< OutputIterator> ::value_type> ::value && is_trivial_iterator< InputIterator> ::value) && is_trivial_iterator< OutputIterator> ::value);
# 124 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
(void)use_trivial_copy;
# 126 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
return detail::copy_device_to_device(begin, end, result, integral_constant< bool, ((is_same< typename iterator_traits< InputIterator> ::value_type, typename iterator_traits< OutputIterator> ::value_type> ::value && is_trivial_iterator< InputIterator> ::value) && is_trivial_iterator< OutputIterator> ::value)> ());
# 129 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
}
# 131 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
}
# 133 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
}
# 135 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
}
# 137 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy_device_to_device.h"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
namespace detail {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
namespace device {
# 35 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
namespace cuda {
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
namespace dispatch {
# 46 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
template<class InputIterator, class
# 47 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
OutputIterator> OutputIterator
# 48 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
copy(InputIterator begin, InputIterator
# 49 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
end, OutputIterator
# 50 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
result, cuda_device_space_tag)
# 52 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
{
# 53 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
return cuda::copy_device_to_device(begin, end, result);
# 54 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
}
# 61 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
template<class InputIterator, class
# 62 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
OutputIterator> OutputIterator
# 63 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
copy(InputIterator begin, InputIterator
# 64 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
end, OutputIterator
# 65 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
result, any_space_tag)
# 67 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
{
# 68 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
return cuda::copy_device_to_device(begin, end, result);
# 69 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
}
# 76 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
template<class InputIterator, class
# 77 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
OutputIterator> OutputIterator
# 78 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
copy(InputIterator first, InputIterator
# 79 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
last, OutputIterator
# 80 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
result, false_type
# 81 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
cross_space_copy)
# 82 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
{
# 83 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
return cuda::copy_cross_space(first, last, result);
# 84 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
}
# 91 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
template<class InputIterator, class
# 92 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
OutputIterator> OutputIterator
# 93 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
copy(InputIterator first, InputIterator
# 94 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
last, OutputIterator
# 95 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
result, true_type
# 96 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
cross_space_copy)
# 97 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
{
# 98 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
typedef typename iterator_space< InputIterator> ::type space1;
# 99 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
typedef typename iterator_space< OutputIterator> ::type space2;
# 102 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
typedef typename thrust::detail::minimum_space< typename iterator_space< InputIterator> ::type, typename iterator_space< OutputIterator> ::type> ::type minimum_space;
# 104 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
return copy(first, last, result, minimum_space());
# 105 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
}
# 109 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
template<class InputIterator, class
# 110 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
OutputIterator, class
# 111 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
Space1, class
# 112 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
Space2> OutputIterator
# 113 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
copy(InputIterator first, InputIterator
# 114 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
last, OutputIterator
# 115 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
result, Space1, Space2)
# 118 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
{
# 119 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
return copy(first, last, result, typename is_one_convertible_to_the_other< Space1, Space2> ::type());
# 121 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
}
# 123 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
}
# 125 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
}
# 127 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
}
# 129 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
}
# 131 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/copy.h"
}
# 23 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
namespace detail {
# 29 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
namespace device {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
namespace cuda {
# 35 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
template<class InputIterator, class
# 36 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
OutputIterator> OutputIterator
# 37 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
copy(InputIterator begin, InputIterator
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
end, OutputIterator
# 39 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
result)
# 40 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
{
# 41 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
return dispatch::copy(begin, end, result, typename iterator_space< InputIterator> ::type(), typename iterator_space< OutputIterator> ::type());
# 44 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
}
# 46 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
}
# 48 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
}
# 50 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
}
# 52 "/home/normal/checkout/thrust/thrust/detail/device/cuda/copy.h"
}
# 23 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
namespace thrust {
# 25 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
namespace detail {
# 27 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
namespace device {
# 29 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
namespace dispatch {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
template<class InputIterator, class
# 38 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
OutputIterator> OutputIterator
# 39 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
copy(InputIterator first, InputIterator
# 40 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
last, OutputIterator
# 41 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
result, false_type)
# 43 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
{
# 44 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
return omp::copy(first, last, result);
# 45 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
}
# 49 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
template<class InputIterator, class
# 50 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
OutputIterator> OutputIterator
# 51 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
copy(InputIterator first, InputIterator
# 52 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
last, OutputIterator
# 53 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
result, true_type)
# 55 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
{
# 56 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
return cuda::copy(first, last, result);
# 57 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
}
# 61 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
template<class InputIterator, class
# 62 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
OutputIterator, class
# 63 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
Space1, class
# 64 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
Space2> OutputIterator
# 65 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
copy(InputIterator first, InputIterator
# 66 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
last, OutputIterator
# 67 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
result, Space1, Space2)
# 70 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
{
# 75 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
typedef integral_constant< bool, (is_convertible< Space1, cuda_device_space_tag> ::value || is_convertible< Space2, cuda_device_space_tag> ::value)> is_one_of_the_spaces_cuda;
# 77 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
return copy(first, last, result, is_one_of_the_spaces_cuda());
# 79 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
}
# 81 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
}
# 82 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
}
# 83 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
}
# 84 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/copy.h"
}
# 19 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.h"
namespace thrust {
# 21 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.h"
namespace detail {
# 23 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.h"
namespace device {
# 25 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.h"
namespace generic {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.h"
template<class InputIterator1, class
# 29 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.h"
InputIterator2, class
# 30 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.h"
OutputIterator, class
# 31 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.h"
Predicate> OutputIterator
# 28 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.h"
copy_if(InputIterator1, InputIterator1, InputIterator2, OutputIterator, Predicate);
# 38 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.h"
}
# 39 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.h"
}
# 40 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.h"
}
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.h"
}
# 26 "/home/normal/checkout/thrust/thrust/transform_scan.h"
namespace thrust {
# 90 "/home/normal/checkout/thrust/thrust/transform_scan.h"
template<class InputIterator, class
# 91 "/home/normal/checkout/thrust/thrust/transform_scan.h"
OutputIterator, class
# 92 "/home/normal/checkout/thrust/thrust/transform_scan.h"
UnaryFunction, class
# 93 "/home/normal/checkout/thrust/thrust/transform_scan.h"
AssociativeOperator> OutputIterator
# 90 "/home/normal/checkout/thrust/thrust/transform_scan.h"
transform_inclusive_scan(InputIterator, InputIterator, OutputIterator, UnaryFunction, AssociativeOperator);
# 150 "/home/normal/checkout/thrust/thrust/transform_scan.h"
template<class InputIterator, class
# 151 "/home/normal/checkout/thrust/thrust/transform_scan.h"
OutputIterator, class
# 152 "/home/normal/checkout/thrust/thrust/transform_scan.h"
UnaryFunction, class
# 153 "/home/normal/checkout/thrust/thrust/transform_scan.h"
T, class
# 154 "/home/normal/checkout/thrust/thrust/transform_scan.h"
AssociativeOperator> OutputIterator
# 150 "/home/normal/checkout/thrust/thrust/transform_scan.h"
transform_exclusive_scan(InputIterator, InputIterator, OutputIterator, UnaryFunction, T, AssociativeOperator);
# 168 "/home/normal/checkout/thrust/thrust/transform_scan.h"
}
# 26 "/home/normal/checkout/thrust/thrust/scan.h"
namespace thrust {
# 80 "/home/normal/checkout/thrust/thrust/scan.h"
template<class InputIterator, class
# 81 "/home/normal/checkout/thrust/thrust/scan.h"
OutputIterator> OutputIterator
# 80 "/home/normal/checkout/thrust/thrust/scan.h"
inclusive_scan(InputIterator, InputIterator, OutputIterator);
# 127 "/home/normal/checkout/thrust/thrust/scan.h"
template<class InputIterator, class
# 128 "/home/normal/checkout/thrust/thrust/scan.h"
OutputIterator, class
# 129 "/home/normal/checkout/thrust/thrust/scan.h"
AssociativeOperator> OutputIterator
# 127 "/home/normal/checkout/thrust/thrust/scan.h"
inclusive_scan(InputIterator, InputIterator, OutputIterator, AssociativeOperator);
# 172 "/home/normal/checkout/thrust/thrust/scan.h"
template<class InputIterator, class
# 173 "/home/normal/checkout/thrust/thrust/scan.h"
OutputIterator> OutputIterator
# 172 "/home/normal/checkout/thrust/thrust/scan.h"
exclusive_scan(InputIterator, InputIterator, OutputIterator);
# 216 "/home/normal/checkout/thrust/thrust/scan.h"
template<class InputIterator, class
# 217 "/home/normal/checkout/thrust/thrust/scan.h"
OutputIterator, class
# 218 "/home/normal/checkout/thrust/thrust/scan.h"
T> OutputIterator
# 216 "/home/normal/checkout/thrust/thrust/scan.h"
exclusive_scan(InputIterator, InputIterator, OutputIterator, const T);
# 269 "/home/normal/checkout/thrust/thrust/scan.h"
template<class InputIterator, class
# 270 "/home/normal/checkout/thrust/thrust/scan.h"
OutputIterator, class
# 271 "/home/normal/checkout/thrust/thrust/scan.h"
T, class
# 272 "/home/normal/checkout/thrust/thrust/scan.h"
AssociativeOperator> OutputIterator
# 269 "/home/normal/checkout/thrust/thrust/scan.h"
exclusive_scan(InputIterator, InputIterator, OutputIterator, const T, AssociativeOperator);
# 282 "/home/normal/checkout/thrust/thrust/scan.h"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
namespace detail {
# 32 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
namespace host {
# 35 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
template<class InputIterator, class
# 36 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
OutputIterator, class
# 37 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
AssociativeOperator> OutputIterator
# 38 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
inclusive_scan(InputIterator first, InputIterator
# 39 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
last, OutputIterator
# 40 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
result, AssociativeOperator
# 41 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
binary_op)
# 42 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
{
# 43 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
typedef typename iterator_traits< OutputIterator> ::value_type OutputType;
# 45 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
if (first != last)
# 46 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
{
# 47 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
OutputType sum = (*first);
# 49 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
(*result) = sum;
# 51 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
for ((++first), (++result); first != last; (++first), (++result)) {
# 52 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
(*result) = (sum = binary_op(sum, *first)); }
# 53 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
}
# 55 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
return result;
# 56 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
template<class InputIterator, class
# 60 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
OutputIterator, class
# 61 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
T, class
# 62 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
AssociativeOperator> OutputIterator
# 63 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
exclusive_scan(InputIterator first, InputIterator
# 64 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
last, OutputIterator
# 65 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
result, T
# 66 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
init, AssociativeOperator
# 67 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
binary_op)
# 68 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
{
# 69 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
typedef typename iterator_traits< OutputIterator> ::value_type OutputType;
# 71 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
if (first != last)
# 72 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
{
# 73 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
OutputType tmp = (*first);
# 74 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
OutputType sum = (init);
# 76 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
(*result) = sum;
# 77 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
sum = binary_op(sum, tmp);
# 79 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
for ((++first), (++result); first != last; (++first), (++result))
# 80 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
{
# 81 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
tmp = (*first);
# 82 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
(*result) = sum;
# 83 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
sum = binary_op(sum, tmp);
# 84 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
}
# 85 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
}
# 87 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
return result;
# 88 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
}
# 90 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
}
# 92 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
}
# 94 "/home/normal/checkout/thrust/thrust/detail/host/scan.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
namespace device {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
namespace cuda {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
template<class InputIterator, class
# 34 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
OutputIterator, class
# 35 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
AssociativeOperator> OutputIterator
# 33 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
inclusive_scan(InputIterator, InputIterator, OutputIterator, AssociativeOperator);
# 41 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
template<class InputIterator, class
# 42 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
OutputIterator, class
# 43 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
T, class
# 44 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
AssociativeOperator> OutputIterator
# 41 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
exclusive_scan(InputIterator, InputIterator, OutputIterator, T, AssociativeOperator);
# 51 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
}
# 52 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
}
# 53 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
}
# 54 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
namespace device {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
namespace cuda {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
namespace detail {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
namespace fast_scan {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
template<class InputIterator, class
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
OutputIterator, class
# 39 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
BinaryFunction> OutputIterator
# 37 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
inclusive_scan(InputIterator, InputIterator, OutputIterator, BinaryFunction);
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
template<class InputIterator, class
# 46 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
OutputIterator, class
# 47 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
T, class
# 48 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
BinaryFunction> OutputIterator
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
exclusive_scan(InputIterator, InputIterator, OutputIterator, const T, BinaryFunction);
# 55 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
}
# 56 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
}
# 57 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
}
# 58 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
}
# 60 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.h"
}
# 40 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
namespace thrust {
# 42 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
namespace detail {
# 46 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
template<class > class raw_cuda_device_buffer;
# 48 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
namespace device {
# 50 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
namespace cuda {
# 52 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
namespace detail {
# 54 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
namespace fast_scan {
# 57 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
template<unsigned CTA_SIZE, class
# 58 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
SharedArray, class
# 59 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
T, class
# 60 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
BinaryFunction> static T
# 62 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
scan_block(SharedArray array, T val, BinaryFunction binary_op)
# 63 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
{volatile int ___ = 1;
# 80 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
exit(___);}
# 82 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
template<unsigned CTA_SIZE, class
# 83 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
SharedArray, class
# 84 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
T, class
# 85 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
BinaryFunction> static void
# 87 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
scan_block_n(SharedArray array, const unsigned n, T val, BinaryFunction binary_op)
# 88 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
{volatile int ___ = 1;
# 103 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
exit(___);}
# 105 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
template<unsigned CTA_SIZE, unsigned
# 106 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
K, class
# 107 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
InputIterator, class
# 108 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
OutputIterator, class
# 109 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
BinaryFunction> static void
# 111 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
__wrapper__device_stub_scan_intervals(InputIterator &input, const unsigned &
# 112 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
N, const unsigned &
# 113 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
interval_size, OutputIterator &
# 114 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
output, typename iterator_value< OutputIterator> ::type *&
# 115 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
block_results, BinaryFunction &
# 116 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
binary_op);
# 105 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
template<unsigned CTA_SIZE, unsigned
# 106 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
K, class
# 107 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
InputIterator, class
# 108 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
OutputIterator, class
# 109 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
BinaryFunction> void
# 111 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
scan_intervals(InputIterator input, const unsigned
# 112 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
N, const unsigned
# 113 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
interval_size, OutputIterator
# 114 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
output, typename iterator_value< OutputIterator> ::type *
# 115 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
block_results, BinaryFunction
# 116 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
binary_op)
# 117 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
{__wrapper__device_stub_scan_intervals<CTA_SIZE,K,InputIterator,OutputIterator,BinaryFunction>(input,N,interval_size,output,block_results,binary_op);
# 262 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
}
# 265 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
template<unsigned CTA_SIZE, class
# 266 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
OutputIterator, class
# 267 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
OutputType, class
# 268 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
BinaryFunction> static void
# 270 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
__wrapper__device_stub_inclusive_update(OutputIterator &output, const unsigned &
# 271 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
N, const unsigned &
# 272 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
interval_size, OutputType *&
# 273 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
block_results, BinaryFunction &
# 274 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
binary_op);
# 265 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
template<unsigned CTA_SIZE, class
# 266 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
OutputIterator, class
# 267 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
OutputType, class
# 268 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
BinaryFunction> void
# 270 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
inclusive_update(OutputIterator output, const unsigned
# 271 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
N, const unsigned
# 272 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
interval_size, OutputType *
# 273 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
block_results, BinaryFunction
# 274 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
binary_op)
# 275 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
{__wrapper__device_stub_inclusive_update<CTA_SIZE,OutputIterator,OutputType,BinaryFunction>(output,N,interval_size,block_results,binary_op);
# 300 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
}
# 302 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
template<unsigned CTA_SIZE, class
# 303 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
OutputIterator, class
# 304 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
OutputType, class
# 305 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
BinaryFunction> static void
# 307 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
__wrapper__device_stub_exclusive_update(OutputIterator &output, const unsigned &
# 308 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
N, const unsigned &
# 309 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
interval_size, OutputType *&
# 310 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
block_results, OutputType &
# 311 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
init, BinaryFunction &
# 312 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
binary_op);
# 302 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
template<unsigned CTA_SIZE, class
# 303 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
OutputIterator, class
# 304 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
OutputType, class
# 305 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
BinaryFunction> void
# 307 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
exclusive_update(OutputIterator output, const unsigned
# 308 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
N, const unsigned
# 309 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
interval_size, OutputType *
# 310 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
block_results, OutputType
# 311 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
init, BinaryFunction
# 312 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
binary_op)
# 313 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
{__wrapper__device_stub_exclusive_update<CTA_SIZE,OutputIterator,OutputType,BinaryFunction>(output,N,interval_size,block_results,init,binary_op);
# 355 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
}
# 358 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
template<class InputIterator, class
# 359 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
OutputIterator, class
# 360 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
BinaryFunction> OutputIterator
# 361 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
inclusive_scan(InputIterator first, InputIterator
# 362 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
last, OutputIterator
# 363 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
output, BinaryFunction
# 364 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
binary_op)
# 365 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
{
# 366 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
if (first == last) {
# 367 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
return output; }
# 370 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned CTA_SIZE = (128);
# 371 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned K = (6);
# 373 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
typedef typename iterator_value< OutputIterator> ::type OutputType;
# 375 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned N = (last - first);
# 377 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned unit_size = (CTA_SIZE * K);
# 378 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned num_units = thrust::detail::util::divide_ri(N, unit_size);
# 379 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned max_blocks = (experimental::arch::max_active_blocks(&scan_intervals< CTA_SIZE, K, InputIterator, OutputIterator, BinaryFunction> , CTA_SIZE, 0));
# 380 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned num_blocks = std::min(max_blocks, num_units);
# 381 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned num_iters = thrust::detail::util::divide_ri(num_units, num_blocks);
# 383 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned interval_size = (unit_size * num_iters);
# 392 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
raw_cuda_device_buffer< typename iterator_value< OutputIterator> ::type> block_results(num_blocks + (1));
# 395 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
cudaConfigureCall(num_blocks, CTA_SIZE) ? ((void)0) : (scan_intervals< CTA_SIZE, K> )(first, N, interval_size, output, thrust::raw_pointer_cast(&(block_results[0])), binary_op);
# 404 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
cudaConfigureCall(1, CTA_SIZE) ? ((void)0) : (scan_intervals< CTA_SIZE, K> )(thrust::raw_pointer_cast(&(block_results[0])), num_blocks, interval_size, thrust::raw_pointer_cast(&(block_results[0])), thrust::raw_pointer_cast(&(block_results[0])) + num_blocks, binary_op);
# 413 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
cudaConfigureCall(num_blocks, 256) ? ((void)0) : (inclusive_update< 256> )(output, N, interval_size, thrust::raw_pointer_cast(&(block_results[0])), binary_op);
# 420 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
return output + N;
# 421 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
}
# 424 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
template<class InputIterator, class
# 425 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
OutputIterator, class
# 426 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
T, class
# 427 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
BinaryFunction> OutputIterator
# 428 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
exclusive_scan(InputIterator first, InputIterator
# 429 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
last, OutputIterator
# 430 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
output, const T
# 431 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
init, BinaryFunction
# 432 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
binary_op)
# 433 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
{
# 434 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
if (first == last) {
# 435 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
return output; }
# 438 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned CTA_SIZE = (128);
# 439 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned K = (6);
# 441 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
typedef typename iterator_value< OutputIterator> ::type OutputType;
# 443 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned N = (last - first);
# 445 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned unit_size = (CTA_SIZE * K);
# 446 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned num_units = thrust::detail::util::divide_ri(N, unit_size);
# 447 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned max_blocks = (experimental::arch::max_active_blocks(&scan_intervals< CTA_SIZE, K, InputIterator, OutputIterator, BinaryFunction> , CTA_SIZE, 0));
# 448 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned num_blocks = std::min(max_blocks, num_units);
# 449 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned num_iters = thrust::detail::util::divide_ri(num_units, num_blocks);
# 451 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
const unsigned interval_size = (unit_size * num_iters);
# 460 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
raw_cuda_device_buffer< typename iterator_value< OutputIterator> ::type> block_results(num_blocks + (1));
# 463 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
cudaConfigureCall(num_blocks, CTA_SIZE) ? ((void)0) : (scan_intervals< CTA_SIZE, K> )(first, N, interval_size, output, thrust::raw_pointer_cast(&(block_results[0])), binary_op);
# 472 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
cudaConfigureCall(1, CTA_SIZE) ? ((void)0) : (scan_intervals< CTA_SIZE, K> )(thrust::raw_pointer_cast(&(block_results[0])), num_blocks, interval_size, thrust::raw_pointer_cast(&(block_results[0])), thrust::raw_pointer_cast(&(block_results[0])) + num_blocks, binary_op);
# 481 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
cudaConfigureCall(num_blocks, 256) ? ((void)0) : (exclusive_update< 256> )(output, N, interval_size, thrust::raw_pointer_cast(&(block_results[0])), ((OutputType)(init)), binary_op);
# 489 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
return output + N;
# 490 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
}
# 492 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
}
# 493 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
}
# 494 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
}
# 495 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
}
# 496 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
}
# 497 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/fast_scan.inl"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
namespace device {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
namespace cuda {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
namespace detail {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
namespace safe_scan {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
template<class InputIterator, class
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
OutputIterator, class
# 39 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
BinaryFunction> OutputIterator
# 37 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
inclusive_scan(InputIterator, InputIterator, OutputIterator, BinaryFunction);
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
template<class InputIterator, class
# 46 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
OutputIterator, class
# 47 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
T, class
# 48 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
BinaryFunction> OutputIterator
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
exclusive_scan(InputIterator, InputIterator, OutputIterator, const T, BinaryFunction);
# 55 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
}
# 56 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
}
# 57 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
}
# 58 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
}
# 60 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.h"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
namespace detail {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
namespace device {
# 35 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
namespace cuda {
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
template<class T>
# 39 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
class extern_shared_ptr {
# 43 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
public: operator T *()
# 44 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
{volatile int ___ = 1;
# 47 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
exit(___);}
# 50 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
operator const T *() const
# 51 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
{volatile int ___ = 1;
# 54 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
exit(___);}
# 55 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
};
# 57 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
}
# 61 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
}
# 63 "/home/normal/checkout/thrust/thrust/detail/device/cuda/extern_shared_ptr.h"
}
# 42 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
namespace thrust {
# 44 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
namespace detail {
# 48 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
template<class > class raw_cuda_device_buffer;
# 50 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
namespace device {
# 52 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
namespace cuda {
# 54 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
namespace detail {
# 56 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
namespace safe_scan {
# 60 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
template<class SharedArray, class
# 61 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
T, class
# 62 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
BinaryFunction> static T
# 64 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
scan_block(SharedArray array, T val, BinaryFunction binary_op)
# 65 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
{volatile int ___ = 1;
# 83 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
exit(___);}
# 85 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
template<class SharedArray, class
# 86 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
T, class
# 87 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
BinaryFunction> static T
# 89 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
scan_block_n(SharedArray array, const unsigned n, T val, BinaryFunction binary_op)
# 90 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
{volatile int ___ = 1;
# 107 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
exit(___);}
# 109 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
template<class InputIterator, class
# 110 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
OutputIterator, class
# 111 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
BinaryFunction> static void
# 113 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
__wrapper__device_stub_scan_intervals(InputIterator &input, const unsigned &
# 114 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
N, const unsigned &
# 115 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
interval_size, OutputIterator &
# 116 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
output, typename iterator_value< OutputIterator> ::type *&
# 117 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
block_results, BinaryFunction &
# 118 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
binary_op);
# 109 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
template<class InputIterator, class
# 110 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
OutputIterator, class
# 111 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
BinaryFunction> void
# 113 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
scan_intervals(InputIterator input, const unsigned
# 114 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
N, const unsigned
# 115 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
interval_size, OutputIterator
# 116 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
output, typename iterator_value< OutputIterator> ::type *
# 117 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
block_results, BinaryFunction
# 118 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
binary_op)
# 119 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
{__wrapper__device_stub_scan_intervals<InputIterator,OutputIterator,BinaryFunction>(input,N,interval_size,output,block_results,binary_op);
# 196 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 199 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
template<class OutputIterator, class
# 200 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
OutputType, class
# 201 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
BinaryFunction> static void
# 203 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
__wrapper__device_stub_inclusive_update(OutputIterator &output, const unsigned &
# 204 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
N, const unsigned &
# 205 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
interval_size, OutputType *&
# 206 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
block_results, BinaryFunction &
# 207 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
binary_op);
# 199 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
template<class OutputIterator, class
# 200 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
OutputType, class
# 201 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
BinaryFunction> void
# 203 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
inclusive_update(OutputIterator output, const unsigned
# 204 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
N, const unsigned
# 205 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
interval_size, OutputType *
# 206 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
block_results, BinaryFunction
# 207 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
binary_op)
# 208 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
{__wrapper__device_stub_inclusive_update<OutputIterator,OutputType,BinaryFunction>(output,N,interval_size,block_results,binary_op);
# 233 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 235 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
template<class OutputIterator, class
# 236 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
OutputType, class
# 237 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
BinaryFunction> static void
# 239 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
__wrapper__device_stub_exclusive_update(OutputIterator &output, const unsigned &
# 240 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
N, const unsigned &
# 241 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
interval_size, OutputType *&
# 242 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
block_results, BinaryFunction &
# 243 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
binary_op);
# 235 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
template<class OutputIterator, class
# 236 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
OutputType, class
# 237 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
BinaryFunction> void
# 239 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
exclusive_update(OutputIterator output, const unsigned
# 240 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
N, const unsigned
# 241 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
interval_size, OutputType *
# 242 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
block_results, BinaryFunction
# 243 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
binary_op)
# 244 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
{__wrapper__device_stub_exclusive_update<OutputIterator,OutputType,BinaryFunction>(output,N,interval_size,block_results,binary_op);
# 285 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 288 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
template<class InputIterator, class
# 289 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
OutputIterator, class
# 290 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
BinaryFunction> OutputIterator
# 291 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
inclusive_scan(InputIterator first, InputIterator
# 292 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
last, OutputIterator
# 293 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
output, BinaryFunction
# 294 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
binary_op)
# 295 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
{
# 296 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
if (first == last) {
# 297 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
return output; }
# 299 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
typedef typename iterator_value< OutputIterator> ::type OutputType;
# 301 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned N = (last - first);
# 304 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned smem_per_thread = sizeof(typename iterator_value< OutputIterator> ::type);
# 305 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned block_size = (experimental::arch::max_blocksize_with_highest_occupancy(&scan_intervals< InputIterator, OutputIterator, BinaryFunction> , smem_per_thread));
# 306 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned smem_size = (block_size * smem_per_thread);
# 307 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned max_blocks = (experimental::arch::max_active_blocks(&scan_intervals< InputIterator, OutputIterator, BinaryFunction> , block_size, smem_size));
# 310 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned unit_size = block_size;
# 311 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned num_units = thrust::detail::util::divide_ri(N, unit_size);
# 312 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned num_blocks = std::min(max_blocks, num_units);
# 313 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned num_iters = thrust::detail::util::divide_ri(num_units, num_blocks);
# 314 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned interval_size = (unit_size * num_iters);
# 323 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
raw_cuda_device_buffer< typename iterator_value< OutputIterator> ::type> block_results(num_blocks + (1));
# 326 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
{
# 327 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
cudaConfigureCall(num_blocks, block_size, smem_size) ? ((void)0) : (scan_intervals)(first, N, interval_size, output, thrust::raw_pointer_cast(&(block_results[0])), binary_op);
# 334 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 337 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
{
# 338 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned block_size_pass2 = (experimental::arch::max_blocksize(&scan_intervals< typename iterator_value< OutputIterator> ::type *, typename iterator_value< OutputIterator> ::type *, BinaryFunction> , smem_per_thread));
# 339 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned smem_size_pass2 = (smem_per_thread * block_size_pass2);
# 341 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
cudaConfigureCall(1, block_size_pass2, smem_size_pass2) ? ((void)0) : (scan_intervals)(thrust::raw_pointer_cast(&(block_results[0])), num_blocks, interval_size, thrust::raw_pointer_cast(&(block_results[0])), thrust::raw_pointer_cast(&(block_results[0])) + num_blocks, binary_op);
# 348 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 351 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
{
# 352 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned block_size_pass3 = (experimental::arch::max_blocksize_with_highest_occupancy(&inclusive_update< OutputIterator, typename iterator_value< OutputIterator> ::type, BinaryFunction> , 0));
# 354 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
cudaConfigureCall(num_blocks, block_size_pass3) ? ((void)0) : (inclusive_update)(output, N, interval_size, thrust::raw_pointer_cast(&(block_results[0])), binary_op);
# 360 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 362 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
return output + N;
# 363 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 366 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
template<class InputIterator, class
# 367 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
OutputIterator, class
# 368 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
T, class
# 369 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
BinaryFunction> OutputIterator
# 370 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
exclusive_scan(InputIterator first, InputIterator
# 371 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
last, OutputIterator
# 372 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
output, const T
# 373 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
init, BinaryFunction
# 374 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
binary_op)
# 375 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
{
# 376 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
if (first == last) {
# 377 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
return output; }
# 379 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
typedef typename iterator_value< OutputIterator> ::type OutputType;
# 381 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned N = (last - first);
# 384 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned smem_per_thread = sizeof(typename iterator_value< OutputIterator> ::type);
# 385 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned block_size = (experimental::arch::max_blocksize_with_highest_occupancy(&scan_intervals< InputIterator, OutputIterator, BinaryFunction> , smem_per_thread));
# 386 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned smem_size = (block_size * smem_per_thread);
# 387 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned max_blocks = (experimental::arch::max_active_blocks(&scan_intervals< InputIterator, OutputIterator, BinaryFunction> , block_size, smem_size));
# 390 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned unit_size = block_size;
# 391 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned num_units = thrust::detail::util::divide_ri(N, unit_size);
# 392 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned num_blocks = std::min(max_blocks, num_units);
# 393 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned num_iters = thrust::detail::util::divide_ri(num_units, num_blocks);
# 394 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned interval_size = (unit_size * num_iters);
# 403 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
raw_cuda_device_buffer< typename iterator_value< OutputIterator> ::type> block_results(num_blocks + (1));
# 406 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
{
# 407 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
cudaConfigureCall(num_blocks, block_size, smem_size) ? ((void)0) : (scan_intervals)(first, N, interval_size, output, thrust::raw_pointer_cast(&(block_results[0])), binary_op);
# 414 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 418 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
{
# 419 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned block_size_pass2 = (experimental::arch::max_blocksize(&scan_intervals< typename iterator_value< OutputIterator> ::type *, typename iterator_value< OutputIterator> ::type *, BinaryFunction> , smem_per_thread));
# 420 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned smem_size_pass2 = (smem_per_thread * block_size_pass2);
# 422 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
cudaConfigureCall(1, block_size_pass2, smem_size_pass2) ? ((void)0) : (scan_intervals)(thrust::raw_pointer_cast(&(block_results[0])), num_blocks, interval_size, thrust::raw_pointer_cast(&(block_results[0])), thrust::raw_pointer_cast(&(block_results[0])) + num_blocks, binary_op);
# 429 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 432 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
(block_results[num_blocks]) = init;
# 435 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
{
# 436 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned block_size_pass3 = (experimental::arch::max_blocksize_with_highest_occupancy(&exclusive_update< OutputIterator, typename iterator_value< OutputIterator> ::type, BinaryFunction> , smem_per_thread));
# 437 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
const unsigned smem_size_pass3 = (smem_per_thread * block_size_pass3);
# 439 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
cudaConfigureCall(num_blocks, block_size_pass3, smem_size_pass3) ? ((void)0) : (exclusive_update)(output, N, interval_size, thrust::raw_pointer_cast(&(block_results[0])), binary_op);
# 445 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 447 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
return output + N;
# 448 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 450 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 451 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 452 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 453 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 454 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 455 "/home/normal/checkout/thrust/thrust/detail/device/cuda/detail/safe_scan.inl"
}
# 25 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
namespace thrust {
# 27 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
namespace detail {
# 29 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
namespace device {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
namespace cuda {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
namespace dispatch {
# 40 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
template<class InputIterator, class
# 41 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
OutputIterator, class
# 42 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
AssociativeOperator> OutputIterator
# 43 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
inclusive_scan(InputIterator first, InputIterator
# 44 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
last, OutputIterator
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
result, AssociativeOperator
# 46 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
binary_op, true_type)
# 48 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
{
# 49 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
return detail::fast_scan::inclusive_scan(first, last, result, binary_op);
# 51 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
}
# 53 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
template<class InputIterator, class
# 54 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
OutputIterator, class
# 55 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
T, class
# 56 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
AssociativeOperator> OutputIterator
# 57 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
exclusive_scan(InputIterator first, InputIterator
# 58 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
last, OutputIterator
# 59 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
result, T
# 60 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
init, AssociativeOperator
# 61 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
binary_op, true_type)
# 63 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
{
# 64 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
return detail::fast_scan::exclusive_scan(first, last, result, init, binary_op);
# 66 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
}
# 72 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
template<class InputIterator, class
# 73 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
OutputIterator, class
# 74 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
AssociativeOperator> OutputIterator
# 75 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
inclusive_scan(InputIterator first, InputIterator
# 76 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
last, OutputIterator
# 77 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
result, AssociativeOperator
# 78 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
binary_op, false_type)
# 80 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
{
# 81 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
return detail::safe_scan::inclusive_scan(first, last, result, binary_op);
# 83 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
}
# 85 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
template<class InputIterator, class
# 86 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
OutputIterator, class
# 87 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
T, class
# 88 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
AssociativeOperator> OutputIterator
# 89 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
exclusive_scan(InputIterator first, InputIterator
# 90 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
last, OutputIterator
# 91 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
result, T
# 92 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
init, AssociativeOperator
# 93 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
binary_op, false_type)
# 95 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
{
# 96 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
return detail::safe_scan::exclusive_scan(first, last, result, init, binary_op);
# 98 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
}
# 100 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
}
# 101 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
}
# 102 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
}
# 103 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
}
# 104 "/home/normal/checkout/thrust/thrust/detail/device/cuda/dispatch/scan.h"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
namespace detail {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
namespace device {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
namespace cuda {
# 35 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
template<class InputIterator, class
# 36 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
OutputIterator, class
# 37 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
AssociativeOperator> OutputIterator
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
inclusive_scan(InputIterator first, InputIterator
# 39 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
last, OutputIterator
# 40 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
result, AssociativeOperator
# 41 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
binary_op)
# 42 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
{
# 48 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
typedef static_assert_test< sizeof(STATIC_ASSERTION_FAILURE< (bool)depend_on_instantiation< InputIterator, true> ::value> )> thrust_static_assert_typedef_48;
# 50 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
typedef typename iterator_value< OutputIterator> ::type OutputType;
# 54 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
static const bool use_fast_scan = ((sizeof(typename iterator_value< OutputIterator> ::type) <= (16)) && is_pod< typename iterator_value< OutputIterator> ::type> ::value);
# 57 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
(void)use_fast_scan;
# 59 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
return dispatch::inclusive_scan(first, last, result, binary_op, integral_constant< bool, ((sizeof(typename iterator_value< OutputIterator> ::type) <= 16U) && is_pod< typename iterator_value< OutputIterator> ::type> ::value)> ());
# 62 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
}
# 64 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
template<class InputIterator, class
# 65 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
OutputIterator, class
# 66 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
T, class
# 67 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
AssociativeOperator> OutputIterator
# 68 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
exclusive_scan(InputIterator first, InputIterator
# 69 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
last, OutputIterator
# 70 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
result, T
# 71 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
init, AssociativeOperator
# 72 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
binary_op)
# 73 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
{
# 79 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
typedef static_assert_test< sizeof(STATIC_ASSERTION_FAILURE< (bool)depend_on_instantiation< InputIterator, true> ::value> )> thrust_static_assert_typedef_79;
# 81 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
typedef typename iterator_value< OutputIterator> ::type OutputType;
# 85 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
static const bool use_fast_scan = ((sizeof(typename iterator_value< OutputIterator> ::type) <= (16)) && is_pod< typename iterator_value< OutputIterator> ::type> ::value);
# 88 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
(void)use_fast_scan;
# 90 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
return dispatch::exclusive_scan(first, last, result, init, binary_op, integral_constant< bool, ((sizeof(typename iterator_value< OutputIterator> ::type) <= 16U) && is_pod< typename iterator_value< OutputIterator> ::type> ::value)> ());
# 93 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
}
# 95 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
}
# 96 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
}
# 97 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
}
# 98 "/home/normal/checkout/thrust/thrust/detail/device/cuda/scan.inl"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
namespace device {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
namespace omp {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
template<class InputIterator, class
# 34 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
OutputIterator, class
# 35 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
AssociativeOperator> OutputIterator
# 33 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
inclusive_scan(InputIterator, InputIterator, OutputIterator, AssociativeOperator);
# 41 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
template<class InputIterator, class
# 42 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
OutputIterator, class
# 43 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
T, class
# 44 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
AssociativeOperator> OutputIterator
# 41 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
exclusive_scan(InputIterator, InputIterator, OutputIterator, T, AssociativeOperator);
# 51 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
}
# 52 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
}
# 53 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
}
# 54 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.h"
}
# 20 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
namespace thrust {
# 22 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
namespace detail {
# 24 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
namespace device {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
namespace omp {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
template<class InputIterator, class
# 31 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
OutputIterator, class
# 32 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
AssociativeOperator> OutputIterator
# 33 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
inclusive_scan(InputIterator first, InputIterator
# 34 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
last, OutputIterator
# 35 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
result, AssociativeOperator
# 36 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
binary_op)
# 37 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
{
# 38 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
typedef typename iterator_traits< OutputIterator> ::value_type OutputType;
# 40 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
if (first != last)
# 41 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
{
# 42 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
OutputType sum = (device::dereference(first));
# 44 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
device::dereference(result) = sum;
# 46 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
for ((++first), (++result); first != last; (++first), (++result)) {
# 47 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
device::dereference(result) = (sum = binary_op(sum, device::dereference(first))); }
# 49 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
return result;
# 52 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
}
# 54 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
template<class InputIterator, class
# 55 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
OutputIterator, class
# 56 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
T, class
# 57 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
AssociativeOperator> OutputIterator
# 58 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
exclusive_scan(InputIterator first, InputIterator
# 59 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
last, OutputIterator
# 60 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
result, T
# 61 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
init, AssociativeOperator
# 62 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
binary_op)
# 63 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
{
# 64 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
typedef typename iterator_traits< OutputIterator> ::value_type OutputType;
# 66 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
if (first != last)
# 67 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
{
# 68 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
OutputType tmp = (device::dereference(first));
# 69 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
OutputType sum = (init);
# 71 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
device::dereference(result) = sum;
# 72 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
sum = binary_op(sum, tmp);
# 74 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
for ((++first), (++result); first != last; (++first), (++result))
# 75 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
{
# 76 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
tmp = device::dereference(first);
# 77 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
device::dereference(result) = sum;
# 78 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
sum = binary_op(sum, tmp);
# 79 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
}
# 80 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
}
# 82 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
return result;
# 83 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
}
# 85 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
}
# 86 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
}
# 87 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
}
# 88 "/home/normal/checkout/thrust/thrust/detail/device/omp/scan.inl"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
namespace device {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
namespace dispatch {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
template<class InputIterator, class
# 38 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
OutputIterator, class
# 39 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
AssociativeOperator> OutputIterator
# 40 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
inclusive_scan(InputIterator first, InputIterator
# 41 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
last, OutputIterator
# 42 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
result, AssociativeOperator
# 43 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
binary_op, omp_device_space_tag, omp_device_space_tag)
# 46 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
{
# 47 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
return omp::inclusive_scan(first, last, result, binary_op);
# 48 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
}
# 50 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
template<class InputIterator, class
# 51 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
OutputIterator, class
# 52 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
T, class
# 53 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
AssociativeOperator> OutputIterator
# 54 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
exclusive_scan(InputIterator first, InputIterator
# 55 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
last, OutputIterator
# 56 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
result, T
# 57 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
init, AssociativeOperator
# 58 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
binary_op, omp_device_space_tag, omp_device_space_tag)
# 61 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
{
# 62 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
return omp::exclusive_scan(first, last, result, init, binary_op);
# 63 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
}
# 70 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
template<class InputIterator, class
# 71 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
OutputIterator, class
# 72 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
AssociativeOperator> OutputIterator
# 73 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
inclusive_scan(InputIterator first, InputIterator
# 74 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
last, OutputIterator
# 75 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
result, AssociativeOperator
# 76 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
binary_op, cuda_device_space_tag, cuda_device_space_tag)
# 79 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
{
# 80 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
return cuda::inclusive_scan(first, last, result, binary_op);
# 81 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
}
# 83 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
template<class InputIterator, class
# 84 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
OutputIterator, class
# 85 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
T, class
# 86 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
AssociativeOperator> OutputIterator
# 87 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
exclusive_scan(InputIterator first, InputIterator
# 88 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
last, OutputIterator
# 89 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
result, T
# 90 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
init, AssociativeOperator
# 91 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
binary_op, cuda_device_space_tag, cuda_device_space_tag)
# 94 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
{
# 95 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
return cuda::exclusive_scan(first, last, result, init, binary_op);
# 96 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
}
# 98 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
}
# 99 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
}
# 100 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
}
# 101 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/scan.h"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
namespace device {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
template<class InputIterator, class
# 37 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
OutputIterator, class
# 38 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
AssociativeOperator> OutputIterator
# 39 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
inclusive_scan(InputIterator first, InputIterator
# 40 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
last, OutputIterator
# 41 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
result, AssociativeOperator
# 42 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
binary_op)
# 43 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
{
# 44 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
return dispatch::inclusive_scan(first, last, result, binary_op, typename iterator_space< InputIterator> ::type(), typename iterator_space< OutputIterator> ::type());
# 48 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
template<class InputIterator, class
# 52 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
OutputIterator, class
# 53 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
T, class
# 54 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
AssociativeOperator> OutputIterator
# 55 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
exclusive_scan(InputIterator first, InputIterator
# 56 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
last, OutputIterator
# 57 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
result, T
# 58 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
init, AssociativeOperator
# 59 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
binary_op)
# 60 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
{
# 61 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
return dispatch::exclusive_scan(first, last, result, init, binary_op, typename iterator_space< InputIterator> ::type(), typename iterator_space< OutputIterator> ::type());
# 64 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
}
# 66 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
}
# 68 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
}
# 70 "/home/normal/checkout/thrust/thrust/detail/device/scan.h"
}
# 29 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
namespace thrust {
# 32 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
namespace detail {
# 35 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
namespace dispatch {
# 42 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
template<class InputIterator, class
# 43 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
OutputIterator, class
# 44 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
AssociativeOperator> OutputIterator
# 45 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
inclusive_scan(InputIterator first, InputIterator
# 46 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
last, OutputIterator
# 47 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
result, AssociativeOperator
# 48 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
binary_op, host_space_tag, host_space_tag)
# 51 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
{
# 52 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
return host::inclusive_scan(first, last, result, binary_op);
# 53 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
}
# 56 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
template<class InputIterator, class
# 57 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
OutputIterator, class
# 58 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
T, class
# 59 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
AssociativeOperator> OutputIterator
# 60 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
exclusive_scan(InputIterator first, InputIterator
# 61 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
last, OutputIterator
# 62 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
result, T
# 63 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
init, AssociativeOperator
# 64 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
binary_op, host_space_tag, host_space_tag)
# 67 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
{
# 68 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
return host::exclusive_scan(first, last, result, init, binary_op);
# 69 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
}
# 76 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
template<class InputIterator, class
# 77 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
OutputIterator, class
# 78 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
AssociativeOperator> OutputIterator
# 79 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
inclusive_scan(InputIterator first, InputIterator
# 80 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
last, OutputIterator
# 81 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
result, AssociativeOperator
# 82 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
binary_op, device_space_tag, device_space_tag)
# 85 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
{
# 86 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
return device::inclusive_scan(first, last, result, binary_op);
# 87 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
}
# 90 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
template<class InputIterator, class
# 91 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
OutputIterator, class
# 92 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
T, class
# 93 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
AssociativeOperator> OutputIterator
# 94 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
exclusive_scan(InputIterator first, InputIterator
# 95 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
last, OutputIterator
# 96 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
result, T
# 97 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
init, AssociativeOperator
# 98 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
binary_op, device_space_tag, device_space_tag)
# 101 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
{
# 102 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
return device::exclusive_scan(first, last, result, init, binary_op);
# 103 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
}
# 105 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
}
# 107 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
}
# 109 "/home/normal/checkout/thrust/thrust/detail/dispatch/scan.h"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
namespace thrust {
# 33 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
template<class InputIterator, class
# 34 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
OutputIterator> OutputIterator
# 35 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
inclusive_scan(InputIterator first, InputIterator
# 36 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
last, OutputIterator
# 37 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
result)
# 38 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
{
# 39 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
typedef typename iterator_traits< OutputIterator> ::value_type OutputType;
# 42 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
return thrust::inclusive_scan(first, last, result, plus< typename iterator_traits< OutputIterator> ::value_type> ());
# 43 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
template<class InputIterator, class
# 46 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
OutputIterator, class
# 47 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
AssociativeOperator> OutputIterator
# 48 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
inclusive_scan(InputIterator first, InputIterator
# 49 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
last, OutputIterator
# 50 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
result, AssociativeOperator
# 51 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
binary_op)
# 52 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
{
# 54 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
return detail::dispatch::inclusive_scan(first, last, result, binary_op, typename iterator_space< InputIterator> ::type(), typename iterator_space< OutputIterator> ::type());
# 57 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
template<class InputIterator, class
# 60 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
OutputIterator> OutputIterator
# 61 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
exclusive_scan(InputIterator first, InputIterator
# 62 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
last, OutputIterator
# 63 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
result)
# 64 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
{
# 65 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
typedef typename iterator_traits< OutputIterator> ::value_type OutputType;
# 68 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
return thrust::exclusive_scan(first, last, result, ((OutputType)(0)));
# 69 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
}
# 71 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
template<class InputIterator, class
# 72 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
OutputIterator, class
# 73 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
T> OutputIterator
# 74 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
exclusive_scan(InputIterator first, InputIterator
# 75 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
last, OutputIterator
# 76 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
result, const T
# 77 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
init)
# 78 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
{
# 79 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
typedef typename iterator_traits< OutputIterator> ::value_type OutputType;
# 82 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
return thrust::exclusive_scan(first, last, result, init, plus< typename iterator_traits< OutputIterator> ::value_type> ());
# 83 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
}
# 85 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
template<class InputIterator, class
# 86 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
OutputIterator, class
# 87 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
T, class
# 88 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
AssociativeOperator> OutputIterator
# 89 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
exclusive_scan(InputIterator first, InputIterator
# 90 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
last, OutputIterator
# 91 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
result, const T
# 92 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
init, AssociativeOperator
# 93 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
binary_op)
# 94 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
{
# 96 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
return detail::dispatch::exclusive_scan(first, last, result, init, binary_op, typename iterator_space< InputIterator> ::type(), typename iterator_space< OutputIterator> ::type());
# 99 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
}
# 101 "/home/normal/checkout/thrust/thrust/detail/scan.inl"
}
# 25 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
template<class UnaryFunction, class Iterator, class Reference, class Value> class transform_iterator;
# 31 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
namespace detail {
# 34 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
template<class UnaryFunc>
# 35 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
struct function_object_result {
# 37 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
typedef typename UnaryFunc::result_type type;
# 38 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
};
# 49 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
template<class UnaryFunc, class Iterator, class Reference, class Value>
# 50 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
struct transform_iterator_base {
# 60 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
private: typedef typename experimental::detail::ia_dflt_help< Reference, function_object_result< UnaryFunc> > ::type reference;
# 70 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
typedef typename experimental::detail::ia_dflt_help< Value, remove_reference< typename experimental::detail::ia_dflt_help< Reference, function_object_result< UnaryFunc> > ::type> > ::type cv_value_type;
# 72 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
typedef typename iterator_traits< Iterator> ::pointer pointer_;
# 88 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
public: typedef experimental::iterator_adaptor< transform_iterator< UnaryFunc, Iterator, Reference, Value> , Iterator, typename iterator_traits< Iterator> ::pointer, typename experimental::detail::ia_dflt_help< Value, remove_reference< typename experimental::detail::ia_dflt_help< Reference, function_object_result< UnaryFunc> > ::type> > ::type, use_default, typename iterator_traits< Iterator> ::iterator_category, typename experimental::detail::ia_dflt_help< Reference, function_object_result< UnaryFunc> > ::type, use_default> type;
# 89 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
};
# 92 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
namespace device {
# 98 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
template<class UnaryFunc, class Iterator, class Reference, class Value>
# 99 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
struct dereference_result< transform_iterator< UnaryFunc, Iterator, Reference, Value> > {
# 101 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
typedef typename iterator_traits< transform_iterator< UnaryFunc, Iterator, Reference, Value> > ::reference type;
# 102 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
};
# 105 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
template<class UnaryFunc, class Iterator, class Reference, class Value> inline typename dereference_result< transform_iterator< UnaryFunc, Iterator, Reference, Value> > ::type
# 108 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
dereference(const transform_iterator< UnaryFunc, Iterator, Reference, Value> &iter)
# 109 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
{
# 110 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
return (iter.transform_iterator< UnaryFunc, Iterator, Reference, Value> ::functor())(dereference((iter.transform_iterator< UnaryFunc, Iterator, Reference, Value> ::base())));
# 111 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
}
# 113 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
template<class UnaryFunc, class Iterator, class Reference, class Value, class IndexType> inline typename dereference_result< transform_iterator< UnaryFunc, Iterator, Reference, Value> > ::type
# 116 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
dereference(const transform_iterator< UnaryFunc, Iterator, Reference, Value> &iter, IndexType n)
# 117 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
{
# 118 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
return (iter.transform_iterator< UnaryFunc, Iterator, Reference, Value> ::functor())(dereference((iter.transform_iterator< UnaryFunc, Iterator, Reference, Value> ::base()), n));
# 119 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
}
# 121 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
}
# 123 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
}
# 125 "/home/normal/checkout/thrust/thrust/iterator/detail/transform_iterator.inl"
}
# 39 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
namespace thrust {
# 139 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
template<class UnaryFunc, class Iterator, class Reference = use_default, class Value = use_default>
# 140 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
class transform_iterator : public detail::transform_iterator_base< UnaryFunc, Iterator, Reference, Value> ::type {
# 148 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
public: typedef typename detail::transform_iterator_base< UnaryFunc, Iterator, Reference, Value> ::type super_t;
# 150 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
friend class experimental::iterator_core_access;
# 158 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
transform_iterator() { }
# 167 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
transform_iterator(const Iterator &x, UnaryFunc f) : detail::transform_iterator_base< UnaryFunc, Iterator, Reference, Value> ::type(x), m_f(f)
# 168 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
{
# 169 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
}
# 177 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
explicit transform_iterator(const Iterator &x) : detail::transform_iterator_base< UnaryFunc, Iterator, Reference, Value> ::type(x)
# 178 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
{ }
# 200 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
UnaryFunc functor() const
# 201 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
{ return m_f; }
# 207 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
private: typename detail::transform_iterator_base< UnaryFunc, Iterator, Reference, Value> ::type::reference dereference() const
# 208 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
{
# 209 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
return (m_f)(*(this->base()));
# 210 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
}
# 214 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
mutable UnaryFunc m_f;
# 218 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
};
# 232 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
template<class UnaryFunc, class Iterator> transform_iterator< UnaryFunc, Iterator, use_default, use_default>
# 235 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
make_transform_iterator(Iterator it, UnaryFunc fun)
# 236 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
{
# 237 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
return transform_iterator< UnaryFunc, Iterator, use_default, use_default> (it, fun);
# 238 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
}
# 246 "/home/normal/checkout/thrust/thrust/iterator/transform_iterator.h"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
template<class InputIterator, class
# 30 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
OutputIterator, class
# 31 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
UnaryFunction, class
# 32 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
AssociativeOperator> OutputIterator
# 33 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
transform_inclusive_scan(InputIterator first, InputIterator
# 34 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
last, OutputIterator
# 35 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
result, UnaryFunction
# 36 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
unary_op, AssociativeOperator
# 37 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
binary_op)
# 38 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
{
# 39 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
typedef typename iterator_traits< OutputIterator> ::value_type OutputType;
# 41 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
transform_iterator< UnaryFunction, InputIterator, typename iterator_traits< OutputIterator> ::value_type, use_default> _first(first, unary_op);
# 42 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
transform_iterator< UnaryFunction, InputIterator, typename iterator_traits< OutputIterator> ::value_type, use_default> _last(last, unary_op);
# 44 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
return thrust::inclusive_scan(_first, _last, result, binary_op);
# 45 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
}
# 48 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
template<class InputIterator, class
# 49 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
OutputIterator, class
# 50 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
UnaryFunction, class
# 51 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
T, class
# 52 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
AssociativeOperator> OutputIterator
# 53 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
transform_exclusive_scan(InputIterator first, InputIterator
# 54 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
last, OutputIterator
# 55 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
result, UnaryFunction
# 56 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
unary_op, T
# 57 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
init, AssociativeOperator
# 58 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
binary_op)
# 59 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
{
# 60 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
typedef typename iterator_traits< OutputIterator> ::value_type OutputType;
# 62 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
transform_iterator< UnaryFunction, InputIterator, typename iterator_traits< OutputIterator> ::value_type, use_default> _first(first, unary_op);
# 63 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
transform_iterator< UnaryFunction, InputIterator, typename iterator_traits< OutputIterator> ::value_type, use_default> _last(last, unary_op);
# 65 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
return thrust::exclusive_scan(_first, _last, result, init, binary_op);
# 66 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
}
# 68 "/home/normal/checkout/thrust/thrust/detail/transform_scan.inl"
}
# 26 "/home/normal/checkout/thrust/thrust/scatter.h"
namespace thrust {
# 72 "/home/normal/checkout/thrust/thrust/scatter.h"
template<class InputIterator1, class
# 73 "/home/normal/checkout/thrust/thrust/scatter.h"
InputIterator2, class
# 74 "/home/normal/checkout/thrust/thrust/scatter.h"
RandomAccessIterator> void
# 72 "/home/normal/checkout/thrust/thrust/scatter.h"
scatter(InputIterator1, InputIterator1, InputIterator2, RandomAccessIterator);
# 102 "/home/normal/checkout/thrust/thrust/scatter.h"
template<class InputIterator1, class
# 103 "/home/normal/checkout/thrust/thrust/scatter.h"
InputIterator2, class
# 104 "/home/normal/checkout/thrust/thrust/scatter.h"
InputIterator3, class
# 105 "/home/normal/checkout/thrust/thrust/scatter.h"
RandomAccessIterator> void
# 102 "/home/normal/checkout/thrust/thrust/scatter.h"
scatter_if(InputIterator1, InputIterator1, InputIterator2, InputIterator3, RandomAccessIterator);
# 136 "/home/normal/checkout/thrust/thrust/scatter.h"
template<class InputIterator1, class
# 137 "/home/normal/checkout/thrust/thrust/scatter.h"
InputIterator2, class
# 138 "/home/normal/checkout/thrust/thrust/scatter.h"
InputIterator3, class
# 139 "/home/normal/checkout/thrust/thrust/scatter.h"
RandomAccessIterator, class
# 140 "/home/normal/checkout/thrust/thrust/scatter.h"
Predicate> void
# 136 "/home/normal/checkout/thrust/thrust/scatter.h"
scatter_if(InputIterator1, InputIterator1, InputIterator2, InputIterator3, RandomAccessIterator, Predicate);
# 151 "/home/normal/checkout/thrust/thrust/scatter.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
namespace thrust {
# 27 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
namespace detail {
# 30 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
namespace host {
# 34 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
template<class InputIterator1, class
# 35 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
InputIterator2, class
# 36 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
RandomAccessIterator> void
# 37 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
scatter(InputIterator1 first, InputIterator1
# 38 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
last, InputIterator2
# 39 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
map, RandomAccessIterator
# 40 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
output)
# 41 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
{
# 42 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
while (first != last)
# 43 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
{
# 44 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
(output[*map]) = (*first);
# 45 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
first++;
# 46 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
map++;
# 47 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
}
# 48 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
template<class InputIterator1, class
# 52 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
InputIterator2, class
# 53 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
InputIterator3, class
# 54 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
RandomAccessIterator, class
# 55 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
Predicate> void
# 56 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
scatter_if(InputIterator1 first, InputIterator1
# 57 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
last, InputIterator2
# 58 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
map, InputIterator3
# 59 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
stencil, RandomAccessIterator
# 60 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
output, Predicate
# 61 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
pred)
# 62 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
{
# 63 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
while (first != last)
# 64 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
{
# 65 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
if (pred(*stencil)) {
# 66 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
(output[*map]) = (*first); }
# 67 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
first++;
# 68 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
map++;
# 69 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
stencil++;
# 70 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
}
# 71 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
}
# 74 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
}
# 76 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
}
# 78 "/home/normal/checkout/thrust/thrust/detail/host/scatter.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
namespace device {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
namespace generic {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
template<class InputIterator1, class
# 34 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
InputIterator2, class
# 35 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
RandomAccessIterator> void
# 33 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
scatter(InputIterator1, InputIterator1, InputIterator2, RandomAccessIterator);
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
template<class InputIterator1, class
# 42 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
InputIterator2, class
# 43 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
InputIterator3, class
# 44 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
RandomAccessIterator, class
# 45 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
Predicate> void
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
scatter_if(InputIterator1, InputIterator1, InputIterator2, InputIterator3, RandomAccessIterator, Predicate);
# 53 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
}
# 54 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
}
# 55 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
}
# 56 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.h"
}
# 27 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
template<class , class > class forced_iterator;
# 35 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
template<class Iterator, class Space>
# 36 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
struct forced_iterator_base {
# 46 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
typedef experimental::iterator_adaptor< forced_iterator< Iterator, Space> , Iterator, typename iterator_pointer< Iterator> ::type, typename iterator_value< Iterator> ::type, Space, typename iterator_traversal< Iterator> ::type, typename thrust::iterator_reference< Iterator> ::type, use_default> type;
# 47 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
};
# 49 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
template<class Iterator, class Space>
# 50 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
class forced_iterator : public forced_iterator_base< Iterator, Space> ::type {
# 54 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
typedef typename forced_iterator_base< Iterator, Space> ::type super_t;
# 56 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
friend class experimental::iterator_core_access;
# 60 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
public: forced_iterator() { }
# 63 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
explicit forced_iterator(Iterator x) : forced_iterator_base< Iterator, Space> ::type(x)
# 64 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
{ }
# 65 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
};
# 67 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
template<class Iterator, class Space> forced_iterator< Iterator, Space>
# 69 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
make_forced_iterator(Iterator x, Space)
# 70 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
{
# 71 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
return ((forced_iterator< Iterator, Space> )(x));
# 72 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
}
# 75 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
namespace device {
# 79 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
template<class Iterator, class Space>
# 80 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
struct dereference_result< forced_iterator< Iterator, Space> > : public dereference_result< Iterator> {
# 83 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
};
# 86 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
template<class Iterator, class Space> inline typename dereference_result< forced_iterator< Iterator, Space> > ::type
# 89 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
dereference(const forced_iterator< Iterator, Space> &iter)
# 90 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
{
# 91 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
return dereference((iter.forced_iterator< Iterator, Space> ::base()));
# 92 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
}
# 95 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
template<class Iterator, class Space, class IndexType> inline typename dereference_result< forced_iterator< Iterator, Space> > ::type
# 98 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
dereference(const forced_iterator< Iterator, Space> &iter, IndexType n)
# 99 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
{
# 100 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
return dereference((iter.forced_iterator< Iterator, Space> ::base()), n);
# 101 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
}
# 104 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
}
# 106 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
}
# 108 "/home/normal/checkout/thrust/thrust/iterator/detail/forced_iterator.h"
}
# 32 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
namespace thrust {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
namespace detail {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
namespace device {
# 40 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
template<class InputIterator, class UnaryFunction> void for_each(InputIterator, InputIterator, UnaryFunction);
# 42 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
namespace generic {
# 44 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
namespace detail {
# 47 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
template<class RandomAccessIterator>
# 48 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
struct scatter_functor {
# 50 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
RandomAccessIterator output;
# 52 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
scatter_functor(RandomAccessIterator _output) : output(_output)
# 53 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
{ }
# 55 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
template<class Tuple> void
# 57 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
operator()(Tuple t)
# 58 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
{
# 59 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
RandomAccessIterator dst = ((output) + thrust::get< 1> (t));
# 60 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
device::dereference(dst) = thrust::get< 0> (t);
# 61 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
}
# 62 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
};
# 65 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
template<class RandomAccessIterator, class Predicate>
# 66 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
struct scatter_if_functor {
# 68 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
RandomAccessIterator output;
# 69 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
Predicate pred;
# 71 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
scatter_if_functor(RandomAccessIterator _output, Predicate _pred) : output(_output), pred(_pred)
# 72 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
{ }
# 74 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
template<class Tuple> void
# 76 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
operator()(Tuple t)
# 77 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
{
# 78 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
if ((pred)(thrust::get< 2> (t)))
# 79 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
{
# 80 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
RandomAccessIterator dst = ((output) + thrust::get< 1> (t));
# 81 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
device::dereference(dst) = thrust::get< 0> (t);
# 82 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
}
# 83 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
}
# 84 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
};
# 86 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
}
# 89 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
template<class InputIterator1, class
# 90 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
InputIterator2, class
# 91 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
RandomAccessIterator> void
# 92 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
scatter(InputIterator1 first, InputIterator1
# 93 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
last, InputIterator2
# 94 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
map, RandomAccessIterator
# 95 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
output)
# 96 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
{
# 100 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
typedef typename iterator_space< InputIterator1> ::type Space1;
# 101 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
typedef typename iterator_space< InputIterator2> ::type Space2;
# 102 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
typedef typename iterator_space< RandomAccessIterator> ::type Space3;
# 104 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
typedef typename minimum_space< typename iterator_space< InputIterator1> ::type, typename iterator_space< InputIterator2> ::type> ::type Space4;
# 105 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
typedef typename minimum_space< typename iterator_space< RandomAccessIterator> ::type, typename minimum_space< typename iterator_space< InputIterator1> ::type, typename iterator_space< InputIterator2> ::type> ::type> ::type Space;
# 107 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
typedef thrust::detail::forced_iterator< InputIterator1, typename minimum_space< typename iterator_space< RandomAccessIterator> ::type, typename minimum_space< typename iterator_space< InputIterator1> ::type, typename iterator_space< InputIterator2> ::type> ::type> ::type> forced_iterator;
# 110 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
forced_iterator first_forced(first), last_forced(last);
# 112 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
detail::scatter_functor< RandomAccessIterator> func(output);
# 113 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
device::for_each(thrust::make_zip_iterator(thrust::make_tuple(first_forced, map)), thrust::make_zip_iterator(thrust::make_tuple(last_forced, map + thrust::distance(first, last))), func);
# 116 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
}
# 119 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
template<class InputIterator1, class
# 120 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
InputIterator2, class
# 121 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
InputIterator3, class
# 122 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
RandomAccessIterator, class
# 123 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
Predicate> void
# 124 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
scatter_if(InputIterator1 first, InputIterator1
# 125 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
last, InputIterator2
# 126 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
map, InputIterator3
# 127 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
stencil, RandomAccessIterator
# 128 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
output, Predicate
# 129 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
pred)
# 130 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
{
# 134 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
typedef typename iterator_space< InputIterator1> ::type Space1;
# 135 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
typedef typename iterator_space< InputIterator2> ::type Space2;
# 136 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
typedef typename iterator_space< InputIterator3> ::type Space3;
# 137 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
typedef typename iterator_space< RandomAccessIterator> ::type Space4;
# 139 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
typedef typename minimum_space< typename iterator_space< InputIterator1> ::type, typename iterator_space< InputIterator2> ::type> ::type Space5;
# 140 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
typedef typename minimum_space< typename iterator_space< InputIterator3> ::type, typename iterator_space< RandomAccessIterator> ::type> ::type Space6;
# 142 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
typedef typename minimum_space< typename minimum_space< typename iterator_space< InputIterator1> ::type, typename iterator_space< InputIterator2> ::type> ::type, typename minimum_space< typename iterator_space< InputIterator3> ::type, typename iterator_space< RandomAccessIterator> ::type> ::type> ::type Space;
# 144 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
typedef thrust::detail::forced_iterator< InputIterator1, typename minimum_space< typename minimum_space< typename iterator_space< InputIterator1> ::type, typename iterator_space< InputIterator2> ::type> ::type, typename minimum_space< typename iterator_space< InputIterator3> ::type, typename iterator_space< RandomAccessIterator> ::type> ::type> ::type> forced_iterator;
# 147 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
forced_iterator first_forced(first), last_forced(last);
# 149 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
detail::scatter_if_functor< RandomAccessIterator, Predicate> func(output, pred);
# 150 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
device::for_each(thrust::make_zip_iterator(thrust::make_tuple(first_forced, map, stencil)), thrust::make_zip_iterator(thrust::make_tuple(last_forced, map + thrust::distance(first, last), stencil + thrust::distance(first, last))), func);
# 153 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
}
# 155 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
}
# 156 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
}
# 157 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
}
# 158 "/home/normal/checkout/thrust/thrust/detail/device/generic/scatter.inl"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
namespace detail {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
namespace device {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
template<class InputIterator1, class
# 34 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
InputIterator2, class
# 35 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
RandomAccessIterator> void
# 36 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
scatter(InputIterator1 first, InputIterator1
# 37 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
last, InputIterator2
# 38 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
map, RandomAccessIterator
# 39 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
output)
# 40 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
{
# 41 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
generic::scatter(first, last, map, output);
# 42 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
}
# 44 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
template<class InputIterator1, class
# 45 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
InputIterator2, class
# 46 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
InputIterator3, class
# 47 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
RandomAccessIterator, class
# 48 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
Predicate> void
# 49 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
scatter_if(InputIterator1 first, InputIterator1
# 50 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
last, InputIterator2
# 51 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
map, InputIterator3
# 52 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
stencil, RandomAccessIterator
# 53 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
output, Predicate
# 54 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
pred)
# 55 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
{
# 56 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
generic::scatter_if(first, last, map, stencil, output, pred);
# 57 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
}
# 60 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
}
# 61 "/home/normal/checkout/thrust/thrust/detail/device/scatter.h"
}
# 32 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
namespace thrust {
# 35 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
namespace detail {
# 39 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
template<class , class > class raw_buffer;
# 40 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
template<class > class raw_host_buffer;
# 42 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
namespace dispatch {
# 49 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
template<class InputIterator1, class
# 50 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
InputIterator2, class
# 51 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
RandomAccessIterator> void
# 52 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
scatter(InputIterator1 first, InputIterator1
# 53 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
last, InputIterator2
# 54 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
map, RandomAccessIterator
# 55 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
output, host_space_tag, host_space_tag, host_space_tag)
# 59 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
{
# 60 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
host::scatter(first, last, map, output);
# 61 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
}
# 64 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
template<class InputIterator1, class
# 65 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
InputIterator2, class
# 66 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
RandomAccessIterator> void
# 67 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
scatter(InputIterator1 first, InputIterator1
# 68 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
last, InputIterator2
# 69 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
map, RandomAccessIterator
# 70 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
output, any_space_tag, host_space_tag, host_space_tag)
# 74 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
{
# 75 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
host::scatter(first, last, map, output);
# 76 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
}
# 79 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
template<class InputIterator1, class
# 80 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
InputIterator2, class
# 81 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
InputIterator3, class
# 82 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
RandomAccessIterator, class
# 83 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
Predicate> void
# 84 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
scatter_if(InputIterator1 first, InputIterator1
# 85 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
last, InputIterator2
# 86 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
map, InputIterator3
# 87 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
stencil, RandomAccessIterator
# 88 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
output, Predicate
# 89 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
pred, host_space_tag, host_space_tag, host_space_tag, host_space_tag)
# 94 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
{
# 95 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
host::scatter_if(first, last, map, stencil, output, pred);
# 96 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
}
# 102 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
template<class InputIterator1, class
# 103 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
InputIterator2, class
# 104 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
RandomAccessIterator> void
# 105 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
scatter(InputIterator1 first, InputIterator1
# 106 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
last, InputIterator2
# 107 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
map, RandomAccessIterator
# 108 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
output, device_space_tag, device_space_tag, device_space_tag)
# 112 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
{
# 113 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
device::scatter(first, last, map, output);
# 114 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
}
# 117 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
template<class InputIterator1, class
# 118 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
InputIterator2, class
# 119 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
RandomAccessIterator> void
# 120 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
scatter(InputIterator1 first, InputIterator1
# 121 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
last, InputIterator2
# 122 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
map, RandomAccessIterator
# 123 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
output, any_space_tag, device_space_tag, device_space_tag)
# 127 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
{
# 128 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
device::scatter(first, last, map, output);
# 129 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
}
# 132 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
template<class InputIterator1, class
# 133 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
InputIterator2, class
# 134 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
InputIterator3, class
# 135 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
RandomAccessIterator, class
# 136 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
Predicate> void
# 137 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
scatter_if(InputIterator1 first, InputIterator1
# 138 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
last, InputIterator2
# 139 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
map, InputIterator3
# 140 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
stencil, RandomAccessIterator
# 141 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
output, Predicate
# 142 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
pred, device_space_tag, device_space_tag, device_space_tag, device_space_tag)
# 147 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
{
# 148 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
device::scatter_if(first, last, map, stencil, output, pred);
# 149 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
}
# 155 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
template<class InputIterator1, class
# 156 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
InputIterator2, class
# 157 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
RandomAccessIterator> void
# 158 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
scatter(InputIterator1 first, InputIterator1
# 159 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
last, InputIterator2
# 160 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
map, RandomAccessIterator
# 161 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
output, device_space_tag, host_space_tag, host_space_tag)
# 165 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
{
# 167 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
typedef typename iterator_traits< InputIterator1> ::value_type InputType;
# 168 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
raw_host_buffer< typename iterator_traits< InputIterator1> ::value_type> buffer(first, last);
# 169 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
thrust::scatter((buffer.raw_host_buffer< typename iterator_traits< InputIterator1> ::value_type> ::begin()), (buffer.raw_host_buffer< typename iterator_traits< InputIterator1> ::value_type> ::end()), map, output);
# 170 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
}
# 173 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
template<class InputIterator1, class
# 174 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
InputIterator2, class
# 175 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
RandomAccessIterator> void
# 176 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
scatter(InputIterator1 first, InputIterator1
# 177 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
last, InputIterator2
# 178 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
map, RandomAccessIterator
# 179 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
output, device_space_tag, device_space_tag, host_space_tag)
# 183 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
{
# 185 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
typedef typename iterator_traits< InputIterator2> ::value_type IndexType;
# 186 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
raw_host_buffer< typename iterator_traits< InputIterator2> ::value_type> h_map(map, map + thrust::distance(first, last));
# 187 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
thrust::scatter(first, last, (h_map.raw_host_buffer< typename iterator_traits< InputIterator2> ::value_type> ::begin()), output);
# 188 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
}
# 194 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
template<class InputIterator1, class
# 195 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
InputIterator2, class
# 196 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
RandomAccessIterator> void
# 197 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
scatter(InputIterator1 first, InputIterator1
# 198 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
last, InputIterator2
# 199 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
map, RandomAccessIterator
# 200 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
output, host_space_tag, device_space_tag, device_space_tag)
# 204 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
{
# 206 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
typedef typename iterator_traits< InputIterator1> ::value_type InputType;
# 207 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
typedef typename iterator_space< RandomAccessIterator> ::type Space;
# 208 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
raw_buffer< typename iterator_traits< InputIterator1> ::value_type, typename iterator_space< RandomAccessIterator> ::type> buffer(first, last);
# 209 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
thrust::scatter((buffer.raw_buffer< typename iterator_traits< InputIterator1> ::value_type, typename iterator_space< RandomAccessIterator> ::type> ::begin()), (buffer.raw_buffer< typename iterator_traits< InputIterator1> ::value_type, typename iterator_space< RandomAccessIterator> ::type> ::end()), map, output);
# 210 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
}
# 213 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
template<class InputIterator1, class
# 214 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
InputIterator2, class
# 215 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
RandomAccessIterator> void
# 216 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
scatter(InputIterator1 first, InputIterator1
# 217 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
last, InputIterator2
# 218 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
map, RandomAccessIterator
# 219 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
output, host_space_tag, host_space_tag, device_space_tag)
# 223 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
{
# 225 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
typedef typename iterator_traits< InputIterator2> ::value_type IndexType;
# 226 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
typedef typename iterator_space< RandomAccessIterator> ::type Space;
# 227 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
raw_buffer< typename iterator_traits< InputIterator2> ::value_type, typename iterator_space< RandomAccessIterator> ::type> d_map(map, map + thrust::distance(first, last));
# 228 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
thrust::scatter(first, last, (d_map.raw_buffer< typename iterator_traits< InputIterator2> ::value_type, typename iterator_space< RandomAccessIterator> ::type> ::begin()), output);
# 229 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
}
# 231 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
}
# 232 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
}
# 233 "/home/normal/checkout/thrust/thrust/detail/dispatch/scatter.h"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
template<class InputIterator1, class
# 30 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
InputIterator2, class
# 31 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
RandomAccessIterator> void
# 32 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
scatter(InputIterator1 first, InputIterator1
# 33 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
last, InputIterator2
# 34 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
map, RandomAccessIterator
# 35 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
output)
# 36 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
{
# 38 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
detail::dispatch::scatter(first, last, map, output, typename iterator_space< InputIterator1> ::type(), typename iterator_space< InputIterator2> ::type(), typename iterator_space< RandomAccessIterator> ::type());
# 42 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
template<class InputIterator1, class
# 46 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
InputIterator2, class
# 47 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
InputIterator3, class
# 48 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
RandomAccessIterator> void
# 49 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
scatter_if(InputIterator1 first, InputIterator1
# 50 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
last, InputIterator2
# 51 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
map, InputIterator3
# 52 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
stencil, RandomAccessIterator
# 53 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
output)
# 54 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
{
# 56 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
typedef typename iterator_traits< InputIterator3> ::value_type StencilType;
# 57 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
scatter_if(first, last, map, stencil, output, identity< typename iterator_traits< InputIterator3> ::value_type> ());
# 58 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
}
# 61 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
template<class InputIterator1, class
# 62 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
InputIterator2, class
# 63 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
InputIterator3, class
# 64 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
RandomAccessIterator, class
# 65 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
Predicate> void
# 66 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
scatter_if(InputIterator1 first, InputIterator1
# 67 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
last, InputIterator2
# 68 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
map, InputIterator3
# 69 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
stencil, RandomAccessIterator
# 70 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
output, Predicate
# 71 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
pred)
# 72 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
{
# 74 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
detail::dispatch::scatter_if(first, last, map, stencil, output, pred, typename iterator_space< InputIterator1> ::type(), typename iterator_space< InputIterator2> ::type(), typename iterator_space< InputIterator3> ::type(), typename iterator_space< RandomAccessIterator> ::type());
# 79 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
}
# 81 "/home/normal/checkout/thrust/thrust/detail/scatter.inl"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
namespace detail {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
template<class , class > class raw_buffer;
# 34 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
namespace device {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
namespace generic {
# 39 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
template<class InputIterator1, class
# 40 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
InputIterator2, class
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
OutputIterator, class
# 42 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
Predicate> OutputIterator
# 43 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
copy_if(InputIterator1 first, InputIterator1
# 44 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
last, InputIterator2
# 45 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
stencil, OutputIterator
# 46 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
result, Predicate
# 47 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
pred)
# 48 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
{
# 49 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
if (first == last) {
# 50 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
return result; }
# 52 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
typedef typename iterator_traits< InputIterator1> ::difference_type difference_type;
# 54 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
difference_type n = (thrust::distance(first, last));
# 56 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
difference_type size_of_new_sequence = 0;
# 59 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
raw_buffer< typename iterator_traits< InputIterator1> ::difference_type, device_space_tag> pred_scatter_indices(n);
# 60 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
thrust::transform_exclusive_scan(stencil, stencil + n, (pred_scatter_indices.raw_buffer< typename iterator_traits< InputIterator1> ::difference_type, device_space_tag> ::begin()), pred, static_cast< unsigned>(0), plus< unsigned> ());
# 68 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
thrust::scatter_if(first, last, (pred_scatter_indices.raw_buffer< typename iterator_traits< InputIterator1> ::difference_type, device_space_tag> ::begin()), stencil, result, pred);
# 76 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
size_of_new_sequence = ((pred_scatter_indices[n - 1]) + ((pred(*(stencil + (n - 1)))) ? 1 : 0));
# 78 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
return result + size_of_new_sequence;
# 79 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
}
# 81 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
}
# 82 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
}
# 83 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
}
# 84 "/home/normal/checkout/thrust/thrust/detail/device/generic/copy_if.inl"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
namespace device {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
template<class InputIterator, class
# 32 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
OutputIterator> OutputIterator
# 33 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
copy(InputIterator begin, InputIterator
# 34 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
end, OutputIterator
# 35 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
result)
# 36 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
{
# 37 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
return dispatch::copy(begin, end, result, typename iterator_space< InputIterator> ::type(), typename iterator_space< OutputIterator> ::type());
# 40 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
}
# 43 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
template<class InputIterator1, class
# 44 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
InputIterator2, class
# 45 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
OutputIterator, class
# 46 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
Predicate> OutputIterator
# 47 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
copy_if(InputIterator1 first, InputIterator1
# 48 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
last, InputIterator2
# 49 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
stencil, OutputIterator
# 50 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
result, Predicate
# 51 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
pred)
# 52 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
{
# 53 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
return generic::copy_if(first, last, stencil, result, pred);
# 54 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
}
# 56 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
}
# 57 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
}
# 58 "/home/normal/checkout/thrust/thrust/detail/device/copy.h"
}
# 34 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
namespace thrust {
# 37 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
namespace detail {
# 40 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
namespace dispatch {
# 57 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
template<class InputIterator, class
# 58 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
OutputIterator> OutputIterator
# 59 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
copy(InputIterator begin, InputIterator
# 60 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
end, OutputIterator
# 61 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
result, host_space_tag)
# 63 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
{
# 64 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
return std::copy(begin, end, result);
# 65 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
}
# 71 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
template<class InputIterator, class
# 72 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
OutputIterator> OutputIterator
# 73 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
copy(InputIterator begin, InputIterator
# 74 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
end, OutputIterator
# 75 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
result, device_space_tag)
# 77 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
{
# 78 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
return device::copy(begin, end, result);
# 79 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
}
# 85 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
template<class InputIterator, class
# 86 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
OutputIterator> OutputIterator
# 87 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
copy(InputIterator begin, InputIterator
# 88 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
end, OutputIterator
# 89 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
result, any_space_tag)
# 91 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
{
# 92 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
return device::copy(begin, end, result);
# 93 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
}
# 99 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
template<class InputIterator, class
# 100 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
OutputIterator> OutputIterator
# 101 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
copy(InputIterator first, InputIterator
# 102 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
last, OutputIterator
# 103 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
result, false_type
# 104 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
cross_space_copy)
# 105 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
{
# 106 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
return device::copy(first, last, result);
# 107 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
}
# 113 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
template<class InputIterator, class
# 114 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
OutputIterator> OutputIterator
# 115 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
copy(InputIterator first, InputIterator
# 116 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
last, OutputIterator
# 117 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
result, true_type
# 118 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
cross_space_copy)
# 119 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
{
# 120 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
typedef typename iterator_space< InputIterator> ::type space1;
# 121 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
typedef typename iterator_space< OutputIterator> ::type space2;
# 124 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
typedef typename thrust::detail::minimum_space< typename iterator_space< InputIterator> ::type, typename iterator_space< OutputIterator> ::type> ::type minimum_space;
# 126 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
return dispatch::copy(first, last, result, minimum_space());
# 127 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
}
# 131 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
template<class InputIterator, class
# 132 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
OutputIterator, class
# 133 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
Space1, class
# 134 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
Space2> OutputIterator
# 135 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
copy(InputIterator first, InputIterator
# 136 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
last, OutputIterator
# 137 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
result, Space1, Space2)
# 140 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
{
# 141 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
return dispatch::copy(first, last, result, typename is_one_convertible_to_the_other< Space1, Space2> ::type());
# 143 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
}
# 151 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
template<class InputIterator1, class
# 152 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
InputIterator2, class
# 153 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
OutputIterator, class
# 154 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
Predicate> OutputIterator
# 155 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
copy_if(InputIterator1 first, InputIterator1
# 156 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
last, InputIterator2
# 157 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
stencil, OutputIterator
# 158 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
result, Predicate
# 159 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
pred, host_space_tag, host_space_tag, host_space_tag)
# 163 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
{
# 164 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
return host::copy_if(first, last, stencil, result, pred);
# 165 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
}
# 171 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
template<class InputIterator1, class
# 172 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
InputIterator2, class
# 173 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
OutputIterator, class
# 174 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
Predicate> OutputIterator
# 175 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
copy_if(InputIterator1 first, InputIterator1
# 176 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
last, InputIterator2
# 177 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
stencil, OutputIterator
# 178 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
result, Predicate
# 179 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
pred, device_space_tag, device_space_tag, device_space_tag)
# 183 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
{
# 184 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
return device::copy_if(first, last, stencil, result, pred);
# 185 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
}
# 187 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
}
# 189 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
}
# 191 "/home/normal/checkout/thrust/thrust/detail/dispatch/copy.h"
}
# 28 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
namespace thrust {
# 35 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
template<class InputIterator, class
# 36 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
OutputIterator> OutputIterator
# 37 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
copy(InputIterator first, InputIterator
# 38 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
last, OutputIterator
# 39 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
result)
# 40 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
{
# 42 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
if (first == last) {
# 43 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
return result; }
# 45 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
return detail::dispatch::copy(first, last, result, typename iterator_space< InputIterator> ::type(), typename iterator_space< OutputIterator> ::type());
# 48 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
}
# 55 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
template<class InputIterator, class
# 56 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
PredicateIterator, class
# 57 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
OutputIterator> OutputIterator
# 58 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
copy_when(InputIterator first, InputIterator
# 59 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
last, PredicateIterator
# 60 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
stencil, OutputIterator
# 61 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
result)
# 62 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
{
# 64 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
typedef typename iterator_traits< PredicateIterator> ::value_type StencilType;
# 65 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
return thrust::copy_when(first, last, stencil, result, identity< typename iterator_traits< PredicateIterator> ::value_type> ());
# 66 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
}
# 68 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
template<class InputIterator, class
# 69 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
PredicateIterator, class
# 70 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
OutputIterator, class
# 71 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
Predicate> OutputIterator
# 72 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
copy_when(InputIterator first, InputIterator
# 73 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
last, PredicateIterator
# 74 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
stencil, OutputIterator
# 75 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
result, Predicate
# 76 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
pred)
# 77 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
{
# 78 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
typedef typename iterator_traits< InputIterator> ::value_type InputType;
# 79 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
return thrust::transform_if(first, last, stencil, result, identity< typename iterator_traits< InputIterator> ::value_type> (), pred);
# 80 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
}
# 87 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
template<class InputIterator, class
# 88 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
OutputIterator, class
# 89 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
Predicate> OutputIterator
# 90 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
copy_if(InputIterator first, InputIterator
# 91 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
last, OutputIterator
# 92 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
result, Predicate
# 93 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
pred)
# 94 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
{
# 99 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
return thrust::copy_if(first, last, first, result, pred);
# 100 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
}
# 102 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
template<class InputIterator1, class
# 103 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
InputIterator2, class
# 104 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
OutputIterator, class
# 105 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
Predicate> OutputIterator
# 106 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
copy_if(InputIterator1 first, InputIterator1
# 107 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
last, InputIterator2
# 108 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
stencil, OutputIterator
# 109 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
result, Predicate
# 110 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
pred)
# 111 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
{
# 112 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
return detail::dispatch::copy_if(first, last, stencil, result, pred, typename iterator_space< InputIterator1> ::type(), typename iterator_space< InputIterator2> ::type(), typename iterator_space< OutputIterator> ::type());
# 116 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
}
# 118 "/home/normal/checkout/thrust/thrust/detail/copy.inl"
}
# 28 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
namespace thrust {
# 31 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T>
# 32 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class OtherT> inline
# 34 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::device_reference(const thrust::device_reference< OtherT> &ref, typename detail::enable_if< (detail::is_convertible< typename thrust::device_reference< OtherT> ::pointer, device_ptr< T> > ::value), void> ::type *
# 44 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
dummy) : mPtr((ref.thrust::device_reference< OtherT> ::mPtr))
# 48 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 49 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
;
# 50 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 52 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> inline
# 54 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::device_reference(const pointer &ptr) : mPtr(ptr)
# 56 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 57 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
;
# 58 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 60 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> inline typename device_reference< T> ::pointer
# 62 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator&() const
# 63 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 64 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return mPtr;
# 65 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 67 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> device_reference< T> &
# 69 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator=(const T &v)
# 70 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 75 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
typedef typename detail::are_spaces_interoperable< typename iterator_space< device_ptr< T> > ::type, host_space_tag> ::type interop;
# 77 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
assign_from(&v, interop());
# 78 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *this;
# 79 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 81 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> device_reference< T> &
# 83 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator=(const thrust::device_reference< T> &ref)
# 84 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 86 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
typedef typename iterator_space< device_ptr< T> > ::type space;
# 92 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
typedef typename detail::are_spaces_interoperable< typename iterator_space< device_ptr< T> > ::type, typename iterator_space< device_ptr< T> > ::type> ::type interop;
# 94 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
assign_from(&ref, interop());
# 95 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *this;
# 96 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 98 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T>
# 99 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class OtherT> device_reference< T> &
# 101 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator=(const thrust::device_reference< OtherT> &ref)
# 102 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 104 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
typedef typename thrust::device_reference< OtherT> ::pointer other_pointer;
# 105 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
typedef typename iterator_space< typename thrust::device_reference< OtherT> ::pointer> ::type other_space;
# 111 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
typedef typename detail::are_spaces_interoperable< typename iterator_space< device_ptr< T> > ::type, typename iterator_space< typename thrust::device_reference< OtherT> ::pointer> ::type> ::type interop;
# 113 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
assign_from(&ref, interop());
# 114 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *this;
# 115 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 117 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> device_reference< T> &
# 119 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator++()
# 120 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 121 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type temp = (*this);
# 122 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
++temp;
# 123 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
(*this) = temp;
# 124 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *this;
# 125 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 127 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> typename device_reference< T> ::value_type
# 130 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator++(int)
# 131 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 132 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type temp = (*this);
# 133 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type result = (temp++);
# 134 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
(*this) = temp;
# 135 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return result;
# 136 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 138 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T>
# 140 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator typename device_reference< T> ::value_type() const
# 141 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 143 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
typedef typename iterator_space< device_ptr< T> > ::type space;
# 149 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
typedef typename detail::are_spaces_interoperable< typename iterator_space< device_ptr< T> > ::type, host_space_tag> ::type interop;
# 151 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return convert(interop());
# 152 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 154 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> device_reference< T> &
# 156 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator+=(const T &rhs)
# 157 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 158 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type temp = (*this);
# 159 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
temp += rhs;
# 160 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
(*this) = temp;
# 161 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *this;
# 162 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 164 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> device_reference< T> &
# 166 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator--()
# 167 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 168 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type temp = (*this);
# 169 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
--temp;
# 170 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
(*this) = temp;
# 171 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *this;
# 172 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 174 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> typename device_reference< T> ::value_type
# 177 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator--(int)
# 178 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 179 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type temp = (*this);
# 180 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type result = (temp--);
# 181 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
(*this) = temp;
# 182 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return result;
# 183 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 185 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> device_reference< T> &
# 187 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator-=(const T &rhs)
# 188 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 189 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type temp = (*this);
# 190 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
temp -= rhs;
# 191 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
(*this) = temp;
# 192 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *this;
# 193 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 195 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> device_reference< T> &
# 197 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator*=(const T &rhs)
# 198 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 199 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type temp = (*this);
# 200 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
temp *= rhs;
# 201 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
(*this) = temp;
# 202 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *this;
# 203 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 205 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> device_reference< T> &
# 207 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator/=(const T &rhs)
# 208 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 209 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type temp = (*this);
# 210 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
temp /= rhs;
# 211 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
(*this) = temp;
# 212 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *this;
# 213 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 215 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> device_reference< T> &
# 217 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator%=(const T &rhs)
# 218 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 219 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type temp = (*this);
# 220 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
temp %= rhs;
# 221 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
(*this) = temp;
# 222 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *this;
# 223 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 225 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> device_reference< T> &
# 227 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator<<=(const T &rhs)
# 228 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 229 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type temp = (*this);
# 230 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
temp <<= rhs;
# 231 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
(*this) = temp;
# 232 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *this;
# 233 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 235 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> device_reference< T> &
# 237 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator>>=(const T &rhs)
# 238 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 239 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type temp = (*this);
# 240 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
temp >>= rhs;
# 241 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
(*this) = temp;
# 242 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *this;
# 243 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 245 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> device_reference< T> &
# 247 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator&=(const T &rhs)
# 248 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 249 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type temp = (*this);
# 250 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
temp &= rhs;
# 251 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
(*this) = temp;
# 252 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *this;
# 253 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 255 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> device_reference< T> &
# 257 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator|=(const T &rhs)
# 258 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 259 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type temp = (*this);
# 260 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
temp |= rhs;
# 261 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
(*this) = temp;
# 262 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *this;
# 263 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 265 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> device_reference< T> &
# 267 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::operator^=(const T &rhs)
# 268 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 269 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type temp = (*this);
# 270 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
temp ^= rhs;
# 271 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
(*this) = temp;
# 272 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *this;
# 273 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 275 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T>
# 276 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class Pointer> inline void
# 278 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::assign_from(Pointer src, detail::false_type)
# 279 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 281 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
thrust::copy(src, src + 1, mPtr);
# 282 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 284 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T>
# 285 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class Pointer> inline void
# 287 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::assign_from(Pointer src, detail::true_type)
# 288 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 290 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
(*((mPtr).device_ptr< T> ::get())) = (*src);
# 291 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 293 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> inline typename device_reference< T> ::value_type
# 296 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::convert(detail::false_type) const
# 297 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 299 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
value_type result;
# 300 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
thrust::copy(mPtr, (mPtr) + 1, &result);
# 301 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return result;
# 302 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 304 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
template<class T> inline typename device_reference< T> ::value_type
# 307 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
device_reference< T> ::convert(detail::true_type) const
# 308 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
{
# 310 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
return *((mPtr).device_ptr< T> ::get());
# 311 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 313 "/home/normal/checkout/thrust/thrust/detail/device_reference.inl"
}
# 29 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
namespace thrust {
# 33 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T> inline typename device_ptr< T> ::reference
# 35 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
device_ptr< T> ::operator[](const difference_type &i) const
# 36 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
{
# 37 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
return ((reference)(device_pointer_cast((mPtr) + i)));
# 38 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 41 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T> inline typename device_ptr< T> ::reference
# 43 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
device_ptr< T> ::operator*() const
# 44 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
{
# 45 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
return ((reference)(device_pointer_cast(mPtr)));
# 46 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 48 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T> inline device_ptr< T>
# 49 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
device_pointer_cast(T *ptr)
# 50 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
{
# 51 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
return ((device_ptr< T> )(ptr));
# 52 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 54 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T> inline device_ptr< T>
# 55 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
device_pointer_cast(const device_ptr< T> &ptr)
# 56 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
{
# 57 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
return ptr;
# 58 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 60 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T> inline T *
# 61 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
raw_pointer_cast(const device_ptr< T> &ptr)
# 62 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
{
# 63 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
return (ptr.device_ptr< T> ::get());
# 64 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 66 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T> inline T *
# 67 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
raw_pointer_cast(T *ptr)
# 68 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
{
# 69 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
return ptr;
# 70 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 75 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T1, class T2> inline bool
# 76 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
operator==(const device_ptr< T1> &lhs, const device_ptr< T2> &rhs)
# 77 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
{
# 78 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
return (lhs.device_ptr< T1> ::get()) == (rhs.device_ptr< T2> ::get());
# 79 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 82 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T1, class T2> inline bool
# 83 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
operator!=(const device_ptr< T1> &lhs, const device_ptr< T2> &rhs)
# 84 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
{
# 85 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
return !(lhs == rhs);
# 86 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 89 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T1, class T2> inline bool
# 90 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
operator<(const device_ptr< T1> &lhs, const device_ptr< T2> &rhs)
# 91 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
{
# 92 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
return (lhs.device_ptr< T1> ::get()) < (rhs.device_ptr< T2> ::get());
# 93 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 96 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T1, class T2> inline bool
# 97 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
operator<=(const device_ptr< T1> &lhs, const device_ptr< T2> &rhs)
# 98 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
{
# 99 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
return (lhs.device_ptr< T1> ::get()) <= (rhs.device_ptr< T2> ::get());
# 100 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 103 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T1, class T2> inline bool
# 104 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
operator>(const device_ptr< T1> &lhs, const device_ptr< T2> &rhs)
# 105 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
{
# 106 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
return (lhs.device_ptr< T1> ::get()) > (rhs.device_ptr< T2> ::get());
# 107 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 110 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T1, class T2> inline bool
# 111 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
operator>=(const device_ptr< T1> &lhs, const device_ptr< T2> &rhs)
# 112 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
{
# 113 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
return (lhs.device_ptr< T1> ::get()) >= (rhs.device_ptr< T2> ::get());
# 114 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 117 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class E, class T, class Y> inline std::basic_ostream< E, T> &
# 118 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
operator<<(std::basic_ostream< E, T> &os, const device_ptr< Y> &p)
# 119 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
{
# 120 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
return os << (p.device_ptr< Y> ::get());
# 121 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 124 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
namespace detail {
# 127 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T>
# 128 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
struct is_device_ptr< device_ptr< T> > : public true_type {
# 131 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
};
# 134 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
namespace device {
# 139 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T> struct dereference_result;
# 142 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T>
# 143 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
struct dereference_result< device_ptr< T> > {
# 145 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
typedef T &type;
# 146 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
};
# 149 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T>
# 150 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
struct dereference_result< device_ptr< const T> > {
# 152 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
typedef const T &type;
# 153 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
};
# 156 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T> inline typename dereference_result< device_ptr< T> > ::type
# 159 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
dereference(device_ptr< T> ptr)
# 160 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
{
# 161 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
return *thrust::raw_pointer_cast(ptr);
# 162 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 165 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
template<class T, class IndexType> inline typename dereference_result< device_ptr< T> > ::type
# 168 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
dereference(device_ptr< T> ptr, IndexType n)
# 169 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
{
# 170 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
return thrust::raw_pointer_cast(ptr)[n];
# 171 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 173 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 175 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 177 "/home/normal/checkout/thrust/thrust/detail/device_ptr.inl"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.h"
namespace device {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.h"
namespace cuda {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.h"
template<class InputIterator, class
# 34 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.h"
SizeType, class
# 35 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.h"
OutputType, class
# 36 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.h"
BinaryFunction> OutputType
# 33 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.h"
reduce_n(InputIterator, SizeType, OutputType, BinaryFunction);
# 42 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.h"
}
# 43 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.h"
}
# 44 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.h"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.h"
}
# 19 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
namespace thrust {
# 21 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
namespace detail {
# 23 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
namespace device {
# 25 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
namespace cuda {
# 27 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
namespace block {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
template<unsigned block_size, class ValueIterator, class BinaryFunction> static void
# 32 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
reduce(ValueIterator data, BinaryFunction binary_op)
# 33 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
{volatile int ___ = 1;
# 44 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
exit(___);}
# 46 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
template<class ValueIterator, class BinaryFunction> static void
# 48 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
reduce_n(ValueIterator data, const unsigned n, BinaryFunction binary_op)
# 49 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
{volatile int ___ = 1;
# 61 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
exit(___);}
# 63 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
}
# 64 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
}
# 65 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
}
# 66 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
}
# 67 "/home/normal/checkout/thrust/thrust/detail/device/cuda/block/reduce.h"
}
# 34 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
namespace thrust {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
namespace detail {
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
namespace device {
# 40 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
namespace cuda {
# 42 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
namespace detail {
# 59 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
template<class InputIterator, class
# 60 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
OutputType, class
# 61 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
BinaryFunction, class
# 62 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
SharedArray> static void
# 64 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
reduce_n_device(InputIterator input, const unsigned
# 65 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
n, OutputType *
# 66 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
block_results, BinaryFunction
# 67 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
binary_op, SharedArray
# 68 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
shared_array)
# 69 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
{volatile int ___ = 1;
# 108 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
exit(___);}
# 110 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
template<class InputIterator, class
# 111 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
OutputType, class
# 112 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
BinaryFunction> static void
# 114 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
__wrapper__device_stub_reduce_n_smem(InputIterator &input, const unsigned &
# 115 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
n, OutputType *&
# 116 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
block_results, BinaryFunction &
# 117 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
binary_op);
# 110 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
template<class InputIterator, class
# 111 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
OutputType, class
# 112 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
BinaryFunction> void
# 114 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
reduce_n_smem(InputIterator input, const unsigned
# 115 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
n, OutputType *
# 116 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
block_results, BinaryFunction
# 117 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
binary_op)
# 118 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
{__wrapper__device_stub_reduce_n_smem<InputIterator,OutputType,BinaryFunction>(input,n,block_results,binary_op);
# 123 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
}
# 126 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
template<class InputIterator, class
# 127 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
OutputType, class
# 128 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
BinaryFunction> static void
# 130 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
__wrapper__device_stub_reduce_n_gmem(InputIterator &input, const unsigned &
# 131 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
n, OutputType *&
# 132 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
block_results, OutputType *&
# 133 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
shared_array, BinaryFunction &
# 134 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
binary_op);
# 126 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
template<class InputIterator, class
# 127 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
OutputType, class
# 128 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
BinaryFunction> void
# 130 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
reduce_n_gmem(InputIterator input, const unsigned
# 131 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
n, OutputType *
# 132 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
block_results, OutputType *
# 133 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
shared_array, BinaryFunction
# 134 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
binary_op)
# 135 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
{__wrapper__device_stub_reduce_n_gmem<InputIterator,OutputType,BinaryFunction>(input,n,block_results,shared_array,binary_op);
# 137 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
}
# 139 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
template<class InputIterator, class
# 140 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
SizeType, class
# 141 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
OutputType, class
# 142 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
BinaryFunction> OutputType
# 143 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
reduce_n(InputIterator first, SizeType
# 144 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
n, OutputType
# 145 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
init, BinaryFunction
# 146 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
binary_op, true_type)
# 148 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
{
# 150 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
const size_t smem_per_thread = sizeof(OutputType);
# 151 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
const size_t block_size = (experimental::arch::max_blocksize_with_highest_occupancy(&reduce_n_smem< InputIterator, OutputType, BinaryFunction> , smem_per_thread));
# 152 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
const size_t smem_size = (block_size * smem_per_thread);
# 153 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
const size_t max_blocks = (experimental::arch::max_active_blocks(&reduce_n_smem< InputIterator, OutputType, BinaryFunction> , block_size, smem_size));
# 154 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
const size_t num_blocks = (std::min(max_blocks, (n + (block_size - (1))) / block_size));
# 157 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
raw_cuda_device_buffer< OutputType> temp(num_blocks + (1));
# 160 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
(temp[0]) = init;
# 163 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
cudaConfigureCall(num_blocks, block_size, smem_size) ? ((void)0) : (reduce_n_smem)(first, n, raw_pointer_cast(&(temp[1])), binary_op);
# 166 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
{
# 168 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
const unsigned block_size_pass2 = (experimental::arch::max_blocksize(&reduce_n_smem< OutputType *, OutputType, BinaryFunction> , smem_per_thread));
# 172 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
const unsigned smem_size_pass2 = (smem_per_thread * block_size_pass2);
# 173 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
cudaConfigureCall(1, block_size_pass2, smem_size_pass2) ? ((void)0) : (reduce_n_smem)(raw_pointer_cast(&(temp[0])), num_blocks + (1), raw_pointer_cast(&(temp[0])), binary_op);
# 174 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
}
# 176 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
return temp[0];
# 177 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
}
# 180 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
template<class InputIterator, class
# 181 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
SizeType, class
# 182 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
OutputType, class
# 183 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
BinaryFunction> OutputType
# 184 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
reduce_n(InputIterator first, SizeType
# 185 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
n, OutputType
# 186 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
init, BinaryFunction
# 187 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
binary_op, false_type)
# 189 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
{
# 191 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
const size_t smem_per_thread = (0);
# 192 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
const size_t block_size = (experimental::arch::max_blocksize_with_highest_occupancy(&reduce_n_gmem< InputIterator, OutputType, BinaryFunction> , smem_per_thread));
# 193 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
const size_t smem_size = (block_size * smem_per_thread);
# 194 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
const size_t max_blocks = (experimental::arch::max_active_blocks(&reduce_n_gmem< InputIterator, OutputType, BinaryFunction> , block_size, smem_size));
# 195 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
const size_t num_blocks = (std::min(max_blocks, (n + (block_size - (1))) / block_size));
# 198 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
raw_cuda_device_buffer< OutputType> temp(num_blocks + (1));
# 201 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
raw_cuda_device_buffer< OutputType> shared_array(block_size * num_blocks);
# 204 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
(temp[0]) = init;
# 207 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
cudaConfigureCall(num_blocks, block_size, 0) ? ((void)0) : (detail::reduce_n_gmem)(first, n, raw_pointer_cast(&(temp[1])), raw_pointer_cast(&(shared_array[0])), binary_op);
# 210 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
{
# 212 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
const unsigned block_size_pass2 = (std::min(block_size, experimental::arch::max_blocksize(&reduce_n_gmem< OutputType *, OutputType, BinaryFunction> , smem_per_thread)));
# 216 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
const unsigned smem_size_pass2 = (smem_per_thread * block_size_pass2);
# 217 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
cudaConfigureCall(1, block_size_pass2, smem_size_pass2) ? ((void)0) : (detail::reduce_n_gmem)(raw_pointer_cast(&(temp[0])), num_blocks + (1), raw_pointer_cast(&(temp[0])), raw_pointer_cast(&(shared_array[0])), binary_op);
# 218 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
}
# 220 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
return temp[0];
# 221 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
}
# 223 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
}
# 229 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
template<class InputIterator, class
# 230 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
SizeType, class
# 231 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
OutputType, class
# 232 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
BinaryFunction> OutputType
# 233 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
reduce_n(InputIterator first, SizeType
# 234 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
n, OutputType
# 235 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
init, BinaryFunction
# 236 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
binary_op)
# 237 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
{
# 239 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
if (n == 0) {
# 240 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
return init; }
# 243 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
integral_constant< bool, (sizeof(OutputType) <= 64U)> use_smem;
# 245 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
return detail::reduce_n(first, n, init, binary_op, use_smem);
# 246 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
}
# 248 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
}
# 249 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
}
# 250 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
}
# 251 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce_n.inl"
}
# 32 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
namespace thrust {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
namespace detail {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
namespace device {
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
namespace cuda {
# 40 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
namespace detail {
# 45 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
template<class InputType, class OutputType, class BinaryFunction, class WideType>
# 46 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
struct wide_unary_op : public unary_function< WideType, OutputType> {
# 48 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
BinaryFunction binary_op;
# 51 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
wide_unary_op(BinaryFunction binary_op) : binary_op(binary_op)
# 52 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
{ }
# 55 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
OutputType operator()(WideType x)
# 56 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
{
# 57 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
WideType mask = ((((WideType)1) << ((8) * sizeof(InputType))) - 1);
# 59 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
OutputType sum = (static_cast< InputType>((x & mask)));
# 61 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
for (unsigned n = (1); n < (sizeof(WideType) / sizeof(InputType)); n++) {
# 62 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
sum = (binary_op)(sum, static_cast< InputType>(((x >> (((8) * n) * sizeof(InputType))) & mask))); }
# 64 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
return sum;
# 65 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
}
# 66 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
};
# 68 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
template<class InputIterator, class
# 69 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
OutputType, class
# 70 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
BinaryFunction> OutputType
# 71 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
reduce_device(InputIterator first, InputIterator
# 72 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
last, OutputType
# 73 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
init, BinaryFunction
# 74 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
binary_op, true_type)
# 76 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
{
# 78 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
typedef typename iterator_traits< InputIterator> ::value_type InputType;
# 79 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
typedef unsigned WideType;
# 86 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
size_t input_type_per_wide_type = (sizeof(WideType) / sizeof(typename iterator_traits< InputIterator> ::value_type));
# 87 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
size_t n_wide = ((last - first) / input_type_per_wide_type);
# 89 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
WideType *wide_first = (reinterpret_cast< WideType *>(thrust::raw_pointer_cast(&(*first))));
# 91 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
OutputType result = (cuda::reduce_n(thrust::make_transform_iterator(wide_first, ((wide_unary_op< typename iterator_traits< InputIterator> ::value_type, OutputType, BinaryFunction, unsigned> )(binary_op))), n_wide, init, binary_op));
# 96 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
InputIterator tail_first = (first + (n_wide * input_type_per_wide_type));
# 97 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
return cuda::reduce_n(tail_first, last - tail_first, result, binary_op);
# 98 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
}
# 100 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
template<class InputIterator, class
# 101 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
OutputType, class
# 102 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
BinaryFunction> OutputType
# 103 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
reduce_device(InputIterator first, InputIterator
# 104 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
last, OutputType
# 105 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
init, BinaryFunction
# 106 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
binary_op, false_type)
# 108 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
{
# 110 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
return cuda::reduce_n(first, last - first, init, binary_op);
# 111 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
}
# 113 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
}
# 116 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
template<class InputIterator, class
# 117 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
OutputType, class
# 118 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
BinaryFunction> OutputType
# 119 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
reduce(InputIterator first, InputIterator
# 120 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
last, OutputType
# 121 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
init, BinaryFunction
# 122 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
binary_op)
# 123 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
{
# 129 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
typedef static_assert_test< sizeof(STATIC_ASSERTION_FAILURE< (bool)depend_on_instantiation< InputIterator, true> ::value> )> thrust_static_assert_typedef_129;
# 131 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
typedef typename iterator_traits< InputIterator> ::value_type InputType;
# 133 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
const bool use_wide_load = ((is_pod< typename iterator_traits< InputIterator> ::value_type> ::value && is_trivial_iterator< InputIterator> ::value) && ((sizeof(typename iterator_traits< InputIterator> ::value_type) == (1)) || (sizeof(typename iterator_traits< InputIterator> ::value_type) == (2))));
# 138 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
(void)use_wide_load;
# 140 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
return detail::reduce_device(first, last, init, binary_op, integral_constant< bool, ((is_pod< typename iterator_traits< InputIterator> ::value_type> ::value && is_trivial_iterator< InputIterator> ::value) && ((sizeof(typename iterator_traits< InputIterator> ::value_type) == 1U) || (sizeof(typename iterator_traits< InputIterator> ::value_type) == 2U)))> ());
# 141 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
}
# 143 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
}
# 144 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
}
# 145 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
}
# 146 "/home/normal/checkout/thrust/thrust/detail/device/cuda/reduce.inl"
}
# 25 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.h"
namespace thrust {
# 27 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.h"
namespace detail {
# 29 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.h"
namespace device {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.h"
namespace omp {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.h"
template<class InputIterator, class
# 35 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.h"
OutputType, class
# 36 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.h"
BinaryFunction> OutputType
# 34 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.h"
reduce(InputIterator, InputIterator, OutputType, BinaryFunction);
# 42 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.h"
}
# 43 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.h"
}
# 44 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.h"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.h"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
namespace detail {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
namespace device {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
namespace omp {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
template<class InputIterator, class
# 37 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
OutputType, class
# 38 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
BinaryFunction> OutputType
# 39 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
reduce(InputIterator first, InputIterator
# 40 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
last, OutputType
# 41 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
init, BinaryFunction
# 42 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
binary_op)
# 43 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
{
# 49 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
typedef static_assert_test< sizeof(STATIC_ASSERTION_FAILURE< (bool)depend_on_instantiation< InputIterator, false> ::value> )> thrust_static_assert_typedef_50;
# 52 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
typedef typename iterator_difference< InputIterator> ::type difference_type;
# 54 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
if (first == last) {
# 55 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
return init; }
# 57 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
difference_type N = (thrust::distance(first, last));
# 85 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
OutputType total_sum = init;
# 94 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
return total_sum;
# 95 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
}
# 97 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
}
# 98 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
}
# 99 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
}
# 100 "/home/normal/checkout/thrust/thrust/detail/device/omp/reduce.inl"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
namespace detail {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
namespace device {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
namespace dispatch {
# 35 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
template<class InputIterator, class
# 36 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
OutputType, class
# 37 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
BinaryFunction> OutputType
# 38 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
reduce(InputIterator first, InputIterator
# 39 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
last, OutputType
# 40 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
init, BinaryFunction
# 41 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
binary_op, omp_device_space_tag)
# 43 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
{
# 45 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
return omp::reduce(first, last, init, binary_op);
# 46 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
}
# 48 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
template<class InputIterator, class
# 49 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
OutputType, class
# 50 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
BinaryFunction> OutputType
# 51 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
reduce(InputIterator first, InputIterator
# 52 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
last, OutputType
# 53 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
init, BinaryFunction
# 54 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
binary_op, cuda_device_space_tag)
# 56 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
{
# 58 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
return cuda::reduce(first, last, init, binary_op);
# 59 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
}
# 61 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
template<class InputIterator, class
# 62 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
OutputType, class
# 63 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
BinaryFunction> OutputType
# 64 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
reduce(InputIterator first, InputIterator
# 65 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
last, OutputType
# 66 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
init, BinaryFunction
# 67 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
binary_op, any_space_tag)
# 69 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
{
# 71 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
return dispatch::reduce(first, last, init, binary_op, default_device_space_tag());
# 73 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
}
# 75 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
}
# 76 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
}
# 77 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
}
# 78 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/reduce.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.h"
namespace device {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.h"
namespace generic {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.h"
template<class InputIterator1, class
# 34 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.h"
InputIterator2, class
# 35 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.h"
OutputIterator1, class
# 36 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.h"
OutputIterator2, class
# 37 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.h"
BinaryPredicate, class
# 38 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.h"
BinaryFunction> pair< OutputIterator1, OutputIterator2>
# 33 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.h"
reduce_by_key(InputIterator1, InputIterator1, InputIterator2, OutputIterator1, OutputIterator2, BinaryPredicate);
# 47 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.h"
}
# 48 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.h"
}
# 49 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.h"
}
# 50 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
namespace detail {
# 30 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
template<class Predicate>
# 31 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
struct unary_negate {
# 33 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
Predicate pred;
# 36 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
explicit unary_negate(const Predicate &pred) : pred(pred) { }
# 38 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
template<class T> bool
# 40 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
operator()(const T &x)
# 41 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
{
# 42 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
return !(pred)(x);
# 43 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
}
# 44 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
};
# 47 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
template<class Predicate>
# 48 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
struct binary_negate {
# 50 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
Predicate pred;
# 53 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
explicit binary_negate(const Predicate &pred) : pred(pred) { }
# 55 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
template<class T1, class T2> bool
# 57 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
operator()(const T1 &x, const T2 &y)
# 58 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
{
# 59 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
return !(pred)(x, y);
# 60 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
}
# 61 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
};
# 63 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
template<class Predicate> unary_negate< Predicate>
# 65 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
not1(const Predicate &pred)
# 66 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
{
# 67 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
return ((unary_negate< Predicate> )(pred));
# 68 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
}
# 70 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
template<class Predicate> binary_negate< Predicate>
# 72 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
not2(const Predicate &pred)
# 73 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
{
# 74 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
return ((binary_negate< Predicate> )(pred));
# 75 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
}
# 79 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
template<class T1>
# 80 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
struct equal_to {
# 82 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
template<class T2> bool
# 84 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
operator()(const T1 &lhs, const T2 &rhs) const
# 85 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
{
# 86 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
return lhs == rhs;
# 87 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
}
# 88 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
};
# 91 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
template<class T2>
# 92 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
struct equal_to_value {
# 94 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
const T2 rhs;
# 96 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
equal_to_value(const T2 &rhs) : rhs(rhs) { }
# 98 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
template<class T1> bool
# 100 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
operator()(const T1 &lhs) const
# 101 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
{
# 102 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
return lhs == (rhs);
# 103 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
}
# 104 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
};
# 106 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
template<class Predicate>
# 107 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
struct tuple_equal_to {
# 109 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
typedef bool result_type;
# 112 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
tuple_equal_to(const Predicate &p) : pred(p) { }
# 114 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
template<class Tuple> bool
# 116 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
operator()(const Tuple &t) const
# 117 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
{
# 118 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
return (pred)(thrust::get< 0> (t), thrust::get< 1> (t));
# 119 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
}
# 121 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
Predicate pred;
# 122 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
};
# 124 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
}
# 125 "/home/normal/checkout/thrust/thrust/detail/internal_functional.h"
}
# 35 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
namespace thrust {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
namespace detail {
# 39 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
namespace device {
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
namespace generic {
# 43 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
namespace detail {
# 46 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
template<class ValueType, class TailFlagType, class AssociativeOperator>
# 47 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
struct reduce_by_key_functor {
# 49 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
AssociativeOperator binary_op;
# 51 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
typedef tuple< ValueType, TailFlagType, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> result_type;
# 54 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
reduce_by_key_functor(AssociativeOperator _binary_op) : binary_op(_binary_op) { }
# 57 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
result_type operator()(result_type a, result_type b)
# 58 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
{
# 59 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
return result_type((thrust::get< 1> (b)) ? thrust::get< 0> (b) : (binary_op)(thrust::get< 0> (a), thrust::get< 0> (b)), thrust::get< 1> (a) | thrust::get< 1> (b));
# 61 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
}
# 62 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
};
# 64 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
}
# 67 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
template<class InputIterator1, class
# 68 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
InputIterator2, class
# 69 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
OutputIterator1, class
# 70 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
OutputIterator2, class
# 71 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
BinaryPredicate, class
# 72 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
BinaryFunction> pair< OutputIterator1, OutputIterator2>
# 74 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
reduce_by_key(InputIterator1 keys_first, InputIterator1
# 75 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
keys_last, InputIterator2
# 76 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
values_first, OutputIterator1
# 77 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
keys_output, OutputIterator2
# 78 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
values_output, BinaryPredicate
# 79 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
binary_pred, BinaryFunction
# 80 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
binary_op)
# 81 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
{
# 82 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
typedef typename iterator_traits< InputIterator1> ::difference_type difference_type;
# 83 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
typedef typename iterator_traits< InputIterator1> ::value_type KeyType;
# 84 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
typedef typename iterator_traits< OutputIterator2> ::value_type ValueType;
# 85 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
typedef typename iterator_space< OutputIterator1> ::type Space;
# 86 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
typedef unsigned FlagType;
# 88 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
if (keys_first == keys_last) {
# 89 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
return thrust::make_pair(keys_output, values_output); }
# 92 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
difference_type n = (keys_last - keys_first);
# 94 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
InputIterator2 values_last = (values_first + n);
# 97 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
raw_buffer< unsigned, typename iterator_space< OutputIterator1> ::type> head_flags(n);
# 98 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
thrust::transform(keys_first, keys_last - 1, keys_first + 1, (head_flags.raw_buffer< unsigned, typename iterator_space< OutputIterator1> ::type> ::begin()) + 1, thrust::detail::not2(binary_pred));
# 99 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
(head_flags[0]) = 1;
# 102 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
raw_buffer< unsigned, typename iterator_space< OutputIterator1> ::type> tail_flags(n);
# 103 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
thrust::transform(keys_first, keys_last - 1, keys_first + 1, (tail_flags.raw_buffer< unsigned, typename iterator_space< OutputIterator1> ::type> ::begin()), thrust::detail::not2(binary_pred));
# 104 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
(tail_flags[n - 1]) = 1;
# 107 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
raw_buffer< typename iterator_traits< OutputIterator2> ::value_type, typename iterator_space< OutputIterator1> ::type> scanned_values(n);
# 108 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
raw_buffer< unsigned, typename iterator_space< OutputIterator1> ::type> scanned_tail_flags(n);
# 110 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
device::inclusive_scan(thrust::make_zip_iterator(thrust::make_tuple(values_first, (head_flags.raw_buffer< unsigned, typename iterator_space< OutputIterator1> ::type> ::begin()))), thrust::make_zip_iterator(thrust::make_tuple(values_last, (head_flags.raw_buffer< unsigned, typename iterator_space< OutputIterator1> ::type> ::end()))), thrust::make_zip_iterator(thrust::make_tuple((scanned_values.raw_buffer< typename iterator_traits< OutputIterator2> ::value_type, typename iterator_space< OutputIterator1> ::type> ::begin()), (scanned_tail_flags.raw_buffer< unsigned, typename iterator_space< OutputIterator1> ::type> ::begin()))), ((detail::reduce_by_key_functor< typename iterator_traits< OutputIterator2> ::value_type, unsigned, BinaryFunction> )(binary_op)));
# 116 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
device::exclusive_scan((tail_flags.raw_buffer< unsigned, typename iterator_space< OutputIterator1> ::type> ::begin()), (tail_flags.raw_buffer< unsigned, typename iterator_space< OutputIterator1> ::type> ::end()), (scanned_tail_flags.raw_buffer< unsigned, typename iterator_space< OutputIterator1> ::type> ::begin()), (FlagType)0, plus< unsigned> ());
# 119 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
FlagType N = ((scanned_tail_flags[n - 1]) + 1);
# 122 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
thrust::scatter_if(keys_first, keys_last, (scanned_tail_flags.raw_buffer< unsigned, typename iterator_space< OutputIterator1> ::type> ::begin()), (head_flags.raw_buffer< unsigned, typename iterator_space< OutputIterator1> ::type> ::begin()), keys_output);
# 123 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
thrust::scatter_if((scanned_values.raw_buffer< typename iterator_traits< OutputIterator2> ::value_type, typename iterator_space< OutputIterator1> ::type> ::begin()), (scanned_values.raw_buffer< typename iterator_traits< OutputIterator2> ::value_type, typename iterator_space< OutputIterator1> ::type> ::end()), (scanned_tail_flags.raw_buffer< unsigned, typename iterator_space< OutputIterator1> ::type> ::begin()), (tail_flags.raw_buffer< unsigned, typename iterator_space< OutputIterator1> ::type> ::begin()), values_output);
# 125 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
return thrust::make_pair(keys_output + N, values_output + N);
# 126 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
}
# 128 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
}
# 129 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
}
# 130 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
}
# 131 "/home/normal/checkout/thrust/thrust/detail/device/generic/reduce_by_key.inl"
}
# 29 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
namespace thrust {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
namespace device {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
template<class InputIterator, class
# 37 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
OutputType, class
# 38 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
BinaryFunction> OutputType
# 39 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
reduce(InputIterator first, InputIterator
# 40 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
last, OutputType
# 41 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
init, BinaryFunction
# 42 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
binary_op)
# 43 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
{
# 45 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
return dispatch::reduce(first, last, init, binary_op, typename iterator_space< InputIterator> ::type());
# 47 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
}
# 49 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
template<class InputIterator1, class
# 50 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
InputIterator2, class
# 51 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
OutputIterator1, class
# 52 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
OutputIterator2, class
# 53 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
BinaryPredicate, class
# 54 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
BinaryFunction> pair< OutputIterator1, OutputIterator2>
# 56 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
reduce_by_key(InputIterator1 keys_first, InputIterator1
# 57 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
keys_last, InputIterator2
# 58 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
values_first, OutputIterator1
# 59 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
keys_output, OutputIterator2
# 60 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
values_output, BinaryPredicate
# 61 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
binary_pred, BinaryFunction
# 62 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
binary_op)
# 63 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
{
# 65 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
return generic::reduce_by_key(keys_first, keys_last, values_first, keys_output, values_output, binary_pred, binary_op);
# 66 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
}
# 68 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
}
# 69 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
}
# 70 "/home/normal/checkout/thrust/thrust/detail/device/reduce.h"
}
# 29 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
namespace thrust {
# 32 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
namespace detail {
# 35 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
namespace dispatch {
# 41 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
template<class InputIterator, class
# 42 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
OutputType, class
# 43 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
BinaryFunction> OutputType
# 44 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
reduce(InputIterator first, InputIterator
# 45 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
last, OutputType
# 46 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
init, BinaryFunction
# 47 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
binary_op, host_space_tag)
# 49 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
{
# 50 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
return host::reduce(first, last, init, binary_op);
# 51 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
}
# 53 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
template<class InputIterator1, class
# 54 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
InputIterator2, class
# 55 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
OutputIterator1, class
# 56 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
OutputIterator2, class
# 57 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
BinaryPredicate, class
# 58 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
BinaryFunction> pair< OutputIterator1, OutputIterator2>
# 60 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
reduce_by_key(InputIterator1 keys_first, InputIterator1
# 61 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
keys_last, InputIterator2
# 62 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
values_first, OutputIterator1
# 63 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
keys_output, OutputIterator2
# 64 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
values_output, BinaryPredicate
# 65 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
binary_pred, BinaryFunction
# 66 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
binary_op, host_space_tag, host_space_tag, host_space_tag, host_space_tag)
# 71 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
{
# 72 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
return host::reduce_by_key(keys_first, keys_last, values_first, keys_output, values_output, binary_pred, binary_op);
# 73 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
}
# 78 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
template<class InputIterator, class
# 79 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
OutputType, class
# 80 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
BinaryFunction> OutputType
# 81 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
reduce(InputIterator first, InputIterator
# 82 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
last, OutputType
# 83 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
init, BinaryFunction
# 84 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
binary_op, device_space_tag)
# 86 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
{
# 87 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
return device::reduce(first, last, init, binary_op);
# 88 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
}
# 90 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
template<class InputIterator1, class
# 91 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
InputIterator2, class
# 92 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
OutputIterator1, class
# 93 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
OutputIterator2, class
# 94 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
BinaryPredicate, class
# 95 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
BinaryFunction> pair< OutputIterator1, OutputIterator2>
# 97 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
reduce_by_key(InputIterator1 keys_first, InputIterator1
# 98 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
keys_last, InputIterator2
# 99 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
values_first, OutputIterator1
# 100 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
keys_output, OutputIterator2
# 101 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
values_output, BinaryPredicate
# 102 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
binary_pred, BinaryFunction
# 103 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
binary_op, device_space_tag, device_space_tag, device_space_tag, device_space_tag)
# 108 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
{
# 109 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
return device::reduce_by_key(keys_first, keys_last, values_first, keys_output, values_output, binary_pred, binary_op);
# 110 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
}
# 115 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
template<class InputIterator, class
# 116 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
OutputType, class
# 117 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
BinaryFunction> OutputType
# 118 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
reduce(InputIterator first, InputIterator
# 119 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
last, OutputType
# 120 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
init, BinaryFunction
# 121 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
binary_op, any_space_tag)
# 123 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
{
# 125 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
return dispatch::reduce(first, last, init, binary_op, device_space_tag());
# 126 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
}
# 128 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
}
# 129 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
}
# 130 "/home/normal/checkout/thrust/thrust/detail/dispatch/reduce.h"
}
# 28 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
namespace thrust {
# 31 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
template<class InputIterator> typename iterator_traits< InputIterator> ::value_type
# 33 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
reduce(InputIterator first, InputIterator
# 34 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
last)
# 35 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
{
# 36 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
typedef typename iterator_traits< InputIterator> ::value_type InputType;
# 39 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
return thrust::reduce(first, last, ((InputType)(0)));
# 40 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
}
# 42 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
template<class InputIterator, class
# 43 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
T> T
# 44 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
reduce(InputIterator first, InputIterator
# 45 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
last, T
# 46 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
init)
# 47 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
{
# 49 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
return thrust::reduce(first, last, init, plus< T> ());
# 50 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
}
# 53 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
template<class InputIterator, class
# 54 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
T, class
# 55 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
BinaryFunction> T
# 56 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
reduce(InputIterator first, InputIterator
# 57 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
last, T
# 58 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
init, BinaryFunction
# 59 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
binary_op)
# 60 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
{
# 62 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
return detail::dispatch::reduce(first, last, init, binary_op, typename iterator_space< InputIterator> ::type());
# 64 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
}
# 66 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
template<class InputIterator1, class
# 67 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
InputIterator2, class
# 68 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
OutputIterator1, class
# 69 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
OutputIterator2> pair< OutputIterator1, OutputIterator2>
# 71 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
reduce_by_key(InputIterator1 keys_first, InputIterator1
# 72 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
keys_last, InputIterator2
# 73 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
values_first, OutputIterator1
# 74 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
keys_output, OutputIterator2
# 75 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
values_output)
# 76 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
{
# 77 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
typedef typename iterator_value< InputIterator1> ::type KeyType;
# 80 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
return thrust::reduce_by_key(keys_first, keys_last, values_first, keys_output, values_output, equal_to< typename iterator_value< InputIterator1> ::type> ());
# 85 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
}
# 87 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
template<class InputIterator1, class
# 88 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
InputIterator2, class
# 89 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
OutputIterator1, class
# 90 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
OutputIterator2, class
# 91 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
BinaryPredicate> pair< OutputIterator1, OutputIterator2>
# 93 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
reduce_by_key(InputIterator1 keys_first, InputIterator1
# 94 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
keys_last, InputIterator2
# 95 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
values_first, OutputIterator1
# 96 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
keys_output, OutputIterator2
# 97 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
values_output, BinaryPredicate
# 98 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
binary_pred)
# 99 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
{
# 100 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
typedef typename iterator_value< OutputIterator2> ::type OutputType;
# 103 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
return thrust::reduce_by_key(keys_first, keys_last, values_first, keys_output, values_output, binary_pred, plus< typename iterator_value< OutputIterator2> ::type> ());
# 109 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
}
# 111 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
template<class InputIterator1, class
# 112 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
InputIterator2, class
# 113 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
OutputIterator1, class
# 114 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
OutputIterator2, class
# 115 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
BinaryPredicate, class
# 116 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
BinaryFunction> pair< OutputIterator1, OutputIterator2>
# 118 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
reduce_by_key(InputIterator1 keys_first, InputIterator1
# 119 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
keys_last, InputIterator2
# 120 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
values_first, OutputIterator1
# 121 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
keys_output, OutputIterator2
# 122 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
values_output, BinaryPredicate
# 123 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
binary_pred, BinaryFunction
# 124 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
binary_op)
# 125 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
{
# 127 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
return detail::dispatch::reduce_by_key(keys_first, keys_last, values_first, keys_output, values_output, binary_pred, binary_op, typename iterator_space< InputIterator1> ::type(), typename iterator_space< InputIterator2> ::type(), typename iterator_space< OutputIterator1> ::type(), typename iterator_space< OutputIterator2> ::type());
# 138 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
}
# 140 "/home/normal/checkout/thrust/thrust/detail/reduce.inl"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
template<class InputIterator, class
# 30 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
UnaryFunction, class
# 31 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
OutputType, class
# 32 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
BinaryFunction> OutputType
# 33 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
transform_reduce(InputIterator first, InputIterator
# 34 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
last, UnaryFunction
# 35 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
unary_op, OutputType
# 36 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
init, BinaryFunction
# 37 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
binary_op)
# 38 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
{
# 39 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
transform_iterator< UnaryFunction, InputIterator, OutputType, use_default> _first(first, unary_op);
# 40 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
transform_iterator< UnaryFunction, InputIterator, OutputType, use_default> _last(last, unary_op);
# 42 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
return thrust::reduce(_first, _last, init, binary_op);
# 43 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/transform_reduce.inl"
}
# 34 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
namespace thrust {
# 38 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
template<class > class device_ptr;
# 39 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
template<class T> inline device_ptr< T> device_malloc(const size_t);
# 54 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
template<class T>
# 55 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
class device_malloc_allocator {
# 58 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
public: typedef T value_type;
# 59 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
typedef device_ptr< T> pointer;
# 60 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
typedef device_ptr< const T> const_pointer;
# 61 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
typedef device_reference< T> reference;
# 62 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
typedef device_reference< const T> const_reference;
# 63 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
typedef size_t size_type;
# 64 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
typedef typename device_ptr< T> ::difference_type difference_type;
# 67 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
template<class U>
# 68 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
struct rebind {
# 70 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
typedef thrust::device_malloc_allocator< U> other;
# 71 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
};
# 74 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
device_malloc_allocator() { }
# 77 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
~device_malloc_allocator() { }
# 80 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
device_malloc_allocator(const thrust::device_malloc_allocator< T> &) { }
# 82 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
template<class U>
# 84 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
device_malloc_allocator(const thrust::device_malloc_allocator< U> &) { }
# 88 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
pointer address(reference r) { return &r; }
# 91 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
const_pointer address(const_reference r) { return &r; }
# 95 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
pointer allocate(size_type cnt, const_pointer = ((const_pointer)((T *)0)))
# 97 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
{
# 98 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
if (cnt > this->max_size())
# 99 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
{
# 100 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
throw std::bad_alloc();
# 101 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
}
# 103 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
return ((pointer)(device_malloc< T> (cnt)));
# 104 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
}
# 107 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
void deallocate(pointer p, size_type cnt)
# 108 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
{
# 109 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
device_free(p);
# 110 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
}
# 112 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
size_type max_size() const
# 113 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
{
# 114 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
return std::numeric_limits< unsigned> ::max() / sizeof(T);
# 115 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
}
# 118 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
bool operator==(const thrust::device_malloc_allocator< T> &) { return true; }
# 121 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
bool operator!=(const thrust::device_malloc_allocator< T> &a) { return !this->operator==(a); }
# 122 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
};
# 127 "/home/normal/checkout/thrust/thrust/device_malloc_allocator.h"
}
# 22 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator_base.h"
namespace thrust {
# 25 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator_base.h"
template<class > class reverse_iterator;
# 27 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator_base.h"
namespace detail {
# 30 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator_base.h"
template<class BidirectionalIterator>
# 31 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator_base.h"
struct reverse_iterator_base {
# 41 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator_base.h"
typedef experimental::iterator_adaptor< reverse_iterator< BidirectionalIterator> , BidirectionalIterator, typename iterator_pointer< BidirectionalIterator> ::type, typename iterator_value< BidirectionalIterator> ::type, typename iterator_space< BidirectionalIterator> ::type, typename iterator_traversal< BidirectionalIterator> ::type, typename thrust::iterator_reference< BidirectionalIterator> ::type, use_default> type;
# 42 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator_base.h"
};
# 44 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator_base.h"
}
# 46 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator_base.h"
}
# 34 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
namespace thrust {
# 138 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
template<class BidirectionalIterator>
# 139 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
class reverse_iterator : public detail::reverse_iterator_base< BidirectionalIterator> ::type {
# 147 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
typedef typename detail::reverse_iterator_base< BidirectionalIterator> ::type super_t;
# 149 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
friend class experimental::iterator_core_access;
# 157 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
public: reverse_iterator() { }
# 165 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
inline explicit reverse_iterator(BidirectionalIterator);
# 172 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
template<class OtherBidirectionalIterator> inline reverse_iterator(const thrust::reverse_iterator< OtherBidirectionalIterator> &, typename detail::enable_if< (detail::is_convertible< OtherBidirectionalIterator, BidirectionalIterator> ::value), void> ::type * = (0));
# 191 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
private: inline typename detail::reverse_iterator_base< BidirectionalIterator> ::type::reference dereference() const;
# 194 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
inline void increment();
# 197 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
inline void decrement();
# 200 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
inline void advance(typename detail::reverse_iterator_base< BidirectionalIterator> ::type::difference_type);
# 202 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
template<class OtherBidirectionalIterator> inline typename detail::reverse_iterator_base< BidirectionalIterator> ::type::difference_type distance_to(const thrust::reverse_iterator< OtherBidirectionalIterator> &) const;
# 208 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
};
# 217 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
template<class BidirectionalIterator> reverse_iterator< BidirectionalIterator> make_reverse_iterator(BidirectionalIterator);
# 228 "/home/normal/checkout/thrust/thrust/iterator/reverse_iterator.h"
}
# 21 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
namespace thrust {
# 24 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
namespace detail {
# 27 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
template<class Iterator> Iterator
# 29 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
prior(Iterator x)
# 30 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
{
# 31 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
return --x;
# 32 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
}
# 34 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
}
# 36 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
template<class BidirectionalIterator> inline
# 38 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
reverse_iterator< BidirectionalIterator> ::reverse_iterator(BidirectionalIterator x) : detail::reverse_iterator_base< BidirectionalIterator> ::type(x)
# 40 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
{
# 41 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
}
# 43 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
template<class BidirectionalIterator>
# 44 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
template<class OtherBidirectionalIterator> inline
# 46 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
reverse_iterator< BidirectionalIterator> ::reverse_iterator(const thrust::reverse_iterator< OtherBidirectionalIterator> &r, typename detail::enable_if< (detail::is_convertible< OtherBidirectionalIterator, BidirectionalIterator> ::value), void> ::type *) : detail::reverse_iterator_base< BidirectionalIterator> ::type((r.thrust::reverse_iterator< OtherBidirectionalIterator> ::base()))
# 58 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
{
# 59 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
}
# 61 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
template<class BidirectionalIterator> inline typename detail::reverse_iterator_base< BidirectionalIterator> ::type::reference
# 64 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
reverse_iterator< BidirectionalIterator> ::dereference() const
# 65 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
{
# 66 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
return *detail::prior((this->base()));
# 67 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
}
# 69 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
template<class BidirectionalIterator> inline void
# 71 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
reverse_iterator< BidirectionalIterator> ::increment()
# 72 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
{
# 73 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
--(this->base_reference());
# 74 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
}
# 76 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
template<class BidirectionalIterator> inline void
# 78 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
reverse_iterator< BidirectionalIterator> ::decrement()
# 79 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
{
# 80 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
++(this->base_reference());
# 81 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
}
# 83 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
template<class BidirectionalIterator> inline void
# 85 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
reverse_iterator< BidirectionalIterator> ::advance(typename detail::reverse_iterator_base< BidirectionalIterator> ::type::difference_type n)
# 86 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
{
# 87 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
(this->base_reference()) += (-n);
# 88 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
}
# 90 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
template<class BidirectionalIterator>
# 91 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
template<class OtherBidirectionalIterator> inline typename detail::reverse_iterator_base< BidirectionalIterator> ::type::difference_type
# 94 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
reverse_iterator< BidirectionalIterator> ::distance_to(const thrust::reverse_iterator< OtherBidirectionalIterator> &y) const
# 95 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
{
# 96 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
return (this->base_reference()) - (y.thrust::reverse_iterator< OtherBidirectionalIterator> ::base());
# 97 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
}
# 99 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
template<class BidirectionalIterator> reverse_iterator< BidirectionalIterator>
# 101 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
make_reverse_iterator(BidirectionalIterator x)
# 102 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
{
# 103 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
return ((reverse_iterator< BidirectionalIterator> )(x));
# 104 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
}
# 107 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
namespace detail {
# 110 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
namespace device {
# 113 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
template<class DeviceBidirectionalIterator>
# 114 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
struct dereference_result< reverse_iterator< DeviceBidirectionalIterator> > : public dereference_result< DeviceBidirectionalIterator> {
# 117 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
};
# 119 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
template<class BidirectionalIterator> inline typename dereference_result< reverse_iterator< BidirectionalIterator> > ::type
# 122 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
dereference(const reverse_iterator< BidirectionalIterator> &iter)
# 123 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
{
# 124 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
return dereference(thrust::detail::prior((iter.reverse_iterator< BidirectionalIterator> ::base())));
# 125 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
}
# 127 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
template<class BidirectionalIterator, class IndexType> inline typename dereference_result< reverse_iterator< BidirectionalIterator> > ::type
# 130 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
dereference(const reverse_iterator< BidirectionalIterator> &iter, IndexType n)
# 131 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
{
# 132 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
reverse_iterator< BidirectionalIterator> temp = iter;
# 133 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
temp += n;
# 134 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
return dereference(temp);
# 135 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
}
# 137 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
}
# 139 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
}
# 141 "/home/normal/checkout/thrust/thrust/iterator/detail/reverse_iterator.inl"
}
# 30 "/home/normal/checkout/thrust/thrust/utility.h"
namespace thrust {
# 61 "/home/normal/checkout/thrust/thrust/utility.h"
template<class Assignable1, class Assignable2> inline void swap(Assignable1 &, Assignable2 &);
# 68 "/home/normal/checkout/thrust/thrust/utility.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/utility.inl"
namespace thrust {
# 27 "/home/normal/checkout/thrust/thrust/detail/utility.inl"
template<class Assignable1, class Assignable2> inline void
# 28 "/home/normal/checkout/thrust/thrust/detail/utility.inl"
swap(Assignable1 &a, Assignable2 &b)
# 29 "/home/normal/checkout/thrust/thrust/detail/utility.inl"
{
# 30 "/home/normal/checkout/thrust/thrust/detail/utility.inl"
Assignable1 temp = a;
# 31 "/home/normal/checkout/thrust/thrust/detail/utility.inl"
a = b;
# 32 "/home/normal/checkout/thrust/thrust/detail/utility.inl"
b = temp;
# 33 "/home/normal/checkout/thrust/thrust/detail/utility.inl"
}
# 35 "/home/normal/checkout/thrust/thrust/detail/utility.inl"
}
# 65 "/usr/include/c++/4.4/bits/stl_vector.h" 3
namespace std __attribute__((visibility("default"))) {
# 68 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    struct _Vector_base
    {
      typedef typename _Alloc :: template rebind < _Tp > :: other _Tp_alloc_type;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 typename _Tp_alloc_type :: pointer _M_start;
 typename _Tp_alloc_type :: pointer _M_finish;
 typename _Tp_alloc_type :: pointer _M_end_of_storage;

 _Vector_impl ( )
 : _Tp_alloc_type ( ), _M_start ( 0 ), _M_finish ( 0 ), _M_end_of_storage ( 0 )
 { }

 _Vector_impl ( _Tp_alloc_type const & __a )
 : _Tp_alloc_type ( __a ), _M_start ( 0 ), _M_finish ( 0 ), _M_end_of_storage ( 0 )
 { }
      };

    public :
      typedef _Alloc allocator_type;

      _Tp_alloc_type &
      _M_get_Tp_allocator ( )
      { return * static_cast < _Tp_alloc_type * > ( & this -> _M_impl ); }

      const _Tp_alloc_type &
      _M_get_Tp_allocator ( ) const
      { return * static_cast < const _Tp_alloc_type * > ( & this -> _M_impl ); }

      allocator_type
      get_allocator ( ) const
      { return allocator_type ( _M_get_Tp_allocator ( ) ); }

      _Vector_base ( )
      : _M_impl ( ) { }

      _Vector_base ( const allocator_type & __a )
      : _M_impl ( __a ) { }

      _Vector_base ( size_t __n, const allocator_type & __a )
      : _M_impl ( __a )
      {
 this -> _M_impl . _M_start = this -> _M_allocate ( __n );
 this -> _M_impl . _M_finish = this -> _M_impl . _M_start;
 this -> _M_impl . _M_end_of_storage = this -> _M_impl . _M_start + __n;
      }

      ~ _Vector_base ( )
      { _M_deallocate ( this -> _M_impl . _M_start, this -> _M_impl . _M_end_of_storage
        - this -> _M_impl . _M_start ); }

    public :
      _Vector_impl _M_impl;

      typename _Tp_alloc_type :: pointer
      _M_allocate ( size_t __n )
      { return __n != 0 ? _M_impl . allocate ( __n ) : 0; }

      void
      _M_deallocate ( typename _Tp_alloc_type :: pointer __p, size_t __n )
      {
 if ( __p )
   _M_impl . deallocate ( __p, __n );
      }
    };
# 169 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc = std :: allocator < _Tp > >
    class vector : protected _Vector_base < _Tp, _Alloc >
    {

      typedef typename _Alloc :: value_type _Alloc_value_type;



      typedef _Vector_base < _Tp, _Alloc > _Base;
      typedef typename _Base :: _Tp_alloc_type _Tp_alloc_type;

    public :
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type :: pointer pointer;
      typedef typename _Tp_alloc_type :: const_pointer const_pointer;
      typedef typename _Tp_alloc_type :: reference reference;
      typedef typename _Tp_alloc_type :: const_reference const_reference;
      typedef __gnu_cxx :: __normal_iterator < pointer, vector > iterator;
      typedef __gnu_cxx :: __normal_iterator < const_pointer, vector >
      const_iterator;
      typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;
      typedef std :: reverse_iterator < iterator > reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected :
      using _Base :: _M_allocate;
      using _Base :: _M_deallocate;
      using _Base :: _M_impl;
      using _Base :: _M_get_Tp_allocator;

    public :





      vector ( )
      : _Base ( ) { }





      explicit
      vector ( const allocator_type & __a )
      : _Base ( __a ) { }
# 226 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      explicit
      vector ( size_type __n, const value_type & __value = value_type ( ),
      const allocator_type & __a = allocator_type ( ) )
      : _Base ( __n, __a )
      { _M_fill_initialize ( __n, __value ); }
# 241 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      vector ( const vector & __x )
      : _Base ( __x . size ( ), __x . _M_get_Tp_allocator ( ) )
      { this -> _M_impl . _M_finish =
   std :: __uninitialized_copy_a ( __x . begin ( ), __x . end ( ),
          this -> _M_impl . _M_start,
          _M_get_Tp_allocator ( ) );
      }
# 265 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template < typename _InputIterator >
        vector ( _InputIterator __first, _InputIterator __last,
        const allocator_type & __a = allocator_type ( ) )
 : _Base ( __a )
        {

   typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
   _M_initialize_dispatch ( __first, __last, _Integral ( ) );
 }







      ~ vector ( )
      { std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
        _M_get_Tp_allocator ( ) ); }
# 293 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      vector &
      operator = ( const vector & __x );
# 306 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      assign ( size_type __n, const value_type & __val )
      { _M_fill_assign ( __n, __val ); }
# 322 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template < typename _InputIterator >
        void
        assign ( _InputIterator __first, _InputIterator __last )
        {

   typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
   _M_assign_dispatch ( __first, __last, _Integral ( ) );
 }


      using _Base :: get_allocator;







      iterator
      begin ( )
      { return iterator ( this -> _M_impl . _M_start ); }






      const_iterator
      begin ( ) const
      { return const_iterator ( this -> _M_impl . _M_start ); }






      iterator
      end ( )
      { return iterator ( this -> _M_impl . _M_finish ); }






      const_iterator
      end ( ) const
      { return const_iterator ( this -> _M_impl . _M_finish ); }






      reverse_iterator
      rbegin ( )
      { return reverse_iterator ( end ( ) ); }






      const_reverse_iterator
      rbegin ( ) const
      { return const_reverse_iterator ( end ( ) ); }






      reverse_iterator
      rend ( )
      { return reverse_iterator ( begin ( ) ); }






      const_reverse_iterator
      rend ( ) const
      { return const_reverse_iterator ( begin ( ) ); }



      size_type
      size ( ) const
      { return size_type ( this -> _M_impl . _M_finish - this -> _M_impl . _M_start ); }


      size_type
      max_size ( ) const
      { return _M_get_Tp_allocator ( ) . max_size ( ); }
# 429 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      resize ( size_type __new_size, value_type __x = value_type ( ) )
      {
 if ( __new_size < size ( ) )
   _M_erase_at_end ( this -> _M_impl . _M_start + __new_size );
 else
   insert ( end ( ), __new_size - size ( ), __x );
      }





      size_type
      capacity ( ) const
      { return size_type ( this -> _M_impl . _M_end_of_storage
    - this -> _M_impl . _M_start ); }





      bool
      empty ( ) const
      { return begin ( ) == end ( ); }
# 472 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      reserve ( size_type __n );
# 487 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      reference
      operator [ ] ( size_type __n )
      { return * ( this -> _M_impl . _M_start + __n ); }
# 502 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      const_reference
      operator [ ] ( size_type __n ) const
      { return * ( this -> _M_impl . _M_start + __n ); }

    protected :

      void
      _M_range_check ( size_type __n ) const
      {
 if ( __n >= this -> size ( ) )
   __throw_out_of_range ( ( "vector::_M_range_check" ) );
      }

    public :
# 527 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      reference
      at ( size_type __n )
      {
 _M_range_check ( __n );
 return ( * this ) [ __n ];
      }
# 545 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      const_reference
      at ( size_type __n ) const
      {
 _M_range_check ( __n );
 return ( * this ) [ __n ];
      }





      reference
      front ( )
      { return * begin ( ); }





      const_reference
      front ( ) const
      { return * begin ( ); }





      reference
      back ( )
      { return * ( end ( ) - 1 ); }





      const_reference
      back ( ) const
      { return * ( end ( ) - 1 ); }
# 591 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      pointer
      data ( )
      { return pointer ( this -> _M_impl . _M_start ); }

      const_pointer
      data ( ) const
      { return const_pointer ( this -> _M_impl . _M_start ); }
# 610 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      push_back ( const value_type & __x )
      {
 if ( this -> _M_impl . _M_finish != this -> _M_impl . _M_end_of_storage )
   {
     this -> _M_impl . construct ( this -> _M_impl . _M_finish, __x );
     ++ this -> _M_impl . _M_finish;
   }
 else
   _M_insert_aux ( end ( ), __x );
      }
# 631 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      pop_back ( )
      {
 -- this -> _M_impl . _M_finish;
 this -> _M_impl . destroy ( this -> _M_impl . _M_finish );
      }
# 649 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      iterator
      insert ( iterator __position, const value_type & __x );
# 665 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      insert ( iterator __position, size_type __n, const value_type & __x )
      { _M_fill_insert ( __position, __n, __x ); }
# 683 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template < typename _InputIterator >
        void
        insert ( iterator __position, _InputIterator __first,
        _InputIterator __last )
        {

   typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
   _M_insert_dispatch ( __position, __first, __last, _Integral ( ) );
 }
# 708 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      iterator
      erase ( iterator __position );
# 729 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      iterator
      erase ( iterator __first, iterator __last );
# 741 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void



      swap ( vector & __x )

      {
 std :: swap ( this -> _M_impl . _M_start, __x . _M_impl . _M_start );
 std :: swap ( this -> _M_impl . _M_finish, __x . _M_impl . _M_finish );
 std :: swap ( this -> _M_impl . _M_end_of_storage,
    __x . _M_impl . _M_end_of_storage );



 std :: __alloc_swap < _Tp_alloc_type > :: _S_do_it ( _M_get_Tp_allocator ( ),
          __x . _M_get_Tp_allocator ( ) );
      }







      void
      clear ( )
      { _M_erase_at_end ( this -> _M_impl . _M_start ); }

    protected :




      template < typename _ForwardIterator >
        pointer
        _M_allocate_and_copy ( size_type __n,
        _ForwardIterator __first, _ForwardIterator __last )
        {
   pointer __result = this -> _M_allocate ( __n );
   try
     {
       std :: __uninitialized_copy_a ( __first, __last, __result,
       _M_get_Tp_allocator ( ) );
       return __result;
     }
   catch ( ... )
     {
       _M_deallocate ( __result, __n );
       throw;
     }
 }
# 800 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template < typename _Integer >
        void
        _M_initialize_dispatch ( _Integer __n, _Integer __value, __true_type )
        {
   this -> _M_impl . _M_start = _M_allocate ( static_cast < size_type > ( __n ) );
   this -> _M_impl . _M_end_of_storage =
     this -> _M_impl . _M_start + static_cast < size_type > ( __n );
   _M_fill_initialize ( static_cast < size_type > ( __n ), __value );
 }


      template < typename _InputIterator >
        void
        _M_initialize_dispatch ( _InputIterator __first, _InputIterator __last,
          __false_type )
        {
   typedef typename std :: iterator_traits < _InputIterator > ::
     iterator_category _IterCategory;
   _M_range_initialize ( __first, __last, _IterCategory ( ) );
 }


      template < typename _InputIterator >
        void
        _M_range_initialize ( _InputIterator __first,
       _InputIterator __last, std :: input_iterator_tag )
        {
   for (; __first != __last; ++ __first )
     push_back ( * __first );
 }


      template < typename _ForwardIterator >
        void
        _M_range_initialize ( _ForwardIterator __first,
       _ForwardIterator __last, std :: forward_iterator_tag )
        {
   const size_type __n = std :: distance ( __first, __last );
   this -> _M_impl . _M_start = this -> _M_allocate ( __n );
   this -> _M_impl . _M_end_of_storage = this -> _M_impl . _M_start + __n;
   this -> _M_impl . _M_finish =
     std :: __uninitialized_copy_a ( __first, __last,
     this -> _M_impl . _M_start,
     _M_get_Tp_allocator ( ) );
 }



      void
      _M_fill_initialize ( size_type __n, const value_type & __value )
      {
 std :: __uninitialized_fill_n_a ( this -> _M_impl . _M_start, __n, __value,
          _M_get_Tp_allocator ( ) );
 this -> _M_impl . _M_finish = this -> _M_impl . _M_end_of_storage;
      }
# 864 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template < typename _Integer >
        void
        _M_assign_dispatch ( _Integer __n, _Integer __val, __true_type )
        { _M_fill_assign ( __n, __val ); }


      template < typename _InputIterator >
        void
        _M_assign_dispatch ( _InputIterator __first, _InputIterator __last,
      __false_type )
        {
   typedef typename std :: iterator_traits < _InputIterator > ::
     iterator_category _IterCategory;
   _M_assign_aux ( __first, __last, _IterCategory ( ) );
 }


      template < typename _InputIterator >
        void
        _M_assign_aux ( _InputIterator __first, _InputIterator __last,
        std :: input_iterator_tag );


      template < typename _ForwardIterator >
        void
        _M_assign_aux ( _ForwardIterator __first, _ForwardIterator __last,
        std :: forward_iterator_tag );



      void
      _M_fill_assign ( size_type __n, const value_type & __val );
# 904 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template < typename _Integer >
        void
        _M_insert_dispatch ( iterator __pos, _Integer __n, _Integer __val,
      __true_type )
        { _M_fill_insert ( __pos, __n, __val ); }


      template < typename _InputIterator >
        void
        _M_insert_dispatch ( iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type )
        {
   typedef typename std :: iterator_traits < _InputIterator > ::
     iterator_category _IterCategory;
   _M_range_insert ( __pos, __first, __last, _IterCategory ( ) );
 }


      template < typename _InputIterator >
        void
        _M_range_insert ( iterator __pos, _InputIterator __first,
   _InputIterator __last, std :: input_iterator_tag );


      template < typename _ForwardIterator >
        void
        _M_range_insert ( iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std :: forward_iterator_tag );



      void
      _M_fill_insert ( iterator __pos, size_type __n, const value_type & __x );



      void
      _M_insert_aux ( iterator __position, const value_type & __x );







      size_type
      _M_check_len ( size_type __n, const char * __s ) const
      {
 if ( max_size ( ) - size ( ) < __n )
   __throw_length_error ( ( __s ) );

 const size_type __len = size ( ) + std :: max ( size ( ), __n );
 return ( __len < size ( ) || __len > max_size ( ) ) ? max_size ( ) : __len;
      }





      void
      _M_erase_at_end ( pointer __pos )
      {
 std :: _Destroy ( __pos, this -> _M_impl . _M_finish, _M_get_Tp_allocator ( ) );
 this -> _M_impl . _M_finish = __pos;
      }
    };
# 1166 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline bool
    operator == ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return ( __x . size ( ) == __y . size ( )
       && std :: equal ( __x . begin ( ), __x . end ( ), __y . begin ( ) ) ); }
# 1183 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline bool
    operator < ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return std :: lexicographical_compare ( __x . begin ( ), __x . end ( ),
       __y . begin ( ), __y . end ( ) ); }
# 1190 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline bool
    operator != ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return ! ( __x == __y ); }
# 1196 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline bool
    operator > ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return __y < __x; }
# 1202 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline bool
    operator <= ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return ! ( __y < __x ); }
# 1208 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline bool
    operator >= ( const vector < _Tp, _Alloc > & __x, const vector < _Tp, _Alloc > & __y )
    { return ! ( __x < __y ); }
# 1214 "/usr/include/c++/4.4/bits/stl_vector.h" 3
template < typename _Tp, typename _Alloc >
    inline void
    swap ( vector < _Tp, _Alloc > & __x, vector < _Tp, _Alloc > & __y )
    { __x . swap ( __y ); }
# 1231 "/usr/include/c++/4.4/bits/stl_vector.h" 3
}
# 62 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
namespace std __attribute__((visibility("default"))) {
# 64 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef unsigned long _Bit_type;
# 65 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
enum { _S_word_bit = 32};
# 67 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
struct _Bit_reference {
# 69 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_type *_M_p;
# 70 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_type _M_mask;
# 72 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_reference(_Bit_type *__x, _Bit_type __y) : _M_p(__x), _M_mask(__y)
# 73 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ }
# 75 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_reference() : _M_p((0)), _M_mask((0)) { }
# 77 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
operator bool() const
# 78 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return !(!((*(_M_p)) & (_M_mask))); }
# 81 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_reference &operator=(bool __x)
# 82 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 83 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
if (__x) {
# 84 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(*(_M_p)) |= (_M_mask); } else {
# 86 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(*(_M_p)) &= (~(_M_mask)); }
# 87 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 88 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 91 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_reference &operator=(const _Bit_reference &__x)
# 92 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return (((*this)) = (((bool)__x))); }
# 95 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator==(const _Bit_reference &__x) const
# 96 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return ((bool)(*this)) == ((bool)__x); }
# 99 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator<(const _Bit_reference &__x) const
# 100 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return (!((bool)(*this))) && ((bool)__x); }
# 103 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
void flip()
# 104 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ (*(_M_p)) ^= (_M_mask); }
# 105 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
};
# 107 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
struct _Bit_iterator_base : public iterator< random_access_iterator_tag, bool, int, bool *, bool &> {
# 110 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_type *_M_p;
# 111 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
unsigned _M_offset;
# 113 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_iterator_base(_Bit_type *__x, unsigned __y) : _M_p(__x), _M_offset(__y)
# 114 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ }
# 117 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
void _M_bump_up()
# 118 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 119 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
if (((_M_offset)++) == (((int)_S_word_bit) - 1))
# 120 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 121 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(_M_offset) = (0);
# 122 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
++(_M_p);
# 123 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 124 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 127 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
void _M_bump_down()
# 128 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 129 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
if (((_M_offset)--) == (0))
# 130 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 131 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(_M_offset) = (((int)_S_word_bit) - 1);
# 132 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
--(_M_p);
# 133 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 134 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 137 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
void _M_incr(ptrdiff_t __i)
# 138 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 139 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
difference_type __n = (__i + (_M_offset));
# 140 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(_M_p) += (__n / ((int)_S_word_bit));
# 141 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
__n = (__n % ((int)_S_word_bit));
# 142 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
if (__n < 0)
# 143 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 144 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
__n += ((int)_S_word_bit);
# 145 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
--(_M_p);
# 146 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 147 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(_M_offset) = (static_cast< unsigned>(__n));
# 148 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 151 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator==(const _Bit_iterator_base &__i) const
# 152 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return ((_M_p) == (__i._M_p)) && ((_M_offset) == (__i._M_offset)); }
# 155 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator<(const _Bit_iterator_base &__i) const
# 156 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 157 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return ((_M_p) < (__i._M_p)) || (((_M_p) == (__i._M_p)) && ((_M_offset) < (__i._M_offset)));
# 159 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 162 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator!=(const _Bit_iterator_base &__i) const
# 163 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return !(((*this)) == (__i)); }
# 166 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator>(const _Bit_iterator_base &__i) const
# 167 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return (__i < ((*this))); }
# 170 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator<=(const _Bit_iterator_base &__i) const
# 171 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return !(__i < ((*this))); }
# 174 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
bool operator>=(const _Bit_iterator_base &__i) const
# 175 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return !(((*this)) < (__i)); }
# 176 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
};
# 179 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
inline ptrdiff_t operator-(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y)
# 180 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 181 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return ((((int)_S_word_bit) * ((__x._M_p) - (__y._M_p))) + (__x._M_offset)) - (__y._M_offset);
# 183 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 185 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
struct _Bit_iterator : public _Bit_iterator_base {
# 187 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef _Bit_reference reference;
# 188 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef _Bit_reference *pointer;
# 189 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef _Bit_iterator iterator;
# 191 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_iterator() : _Bit_iterator_base(0, 0) { }
# 193 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y)
# 194 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ }
# 197 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
reference operator*() const
# 198 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return reference(_M_p, 1UL << (_M_offset)); }
# 201 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator &operator++()
# 202 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 203 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_up();
# 204 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 205 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 208 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator operator++(int)
# 209 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 210 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator __tmp = (*this);
# 211 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_up();
# 212 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return __tmp;
# 213 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 216 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator &operator--()
# 217 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 218 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_down();
# 219 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 220 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 223 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator operator--(int)
# 224 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 225 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator __tmp = (*this);
# 226 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_down();
# 227 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return __tmp;
# 228 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 231 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator &operator+=(difference_type __i)
# 232 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 233 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_incr(__i);
# 234 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 235 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 238 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator &operator-=(difference_type __i)
# 239 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 240 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(((*this)) += ((-__i)));
# 241 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 242 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 245 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator operator+(difference_type __i) const
# 246 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 247 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator __tmp = (*this);
# 248 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return (__tmp += __i);
# 249 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 252 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator operator-(difference_type __i) const
# 253 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 254 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
iterator __tmp = (*this);
# 255 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return (__tmp -= __i);
# 256 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 259 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
reference operator[](difference_type __i) const
# 260 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return (*((((*this)) + __i))); }
# 261 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
};
# 264 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
inline _Bit_iterator operator+(ptrdiff_t __n, const _Bit_iterator &__x)
# 265 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return (__x + __n); }
# 267 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
struct _Bit_const_iterator : public _Bit_iterator_base {
# 269 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef bool reference;
# 270 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef bool const_reference;
# 271 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef const bool *pointer;
# 272 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
typedef _Bit_const_iterator const_iterator;
# 274 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_const_iterator() : _Bit_iterator_base(0, 0) { }
# 276 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_const_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y)
# 277 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ }
# 279 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
_Bit_const_iterator(const _Bit_iterator &__x) : _Bit_iterator_base(__x._M_p, __x._M_offset)
# 280 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ }
# 283 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_reference operator*() const
# 284 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return _Bit_reference(_M_p, 1UL << (_M_offset)); }
# 287 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator &operator++()
# 288 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 289 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_up();
# 290 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 291 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 294 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator operator++(int)
# 295 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 296 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator __tmp = (*this);
# 297 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_up();
# 298 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return __tmp;
# 299 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 302 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator &operator--()
# 303 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 304 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_down();
# 305 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 306 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 309 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator operator--(int)
# 310 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 311 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator __tmp = (*this);
# 312 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_bump_down();
# 313 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return __tmp;
# 314 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 317 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator &operator+=(difference_type __i)
# 318 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 319 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
this->_M_incr(__i);
# 320 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 321 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 324 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator &operator-=(difference_type __i)
# 325 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 326 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(((*this)) += ((-__i)));
# 327 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return *this;
# 328 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 331 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator operator+(difference_type __i) const
# 332 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 333 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator __tmp = (*this);
# 334 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return (__tmp += __i);
# 335 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 338 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator operator-(difference_type __i) const
# 339 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 340 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_iterator __tmp = (*this);
# 341 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
return (__tmp -= __i);
# 342 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 345 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
const_reference operator[](difference_type __i) const
# 346 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return (*((((*this)) + __i))); }
# 347 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
};
# 350 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
inline _Bit_const_iterator operator+(ptrdiff_t __n, const _Bit_const_iterator &__x)
# 351 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{ return (__x + __n); }
# 354 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
inline void __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
# 355 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 356 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
for (; (__first != (__last)); (++__first)) {
# 357 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
(((*__first)) = __x); }
# 358 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 361 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
inline void fill(_Bit_iterator __first, _Bit_iterator __last, const bool &__x)
# 362 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 363 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
if ((__first._M_p) != (__last._M_p))
# 364 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
{
# 365 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
std::fill((__first._M_p) + 1, __last._M_p, (__x ? (~0) : 0));
# 366 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
__fill_bvector(__first, _Bit_iterator((__first._M_p) + 1, 0), __x);
# 367 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
__fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
# 368 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
} else {
# 370 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
__fill_bvector(__first, __last, __x); }
# 371 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 373 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
template < typename _Alloc >
    struct _Bvector_base
    {
      typedef typename _Alloc :: template rebind < _Bit_type > :: other
        _Bit_alloc_type;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_type * _M_end_of_storage;

 _Bvector_impl ( )
 : _Bit_alloc_type ( ), _M_start ( ), _M_finish ( ), _M_end_of_storage ( 0 )
 { }

 _Bvector_impl ( const _Bit_alloc_type & __a )
 : _Bit_alloc_type ( __a ), _M_start ( ), _M_finish ( ), _M_end_of_storage ( 0 )
 { }
      };

    public :
      typedef _Alloc allocator_type;

      _Bit_alloc_type &
      _M_get_Bit_allocator ( )
      { return * static_cast < _Bit_alloc_type * > ( & this -> _M_impl ); }

      const _Bit_alloc_type &
      _M_get_Bit_allocator ( ) const
      { return * static_cast < const _Bit_alloc_type * > ( & this -> _M_impl ); }

      allocator_type
      get_allocator ( ) const
      { return allocator_type ( _M_get_Bit_allocator ( ) ); }

      _Bvector_base ( )
      : _M_impl ( ) { }

      _Bvector_base ( const allocator_type & __a )
      : _M_impl ( __a ) { }

      ~ _Bvector_base ( )
      { this -> _M_deallocate ( ); }

    protected :
      _Bvector_impl _M_impl;

      _Bit_type *
      _M_allocate ( size_t __n )
      { return _M_impl . allocate ( ( __n + int ( _S_word_bit ) - 1 )
    / int ( _S_word_bit ) ); }

      void
      _M_deallocate ( )
      {
 if ( _M_impl . _M_start . _M_p )
   _M_impl . deallocate ( _M_impl . _M_start . _M_p,
        _M_impl . _M_end_of_storage - _M_impl . _M_start . _M_p );
      }
    };
# 449 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 454 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
namespace std __attribute__((visibility("default"))) {
# 473 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
template < typename _Alloc >
  class vector < bool, _Alloc > : protected _Bvector_base < _Alloc >
  {
    typedef _Bvector_base < _Alloc > _Base;

  public :
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference * pointer;
    typedef const bool * const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;
    typedef std :: reverse_iterator < iterator > reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator ( ) const
    { return _Base :: get_allocator ( ); }

  protected :
    using _Base :: _M_allocate;
    using _Base :: _M_deallocate;
    using _Base :: _M_get_Bit_allocator;

  public :
    vector ( )
    : _Base ( ) { }

    explicit
    vector ( const allocator_type & __a )
    : _Base ( __a ) { }

    explicit
    vector ( size_type __n, const bool & __value = bool ( ),
    const allocator_type & __a = allocator_type ( ) )
    : _Base ( __a )
    {
      _M_initialize ( __n );
      std :: fill ( this -> _M_impl . _M_start . _M_p, this -> _M_impl . _M_end_of_storage,
  __value ? ~ 0 : 0 );
    }

    vector ( const vector & __x )
    : _Base ( __x . _M_get_Bit_allocator ( ) )
    {
      _M_initialize ( __x . size ( ) );
      _M_copy_aligned ( __x . begin ( ), __x . end ( ), this -> _M_impl . _M_start );
    }

    template < typename _InputIterator >
      vector ( _InputIterator __first, _InputIterator __last,
      const allocator_type & __a = allocator_type ( ) )
      : _Base ( __a )
      {
 typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
 _M_initialize_dispatch ( __first, __last, _Integral ( ) );
      }

    ~ vector ( ) { }

    vector &
    operator = ( const vector & __x )
    {
      if ( & __x == this )
 return * this;
      if ( __x . size ( ) > capacity ( ) )
 {
   this -> _M_deallocate ( );
   _M_initialize ( __x . size ( ) );
 }
      this -> _M_impl . _M_finish = _M_copy_aligned ( __x . begin ( ), __x . end ( ),
      begin ( ) );
      return * this;
    }





    void
    assign ( size_type __n, const bool & __x )
    { _M_fill_assign ( __n, __x ); }

    template < typename _InputIterator >
      void
      assign ( _InputIterator __first, _InputIterator __last )
      {
 typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
 _M_assign_dispatch ( __first, __last, _Integral ( ) );
      }







    iterator
    begin ( )
    { return this -> _M_impl . _M_start; }

    const_iterator
    begin ( ) const
    { return this -> _M_impl . _M_start; }

    iterator
    end ( )
    { return this -> _M_impl . _M_finish; }

    const_iterator
    end ( ) const
    { return this -> _M_impl . _M_finish; }

    reverse_iterator
    rbegin ( )
    { return reverse_iterator ( end ( ) ); }

    const_reverse_iterator
    rbegin ( ) const
    { return const_reverse_iterator ( end ( ) ); }

    reverse_iterator
    rend ( )
    { return reverse_iterator ( begin ( ) ); }

    const_reverse_iterator
    rend ( ) const
    { return const_reverse_iterator ( begin ( ) ); }

    size_type
    size ( ) const
    { return size_type ( end ( ) - begin ( ) ); }

    size_type
    max_size ( ) const
    {
      const size_type __isize =
 __gnu_cxx :: __numeric_traits < difference_type > :: __max
 - int ( _S_word_bit ) + 1;
      const size_type __asize = _M_get_Bit_allocator ( ) . max_size ( );
      return ( __asize <= __isize / int ( _S_word_bit )
       ? __asize * int ( _S_word_bit ) : __isize );
    }

    size_type
    capacity ( ) const
    { return size_type ( const_iterator ( this -> _M_impl . _M_end_of_storage, 0 )
         - begin ( ) ); }

    bool
    empty ( ) const
    { return begin ( ) == end ( ); }

    reference
    operator [ ] ( size_type __n )
    {
      return * iterator ( this -> _M_impl . _M_start . _M_p
         + __n / int ( _S_word_bit ), __n % int ( _S_word_bit ) );
    }

    const_reference
    operator [ ] ( size_type __n ) const
    {
      return * const_iterator ( this -> _M_impl . _M_start . _M_p
        + __n / int ( _S_word_bit ), __n % int ( _S_word_bit ) );
    }

  protected :
    void
    _M_range_check ( size_type __n ) const
    {
      if ( __n >= this -> size ( ) )
        __throw_out_of_range ( ( "vector<bool>::_M_range_check" ) );
    }

  public :
    reference
    at ( size_type __n )
    { _M_range_check ( __n ); return ( * this ) [ __n ]; }

    const_reference
    at ( size_type __n ) const
    { _M_range_check ( __n ); return ( * this ) [ __n ]; }

    void
    reserve ( size_type __n );

    reference
    front ( )
    { return * begin ( ); }

    const_reference
    front ( ) const
    { return * begin ( ); }

    reference
    back ( )
    { return * ( end ( ) - 1 ); }

    const_reference
    back ( ) const
    { return * ( end ( ) - 1 ); }






    void
    data ( ) { }

    void
    push_back ( bool __x )
    {
      if ( this -> _M_impl . _M_finish . _M_p != this -> _M_impl . _M_end_of_storage )
        * this -> _M_impl . _M_finish ++ = __x;
      else
        _M_insert_aux ( end ( ), __x );
    }

    void



    swap ( vector & __x )

    {
      std :: swap ( this -> _M_impl . _M_start, __x . _M_impl . _M_start );
      std :: swap ( this -> _M_impl . _M_finish, __x . _M_impl . _M_finish );
      std :: swap ( this -> _M_impl . _M_end_of_storage,
  __x . _M_impl . _M_end_of_storage );



      std :: __alloc_swap < typename _Base :: _Bit_alloc_type > ::
 _S_do_it ( _M_get_Bit_allocator ( ), __x . _M_get_Bit_allocator ( ) );
    }


    static void
    swap ( reference __x, reference __y )
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator
    insert ( iterator __position, const bool & __x = bool ( ) )
    {
      const difference_type __n = __position - begin ( );
      if ( this -> _M_impl . _M_finish . _M_p != this -> _M_impl . _M_end_of_storage
   && __position == end ( ) )
        * this -> _M_impl . _M_finish ++ = __x;
      else
        _M_insert_aux ( __position, __x );
      return begin ( ) + __n;
    }

    template < typename _InputIterator >
      void
      insert ( iterator __position,
      _InputIterator __first, _InputIterator __last )
      {
 typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
 _M_insert_dispatch ( __position, __first, __last, _Integral ( ) );
      }

    void
    insert ( iterator __position, size_type __n, const bool & __x )
    { _M_fill_insert ( __position, __n, __x ); }






    void
    pop_back ( )
    { -- this -> _M_impl . _M_finish; }

    iterator
    erase ( iterator __position )
    {
      if ( __position + 1 != end ( ) )
        std :: copy ( __position + 1, end ( ), __position );
      -- this -> _M_impl . _M_finish;
      return __position;
    }

    iterator
    erase ( iterator __first, iterator __last )
    {
      _M_erase_at_end ( std :: copy ( __last, end ( ), __first ) );
      return __first;
    }

    void
    resize ( size_type __new_size, bool __x = bool ( ) )
    {
      if ( __new_size < size ( ) )
        _M_erase_at_end ( begin ( ) + difference_type ( __new_size ) );
      else
        insert ( end ( ), __new_size - size ( ), __x );
    }

    void
    flip ( )
    {
      for ( _Bit_type * __p = this -> _M_impl . _M_start . _M_p;
    __p != this -> _M_impl . _M_end_of_storage; ++ __p )
        * __p = ~ * __p;
    }

    void
    clear ( )
    { _M_erase_at_end ( begin ( ) ); }


  protected :

    iterator
    _M_copy_aligned ( const_iterator __first, const_iterator __last,
      iterator __result )
    {
      _Bit_type * __q = std :: copy ( __first . _M_p, __last . _M_p, __result . _M_p );
      return std :: copy ( const_iterator ( __last . _M_p, 0 ), __last,
         iterator ( __q, 0 ) );
    }

    void
    _M_initialize ( size_type __n )
    {
      _Bit_type * __q = this -> _M_allocate ( __n );
      this -> _M_impl . _M_end_of_storage = ( __q
      + ( ( __n + int ( _S_word_bit ) - 1 )
         / int ( _S_word_bit ) ) );
      this -> _M_impl . _M_start = iterator ( __q, 0 );
      this -> _M_impl . _M_finish = this -> _M_impl . _M_start + difference_type ( __n );
    }





    template < typename _Integer >
      void
      _M_initialize_dispatch ( _Integer __n, _Integer __x, __true_type )
      {
 _M_initialize ( static_cast < size_type > ( __n ) );
 std :: fill ( this -> _M_impl . _M_start . _M_p,
    this -> _M_impl . _M_end_of_storage, __x ? ~ 0 : 0 );
      }

    template < typename _InputIterator >
      void
      _M_initialize_dispatch ( _InputIterator __first, _InputIterator __last,
        __false_type )
      { _M_initialize_range ( __first, __last,
       std :: __iterator_category ( __first ) ); }

    template < typename _InputIterator >
      void
      _M_initialize_range ( _InputIterator __first, _InputIterator __last,
     std :: input_iterator_tag )
      {
 for (; __first != __last; ++ __first )
   push_back ( * __first );
      }

    template < typename _ForwardIterator >
      void
      _M_initialize_range ( _ForwardIterator __first, _ForwardIterator __last,
     std :: forward_iterator_tag )
      {
 const size_type __n = std :: distance ( __first, __last );
 _M_initialize ( __n );
 std :: copy ( __first, __last, this -> _M_impl . _M_start );
      }



    template < typename _Integer >
      void
      _M_assign_dispatch ( _Integer __n, _Integer __val, __true_type )
      { _M_fill_assign ( __n, __val ); }

    template < class _InputIterator >
      void
      _M_assign_dispatch ( _InputIterator __first, _InputIterator __last,
    __false_type )
      { _M_assign_aux ( __first, __last, std :: __iterator_category ( __first ) ); }

    void
    _M_fill_assign ( size_t __n, bool __x )
    {
      if ( __n > size ( ) )
 {
   std :: fill ( this -> _M_impl . _M_start . _M_p,
      this -> _M_impl . _M_end_of_storage, __x ? ~ 0 : 0 );
   insert ( end ( ), __n - size ( ), __x );
 }
      else
 {
   _M_erase_at_end ( begin ( ) + __n );
   std :: fill ( this -> _M_impl . _M_start . _M_p,
      this -> _M_impl . _M_end_of_storage, __x ? ~ 0 : 0 );
 }
    }

    template < typename _InputIterator >
      void
      _M_assign_aux ( _InputIterator __first, _InputIterator __last,
      std :: input_iterator_tag )
      {
 iterator __cur = begin ( );
 for (; __first != __last && __cur != end ( ); ++ __cur, ++ __first )
   * __cur = * __first;
 if ( __first == __last )
   _M_erase_at_end ( __cur );
 else
   insert ( end ( ), __first, __last );
      }

    template < typename _ForwardIterator >
      void
      _M_assign_aux ( _ForwardIterator __first, _ForwardIterator __last,
      std :: forward_iterator_tag )
      {
 const size_type __len = std :: distance ( __first, __last );
 if ( __len < size ( ) )
   _M_erase_at_end ( std :: copy ( __first, __last, begin ( ) ) );
 else
   {
     _ForwardIterator __mid = __first;
     std :: advance ( __mid, size ( ) );
     std :: copy ( __first, __mid, begin ( ) );
     insert ( end ( ), __mid, __last );
   }
      }





    template < typename _Integer >
      void
      _M_insert_dispatch ( iterator __pos, _Integer __n, _Integer __x,
    __true_type )
      { _M_fill_insert ( __pos, __n, __x ); }

    template < typename _InputIterator >
      void
      _M_insert_dispatch ( iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type )
      { _M_insert_range ( __pos, __first, __last,
   std :: __iterator_category ( __first ) ); }

    void
    _M_fill_insert ( iterator __position, size_type __n, bool __x );

    template < typename _InputIterator >
      void
      _M_insert_range ( iterator __pos, _InputIterator __first,
        _InputIterator __last, std :: input_iterator_tag )
      {
 for (; __first != __last; ++ __first )
   {
     __pos = insert ( __pos, * __first );
     ++ __pos;
   }
      }

    template < typename _ForwardIterator >
      void
      _M_insert_range ( iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std :: forward_iterator_tag );

    void
    _M_insert_aux ( iterator __position, bool __x );

    size_type
    _M_check_len ( size_type __n, const char * __s ) const
    {
      if ( max_size ( ) - size ( ) < __n )
 __throw_length_error ( ( __s ) );

      const size_type __len = size ( ) + std :: max ( size ( ), __n );
      return ( __len < size ( ) || __len > max_size ( ) ) ? max_size ( ) : __len;
    }

    void
    _M_erase_at_end ( iterator __pos )
    { this -> _M_impl . _M_finish = __pos; }
  };
# 1022 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
}
# 60 "/usr/include/c++/4.4/bits/vector.tcc" 3
namespace std __attribute__((visibility("default"))) {
# 62 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    void
    vector < _Tp, _Alloc > ::
    reserve ( size_type __n )
    {
      if ( __n > this -> max_size ( ) )
 __throw_length_error ( ( "vector::reserve" ) );
      if ( this -> capacity ( ) < __n )
 {
   const size_type __old_size = size ( );
   pointer __tmp = _M_allocate_and_copy ( __n,
   ( this -> _M_impl . _M_start ),
   ( this -> _M_impl . _M_finish ) );
   std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
   _M_get_Tp_allocator ( ) );
   _M_deallocate ( this -> _M_impl . _M_start,
   this -> _M_impl . _M_end_of_storage
   - this -> _M_impl . _M_start );
   this -> _M_impl . _M_start = __tmp;
   this -> _M_impl . _M_finish = __tmp + __old_size;
   this -> _M_impl . _M_end_of_storage = this -> _M_impl . _M_start + __n;
 }
    }
# 104 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    typename vector < _Tp, _Alloc > :: iterator
    vector < _Tp, _Alloc > ::
    insert ( iterator __position, const value_type & __x )
    {
      const size_type __n = __position - begin ( );
      if ( this -> _M_impl . _M_finish != this -> _M_impl . _M_end_of_storage
   && __position == end ( ) )
 {
   this -> _M_impl . construct ( this -> _M_impl . _M_finish, __x );
   ++ this -> _M_impl . _M_finish;
 }
      else
 {

     _M_insert_aux ( __position, __x );
 }
      return iterator ( this -> _M_impl . _M_start + __n );
    }
# 131 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    typename vector < _Tp, _Alloc > :: iterator
    vector < _Tp, _Alloc > ::
    erase ( iterator __position )
    {
      if ( __position + 1 != end ( ) )
 std :: copy ( __position + 1, end ( ), __position );
      -- this -> _M_impl . _M_finish;
      this -> _M_impl . destroy ( this -> _M_impl . _M_finish );
      return __position;
    }
# 143 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    typename vector < _Tp, _Alloc > :: iterator
    vector < _Tp, _Alloc > ::
    erase ( iterator __first, iterator __last )
    {
      if ( __last != end ( ) )
 std :: copy ( __last, end ( ), __first );
      _M_erase_at_end ( __first . base ( ) + ( end ( ) - __last ) );
      return __first;
    }
# 154 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    vector < _Tp, _Alloc > &
    vector < _Tp, _Alloc > ::
    operator = ( const vector < _Tp, _Alloc > & __x )
    {
      if ( & __x != this )
 {
   const size_type __xlen = __x . size ( );
   if ( __xlen > capacity ( ) )
     {
       pointer __tmp = _M_allocate_and_copy ( __xlen, __x . begin ( ),
         __x . end ( ) );
       std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
       _M_get_Tp_allocator ( ) );
       _M_deallocate ( this -> _M_impl . _M_start,
       this -> _M_impl . _M_end_of_storage
       - this -> _M_impl . _M_start );
       this -> _M_impl . _M_start = __tmp;
       this -> _M_impl . _M_end_of_storage = this -> _M_impl . _M_start + __xlen;
     }
   else if ( size ( ) >= __xlen )
     {
       std :: _Destroy ( std :: copy ( __x . begin ( ), __x . end ( ), begin ( ) ),
       end ( ), _M_get_Tp_allocator ( ) );
     }
   else
     {
       std :: copy ( __x . _M_impl . _M_start, __x . _M_impl . _M_start + size ( ),
   this -> _M_impl . _M_start );
       std :: __uninitialized_copy_a ( __x . _M_impl . _M_start + size ( ),
       __x . _M_impl . _M_finish,
       this -> _M_impl . _M_finish,
       _M_get_Tp_allocator ( ) );
     }
   this -> _M_impl . _M_finish = this -> _M_impl . _M_start + __xlen;
 }
      return * this;
    }
# 193 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    void
    vector < _Tp, _Alloc > ::
    _M_fill_assign ( size_t __n, const value_type & __val )
    {
      if ( __n > capacity ( ) )
 {
   vector __tmp ( __n, __val, _M_get_Tp_allocator ( ) );
   __tmp . swap ( * this );
 }
      else if ( __n > size ( ) )
 {
   std :: fill ( begin ( ), end ( ), __val );
   std :: __uninitialized_fill_n_a ( this -> _M_impl . _M_finish,
     __n - size ( ), __val,
     _M_get_Tp_allocator ( ) );
   this -> _M_impl . _M_finish += __n - size ( );
 }
      else
        _M_erase_at_end ( std :: fill_n ( this -> _M_impl . _M_start, __n, __val ) );
    }
# 215 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    template < typename _InputIterator >
      void
      vector < _Tp, _Alloc > ::
      _M_assign_aux ( _InputIterator __first, _InputIterator __last,
      std :: input_iterator_tag )
      {
 pointer __cur ( this -> _M_impl . _M_start );
 for (; __first != __last && __cur != this -> _M_impl . _M_finish;
      ++ __cur, ++ __first )
   * __cur = * __first;
 if ( __first == __last )
   _M_erase_at_end ( __cur );
 else
   insert ( end ( ), __first, __last );
      }
# 232 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    template < typename _ForwardIterator >
      void
      vector < _Tp, _Alloc > ::
      _M_assign_aux ( _ForwardIterator __first, _ForwardIterator __last,
      std :: forward_iterator_tag )
      {
 const size_type __len = std :: distance ( __first, __last );

 if ( __len > capacity ( ) )
   {
     pointer __tmp ( _M_allocate_and_copy ( __len, __first, __last ) );
     std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
     _M_get_Tp_allocator ( ) );
     _M_deallocate ( this -> _M_impl . _M_start,
     this -> _M_impl . _M_end_of_storage
     - this -> _M_impl . _M_start );
     this -> _M_impl . _M_start = __tmp;
     this -> _M_impl . _M_finish = this -> _M_impl . _M_start + __len;
     this -> _M_impl . _M_end_of_storage = this -> _M_impl . _M_finish;
   }
 else if ( size ( ) >= __len )
   _M_erase_at_end ( std :: copy ( __first, __last, this -> _M_impl . _M_start ) );
 else
   {
     _ForwardIterator __mid = __first;
     std :: advance ( __mid, size ( ) );
     std :: copy ( __first, __mid, this -> _M_impl . _M_start );
     this -> _M_impl . _M_finish =
       std :: __uninitialized_copy_a ( __mid, __last,
       this -> _M_impl . _M_finish,
       _M_get_Tp_allocator ( ) );
   }
      }
# 293 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    void
    vector < _Tp, _Alloc > ::
    _M_insert_aux ( iterator __position, const _Tp & __x )

    {
      if ( this -> _M_impl . _M_finish != this -> _M_impl . _M_end_of_storage )
 {
   this -> _M_impl . construct ( this -> _M_impl . _M_finish,
      ( * ( this -> _M_impl . _M_finish - 1 ) ) );

   ++ this -> _M_impl . _M_finish;

   _Tp __x_copy = __x;

   std :: copy_backward ( __position . base ( ), this -> _M_impl . _M_finish - 2, this -> _M_impl . _M_finish - 1 );



   * __position = __x_copy;



 }
      else
 {
   const size_type __len =
     _M_check_len ( size_type ( 1 ), "vector::_M_insert_aux" );
   const size_type __elems_before = __position - begin ( );
   pointer __new_start ( this -> _M_allocate ( __len ) );
   pointer __new_finish ( __new_start );
   try
     {




       this -> _M_impl . construct ( __new_start + __elems_before,



                               __x );

       __new_finish = 0;

       __new_finish =
  std :: __uninitialized_move_a ( this -> _M_impl . _M_start,
         __position . base ( ), __new_start,
         _M_get_Tp_allocator ( ) );
       ++ __new_finish;

       __new_finish =
  std :: __uninitialized_move_a ( __position . base ( ),
         this -> _M_impl . _M_finish,
         __new_finish,
         _M_get_Tp_allocator ( ) );
     }
          catch ( ... )
     {
       if ( ! __new_finish )
  this -> _M_impl . destroy ( __new_start + __elems_before );
       else
  std :: _Destroy ( __new_start, __new_finish, _M_get_Tp_allocator ( ) );
       _M_deallocate ( __new_start, __len );
       throw;
     }
   std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
   _M_get_Tp_allocator ( ) );
   _M_deallocate ( this -> _M_impl . _M_start,
   this -> _M_impl . _M_end_of_storage
   - this -> _M_impl . _M_start );
   this -> _M_impl . _M_start = __new_start;
   this -> _M_impl . _M_finish = __new_finish;
   this -> _M_impl . _M_end_of_storage = __new_start + __len;
 }
    }
# 370 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    void
    vector < _Tp, _Alloc > ::
    _M_fill_insert ( iterator __position, size_type __n, const value_type & __x )
    {
      if ( __n != 0 )
 {
   if ( size_type ( this -> _M_impl . _M_end_of_storage
   - this -> _M_impl . _M_finish ) >= __n )
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end ( ) - __position;
       pointer __old_finish ( this -> _M_impl . _M_finish );
       if ( __elems_after > __n )
  {
    std :: __uninitialized_move_a ( this -> _M_impl . _M_finish - __n,
           this -> _M_impl . _M_finish,
           this -> _M_impl . _M_finish,
           _M_get_Tp_allocator ( ) );
    this -> _M_impl . _M_finish += __n;
    std :: copy_backward ( __position . base ( ), __old_finish - __n, __old_finish );

    std :: fill ( __position . base ( ), __position . base ( ) + __n,
       __x_copy );
  }
       else
  {
    std :: __uninitialized_fill_n_a ( this -> _M_impl . _M_finish,
      __n - __elems_after,
      __x_copy,
      _M_get_Tp_allocator ( ) );
    this -> _M_impl . _M_finish += __n - __elems_after;
    std :: __uninitialized_move_a ( __position . base ( ), __old_finish,
           this -> _M_impl . _M_finish,
           _M_get_Tp_allocator ( ) );
    this -> _M_impl . _M_finish += __elems_after;
    std :: fill ( __position . base ( ), __old_finish, __x_copy );
  }
     }
   else
     {
       const size_type __len =
  _M_check_len ( __n, "vector::_M_fill_insert" );
       const size_type __elems_before = __position - begin ( );
       pointer __new_start ( this -> _M_allocate ( __len ) );
       pointer __new_finish ( __new_start );
       try
  {

    std :: __uninitialized_fill_n_a ( __new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator ( ) );
    __new_finish = 0;

    __new_finish =
      std :: __uninitialized_move_a ( this -> _M_impl . _M_start,
      __position . base ( ),
      __new_start,
      _M_get_Tp_allocator ( ) );
    __new_finish += __n;

    __new_finish =
      std :: __uninitialized_move_a ( __position . base ( ),
      this -> _M_impl . _M_finish,
      __new_finish,
      _M_get_Tp_allocator ( ) );
  }
       catch ( ... )
  {
    if ( ! __new_finish )
      std :: _Destroy ( __new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator ( ) );
    else
      std :: _Destroy ( __new_start, __new_finish,
      _M_get_Tp_allocator ( ) );
    _M_deallocate ( __new_start, __len );
    throw;
  }
       std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
       _M_get_Tp_allocator ( ) );
       _M_deallocate ( this -> _M_impl . _M_start,
       this -> _M_impl . _M_end_of_storage
       - this -> _M_impl . _M_start );
       this -> _M_impl . _M_start = __new_start;
       this -> _M_impl . _M_finish = __new_finish;
       this -> _M_impl . _M_end_of_storage = __new_start + __len;
     }
 }
    }
# 461 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    template < typename _InputIterator >
      void
      vector < _Tp, _Alloc > ::
      _M_range_insert ( iterator __pos, _InputIterator __first,
        _InputIterator __last, std :: input_iterator_tag )
      {
 for (; __first != __last; ++ __first )
   {
     __pos = insert ( __pos, * __first );
     ++ __pos;
   }
      }
# 475 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Tp, typename _Alloc >
    template < typename _ForwardIterator >
      void
      vector < _Tp, _Alloc > ::
      _M_range_insert ( iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std :: forward_iterator_tag )
      {
 if ( __first != __last )
   {
     const size_type __n = std :: distance ( __first, __last );
     if ( size_type ( this -> _M_impl . _M_end_of_storage
     - this -> _M_impl . _M_finish ) >= __n )
       {
  const size_type __elems_after = end ( ) - __position;
  pointer __old_finish ( this -> _M_impl . _M_finish );
  if ( __elems_after > __n )
    {
      std :: __uninitialized_move_a ( this -> _M_impl . _M_finish - __n,
      this -> _M_impl . _M_finish,
      this -> _M_impl . _M_finish,
      _M_get_Tp_allocator ( ) );
      this -> _M_impl . _M_finish += __n;
      std :: copy_backward ( __position . base ( ), __old_finish - __n, __old_finish );

      std :: copy ( __first, __last, __position );
    }
  else
    {
      _ForwardIterator __mid = __first;
      std :: advance ( __mid, __elems_after );
      std :: __uninitialized_copy_a ( __mid, __last,
      this -> _M_impl . _M_finish,
      _M_get_Tp_allocator ( ) );
      this -> _M_impl . _M_finish += __n - __elems_after;
      std :: __uninitialized_move_a ( __position . base ( ),
      __old_finish,
      this -> _M_impl . _M_finish,
      _M_get_Tp_allocator ( ) );
      this -> _M_impl . _M_finish += __elems_after;
      std :: copy ( __first, __mid, __position );
    }
       }
     else
       {
  const size_type __len =
    _M_check_len ( __n, "vector::_M_range_insert" );
  pointer __new_start ( this -> _M_allocate ( __len ) );
  pointer __new_finish ( __new_start );
  try
    {
      __new_finish =
        std :: __uninitialized_move_a ( this -> _M_impl . _M_start,
        __position . base ( ),
        __new_start,
        _M_get_Tp_allocator ( ) );
      __new_finish =
        std :: __uninitialized_copy_a ( __first, __last,
        __new_finish,
        _M_get_Tp_allocator ( ) );
      __new_finish =
        std :: __uninitialized_move_a ( __position . base ( ),
        this -> _M_impl . _M_finish,
        __new_finish,
        _M_get_Tp_allocator ( ) );
    }
  catch ( ... )
    {
      std :: _Destroy ( __new_start, __new_finish,
      _M_get_Tp_allocator ( ) );
      _M_deallocate ( __new_start, __len );
      throw;
    }
  std :: _Destroy ( this -> _M_impl . _M_start, this -> _M_impl . _M_finish,
         _M_get_Tp_allocator ( ) );
  _M_deallocate ( this -> _M_impl . _M_start,
         this -> _M_impl . _M_end_of_storage
         - this -> _M_impl . _M_start );
  this -> _M_impl . _M_start = __new_start;
  this -> _M_impl . _M_finish = __new_finish;
  this -> _M_impl . _M_end_of_storage = __new_start + __len;
       }
   }
      }
# 562 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Alloc >
    void
    vector < bool, _Alloc > ::
    reserve ( size_type __n )
    {
      if ( __n > this -> max_size ( ) )
 __throw_length_error ( ( "vector::reserve" ) );
      if ( this -> capacity ( ) < __n )
 {
   _Bit_type * __q = this -> _M_allocate ( __n );
   this -> _M_impl . _M_finish = _M_copy_aligned ( begin ( ), end ( ),
          iterator ( __q, 0 ) );
   this -> _M_deallocate ( );
   this -> _M_impl . _M_start = iterator ( __q, 0 );
   this -> _M_impl . _M_end_of_storage = ( __q + ( __n + int ( _S_word_bit ) - 1 )
          / int ( _S_word_bit ) );
 }
    }
# 581 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Alloc >
    void
    vector < bool, _Alloc > ::
    _M_fill_insert ( iterator __position, size_type __n, bool __x )
    {
      if ( __n == 0 )
 return;
      if ( capacity ( ) - size ( ) >= __n )
 {
   std :: copy_backward ( __position, end ( ),
        this -> _M_impl . _M_finish + difference_type ( __n ) );
   std :: fill ( __position, __position + difference_type ( __n ), __x );
   this -> _M_impl . _M_finish += difference_type ( __n );
 }
      else
 {
   const size_type __len =
     _M_check_len ( __n, "vector<bool>::_M_fill_insert" );
   _Bit_type * __q = this -> _M_allocate ( __len );
   iterator __i = _M_copy_aligned ( begin ( ), __position,
      iterator ( __q, 0 ) );
   std :: fill ( __i, __i + difference_type ( __n ), __x );
   this -> _M_impl . _M_finish = std :: copy ( __position, end ( ),
           __i + difference_type ( __n ) );
   this -> _M_deallocate ( );
   this -> _M_impl . _M_end_of_storage = ( __q + ( ( __len
           + int ( _S_word_bit ) - 1 )
          / int ( _S_word_bit ) ) );
   this -> _M_impl . _M_start = iterator ( __q, 0 );
 }
    }
# 613 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Alloc >
    template < typename _ForwardIterator >
      void
      vector < bool, _Alloc > ::
      _M_insert_range ( iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std :: forward_iterator_tag )
      {
 if ( __first != __last )
   {
     size_type __n = std :: distance ( __first, __last );
     if ( capacity ( ) - size ( ) >= __n )
       {
  std :: copy_backward ( __position, end ( ),
       this -> _M_impl . _M_finish
       + difference_type ( __n ) );
  std :: copy ( __first, __last, __position );
  this -> _M_impl . _M_finish += difference_type ( __n );
       }
     else
       {
  const size_type __len =
    _M_check_len ( __n, "vector<bool>::_M_insert_range" );
  _Bit_type * __q = this -> _M_allocate ( __len );
  iterator __i = _M_copy_aligned ( begin ( ), __position,
            iterator ( __q, 0 ) );
  __i = std :: copy ( __first, __last, __i );
  this -> _M_impl . _M_finish = std :: copy ( __position, end ( ), __i );
  this -> _M_deallocate ( );
  this -> _M_impl . _M_end_of_storage = ( __q
         + ( ( __len
             + int ( _S_word_bit ) - 1 )
            / int ( _S_word_bit ) ) );
  this -> _M_impl . _M_start = iterator ( __q, 0 );
       }
   }
      }
# 650 "/usr/include/c++/4.4/bits/vector.tcc" 3
template < typename _Alloc >
    void
    vector < bool, _Alloc > ::
    _M_insert_aux ( iterator __position, bool __x )
    {
      if ( this -> _M_impl . _M_finish . _M_p != this -> _M_impl . _M_end_of_storage )
 {
   std :: copy_backward ( __position, this -> _M_impl . _M_finish,
        this -> _M_impl . _M_finish + 1 );
   * __position = __x;
   ++ this -> _M_impl . _M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len ( size_type ( 1 ), "vector<bool>::_M_insert_aux" );
   _Bit_type * __q = this -> _M_allocate ( __len );
   iterator __i = _M_copy_aligned ( begin ( ), __position,
      iterator ( __q, 0 ) );
   * __i ++ = __x;
   this -> _M_impl . _M_finish = std :: copy ( __position, end ( ), __i );
   this -> _M_deallocate ( );
   this -> _M_impl . _M_end_of_storage = ( __q + ( ( __len
           + int ( _S_word_bit ) - 1 )
          / int ( _S_word_bit ) ) );
   this -> _M_impl . _M_start = iterator ( __q, 0 );
 }
    }
# 679 "/usr/include/c++/4.4/bits/vector.tcc" 3
}
# 32 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
namespace thrust {
# 35 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
namespace detail {
# 38 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class T, class Alloc>
# 39 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
class vector_base {
# 43 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
public: typedef T value_type;
# 44 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
typedef typename Alloc::pointer pointer;
# 45 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
typedef typename Alloc::const_pointer const_pointer;
# 46 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
typedef typename Alloc::reference reference;
# 47 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
typedef typename Alloc::const_reference const_reference;
# 48 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
typedef size_t size_type;
# 49 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
typedef typename Alloc::difference_type difference_type;
# 50 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
typedef Alloc allocator_type;
# 52 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
typedef normal_iterator< typename Alloc::pointer> iterator;
# 53 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
typedef normal_iterator< typename Alloc::const_pointer> const_iterator;
# 55 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
typedef thrust::reverse_iterator< normal_iterator< typename Alloc::pointer> > reverse_iterator;
# 56 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
typedef thrust::reverse_iterator< normal_iterator< typename Alloc::const_pointer> > const_reverse_iterator;
# 60 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
vector_base();
# 67 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
explicit vector_base(size_type, const value_type & = (value_type()));
# 72 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
vector_base(const detail::vector_base< T, Alloc> &);
# 77 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
detail::vector_base< T, Alloc> &operator=(const detail::vector_base< T, Alloc> &);
# 83 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class OtherT, class OtherAlloc> vector_base(const detail::vector_base< OtherT, OtherAlloc> &);
# 90 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class OtherT, class OtherAlloc> detail::vector_base< T, Alloc> &operator=(const detail::vector_base< OtherT, OtherAlloc> &);
# 99 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class OtherT, class OtherAlloc> vector_base(const std::vector< OtherT, OtherAlloc> &);
# 108 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class OtherT, class OtherAlloc> detail::vector_base< T, Alloc> &operator=(const std::vector< OtherT, OtherAlloc> &);
# 115 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class InputIterator> vector_base(InputIterator, InputIterator);
# 120 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
~vector_base();
# 132 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
void resize(size_type, value_type = value_type());
# 136 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
size_type size() const;
# 141 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
size_type max_size() const;
# 149 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
void reserve(size_type);
# 154 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
size_type capacity() const;
# 159 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
void shrink_to_fit();
# 169 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
reference operator[](size_type);
# 179 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
const_reference operator[](size_type) const;
# 185 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
iterator begin();
# 191 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
const_iterator begin() const;
# 197 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
const_iterator cbegin() const;
# 204 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
reverse_iterator rbegin();
# 211 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
const_reverse_iterator rbegin() const;
# 218 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
const_reverse_iterator crbegin() const;
# 224 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
iterator end();
# 230 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
const_iterator end() const;
# 236 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
const_iterator cend() const;
# 242 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
reverse_iterator rend();
# 248 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
const_reverse_iterator rend() const;
# 254 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
const_reverse_iterator crend() const;
# 260 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
const_reference front() const;
# 266 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
reference front();
# 272 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
const_reference back() const;
# 278 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
reference back();
# 283 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
pointer data();
# 288 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
const_pointer data() const;
# 292 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
void clear();
# 297 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
bool empty() const;
# 302 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
void push_back(const value_type &);
# 307 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
void pop_back();
# 312 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
void swap(detail::vector_base< T, Alloc> &);
# 319 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
iterator erase(iterator);
# 327 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
iterator erase(iterator, iterator);
# 335 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
iterator insert(iterator, const T &);
# 343 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
void insert(iterator, size_type, const T &);
# 354 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class InputIterator> void insert(iterator, InputIterator, InputIterator);
# 362 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
void assign(size_type, const T &);
# 370 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class InputIterator> void assign(InputIterator, InputIterator);
# 375 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
protected: iterator mBegin;
# 378 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
size_type mSize;
# 381 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
size_type mCapacity;
# 384 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
allocator_type mAllocator;
# 388 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
private: template<class IteratorOrIntegralType> void init_dispatch(IteratorOrIntegralType, IteratorOrIntegralType, false_type);
# 391 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class IteratorOrIntegralType> void init_dispatch(IteratorOrIntegralType, IteratorOrIntegralType, true_type);
# 394 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class InputHostIterator> void range_init(InputHostIterator, InputHostIterator, true_type);
# 397 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class ForwardIterator> void range_init(ForwardIterator, ForwardIterator, false_type);
# 400 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
void fill_init(size_type, const T &);
# 403 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class InputIteratorOrIntegralType> void insert_dispatch(iterator, InputIteratorOrIntegralType, InputIteratorOrIntegralType, false_type);
# 407 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class InputIteratorOrIntegralType> void insert_dispatch(iterator, InputIteratorOrIntegralType, InputIteratorOrIntegralType, true_type);
# 411 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class InputIterator> void range_insert(iterator, InputIterator, InputIterator);
# 415 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
void fill_insert(iterator, size_type, const T &);
# 418 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class InputIterator> void assign_dispatch(InputIterator, InputIterator, false_type);
# 422 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class Integral> void assign_dispatch(Integral, Integral, true_type);
# 426 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class InputIterator> void range_assign(InputIterator, InputIterator);
# 430 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class ForwardIterator> void range_assign(ForwardIterator, ForwardIterator, false_type);
# 434 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class InputHostIterator> void range_assign(InputHostIterator, InputHostIterator, true_type);
# 438 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
void fill_assign(size_type, const T &);
# 441 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class ForwardIterator> void allocate_and_copy(size_type, ForwardIterator, ForwardIterator, size_type &, iterator &);
# 446 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
};
# 448 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
}
# 458 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class T, class Alloc> void swap(detail::vector_base< T, Alloc> &, detail::vector_base< T, Alloc> &);
# 469 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class T1, class Alloc1, class
# 470 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
T2, class Alloc2> bool
# 469 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
operator<<(const detail::vector_base< T1, Alloc1> &, const detail::vector_base< T2, Alloc2> &);
# 474 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class T1, class Alloc1, class
# 475 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
T2, class Alloc2> bool
# 474 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
operator<<(const detail::vector_base< T1, Alloc1> &, const std::vector< T2, Alloc2> &);
# 479 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
template<class T1, class Alloc1, class
# 480 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
T2, class Alloc2> bool
# 479 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
operator<<(const std::vector< T1, Alloc1> &, const detail::vector_base< T2, Alloc2> &);
# 484 "/home/normal/checkout/thrust/thrust/detail/vector_base.h"
}
# 22 "/home/normal/checkout/thrust/thrust/detail/move.h"
namespace thrust {
# 25 "/home/normal/checkout/thrust/thrust/detail/move.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/move.h"
template<class InputIterator, class OutputIterator> OutputIterator
# 29 "/home/normal/checkout/thrust/thrust/detail/move.h"
move(InputIterator first, InputIterator last, OutputIterator result)
# 30 "/home/normal/checkout/thrust/thrust/detail/move.h"
{
# 31 "/home/normal/checkout/thrust/thrust/detail/move.h"
typedef typename iterator_space< InputIterator> ::type space1;
# 32 "/home/normal/checkout/thrust/thrust/detail/move.h"
typedef typename iterator_space< OutputIterator> ::type space2;
# 34 "/home/normal/checkout/thrust/thrust/detail/move.h"
typedef typename minimum_space< typename iterator_space< InputIterator> ::type, typename iterator_space< OutputIterator> ::type> ::type space;
# 35 "/home/normal/checkout/thrust/thrust/detail/move.h"
typedef typename iterator_value< InputIterator> ::type value_type;
# 40 "/home/normal/checkout/thrust/thrust/detail/move.h"
raw_buffer< typename iterator_value< InputIterator> ::type, typename minimum_space< typename iterator_space< InputIterator> ::type, typename iterator_space< OutputIterator> ::type> ::type> temp(first, last);
# 41 "/home/normal/checkout/thrust/thrust/detail/move.h"
return thrust::copy((temp.raw_buffer< typename iterator_value< InputIterator> ::type, typename minimum_space< typename iterator_space< InputIterator> ::type, typename iterator_space< OutputIterator> ::type> ::type> ::begin()), (temp.raw_buffer< typename iterator_value< InputIterator> ::type, typename minimum_space< typename iterator_space< InputIterator> ::type, typename iterator_space< OutputIterator> ::type> ::type> ::end()), result);
# 42 "/home/normal/checkout/thrust/thrust/detail/move.h"
}
# 44 "/home/normal/checkout/thrust/thrust/detail/move.h"
}
# 46 "/home/normal/checkout/thrust/thrust/detail/move.h"
}
# 26 "/home/normal/checkout/thrust/thrust/equal.h"
namespace thrust {
# 71 "/home/normal/checkout/thrust/thrust/equal.h"
template<class InputIterator1, class InputIterator2> bool equal(InputIterator1, InputIterator1, InputIterator2);
# 97 "/home/normal/checkout/thrust/thrust/equal.h"
template<class InputIterator1, class InputIterator2, class
# 98 "/home/normal/checkout/thrust/thrust/equal.h"
BinaryPredicate> bool
# 97 "/home/normal/checkout/thrust/thrust/equal.h"
equal(InputIterator1, InputIterator1, InputIterator2, BinaryPredicate);
# 106 "/home/normal/checkout/thrust/thrust/equal.h"
}
# 27 "/home/normal/checkout/thrust/thrust/inner_product.h"
namespace thrust {
# 76 "/home/normal/checkout/thrust/thrust/inner_product.h"
template<class InputIterator1, class InputIterator2, class OutputType> OutputType inner_product(InputIterator1, InputIterator1, InputIterator2, OutputType);
# 113 "/home/normal/checkout/thrust/thrust/inner_product.h"
template<class InputIterator1, class InputIterator2, class OutputType, class
# 114 "/home/normal/checkout/thrust/thrust/inner_product.h"
BinaryFunction1, class BinaryFunction2> OutputType
# 113 "/home/normal/checkout/thrust/thrust/inner_product.h"
inner_product(InputIterator1, InputIterator1, InputIterator2, OutputType, BinaryFunction1, BinaryFunction2);
# 123 "/home/normal/checkout/thrust/thrust/inner_product.h"
}
# 100 "/usr/include/c++/4.4/bits/stl_numeric.h" 3
namespace std __attribute__((visibility("default"))) {
# 113 "/usr/include/c++/4.4/bits/stl_numeric.h" 3
template < typename _InputIterator, typename _Tp >
    inline _Tp
    accumulate ( _InputIterator __first, _InputIterator __last, _Tp __init )
    {


      ;

      for (; __first != __last; ++ __first )
 __init = __init + * __first;
      return __init;
    }
# 139 "/usr/include/c++/4.4/bits/stl_numeric.h" 3
template < typename _InputIterator, typename _Tp, typename _BinaryOperation >
    inline _Tp
    accumulate ( _InputIterator __first, _InputIterator __last, _Tp __init,
        _BinaryOperation __binary_op )
    {


      ;

      for (; __first != __last; ++ __first )
 __init = __binary_op ( __init, * __first );
      return __init;
    }
# 167 "/usr/include/c++/4.4/bits/stl_numeric.h" 3
template < typename _InputIterator1, typename _InputIterator2, typename _Tp >
    inline _Tp
    inner_product ( _InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init )
    {



      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2 )
 __init = __init + ( * __first1 * * __first2 );
      return __init;
    }
# 198 "/usr/include/c++/4.4/bits/stl_numeric.h" 3
template < typename _InputIterator1, typename _InputIterator2, typename _Tp,
    typename _BinaryOperation1, typename _BinaryOperation2 >
    inline _Tp
    inner_product ( _InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init,
    _BinaryOperation1 __binary_op1,
    _BinaryOperation2 __binary_op2 )
    {



      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2 )
 __init = __binary_op1 ( __init, __binary_op2 ( * __first1, * __first2 ) );
      return __init;
    }
# 230 "/usr/include/c++/4.4/bits/stl_numeric.h" 3
template < typename _InputIterator, typename _OutputIterator >
    _OutputIterator
    partial_sum ( _InputIterator __first, _InputIterator __last,
  _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator > :: value_type _ValueType;





      ;

      if ( __first == __last )
 return __result;
      _ValueType __value = * __first;
      * __result = __value;
      while ( ++ __first != __last )
 {
   __value = __value + * __first;
   * ++ __result = __value;
 }
      return ++ __result;
    }
# 269 "/usr/include/c++/4.4/bits/stl_numeric.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation >
    _OutputIterator
    partial_sum ( _InputIterator __first, _InputIterator __last,
  _OutputIterator __result, _BinaryOperation __binary_op )
    {
      typedef typename iterator_traits < _InputIterator > :: value_type _ValueType;





      ;

      if ( __first == __last )
 return __result;
      _ValueType __value = * __first;
      * __result = __value;
      while ( ++ __first != __last )
 {
   __value = __binary_op ( __value, * __first );
   * ++ __result = __value;
 }
      return ++ __result;
    }
# 306 "/usr/include/c++/4.4/bits/stl_numeric.h" 3
template < typename _InputIterator, typename _OutputIterator >
    _OutputIterator
    adjacent_difference ( _InputIterator __first,
   _InputIterator __last, _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator > :: value_type _ValueType;





      ;

      if ( __first == __last )
 return __result;
      _ValueType __value = * __first;
      * __result = __value;
      while ( ++ __first != __last )
 {
   _ValueType __tmp = * __first;
   * ++ __result = __tmp - __value;
   __value = __tmp;
 }
      return ++ __result;
    }
# 344 "/usr/include/c++/4.4/bits/stl_numeric.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation >
    _OutputIterator
    adjacent_difference ( _InputIterator __first, _InputIterator __last,
   _OutputIterator __result, _BinaryOperation __binary_op )
    {
      typedef typename iterator_traits < _InputIterator > :: value_type _ValueType;





      ;

      if ( __first == __last )
 return __result;
      _ValueType __value = * __first;
      * __result = __value;
      while ( ++ __first != __last )
 {
   _ValueType __tmp = * __first;
   * ++ __result = __binary_op ( __tmp, __value );
   __value = __tmp;
 }
      return ++ __result;
    }
# 371 "/usr/include/c++/4.4/bits/stl_numeric.h" 3
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.h"
namespace device {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.h"
namespace generic {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.h"
template<class InputIterator1, class InputIterator2, class OutputType, class
# 34 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.h"
BinaryFunction1, class BinaryFunction2> OutputType
# 33 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.h"
inner_product(InputIterator1, InputIterator1, InputIterator2, OutputType, BinaryFunction1, BinaryFunction2);
# 40 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.h"
}
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.h"
}
# 42 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.h"
}
# 43 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.h"
}
# 22 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
namespace thrust {
# 24 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
namespace detail {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
namespace device {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
namespace generic {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
namespace detail {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
template<class OutputType, class BinaryFunction2>
# 35 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
struct inner_product_functor {
# 37 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
typedef OutputType result_type;
# 38 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
BinaryFunction2 binary_op2;
# 40 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
inner_product_functor(BinaryFunction2 _binary_op2) : binary_op2(_binary_op2)
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
{ }
# 43 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
template<class TupleType> OutputType
# 45 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
operator()(TupleType t)
# 46 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
{
# 47 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
return (binary_op2)(thrust::get< 0> (t), thrust::get< 1> (t));
# 48 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
}
# 49 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
};
# 51 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
}
# 53 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
template<class InputIterator1, class InputIterator2, class OutputType, class
# 54 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
BinaryFunction1, class BinaryFunction2> OutputType
# 56 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
inner_product(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 57 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
first2, OutputType init, BinaryFunction1
# 58 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
binary_op1, BinaryFunction2 binary_op2)
# 59 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
{
# 60 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
detail::inner_product_functor< OutputType, BinaryFunction2> func(binary_op2);
# 62 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
InputIterator2 last2 = (first2 + (last1 - first1));
# 64 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
return device::reduce(thrust::make_transform_iterator(thrust::make_zip_iterator(thrust::make_tuple(first1, first2)), func), thrust::make_transform_iterator(thrust::make_zip_iterator(thrust::make_tuple(last1, last2)), func), init, binary_op1);
# 69 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
}
# 71 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
}
# 72 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
}
# 73 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
}
# 74 "/home/normal/checkout/thrust/thrust/detail/device/generic/inner_product.inl"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/device/inner_product.h"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/inner_product.h"
namespace detail {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/inner_product.h"
namespace device {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/inner_product.h"
template<class InputIterator1, class InputIterator2, class OutputType, class
# 34 "/home/normal/checkout/thrust/thrust/detail/device/inner_product.h"
BinaryFunction1, class BinaryFunction2> OutputType
# 36 "/home/normal/checkout/thrust/thrust/detail/device/inner_product.h"
inner_product(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 37 "/home/normal/checkout/thrust/thrust/detail/device/inner_product.h"
first2, OutputType init, BinaryFunction1
# 38 "/home/normal/checkout/thrust/thrust/detail/device/inner_product.h"
binary_op1, BinaryFunction2 binary_op2)
# 39 "/home/normal/checkout/thrust/thrust/detail/device/inner_product.h"
{
# 40 "/home/normal/checkout/thrust/thrust/detail/device/inner_product.h"
return generic::inner_product(first1, last1, first2, init, binary_op1, binary_op2);
# 41 "/home/normal/checkout/thrust/thrust/detail/device/inner_product.h"
}
# 43 "/home/normal/checkout/thrust/thrust/detail/device/inner_product.h"
}
# 44 "/home/normal/checkout/thrust/thrust/detail/device/inner_product.h"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/device/inner_product.h"
}
# 29 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
namespace thrust {
# 32 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
namespace detail {
# 35 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
namespace dispatch {
# 41 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
template<class InputIterator1, class InputIterator2, class OutputType, class
# 42 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
BinaryFunction1, class BinaryFunction2> OutputType
# 44 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
inner_product(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 45 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
first2, OutputType init, BinaryFunction1
# 46 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
binary_op1, BinaryFunction2 binary_op2, host_space_tag, host_space_tag)
# 49 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
{
# 50 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
return std::inner_product(first1, last1, first2, init, binary_op1, binary_op2);
# 51 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
}
# 56 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
template<class InputIterator1, class InputIterator2, class OutputType, class
# 57 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
BinaryFunction1, class BinaryFunction2> OutputType
# 59 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
inner_product(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 60 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
first2, OutputType init, BinaryFunction1
# 61 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
binary_op1, BinaryFunction2 binary_op2, device_space_tag, device_space_tag)
# 64 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
{
# 65 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
return device::inner_product(first1, last1, first2, init, binary_op1, binary_op2);
# 66 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
}
# 68 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
}
# 70 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
}
# 72 "/home/normal/checkout/thrust/thrust/detail/dispatch/inner_product.h"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
namespace thrust {
# 32 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
template<class InputIterator1, class InputIterator2, class OutputType> OutputType
# 34 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
inner_product(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 35 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
first2, OutputType init)
# 36 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
{
# 37 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
plus< OutputType> binary_op1;
# 38 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
multiplies< OutputType> binary_op2;
# 39 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
return thrust::inner_product(first1, last1, first2, init, binary_op1, binary_op2);
# 40 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
}
# 43 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
template<class InputIterator1, class InputIterator2, class OutputType, class
# 44 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
BinaryFunction1, class BinaryFunction2> OutputType
# 46 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
inner_product(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 47 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
first2, OutputType init, BinaryFunction1
# 48 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
binary_op1, BinaryFunction2 binary_op2)
# 49 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
{
# 51 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
return detail::dispatch::inner_product(first1, last1, first2, init, binary_op1, binary_op2, typename iterator_space< InputIterator1> ::type(), typename iterator_space< InputIterator2> ::type());
# 54 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
}
# 57 "/home/normal/checkout/thrust/thrust/detail/inner_product.inl"
}
# 25 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
namespace detail {
# 32 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
template<class T1, class T2>
# 33 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
struct operator_equal {
# 36 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
bool operator()(const T1 &lhs, const T2 &rhs) const
# 37 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
{
# 38 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
return lhs == rhs;
# 39 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
}
# 40 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
};
# 42 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
}
# 44 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
template<class InputIterator1, class InputIterator2> bool
# 45 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
equal(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 46 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
first2)
# 47 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
{
# 48 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
typedef typename iterator_traits< InputIterator1> ::value_type InputType1;
# 49 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
typedef typename iterator_traits< InputIterator2> ::value_type InputType2;
# 51 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
detail::operator_equal< typename iterator_traits< InputIterator1> ::value_type, typename iterator_traits< InputIterator2> ::value_type> eq;
# 52 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
return thrust::equal(first1, last1, first2, eq);
# 53 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
}
# 55 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
template<class InputIterator1, class InputIterator2, class
# 56 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
BinaryPredicate> bool
# 57 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
equal(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 58 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
first2, BinaryPredicate binary_pred)
# 59 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
{
# 60 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
logical_and< bool> binary_op1;
# 61 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
return thrust::inner_product(first1, last1, first2, true, binary_op1, binary_pred);
# 62 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
}
# 64 "/home/normal/checkout/thrust/thrust/detail/equal.inl"
}
# 28 "/home/normal/checkout/thrust/thrust/uninitialized_fill.h"
namespace thrust {
# 88 "/home/normal/checkout/thrust/thrust/uninitialized_fill.h"
template<class ForwardIterator, class T> void uninitialized_fill(ForwardIterator, ForwardIterator, const T &);
# 97 "/home/normal/checkout/thrust/thrust/uninitialized_fill.h"
}
# 28 "/home/normal/checkout/thrust/thrust/fill.h"
namespace thrust {
# 67 "/home/normal/checkout/thrust/thrust/fill.h"
template<class ForwardIterator, class T> void fill(ForwardIterator, ForwardIterator, const T &);
# 76 "/home/normal/checkout/thrust/thrust/fill.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.h"
namespace device {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.h"
namespace cuda {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.h"
template<class ForwardIterator, class T> void fill(ForwardIterator, ForwardIterator, const T &);
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.h"
}
# 39 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.h"
}
# 40 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.h"
}
# 41 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.h"
}
# 19 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
namespace thrust {
# 22 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
namespace detail {
# 26 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
template<int word_size = 4> struct divine_uint64_t;
# 30 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
template<> struct divine_uint64_t< 4> {
# 32 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
typedef unsigned long long type;
# 33 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
};
# 37 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
template<> struct divine_uint64_t< 8> {
# 39 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
typedef unsigned long long type;
# 40 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
};
# 42 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
typedef unsigned uint32_t;
# 43 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
typedef divine_uint64_t< 4> ::type uint64_t;
# 47 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
template<int word_size = 4> struct divine_intptr_t;
# 51 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
template<> struct divine_intptr_t< 4> {
# 53 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
typedef uint32_t type;
# 54 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
};
# 58 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
template<> struct divine_intptr_t< 8> {
# 60 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
typedef uint64_t type;
# 61 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
};
# 63 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
typedef divine_intptr_t< 4> ::type intptr_t;
# 64 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
typedef intptr_t uintptr_t;
# 67 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
}
# 69 "/home/normal/checkout/thrust/thrust/detail/cstdint.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
namespace util {
# 31 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
template<class T> T *
# 32 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
align_up(T *ptr, uintptr_t bytes)
# 33 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
{
# 34 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
return (T *)(bytes * ((((uintptr_t)ptr) + (bytes - (1))) / bytes));
# 35 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
}
# 37 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
template<class T> T *
# 38 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
align_down(T *ptr, uintptr_t bytes)
# 39 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
{
# 40 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
return (T *)(bytes * (((uintptr_t)ptr) / bytes));
# 41 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
}
# 43 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
template<class T> bool
# 44 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
is_aligned(T *ptr, uintptr_t bytes = sizeof(T))
# 45 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
{
# 46 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
return (((uintptr_t)ptr) % bytes) == (0);
# 47 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
}
# 49 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
}
# 50 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/util/align.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.h"
namespace detail {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.h"
namespace device {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.h"
namespace generic {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.h"
template<class ForwardIterator, class
# 34 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.h"
Generator> void
# 33 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.h"
generate(ForwardIterator, ForwardIterator, Generator);
# 39 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.h"
}
# 40 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.h"
}
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.h"
}
# 42 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.h"
}
# 20 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
namespace thrust {
# 22 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
namespace detail {
# 24 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
namespace device {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
namespace generic {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
namespace detail {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
template<class Generator>
# 32 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
struct generate_functor {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
Generator gen;
# 36 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
generate_functor(Generator _gen) : gen(_gen)
# 37 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
{ }
# 39 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
template<class T> void
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
operator()(T &x)
# 42 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
{
# 43 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
x = (gen)();
# 44 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
};
# 47 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
}
# 50 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
template<class ForwardIterator, class
# 51 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
Generator> void
# 52 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
generate(ForwardIterator first, ForwardIterator
# 53 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
last, Generator
# 54 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
gen)
# 55 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
{
# 56 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
detail::generate_functor< Generator> f(gen);
# 57 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
device::for_each(first, last, f);
# 58 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
}
# 61 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
}
# 62 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
}
# 63 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
}
# 64 "/home/normal/checkout/thrust/thrust/detail/device/generic/generate.inl"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/device/generate.h"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/generate.h"
namespace detail {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/generate.h"
namespace device {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/generate.h"
template<class ForwardIterator, class
# 34 "/home/normal/checkout/thrust/thrust/detail/device/generate.h"
Generator> void
# 35 "/home/normal/checkout/thrust/thrust/detail/device/generate.h"
generate(ForwardIterator first, ForwardIterator
# 36 "/home/normal/checkout/thrust/thrust/detail/device/generate.h"
last, Generator
# 37 "/home/normal/checkout/thrust/thrust/detail/device/generate.h"
gen)
# 38 "/home/normal/checkout/thrust/thrust/detail/device/generate.h"
{
# 39 "/home/normal/checkout/thrust/thrust/detail/device/generate.h"
generic::generate(first, last, gen);
# 40 "/home/normal/checkout/thrust/thrust/detail/device/generate.h"
}
# 42 "/home/normal/checkout/thrust/thrust/detail/device/generate.h"
}
# 43 "/home/normal/checkout/thrust/thrust/detail/device/generate.h"
}
# 44 "/home/normal/checkout/thrust/thrust/detail/device/generate.h"
}
# 22 "/home/normal/checkout/thrust/thrust/extrema.h"
namespace thrust {
# 32 "/home/normal/checkout/thrust/thrust/extrema.h"
template<class T, class BinaryPredicate> T min(const T &, const T &, BinaryPredicate);
# 39 "/home/normal/checkout/thrust/thrust/extrema.h"
template<class T> T min(const T &, const T &);
# 46 "/home/normal/checkout/thrust/thrust/extrema.h"
template<class T, class BinaryPredicate> T max(const T &, const T &, BinaryPredicate);
# 53 "/home/normal/checkout/thrust/thrust/extrema.h"
template<class T> T max(const T &, const T &);
# 97 "/home/normal/checkout/thrust/thrust/extrema.h"
template<class ForwardIterator> ForwardIterator min_element(ForwardIterator, ForwardIterator);
# 125 "/home/normal/checkout/thrust/thrust/extrema.h"
template<class ForwardIterator, class BinaryPredicate> ForwardIterator min_element(ForwardIterator, ForwardIterator, BinaryPredicate);
# 161 "/home/normal/checkout/thrust/thrust/extrema.h"
template<class ForwardIterator> ForwardIterator max_element(ForwardIterator, ForwardIterator);
# 189 "/home/normal/checkout/thrust/thrust/extrema.h"
template<class ForwardIterator, class BinaryPredicate> ForwardIterator max_element(ForwardIterator, ForwardIterator, BinaryPredicate);
# 224 "/home/normal/checkout/thrust/thrust/extrema.h"
template<class ForwardIterator> pair< ForwardIterator, ForwardIterator> minmax_element(ForwardIterator, ForwardIterator);
# 248 "/home/normal/checkout/thrust/thrust/extrema.h"
template<class ForwardIterator, class BinaryPredicate> pair< ForwardIterator, ForwardIterator> minmax_element(ForwardIterator, ForwardIterator, BinaryPredicate);
# 257 "/home/normal/checkout/thrust/thrust/extrema.h"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
namespace detail {
# 32 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
namespace host {
# 35 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
template<class ForwardIterator, class BinaryPredicate> pair< ForwardIterator, ForwardIterator>
# 36 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
minmax_element(ForwardIterator first, ForwardIterator
# 37 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
last, BinaryPredicate
# 38 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
comp)
# 39 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
{
# 40 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
ForwardIterator imin = first;
# 41 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
ForwardIterator imax = first;
# 43 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
for (; first != last; first++)
# 44 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
{
# 45 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
if (comp(*first, *imin)) { imin = first; }
# 46 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
if (comp(*imax, *first)) { imax = first; }
# 47 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
}
# 49 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
return thrust::make_pair(imin, imax);
# 50 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
}
# 52 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
}
# 54 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
}
# 56 "/home/normal/checkout/thrust/thrust/detail/host/extrema.h"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.h"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.h"
namespace detail {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.h"
namespace device {
# 33 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.h"
namespace generic {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.h"
template<class ForwardIterator, class BinaryPredicate> ForwardIterator min_element(ForwardIterator, ForwardIterator, BinaryPredicate);
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.h"
template<class ForwardIterator, class BinaryPredicate> ForwardIterator max_element(ForwardIterator, ForwardIterator, BinaryPredicate);
# 46 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.h"
template<class ForwardIterator, class BinaryPredicate> pair< ForwardIterator, ForwardIterator> minmax_element(ForwardIterator, ForwardIterator, BinaryPredicate);
# 51 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.h"
}
# 52 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.h"
}
# 53 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.h"
}
# 54 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
namespace thrust {
# 27 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
namespace detail {
# 31 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
typedef long long intmax_t;
# 33 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
template<class Number>
# 34 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
struct is_signed : public integral_constant< bool, std::numeric_limits< Number> ::is_signed> {
# 36 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
};
# 39 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
template<class T>
# 40 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
struct num_digits : public eval_if< std::numeric_limits< T> ::is_specialized, integral_constant< int, std::numeric_limits< T> ::digits> , integral_constant< int, ((sizeof(T) * 8U) - (is_signed< T> ::value ? 1 : 0))> > ::type {
# 52 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
};
# 55 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
template<class Integer>
# 56 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
struct integer_difference {
# 72 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
private: typedef std::numeric_limits< Integer> x;
# 90 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
public: typedef typename eval_if< (std::numeric_limits< Integer> ::is_signed && ((!std::numeric_limits< Integer> ::is_bounded) || ((((int)std::numeric_limits< Integer> ::digits) + 1) >= 63))), identity_< Integer> , eval_if< ((((int)std::numeric_limits< Integer> ::digits) + 1) < 31), identity_< signed int> , eval_if< ((((int)std::numeric_limits< Integer> ::digits) + 1) < 31), identity_< signed long> , identity_< long long> > > > ::type type;
# 91 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
};
# 94 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
template<class Number>
# 95 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
struct numeric_difference : public eval_if< is_integral< Number> ::value, integer_difference< Number> , identity_< Number> > {
# 101 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
};
# 104 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
template<class Number> typename numeric_difference< Number> ::type
# 107 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
numeric_distance(Number x, Number y)
# 108 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
{
# 109 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
typedef typename numeric_difference< Number> ::type difference_type;
# 110 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
return ((difference_type)(y)) - ((difference_type)(x));
# 111 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
}
# 113 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
}
# 115 "/home/normal/checkout/thrust/thrust/detail/numeric_traits.h"
}
# 25 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
template<class Incrementable, class Space, class Traversal, class Difference> class counting_iterator;
# 32 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
namespace detail {
# 35 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
template<class Incrementable, class Space, class Traversal, class Difference>
# 36 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
struct counting_iterator_base {
# 48 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
typedef typename eval_if< is_same< Space, use_default> ::value, identity_< any_space_tag> , eval_if< is_same< Space, device_space_tag> ::value, identity_< cuda_device_space_tag> , identity_< Space> > > ::type space;
# 57 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
typedef typename experimental::detail::ia_dflt_help< Traversal, eval_if< is_numeric< Incrementable> ::value, identity_< random_access_traversal_tag> , iterator_traversal< Incrementable> > > ::type traversal;
# 76 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
typedef typename experimental::detail::ia_dflt_help< Difference, eval_if< is_numeric< Incrementable> ::value, identity_< signed int> , iterator_difference< Incrementable> > > ::type difference;
# 87 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
typedef experimental::iterator_adaptor< counting_iterator< Incrementable, Space, Traversal, Difference> , Incrementable, Incrementable *, Incrementable, typename eval_if< is_same< Space, use_default> ::value, identity_< any_space_tag> , eval_if< is_same< Space, device_space_tag> ::value, identity_< cuda_device_space_tag> , identity_< Space> > > ::type, typename experimental::detail::ia_dflt_help< Traversal, eval_if< is_numeric< Incrementable> ::value, identity_< random_access_traversal_tag> , iterator_traversal< Incrementable> > > ::type, const Incrementable &, typename experimental::detail::ia_dflt_help< Difference, eval_if< is_numeric< Incrementable> ::value, identity_< signed int> , iterator_difference< Incrementable> > > ::type> type;
# 88 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
};
# 91 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
namespace device {
# 97 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
template<class Incrementable, class Space, class Traversal, class Difference>
# 98 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
struct dereference_result< counting_iterator< Incrementable, Space, Traversal, Difference> > {
# 104 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
typedef typename iterator_traits< counting_iterator< Incrementable, Space, Traversal, Difference> > ::reference type;
# 105 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
};
# 108 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
template<class Incrementable, class Space, class Traversal, class Difference> inline typename dereference_result< counting_iterator< Incrementable, Space, Traversal, Difference> > ::type
# 111 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
dereference(const counting_iterator< Incrementable, Space, Traversal, Difference> &iter)
# 112 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
{
# 113 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
return *iter;
# 114 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
}
# 116 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
template<class Incrementable, class Space, class Traversal, class Difference, class IndexType> inline typename dereference_result< counting_iterator< Incrementable, Space, Traversal, Difference> > ::type
# 119 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
dereference(const counting_iterator< Incrementable, Space, Traversal, Difference> &iter, IndexType n)
# 120 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
{
# 121 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
return iter[n];
# 122 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
}
# 124 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
}
# 127 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
template<class Difference, class Incrementable1, class Incrementable2>
# 128 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
struct iterator_distance {
# 131 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
static Difference distance(Incrementable1 x, Incrementable2 y)
# 132 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
{
# 133 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
return y - x;
# 134 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
}
# 135 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
};
# 138 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
template<class Difference, class Incrementable1, class Incrementable2>
# 139 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
struct number_distance {
# 142 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
static Difference distance(Incrementable1 x, Incrementable2 y)
# 143 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
{
# 144 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
return numeric_distance(x, y);
# 145 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
}
# 146 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
};
# 148 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
}
# 150 "/home/normal/checkout/thrust/thrust/iterator/detail/counting_iterator.inl"
}
# 41 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
namespace thrust {
# 127 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
template<class Incrementable, class
# 128 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
Space = use_default, class
# 129 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
Traversal = use_default, class
# 130 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
Difference = use_default>
# 131 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
class counting_iterator : public detail::counting_iterator_base< Incrementable, Space, Traversal, Difference> ::type {
# 136 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
typedef typename detail::counting_iterator_base< Incrementable, Space, Traversal, Difference> ::type super_t;
# 138 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
friend class experimental::iterator_core_access;
# 141 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
public: typedef const Incrementable &reference;
# 142 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
typedef typename detail::counting_iterator_base< Incrementable, Space, Traversal, Difference> ::type::difference_type difference_type;
# 143 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
typedef thrust::counting_iterator< Incrementable, Space, Traversal, Difference> device_dereferenceable_type;
# 152 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
counting_iterator() { }
# 160 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
counting_iterator(const thrust::counting_iterator< Incrementable, Space, Traversal, Difference> &rhs) : detail::counting_iterator_base< Incrementable, Space, Traversal, Difference> ::type((rhs.base())) { }
# 169 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
explicit counting_iterator(Incrementable x) : detail::counting_iterator_base< Incrementable, Space, Traversal, Difference> ::type(x) { }
# 175 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
private: reference dereference() const
# 176 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
{
# 177 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
return (this->base_reference());
# 178 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
}
# 180 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
template<class OtherIncrementable> difference_type
# 183 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
distance_to(const thrust::counting_iterator< OtherIncrementable, Space, Traversal, Difference> &y) const
# 184 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
{
# 190 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
typedef typename detail::eval_if< detail::is_numeric< Incrementable> ::value, detail::identity_< detail::number_distance< typename detail::counting_iterator_base< Incrementable, Space, Traversal, Difference> ::type::difference_type, Incrementable, OtherIncrementable> > , detail::identity_< detail::iterator_distance< typename detail::counting_iterator_base< Incrementable, Space, Traversal, Difference> ::type::difference_type, Incrementable, OtherIncrementable> > > ::type d;
# 192 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
return detail::eval_if< detail::is_numeric< Incrementable> ::value, detail::identity_< detail::number_distance< typename detail::counting_iterator_base< Incrementable, Space, Traversal, Difference> ::type::difference_type, Incrementable, OtherIncrementable> > , detail::identity_< detail::iterator_distance< typename detail::counting_iterator_base< Incrementable, Space, Traversal, Difference> ::type::difference_type, Incrementable, OtherIncrementable> > > ::type::distance((this->base()), (y.thrust::counting_iterator< OtherIncrementable, Space, Traversal, Difference> ::base()));
# 193 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
}
# 197 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
};
# 206 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
template<class Incrementable> inline counting_iterator< Incrementable, use_default, use_default, use_default>
# 208 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
make_counting_iterator(Incrementable x)
# 209 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
{
# 210 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
return ((counting_iterator< Incrementable, use_default, use_default, use_default> )(x));
# 211 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
}
# 219 "/home/normal/checkout/thrust/thrust/iterator/counting_iterator.h"
}
# 30 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
namespace thrust {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
namespace detail {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
namespace device {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
namespace generic {
# 38 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
namespace detail {
# 44 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
template<class InputType, class IndexType>
# 45 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
struct element_pair {
# 47 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
InputType value;
# 48 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
IndexType index;
# 49 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
};
# 51 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
template<class InputType, class IndexType>
# 52 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
struct minmax_element_pair {
# 54 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
element_pair< InputType, IndexType> min_pair;
# 55 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
element_pair< InputType, IndexType> max_pair;
# 56 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
};
# 63 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
template<class InputType, class IndexType> element_pair< InputType, IndexType>
# 65 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
make_element_pair(const InputType &value, const IndexType &
# 66 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
index)
# 67 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
{
# 68 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
element_pair< InputType, IndexType> result;
# 69 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
(result.element_pair< InputType, IndexType> ::value) = value;
# 70 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
(result.element_pair< InputType, IndexType> ::index) = index;
# 71 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return result;
# 72 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
}
# 81 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
template<class InputType, class IndexType, class BinaryPredicate>
# 82 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
struct min_element_reduction {
# 84 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
typedef element_pair< InputType, IndexType> min_pair;
# 87 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
min_element_reduction(const BinaryPredicate &_comp) : comp(_comp) { }
# 91 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
element_pair< InputType, IndexType> operator()(const element_pair< InputType, IndexType> &lhs, const element_pair< InputType, IndexType> &
# 92 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
rhs) const
# 93 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
{
# 94 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
if ((comp)((lhs.element_pair< InputType, IndexType> ::value), (rhs.element_pair< InputType, IndexType> ::value))) {
# 95 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return lhs; }
# 96 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
if ((comp)((rhs.element_pair< InputType, IndexType> ::value), (lhs.element_pair< InputType, IndexType> ::value))) {
# 97 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return rhs; }
# 99 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
if ((lhs.element_pair< InputType, IndexType> ::index) < (rhs.element_pair< InputType, IndexType> ::index)) {
# 100 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return lhs; } else {
# 102 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return rhs; }
# 103 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
}
# 105 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
const BinaryPredicate comp;
# 106 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
};
# 109 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
template<class InputType, class IndexType, class BinaryPredicate>
# 110 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
struct max_element_reduction {
# 112 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
typedef element_pair< InputType, IndexType> max_pair;
# 115 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
max_element_reduction(const BinaryPredicate &_comp) : comp(_comp) { }
# 119 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
element_pair< InputType, IndexType> operator()(const element_pair< InputType, IndexType> &lhs, const element_pair< InputType, IndexType> &
# 120 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
rhs) const
# 121 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
{
# 122 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
if ((comp)((lhs.element_pair< InputType, IndexType> ::value), (rhs.element_pair< InputType, IndexType> ::value))) {
# 123 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return rhs; }
# 124 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
if ((comp)((rhs.element_pair< InputType, IndexType> ::value), (lhs.element_pair< InputType, IndexType> ::value))) {
# 125 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return lhs; }
# 127 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
if ((lhs.element_pair< InputType, IndexType> ::index) < (rhs.element_pair< InputType, IndexType> ::index)) {
# 128 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return lhs; } else {
# 130 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return rhs; }
# 131 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
}
# 133 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
const BinaryPredicate comp;
# 134 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
};
# 138 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
template<class InputType, class IndexType, class BinaryPredicate>
# 139 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
struct minmax_element_reduction {
# 141 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
typedef minmax_element_pair< InputType, IndexType> minmax_pair;
# 144 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
minmax_element_reduction(const BinaryPredicate &_comp) : comp(_comp) { }
# 148 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
minmax_element_pair< InputType, IndexType> operator()(const minmax_element_pair< InputType, IndexType> &lhs, const minmax_element_pair< InputType, IndexType> &
# 149 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
rhs) const
# 150 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
{
# 151 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
minmax_element_pair< InputType, IndexType> result;
# 153 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
(result.minmax_element_pair< InputType, IndexType> ::min_pair) = ((min_element_reduction< InputType, IndexType, BinaryPredicate> )(comp))((lhs.minmax_element_pair< InputType, IndexType> ::min_pair), (rhs.minmax_element_pair< InputType, IndexType> ::min_pair));
# 154 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
(result.minmax_element_pair< InputType, IndexType> ::max_pair) = ((max_element_reduction< InputType, IndexType, BinaryPredicate> )(comp))((lhs.minmax_element_pair< InputType, IndexType> ::max_pair), (rhs.minmax_element_pair< InputType, IndexType> ::max_pair));
# 156 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return result;
# 157 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
}
# 159 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
const BinaryPredicate comp;
# 160 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
};
# 163 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
template<class InputType, class IndexType>
# 164 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
struct element_pair_functor {
# 168 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
element_pair< InputType, IndexType> operator()(const InputType &i, const IndexType &n) const
# 169 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
{
# 170 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return make_element_pair(i, n);
# 171 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
}
# 173 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
};
# 176 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
template<class InputType, class IndexType>
# 177 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
struct minmax_element_pair_functor {
# 181 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
minmax_element_pair< InputType, IndexType> operator()(const InputType &i, const IndexType &n) const
# 182 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
{
# 183 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
minmax_element_pair< InputType, IndexType> result;
# 184 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
(result.minmax_element_pair< InputType, IndexType> ::min_pair) = make_element_pair(i, n);
# 185 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
(result.minmax_element_pair< InputType, IndexType> ::max_pair) = make_element_pair(i, n);
# 186 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return result;
# 187 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
}
# 189 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
};
# 191 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
}
# 195 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
template<class ForwardIterator, class BinaryPredicate> ForwardIterator
# 196 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
min_element(ForwardIterator first, ForwardIterator last, BinaryPredicate
# 197 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
comp)
# 198 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
{
# 199 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
if (first == last) {
# 200 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return last; }
# 202 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
typedef typename iterator_traits< ForwardIterator> ::value_type InputType;
# 203 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
typedef typename iterator_traits< ForwardIterator> ::difference_type IndexType;
# 205 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
counting_iterator< typename iterator_traits< ForwardIterator> ::difference_type, use_default, use_default, use_default> index_first(0);
# 206 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
detail::element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> init = detail::make_element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> (*first, 0);
# 207 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
detail::min_element_reduction< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type, BinaryPredicate> binary_op1(comp);
# 208 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
detail::element_pair_functor< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> binary_op2;
# 210 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
detail::element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> result = device::inner_product(first, last, index_first, init, binary_op1, binary_op2);
# 212 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return first + (result.detail::element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> ::index);
# 213 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
}
# 215 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
template<class ForwardIterator, class BinaryPredicate> ForwardIterator
# 216 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
max_element(ForwardIterator first, ForwardIterator last, BinaryPredicate
# 217 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
comp)
# 218 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
{
# 219 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
if (first == last) {
# 220 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return last; }
# 222 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
typedef typename iterator_traits< ForwardIterator> ::value_type InputType;
# 223 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
typedef typename iterator_traits< ForwardIterator> ::difference_type IndexType;
# 225 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
counting_iterator< typename iterator_traits< ForwardIterator> ::difference_type, use_default, use_default, use_default> index_first(0);
# 226 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
detail::element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> init = detail::make_element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> (*first, 0);
# 227 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
detail::max_element_reduction< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type, BinaryPredicate> binary_op1(comp);
# 228 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
detail::element_pair_functor< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> binary_op2;
# 230 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
detail::element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> result = device::inner_product(first, last, index_first, init, binary_op1, binary_op2);
# 232 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return first + (result.detail::element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> ::index);
# 233 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
}
# 235 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
template<class ForwardIterator, class BinaryPredicate> pair< ForwardIterator, ForwardIterator>
# 236 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
minmax_element(ForwardIterator first, ForwardIterator
# 237 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
last, BinaryPredicate
# 238 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
comp)
# 239 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
{
# 240 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
if (first == last) {
# 241 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return thrust::make_pair(last, last); }
# 243 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
typedef typename iterator_traits< ForwardIterator> ::value_type InputType;
# 244 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
typedef typename iterator_traits< ForwardIterator> ::difference_type IndexType;
# 246 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
counting_iterator< typename iterator_traits< ForwardIterator> ::difference_type, use_default, use_default, use_default> index_first(0);
# 248 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
detail::minmax_element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> init;
# 249 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
(init.detail::minmax_element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> ::min_pair) = detail::make_element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> (*first, 0);
# 250 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
(init.detail::minmax_element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> ::max_pair) = detail::make_element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> (*first, 0);
# 252 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
detail::minmax_element_reduction< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type, BinaryPredicate> binary_op1(comp);
# 254 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
detail::minmax_element_pair_functor< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> binary_op2;
# 256 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
detail::minmax_element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> result = device::inner_product(first, last, index_first, init, binary_op1, binary_op2);
# 258 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
return thrust::make_pair(first + ((result.detail::minmax_element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> ::min_pair).index), first + ((result.detail::minmax_element_pair< typename iterator_traits< ForwardIterator> ::value_type, typename iterator_traits< ForwardIterator> ::difference_type> ::max_pair).index));
# 259 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
}
# 261 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
}
# 262 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
}
# 263 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
}
# 264 "/home/normal/checkout/thrust/thrust/detail/device/generic/extrema.inl"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
namespace detail {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
namespace device {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
template<class ForwardIterator, class BinaryPredicate> ForwardIterator
# 35 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
min_element(ForwardIterator first, ForwardIterator
# 36 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
last, BinaryPredicate
# 37 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
comp)
# 38 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
{
# 39 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
return generic::min_element(first, last, comp);
# 40 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
}
# 42 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
template<class ForwardIterator, class BinaryPredicate> ForwardIterator
# 43 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
max_element(ForwardIterator first, ForwardIterator
# 44 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
last, BinaryPredicate
# 45 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
comp)
# 46 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
{
# 47 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
return generic::max_element(first, last, comp);
# 48 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
}
# 50 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
template<class ForwardIterator, class BinaryPredicate> pair< ForwardIterator, ForwardIterator>
# 51 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
minmax_element(ForwardIterator first, ForwardIterator
# 52 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
last, BinaryPredicate
# 53 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
comp)
# 54 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
{
# 55 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
return generic::minmax_element(first, last, comp);
# 56 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
}
# 58 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
}
# 59 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
}
# 60 "/home/normal/checkout/thrust/thrust/detail/device/extrema.h"
}
# 30 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
namespace thrust {
# 33 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
namespace detail {
# 36 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
namespace dispatch {
# 42 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
template<class ForwardIterator, class BinaryPredicate> ForwardIterator
# 43 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
min_element(ForwardIterator first, ForwardIterator
# 44 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
last, BinaryPredicate
# 45 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
comp, host_space_tag)
# 47 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
{
# 48 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
return std::min_element(first, last, comp);
# 49 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
}
# 52 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
template<class ForwardIterator, class BinaryPredicate> ForwardIterator
# 53 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
max_element(ForwardIterator first, ForwardIterator
# 54 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
last, BinaryPredicate
# 55 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
comp, host_space_tag)
# 57 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
{
# 58 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
return std::max_element(first, last, comp);
# 59 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
}
# 62 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
template<class ForwardIterator, class BinaryPredicate> pair< ForwardIterator, ForwardIterator>
# 63 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
minmax_element(ForwardIterator first, ForwardIterator
# 64 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
last, BinaryPredicate
# 65 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
comp, host_space_tag)
# 67 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
{
# 68 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
return host::minmax_element(first, last, comp);
# 69 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
}
# 74 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
template<class ForwardIterator, class BinaryPredicate> ForwardIterator
# 75 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
min_element(ForwardIterator first, ForwardIterator last, BinaryPredicate
# 76 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
comp, device_space_tag)
# 78 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
{
# 79 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
return device::min_element(first, last, comp);
# 80 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
}
# 82 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
template<class ForwardIterator, class BinaryPredicate> ForwardIterator
# 83 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
max_element(ForwardIterator first, ForwardIterator last, BinaryPredicate
# 84 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
comp, device_space_tag)
# 86 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
{
# 87 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
return device::max_element(first, last, comp);
# 88 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
}
# 90 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
template<class ForwardIterator, class BinaryPredicate> pair< ForwardIterator, ForwardIterator>
# 91 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
minmax_element(ForwardIterator first, ForwardIterator
# 92 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
last, BinaryPredicate
# 93 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
comp, device_space_tag)
# 95 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
{
# 96 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
return device::minmax_element(first, last, comp);
# 97 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
}
# 100 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
}
# 102 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
}
# 104 "/home/normal/checkout/thrust/thrust/detail/dispatch/extrema.h"
}
# 23 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
template<class T, class BinaryPredicate> T
# 27 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
min(const T &lhs, const T &rhs, BinaryPredicate comp)
# 28 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
{
# 29 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
return (comp(lhs, rhs)) ? lhs : rhs;
# 30 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
}
# 32 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
template<class T> T
# 33 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
min(const T &lhs, const T &rhs)
# 34 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
{
# 35 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
return (lhs < rhs) ? lhs : rhs;
# 36 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
}
# 38 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
template<class T, class BinaryPredicate> T
# 39 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
max(const T &lhs, const T &rhs, BinaryPredicate comp)
# 40 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
{
# 41 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
return (comp(lhs, rhs)) ? rhs : lhs;
# 42 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
}
# 44 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
template<class T> T
# 45 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
max(const T &lhs, const T &rhs)
# 46 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
{
# 47 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
return (lhs > rhs) ? lhs : rhs;
# 48 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
template<class ForwardIterator> ForwardIterator
# 52 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
min_element(ForwardIterator first, ForwardIterator last)
# 53 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
{
# 55 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
typedef typename iterator_traits< ForwardIterator> ::value_type InputType;
# 56 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
return thrust::min_element(first, last, less< typename iterator_traits< ForwardIterator> ::value_type> ());
# 57 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
}
# 60 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
template<class ForwardIterator, class BinaryPredicate> ForwardIterator
# 61 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
min_element(ForwardIterator first, ForwardIterator last, BinaryPredicate
# 62 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
comp)
# 63 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
{
# 65 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
return detail::dispatch::min_element(first, last, comp, typename iterator_space< ForwardIterator> ::type());
# 67 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
}
# 70 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
template<class ForwardIterator> ForwardIterator
# 71 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
max_element(ForwardIterator first, ForwardIterator last)
# 72 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
{
# 74 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
typedef typename iterator_traits< ForwardIterator> ::value_type InputType;
# 75 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
return thrust::max_element(first, last, less< typename iterator_traits< ForwardIterator> ::value_type> ());
# 76 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
}
# 79 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
template<class ForwardIterator, class BinaryPredicate> ForwardIterator
# 80 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
max_element(ForwardIterator first, ForwardIterator last, BinaryPredicate
# 81 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
comp)
# 82 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
{
# 84 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
return detail::dispatch::max_element(first, last, comp, typename iterator_space< ForwardIterator> ::type());
# 86 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
}
# 89 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
template<class ForwardIterator> pair< ForwardIterator, ForwardIterator>
# 91 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
minmax_element(ForwardIterator first, ForwardIterator last)
# 92 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
{
# 94 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
typedef typename iterator_traits< ForwardIterator> ::value_type InputType;
# 95 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
return thrust::minmax_element(first, last, less< typename iterator_traits< ForwardIterator> ::value_type> ());
# 96 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
}
# 99 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
template<class ForwardIterator, class BinaryPredicate> pair< ForwardIterator, ForwardIterator>
# 101 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
minmax_element(ForwardIterator first, ForwardIterator last, BinaryPredicate
# 102 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
comp)
# 103 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
{
# 105 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
return detail::dispatch::minmax_element(first, last, comp, typename iterator_space< ForwardIterator> ::type());
# 107 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
}
# 110 "/home/normal/checkout/thrust/thrust/detail/extrema.inl"
}
# 36 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
namespace thrust {
# 38 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
namespace detail {
# 40 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
namespace device {
# 42 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
namespace cuda {
# 44 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
namespace detail {
# 47 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
template<class T>
# 48 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
struct fill_functor {
# 50 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
T exemplar;
# 52 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
fill_functor(T _exemplar) : exemplar(_exemplar)
# 53 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
{ }
# 56 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
T operator()()
# 57 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
{
# 58 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
return exemplar;
# 59 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
}
# 60 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
};
# 63 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
template<class Pointer, class T> void
# 64 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
wide_fill(Pointer first, Pointer
# 65 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
last, const T &
# 66 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
exemplar)
# 67 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
{
# 68 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
typedef typename iterator_value< Pointer> ::type OutputType;
# 70 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
typedef unsigned long long WideType;
# 72 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
size_t ALIGNMENT_BOUNDARY = (128);
# 74 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
size_t n = (last - first);
# 76 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
WideType wide_exemplar;
# 77 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
for (size_t i = (0); i < (sizeof(WideType) / sizeof(typename iterator_value< Pointer> ::type)); i++) {
# 78 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
((reinterpret_cast< OutputType *>((&wide_exemplar)))[i]) = (static_cast< OutputType>(exemplar)); }
# 80 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
OutputType *first_raw = (thrust::raw_pointer_cast(first));
# 81 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
OutputType *last_raw = (thrust::raw_pointer_cast(last));
# 83 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
OutputType *block_first_raw = (thrust::min(first_raw + n, util::align_up(first_raw, ALIGNMENT_BOUNDARY)));
# 84 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
OutputType *block_last_raw = (thrust::max(block_first_raw, util::align_down(last_raw, sizeof(WideType))));
# 86 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
device_ptr< unsigned long long> block_first_wide = thrust::device_pointer_cast(reinterpret_cast< WideType *>(block_first_raw));
# 87 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
device_ptr< unsigned long long> block_last_wide = thrust::device_pointer_cast(reinterpret_cast< WideType *>(block_last_raw));
# 89 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
device::generate(first, thrust::device_pointer_cast(block_first_raw), ((fill_functor< typename iterator_value< Pointer> ::type> )(exemplar)));
# 90 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
thrust::detail::device::generate(block_first_wide, block_last_wide, ((fill_functor< unsigned long long> )(wide_exemplar)));
# 92 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
device::generate(thrust::device_pointer_cast(block_last_raw), last, ((fill_functor< typename iterator_value< Pointer> ::type> )(exemplar)));
# 93 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
}
# 95 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
template<class ForwardIterator, class T> void
# 96 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
fill(ForwardIterator first, ForwardIterator
# 97 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
last, const T &
# 98 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
exemplar, false_type)
# 100 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
{
# 101 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
fill_functor< T> func(exemplar);
# 102 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
device::generate(first, last, func);
# 103 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
}
# 105 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
template<class ForwardIterator, class T> void
# 106 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
fill(ForwardIterator first, ForwardIterator
# 107 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
last, const T &
# 108 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
exemplar, true_type)
# 110 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
{
# 111 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
typedef typename iterator_traits< ForwardIterator> ::value_type OutputType;
# 114 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
if (util::is_aligned< typename iterator_traits< ForwardIterator> ::value_type> (thrust::raw_pointer_cast(&(*first))))
# 115 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
{
# 116 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
wide_fill(&(*first), &(*last), exemplar);
# 117 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
} else
# 119 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
{
# 120 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
fill(first, last, exemplar, false_type());
# 121 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
}
# 122 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
}
# 124 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
}
# 126 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
template<class ForwardIterator, class T> void
# 127 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
fill(ForwardIterator first, ForwardIterator
# 128 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
last, const T &
# 129 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
exemplar)
# 130 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
{
# 131 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
typedef typename iterator_traits< ForwardIterator> ::value_type OutputType;
# 132 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
typedef typename iterator_traits< ForwardIterator> ::difference_type IndexType;
# 135 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
const bool use_wide_fill = ((is_trivial_iterator< ForwardIterator> ::value && has_trivial_copy< typename iterator_traits< ForwardIterator> ::value_type> ::value) && (((sizeof(typename iterator_traits< ForwardIterator> ::value_type) == (1)) || (sizeof(typename iterator_traits< ForwardIterator> ::value_type) == (2))) || (sizeof(typename iterator_traits< ForwardIterator> ::value_type) == (4))));
# 140 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
(void)use_wide_fill;
# 142 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
detail::fill(first, last, exemplar, integral_constant< bool, ((is_trivial_iterator< ForwardIterator> ::value && has_trivial_copy< typename iterator_traits< ForwardIterator> ::value_type> ::value) && (((sizeof(typename iterator_traits< ForwardIterator> ::value_type) == 1U) || (sizeof(typename iterator_traits< ForwardIterator> ::value_type) == 2U)) || (sizeof(typename iterator_traits< ForwardIterator> ::value_type) == 4U)))> ());
# 143 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
}
# 145 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
}
# 146 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
}
# 147 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
}
# 148 "/home/normal/checkout/thrust/thrust/detail/device/cuda/fill.inl"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
namespace detail {
# 30 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
namespace device {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
namespace generic {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
namespace detail {
# 36 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
template<class T>
# 37 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
struct fill_functor {
# 39 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
T exemplar;
# 41 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
fill_functor(T _exemplar) : exemplar(_exemplar)
# 42 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
{ }
# 45 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
T operator()()
# 46 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
{
# 47 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
return exemplar;
# 48 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
}
# 49 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
};
# 50 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
}
# 52 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
template<class ForwardIterator, class T> void
# 53 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
fill(ForwardIterator first, ForwardIterator
# 54 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
last, const T &
# 55 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
exemplar)
# 56 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
{
# 58 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
device::generate(first, last, ((detail::fill_functor< T> )(exemplar)));
# 59 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
}
# 61 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
}
# 62 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
}
# 63 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
}
# 64 "/home/normal/checkout/thrust/thrust/detail/device/generic/fill.h"
}
# 23 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
namespace thrust {
# 26 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
namespace detail {
# 29 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
namespace device {
# 32 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
namespace dispatch {
# 35 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
template<class InputIterator, class
# 36 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
UnaryFunction, class
# 37 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
Space> void
# 38 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
fill(InputIterator first, InputIterator
# 39 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
last, UnaryFunction
# 40 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
f, Space)
# 42 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
{
# 44 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
generic::fill(first, last, f);
# 45 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
}
# 47 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
template<class InputIterator, class
# 48 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
UnaryFunction> void
# 49 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
fill(InputIterator first, InputIterator
# 50 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
last, UnaryFunction
# 51 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
f, cuda_device_space_tag)
# 53 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
{
# 55 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
cuda::fill(first, last, f);
# 56 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
}
# 58 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
}
# 60 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
}
# 62 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
}
# 64 "/home/normal/checkout/thrust/thrust/detail/device/dispatch/fill.h"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/device/fill.h"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/device/fill.h"
namespace detail {
# 31 "/home/normal/checkout/thrust/thrust/detail/device/fill.h"
namespace device {
# 34 "/home/normal/checkout/thrust/thrust/detail/device/fill.h"
template<class ForwardIterator, class T> void
# 35 "/home/normal/checkout/thrust/thrust/detail/device/fill.h"
fill(ForwardIterator first, ForwardIterator
# 36 "/home/normal/checkout/thrust/thrust/detail/device/fill.h"
last, const T &
# 37 "/home/normal/checkout/thrust/thrust/detail/device/fill.h"
exemplar)
# 38 "/home/normal/checkout/thrust/thrust/detail/device/fill.h"
{
# 40 "/home/normal/checkout/thrust/thrust/detail/device/fill.h"
dispatch::fill(first, last, exemplar, typename iterator_space< ForwardIterator> ::type());
# 42 "/home/normal/checkout/thrust/thrust/detail/device/fill.h"
}
# 44 "/home/normal/checkout/thrust/thrust/detail/device/fill.h"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/device/fill.h"
}
# 46 "/home/normal/checkout/thrust/thrust/detail/device/fill.h"
}
# 30 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
namespace thrust {
# 33 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
namespace detail {
# 36 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
namespace dispatch {
# 42 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
template<class ForwardIterator, class T> void
# 43 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
fill(ForwardIterator first, ForwardIterator
# 44 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
last, const T &
# 45 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
exemplar, host_space_tag)
# 47 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
{
# 48 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
std::fill(first, last, exemplar);
# 49 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
}
# 54 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
template<class ForwardIterator, class T> void
# 55 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
fill(ForwardIterator first, ForwardIterator
# 56 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
last, const T &
# 57 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
exemplar, device_space_tag)
# 59 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
{
# 60 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
device::fill(first, last, exemplar);
# 61 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
}
# 63 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
}
# 65 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
}
# 67 "/home/normal/checkout/thrust/thrust/detail/dispatch/fill.h"
}
# 26 "/home/normal/checkout/thrust/thrust/detail/fill.inl"
namespace thrust {
# 29 "/home/normal/checkout/thrust/thrust/detail/fill.inl"
template<class ForwardIterator, class T> void
# 30 "/home/normal/checkout/thrust/thrust/detail/fill.inl"
fill(ForwardIterator first, ForwardIterator
# 31 "/home/normal/checkout/thrust/thrust/detail/fill.inl"
last, const T &
# 32 "/home/normal/checkout/thrust/thrust/detail/fill.inl"
exemplar)
# 33 "/home/normal/checkout/thrust/thrust/detail/fill.inl"
{
# 35 "/home/normal/checkout/thrust/thrust/detail/fill.inl"
detail::dispatch::fill(first, last, exemplar, typename iterator_space< ForwardIterator> ::type());
# 37 "/home/normal/checkout/thrust/thrust/detail/fill.inl"
}
# 39 "/home/normal/checkout/thrust/thrust/detail/fill.inl"
}
# 26 "/home/normal/checkout/thrust/thrust/for_each.h"
namespace thrust {
# 52 "/home/normal/checkout/thrust/thrust/for_each.h"
template<class InputIterator, class
# 53 "/home/normal/checkout/thrust/thrust/for_each.h"
UnaryFunction> void
# 52 "/home/normal/checkout/thrust/thrust/for_each.h"
for_each(InputIterator, InputIterator, UnaryFunction);
# 61 "/home/normal/checkout/thrust/thrust/for_each.h"
}
# 29 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
namespace thrust {
# 32 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
namespace detail {
# 35 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
namespace dispatch {
# 41 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
template<class InputIterator, class
# 42 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
UnaryFunction> void
# 43 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
for_each(InputIterator first, InputIterator
# 44 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
last, UnaryFunction
# 45 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
f, host_space_tag)
# 47 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
{
# 48 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
std::for_each(first, last, f);
# 49 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
}
# 55 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
template<class InputIterator, class
# 56 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
UnaryFunction> void
# 57 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
for_each(InputIterator first, InputIterator
# 58 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
last, UnaryFunction
# 59 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
f, device_space_tag)
# 61 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
{
# 62 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
device::for_each(first, last, f);
# 63 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
}
# 65 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
}
# 67 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
}
# 69 "/home/normal/checkout/thrust/thrust/detail/dispatch/for_each.h"
}
# 25 "/home/normal/checkout/thrust/thrust/detail/for_each.inl"
namespace thrust {
# 31 "/home/normal/checkout/thrust/thrust/detail/for_each.inl"
template<class InputIterator, class
# 32 "/home/normal/checkout/thrust/thrust/detail/for_each.inl"
UnaryFunction> void
# 33 "/home/normal/checkout/thrust/thrust/detail/for_each.inl"
for_each(InputIterator first, InputIterator
# 34 "/home/normal/checkout/thrust/thrust/detail/for_each.inl"
last, UnaryFunction
# 35 "/home/normal/checkout/thrust/thrust/detail/for_each.inl"
f)
# 36 "/home/normal/checkout/thrust/thrust/detail/for_each.inl"
{
# 38 "/home/normal/checkout/thrust/thrust/detail/for_each.inl"
detail::dispatch::for_each(first, last, f, typename iterator_space< InputIterator> ::type());
# 40 "/home/normal/checkout/thrust/thrust/detail/for_each.inl"
}
# 42 "/home/normal/checkout/thrust/thrust/detail/for_each.inl"
}
# 29 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
namespace thrust {
# 32 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
namespace detail {
# 35 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
namespace dispatch {
# 39 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
template<class ForwardIterator, class
# 40 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
T> void
# 41 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
uninitialized_fill(ForwardIterator first, ForwardIterator
# 42 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
last, const T &
# 43 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
x, true_type)
# 45 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
{
# 46 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
thrust::fill(first, last, x);
# 47 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
}
# 49 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
namespace detail {
# 52 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
template<class T>
# 53 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
struct copy_constructor {
# 55 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
T exemplar;
# 57 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
copy_constructor(T x) : exemplar(x) { }
# 60 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
void operator()(T &x)
# 61 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
{
# 62 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
::new (static_cast< void *>((&x))) (T)(exemplar);
# 63 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
}
# 64 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
};
# 66 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
}
# 69 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
template<class ForwardIterator, class
# 70 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
T> void
# 71 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
uninitialized_fill(ForwardIterator first, ForwardIterator
# 72 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
last, const T &
# 73 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
x, false_type)
# 75 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
{
# 76 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
typedef typename iterator_traits< ForwardIterator> ::value_type ValueType;
# 78 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
thrust::for_each(first, last, ((detail::copy_constructor< typename iterator_traits< ForwardIterator> ::value_type> )(x)));
# 79 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
}
# 81 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
}
# 83 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
}
# 85 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_fill.h"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/uninitialized_fill.inl"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/detail/uninitialized_fill.inl"
template<class ForwardIterator, class
# 31 "/home/normal/checkout/thrust/thrust/detail/uninitialized_fill.inl"
T> void
# 32 "/home/normal/checkout/thrust/thrust/detail/uninitialized_fill.inl"
uninitialized_fill(ForwardIterator first, ForwardIterator
# 33 "/home/normal/checkout/thrust/thrust/detail/uninitialized_fill.inl"
last, const T &
# 34 "/home/normal/checkout/thrust/thrust/detail/uninitialized_fill.inl"
x)
# 35 "/home/normal/checkout/thrust/thrust/detail/uninitialized_fill.inl"
{
# 36 "/home/normal/checkout/thrust/thrust/detail/uninitialized_fill.inl"
typedef typename iterator_traits< ForwardIterator> ::value_type ValueType;
# 38 "/home/normal/checkout/thrust/thrust/detail/uninitialized_fill.inl"
typedef detail::has_trivial_copy_constructor< typename iterator_traits< ForwardIterator> ::value_type> ValueTypeHasTrivialCopyConstructor;
# 40 "/home/normal/checkout/thrust/thrust/detail/uninitialized_fill.inl"
detail::dispatch::uninitialized_fill(first, last, x, ValueTypeHasTrivialCopyConstructor());
# 42 "/home/normal/checkout/thrust/thrust/detail/uninitialized_fill.inl"
}
# 44 "/home/normal/checkout/thrust/thrust/detail/uninitialized_fill.inl"
}
# 28 "/home/normal/checkout/thrust/thrust/uninitialized_copy.h"
namespace thrust {
# 92 "/home/normal/checkout/thrust/thrust/uninitialized_copy.h"
template<class InputIterator, class ForwardIterator> ForwardIterator uninitialized_copy(InputIterator, InputIterator, ForwardIterator);
# 100 "/home/normal/checkout/thrust/thrust/uninitialized_copy.h"
}
# 29 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
namespace thrust {
# 32 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
namespace detail {
# 35 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
namespace dispatch {
# 39 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
template<class ForwardIterator, class
# 40 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
OutputIterator> OutputIterator
# 41 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
uninitialized_copy(ForwardIterator first, ForwardIterator
# 42 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
last, OutputIterator
# 43 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
result, true_type)
# 45 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
{
# 46 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
return thrust::copy(first, last, result);
# 47 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
}
# 49 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
namespace detail {
# 52 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
template<class InputType, class
# 53 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
OutputType>
# 54 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
struct uninitialized_copy_functor {
# 58 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
void operator()(const InputType &in, OutputType &out)
# 59 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
{
# 60 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
::new (static_cast< void *>((&out))) (OutputType)(in);
# 61 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
}
# 62 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
};
# 64 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
}
# 67 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
template<class ForwardIterator, class
# 68 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
OutputIterator> OutputIterator
# 69 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
uninitialized_copy(ForwardIterator first, ForwardIterator
# 70 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
last, OutputIterator
# 71 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
result, false_type)
# 73 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
{
# 74 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
typedef typename iterator_traits< ForwardIterator> ::value_type ValueType;
# 81 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
return thrust::copy(first, last, result);
# 82 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
}
# 84 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
}
# 86 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
}
# 88 "/home/normal/checkout/thrust/thrust/detail/dispatch/uninitialized_copy.h"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/uninitialized_copy.inl"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/detail/uninitialized_copy.inl"
template<class InputIterator, class
# 31 "/home/normal/checkout/thrust/thrust/detail/uninitialized_copy.inl"
ForwardIterator> ForwardIterator
# 32 "/home/normal/checkout/thrust/thrust/detail/uninitialized_copy.inl"
uninitialized_copy(InputIterator first, InputIterator
# 33 "/home/normal/checkout/thrust/thrust/detail/uninitialized_copy.inl"
last, ForwardIterator
# 34 "/home/normal/checkout/thrust/thrust/detail/uninitialized_copy.inl"
result)
# 35 "/home/normal/checkout/thrust/thrust/detail/uninitialized_copy.inl"
{
# 36 "/home/normal/checkout/thrust/thrust/detail/uninitialized_copy.inl"
typedef typename iterator_traits< ForwardIterator> ::value_type ResultType;
# 39 "/home/normal/checkout/thrust/thrust/detail/uninitialized_copy.inl"
typedef detail::has_trivial_copy_constructor< typename iterator_traits< ForwardIterator> ::value_type> ResultTypeHasTrivialCopyConstructor;
# 41 "/home/normal/checkout/thrust/thrust/detail/uninitialized_copy.inl"
return detail::dispatch::uninitialized_copy(first, last, result, ResultTypeHasTrivialCopyConstructor());
# 43 "/home/normal/checkout/thrust/thrust/detail/uninitialized_copy.inl"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/uninitialized_copy.inl"
}
# 26 "/home/normal/checkout/thrust/thrust/advance.h"
namespace thrust {
# 46 "/home/normal/checkout/thrust/thrust/advance.h"
template<class InputIterator, class Distance> void advance(InputIterator &, Distance);
# 52 "/home/normal/checkout/thrust/thrust/advance.h"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
namespace dispatch {
# 41 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
template<class InputIterator, class Distance> void
# 42 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
advance(InputIterator &i, Distance n, host_space_tag)
# 44 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
{
# 45 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
std::advance(i, n);
# 46 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
}
# 51 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
template<class InputIterator, class Distance> void
# 52 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
advance(InputIterator &i, Distance n, device_space_tag)
# 54 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
{
# 56 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
i += n;
# 57 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
}
# 62 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
template<class InputIterator, class Distance> void
# 63 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
advance(InputIterator &i, Distance n, any_space_tag)
# 65 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
{
# 67 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
i += n;
# 68 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
}
# 70 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
}
# 72 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
}
# 74 "/home/normal/checkout/thrust/thrust/detail/dispatch/advance.h"
}
# 25 "/home/normal/checkout/thrust/thrust/detail/advance.inl"
namespace thrust {
# 28 "/home/normal/checkout/thrust/thrust/detail/advance.inl"
template<class InputIterator, class Distance> void
# 29 "/home/normal/checkout/thrust/thrust/detail/advance.inl"
advance(InputIterator &i, Distance n)
# 30 "/home/normal/checkout/thrust/thrust/detail/advance.inl"
{
# 32 "/home/normal/checkout/thrust/thrust/detail/advance.inl"
detail::dispatch::advance(i, n, typename iterator_space< InputIterator> ::type());
# 34 "/home/normal/checkout/thrust/thrust/detail/advance.inl"
}
# 36 "/home/normal/checkout/thrust/thrust/detail/advance.inl"
}
# 27 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
namespace thrust {
# 30 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
namespace detail {
# 33 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
namespace dispatch {
# 36 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
template<class ForwardIterator> void
# 37 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
destroy(ForwardIterator first, ForwardIterator
# 38 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
last, true_type)
# 40 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
{
# 42 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
;
# 43 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
namespace detail {
# 48 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
template<class T>
# 49 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
struct destroyer {
# 52 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
void operator()(T &x) const
# 53 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
{
# 54 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
(x.T::~T());
# 55 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
}
# 56 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
};
# 58 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
}
# 60 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
template<class ForwardIterator> void
# 61 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
destroy(ForwardIterator first, ForwardIterator
# 62 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
last, false_type)
# 64 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
{
# 65 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
typedef typename iterator_traits< ForwardIterator> ::value_type value_type;
# 67 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
detail::destroyer< typename iterator_traits< ForwardIterator> ::value_type> op;
# 68 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
thrust::for_each(first, last, op);
# 69 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
}
# 71 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
}
# 73 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
}
# 75 "/home/normal/checkout/thrust/thrust/detail/dispatch/destroy.h"
}
# 29 "/home/normal/checkout/thrust/thrust/detail/destroy.h"
namespace thrust {
# 32 "/home/normal/checkout/thrust/thrust/detail/destroy.h"
namespace detail {
# 35 "/home/normal/checkout/thrust/thrust/detail/destroy.h"
template<class ForwardIterator> void
# 36 "/home/normal/checkout/thrust/thrust/detail/destroy.h"
destroy(ForwardIterator first, ForwardIterator
# 37 "/home/normal/checkout/thrust/thrust/detail/destroy.h"
last)
# 38 "/home/normal/checkout/thrust/thrust/detail/destroy.h"
{
# 39 "/home/normal/checkout/thrust/thrust/detail/destroy.h"
typedef typename iterator_traits< ForwardIterator> ::value_type value_type;
# 41 "/home/normal/checkout/thrust/thrust/detail/destroy.h"
dispatch::destroy(first, last, has_trivial_destructor< typename iterator_traits< ForwardIterator> ::value_type> ());
# 43 "/home/normal/checkout/thrust/thrust/detail/destroy.h"
}
# 45 "/home/normal/checkout/thrust/thrust/detail/destroy.h"
}
# 47 "/home/normal/checkout/thrust/thrust/detail/destroy.h"
}
# 41 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
namespace thrust {
# 44 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
namespace detail {
# 47 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 49 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::vector_base() : mBegin(((pointer)((T *)0))), mSize((0)), mCapacity((0)), mAllocator()
# 54 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 55 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
;
# 56 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 58 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 60 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::vector_base(size_type n, const value_type &value) : mBegin(((pointer)((T *)0))), mSize((0)), mCapacity((0)), mAllocator()
# 65 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 66 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
this->fill_init(n, value);
# 67 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 69 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 71 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::vector_base(const detail::vector_base< T, Alloc> &v) : mBegin(((pointer)((T *)0))), mSize((0)), mCapacity((0)), mAllocator(v.mAllocator)
# 76 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 79 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
range_init(v.begin(), v.end(), false_type());
# 80 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 82 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> vector_base< T, Alloc> &
# 85 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::operator=(const detail::vector_base< T, Alloc> &v)
# 86 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 87 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (this != (&v))
# 88 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 89 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
assign(v.begin(), v.end());
# 90 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 92 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return *this;
# 93 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 95 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 96 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class OtherT, class OtherAlloc>
# 98 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::vector_base(const detail::vector_base< OtherT, OtherAlloc> &v) : mBegin(((pointer)((T *)0))), mSize((0)), mCapacity((0)), mAllocator()
# 103 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 106 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
range_init((v.detail::vector_base< OtherT, OtherAlloc> ::begin()), (v.detail::vector_base< OtherT, OtherAlloc> ::end()), false_type());
# 107 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 109 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 110 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class OtherT, class OtherAlloc> vector_base< T, Alloc> &
# 113 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::operator=(const detail::vector_base< OtherT, OtherAlloc> &v)
# 114 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 115 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
assign((v.detail::vector_base< OtherT, OtherAlloc> ::begin()), (v.detail::vector_base< OtherT, OtherAlloc> ::end()));
# 117 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return *this;
# 118 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 120 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 121 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class OtherT, class OtherAlloc>
# 123 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::vector_base(const std::vector< OtherT, OtherAlloc> &v) : mBegin(((pointer)((T *)0))), mSize((0)), mCapacity((0)), mAllocator()
# 128 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 131 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
range_init((v.std::vector< OtherT, OtherAlloc> ::begin()), (v.std::vector< OtherT, OtherAlloc> ::end()), false_type());
# 132 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 134 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 135 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class OtherT, class OtherAlloc> vector_base< T, Alloc> &
# 138 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::operator=(const std::vector< OtherT, OtherAlloc> &v)
# 139 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 140 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
assign((v.std::vector< OtherT, OtherAlloc> ::begin()), (v.std::vector< OtherT, OtherAlloc> ::end()));
# 142 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return *this;
# 143 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 145 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 146 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class IteratorOrIntegralType> void
# 148 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::init_dispatch(IteratorOrIntegralType n, IteratorOrIntegralType
# 149 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
value, true_type)
# 151 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 152 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
this->fill_init(n, value);
# 153 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 155 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> void
# 157 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::fill_init(size_type n, const T &x)
# 158 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 159 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (n > (0))
# 160 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 161 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mBegin) = ((mAllocator).Alloc::allocate(n));
# 162 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mSize) = ((mCapacity) = n);
# 164 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::uninitialized_fill(this->begin(), this->end(), x);
# 165 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 166 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 168 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 169 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class InputIterator> void
# 171 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::init_dispatch(InputIterator first, InputIterator
# 172 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
last, false_type)
# 174 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 177 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
typedef typename iterator_traits< InputIterator> ::iterator_category category;
# 178 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
typedef typename is_same< typename iterator_traits< InputIterator> ::iterator_category, std::input_iterator_tag> ::type input_host_iterator_or_not;
# 179 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
range_init(first, last, input_host_iterator_or_not());
# 180 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 182 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 183 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class InputHostIterator> void
# 185 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::range_init(InputHostIterator first, InputHostIterator
# 186 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
last, true_type)
# 188 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 189 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
for (; first != last; ++first) {
# 190 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
this->push_back(*first); }
# 191 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 193 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 194 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class ForwardIterator> void
# 196 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::range_init(ForwardIterator first, ForwardIterator
# 197 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
last, false_type)
# 199 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 200 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
size_type new_size = (thrust::distance(first, last));
# 201 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
size_type new_capacity;
# 202 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
iterator new_begin;
# 204 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
allocate_and_copy(new_size, first, last, new_capacity, new_begin);
# 206 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mBegin) = new_begin;
# 207 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mSize) = new_size;
# 208 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mCapacity) = new_capacity;
# 209 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 211 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 212 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class InputIterator>
# 214 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::vector_base(InputIterator first, InputIterator
# 215 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
last) : mBegin(((pointer)((T *)0))), mSize((0)), mCapacity((0)), mAllocator()
# 220 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 223 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
typedef is_integral< InputIterator> Integer;
# 225 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
init_dispatch(first, last, Integer());
# 226 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 228 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> void
# 230 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::resize(size_type new_size, value_type x)
# 231 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 232 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (new_size < this->size()) {
# 233 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
erase(this->begin() + new_size, this->end()); } else {
# 235 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
insert(this->end(), new_size - this->size(), x); }
# 236 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 238 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::size_type
# 241 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::size() const
# 242 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 243 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return mSize;
# 244 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 246 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::size_type
# 249 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::max_size() const
# 250 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 251 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return ((mAllocator).Alloc::max_size());
# 252 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 254 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> void
# 256 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::reserve(size_type n)
# 257 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 258 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (n > this->capacity())
# 259 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 260 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
size_type new_capacity;
# 261 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
iterator new_begin;
# 262 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
allocate_and_copy(n, this->begin(), this->end(), new_capacity, new_begin);
# 264 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mBegin) = new_begin;
# 265 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mCapacity) = new_capacity;
# 266 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 267 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 269 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::size_type
# 272 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::capacity() const
# 273 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 274 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return mCapacity;
# 275 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 277 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> void
# 279 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::shrink_to_fit()
# 280 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 282 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
((detail::vector_base< T, Alloc> )(*this)).swap(*this);
# 283 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 285 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::reference
# 288 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::operator[](const size_type n)
# 289 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 290 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return *(this->begin() + n);
# 291 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 293 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::const_reference
# 296 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::operator[](const size_type n) const
# 297 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 298 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return *(this->begin() + n);
# 299 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 301 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::iterator
# 304 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::begin()
# 305 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 306 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return mBegin;
# 307 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 309 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::const_iterator
# 312 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::begin() const
# 313 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 314 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return mBegin;
# 315 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 317 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::const_iterator
# 320 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::cbegin() const
# 321 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 322 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return this->begin();
# 323 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 325 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::reverse_iterator
# 328 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::rbegin()
# 329 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 330 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return ((reverse_iterator)(this->end()));
# 331 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 333 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::const_reverse_iterator
# 336 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::rbegin() const
# 337 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 338 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return ((const_reverse_iterator)(this->end()));
# 339 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 341 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::const_reverse_iterator
# 344 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::crbegin() const
# 345 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 346 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return this->rbegin();
# 347 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 349 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::iterator
# 352 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::end()
# 353 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 354 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return this->begin() + this->size();
# 355 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 357 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::const_iterator
# 360 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::end() const
# 361 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 362 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return this->begin() + this->size();
# 363 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 365 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::const_iterator
# 368 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::cend() const
# 369 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 370 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return this->end();
# 371 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 373 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::reverse_iterator
# 376 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::rend()
# 377 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 378 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return ((reverse_iterator)(this->begin()));
# 379 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 381 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::const_reverse_iterator
# 384 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::rend() const
# 385 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 386 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return ((const_reverse_iterator)(this->begin()));
# 387 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 389 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::const_reverse_iterator
# 392 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::crend() const
# 393 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 394 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return this->rend();
# 395 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 397 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::const_reference
# 400 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::front() const
# 401 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 402 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return *this->begin();
# 403 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 405 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::reference
# 408 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::front()
# 409 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 410 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return *this->begin();
# 411 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 413 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::const_reference
# 416 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::back() const
# 417 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 418 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return *(this->begin() + (static_cast< difference_type>((this->size() - (1)))));
# 419 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 421 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::reference
# 424 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::back()
# 425 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 426 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return *(this->begin() + (static_cast< difference_type>((this->size() - (1)))));
# 427 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 429 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::pointer
# 432 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::data()
# 433 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 434 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return &this->front();
# 435 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 437 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::const_pointer
# 440 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::data() const
# 441 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 442 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return &this->front();
# 443 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 445 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 447 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::~vector_base()
# 448 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 450 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
detail::destroy(this->begin(), this->end());
# 453 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
((mAllocator).Alloc::deallocate(((mBegin).normal_iterator< typename Alloc::pointer> ::base()), this->capacity()));
# 454 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 456 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> void
# 458 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::clear()
# 459 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 461 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
this->resize(0);
# 462 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 464 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> bool
# 466 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::empty() const
# 467 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 468 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return this->size() == (0);
# 469 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 471 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> void
# 473 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::push_back(const value_type &x)
# 474 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 475 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
insert(this->end(), x);
# 476 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 478 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> void
# 480 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::pop_back()
# 481 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 482 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
--(mSize);
# 483 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
detail::destroy(this->end(), this->end() + 1);
# 484 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 486 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::iterator
# 488 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::erase(iterator pos)
# 489 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 490 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return erase(pos, pos + 1);
# 491 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 493 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::iterator
# 495 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::erase(iterator first, iterator last)
# 496 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 498 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
iterator i = detail::move(last, this->end(), first);
# 501 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
detail::destroy(i, this->end());
# 504 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mSize) -= (last - first);
# 508 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return first;
# 509 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 511 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> void
# 513 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::swap(detail::vector_base< T, Alloc> &v)
# 514 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 515 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::swap(mBegin, v.mBegin);
# 516 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::swap(mSize, v.mSize);
# 517 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::swap(mCapacity, v.mCapacity);
# 518 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::swap(mAllocator, v.mAllocator);
# 519 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 521 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> void
# 523 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::assign(size_type n, const T &x)
# 524 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 525 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
this->fill_assign(n, x);
# 526 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 528 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 529 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class InputIterator> void
# 531 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::assign(InputIterator first, InputIterator last)
# 532 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 535 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
typedef is_integral< InputIterator> integral;
# 537 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
assign_dispatch(first, last, integral());
# 538 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 540 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> typename vector_base< T, Alloc> ::iterator
# 543 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::insert(iterator position, const T &x)
# 544 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 546 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
size_type index = (position - this->begin());
# 549 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
insert(position, 1, x);
# 552 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return this->begin() + index;
# 553 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 555 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> void
# 557 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::insert(iterator position, size_type n, const T &x)
# 558 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 559 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
this->fill_insert(position, n, x);
# 560 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 562 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 563 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class InputIterator> void
# 565 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::insert(iterator position, InputIterator first, InputIterator last)
# 566 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 569 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
typedef is_integral< InputIterator> integral;
# 571 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
insert_dispatch(position, first, last, integral());
# 572 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 574 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 575 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class InputIterator> void
# 577 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::assign_dispatch(InputIterator first, InputIterator last, false_type)
# 578 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 579 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
range_assign(first, last);
# 580 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 582 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 583 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class Integral> void
# 585 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::assign_dispatch(Integral n, Integral x, true_type)
# 586 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 587 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
this->fill_assign(n, x);
# 588 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 590 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 591 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class InputIterator> void
# 593 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::insert_dispatch(iterator position, InputIterator first, InputIterator last, false_type)
# 594 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 595 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
range_insert(position, first, last);
# 596 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 598 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 599 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class Integral> void
# 601 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::insert_dispatch(iterator position, Integral n, Integral x, true_type)
# 602 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 603 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
this->fill_insert(position, n, x);
# 604 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 606 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 607 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class ForwardIterator> void
# 609 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::range_insert(iterator position, ForwardIterator
# 610 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
first, ForwardIterator
# 611 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
last)
# 612 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 613 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (first != last)
# 614 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 616 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
const size_type num_new_elements = (thrust::distance(first, last));
# 617 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if ((this->capacity() - this->size()) >= num_new_elements)
# 618 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 621 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
const size_type num_displaced_elements = (this->end() - position);
# 622 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
iterator old_end = this->end();
# 624 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (num_displaced_elements > num_new_elements)
# 625 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 628 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::uninitialized_copy(this->end() - num_new_elements, this->end(), this->end());
# 631 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mSize) += num_new_elements;
# 638 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
const size_type copy_length = ((old_end - num_new_elements) - position);
# 639 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::copy(position, old_end - num_new_elements, old_end - copy_length);
# 642 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::copy(first, last, position);
# 643 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
} else
# 645 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 646 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
ForwardIterator mid = first;
# 647 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::advance(mid, num_displaced_elements);
# 650 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::uninitialized_copy(mid, last, this->end());
# 653 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mSize) += (num_new_elements - num_displaced_elements);
# 656 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::uninitialized_copy(position, old_end, this->end());
# 659 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mSize) += num_displaced_elements;
# 662 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::copy(first, mid, position);
# 663 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 664 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
} else
# 666 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 667 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
const size_type old_size = this->size();
# 670 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
size_type new_capacity = (old_size + std::max(old_size, num_new_elements));
# 673 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
new_capacity = std::max< unsigned> (new_capacity, ((2) * this->capacity()));
# 676 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
new_capacity = std::min< unsigned> (new_capacity, this->max_size());
# 680 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (new_capacity > this->max_size())
# 681 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 682 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
throw ((std::length_error)("insert(): insertion exceeds max_size()."));
# 683 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 686 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
iterator new_begin = ((mAllocator).Alloc::allocate(new_capacity));
# 687 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
iterator new_end = new_begin;
# 689 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
try
# 690 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 693 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
new_end = thrust::uninitialized_copy(this->begin(), position, new_begin);
# 696 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
new_end = thrust::uninitialized_copy(first, last, new_end);
# 700 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
new_end = thrust::uninitialized_copy(position, this->end(), new_end);
# 701 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 702 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
catch (...)
# 703 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 705 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
detail::destroy(new_begin, new_end);
# 706 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
((mAllocator).Alloc::deallocate(&(*new_begin), new_capacity));
# 709 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
throw;
# 710 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 713 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
detail::destroy(this->begin(), this->end());
# 716 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
((mAllocator).Alloc::deallocate(&(*this->begin()), this->capacity()));
# 719 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mBegin) = new_begin;
# 720 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mSize) = (old_size + num_new_elements);
# 721 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mCapacity) = new_capacity;
# 722 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 723 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 724 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 726 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> void
# 728 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::fill_insert(iterator position, size_type n, const T &x)
# 729 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 730 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (n != (0))
# 731 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 732 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if ((this->capacity() - this->size()) >= n)
# 733 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 736 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
const size_type num_displaced_elements = (this->end() - position);
# 737 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
iterator old_end = this->end();
# 739 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (num_displaced_elements > n)
# 740 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 743 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::uninitialized_copy(this->end() - n, this->end(), this->end());
# 746 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mSize) += n;
# 753 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
const size_type copy_length = ((old_end - n) - position);
# 754 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::copy(position, old_end - n, old_end - copy_length);
# 757 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::fill(position, position + n, x);
# 758 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
} else
# 760 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 763 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::uninitialized_fill(this->end(), this->end() + (n - num_displaced_elements), x);
# 768 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mSize) += (n - num_displaced_elements);
# 771 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::uninitialized_copy(position, old_end, this->end());
# 774 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mSize) += num_displaced_elements;
# 777 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::fill(position, old_end, x);
# 778 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 779 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
} else
# 781 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 782 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
const size_type old_size = this->size();
# 785 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
size_type new_capacity = (old_size + std::max(old_size, n));
# 788 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
new_capacity = std::max< unsigned> (new_capacity, ((2) * this->capacity()));
# 791 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
new_capacity = std::min< unsigned> (new_capacity, this->max_size());
# 795 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (new_capacity > this->max_size())
# 796 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 797 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
throw ((std::length_error)("insert(): insertion exceeds max_size()."));
# 798 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 801 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
iterator new_begin = ((mAllocator).Alloc::allocate(new_capacity));
# 802 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
iterator new_end = new_begin;
# 804 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
try
# 805 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 808 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
new_end = thrust::uninitialized_copy(this->begin(), position, new_begin);
# 811 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::uninitialized_fill(new_end, new_end + n, x);
# 812 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
new_end += n;
# 816 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
new_end = thrust::uninitialized_copy(position, this->end(), new_end);
# 817 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 818 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
catch (...)
# 819 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 821 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
detail::destroy(new_begin, new_end);
# 822 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
((mAllocator).Alloc::deallocate(&(*new_begin), new_capacity));
# 825 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
throw;
# 826 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 829 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
detail::destroy(this->begin(), this->end());
# 832 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
((mAllocator).Alloc::deallocate(&(*this->begin()), this->capacity()));
# 835 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mBegin) = new_begin;
# 836 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mSize) = (old_size + n);
# 837 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mCapacity) = new_capacity;
# 838 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 839 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 840 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 842 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 843 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class InputIterator> void
# 845 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::range_assign(InputIterator first, InputIterator
# 846 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
last)
# 847 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 850 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
typedef typename iterator_traits< InputIterator> ::iterator_category category;
# 852 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
typedef typename is_same< typename iterator_traits< InputIterator> ::iterator_category, std::input_iterator_tag> ::type input_host_iterator_or_not;
# 854 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
range_assign(first, last, input_host_iterator_or_not());
# 855 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 857 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 858 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class InputHostIterator> void
# 860 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::range_assign(InputHostIterator first, InputHostIterator
# 861 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
last, true_type)
# 863 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 864 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
iterator current(this->begin());
# 867 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
for (; (first != last) && (current != this->end()); (++current), (++first))
# 868 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 869 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(*current) = (*first);
# 870 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 874 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (first == last)
# 875 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 877 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
erase(current, this->end());
# 878 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
} else
# 880 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 882 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
insert(this->end(), first, last);
# 883 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 884 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 886 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 887 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class ForwardIterator> void
# 889 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::range_assign(ForwardIterator first, ForwardIterator
# 890 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
last, false_type)
# 892 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 893 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
const size_type n = (thrust::distance(first, last));
# 895 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (n > this->capacity())
# 896 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 897 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
size_type new_capacity;
# 898 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
iterator new_begin;
# 900 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
allocate_and_copy(n, first, last, new_capacity, new_begin);
# 903 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
detail::destroy(this->begin(), this->end());
# 906 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
((mAllocator).Alloc::deallocate(&(*this->begin()), this->capacity()));
# 909 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mBegin) = new_begin;
# 910 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mSize) = n;
# 911 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mCapacity) = new_capacity;
# 912 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
} else {
# 913 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (this->size() >= n)
# 914 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 916 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
iterator new_end = thrust::copy(first, last, this->begin());
# 919 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
detail::destroy(new_end, this->end());
# 922 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mSize) = n;
# 923 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
} else
# 925 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 933 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
ForwardIterator mid = first;
# 934 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::advance(mid, this->size());
# 935 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::copy(first, mid, this->begin());
# 938 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
iterator new_end = thrust::uninitialized_copy(mid, last, this->end());
# 941 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mSize) = n;
# 942 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
} }
# 943 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 945 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> void
# 947 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::fill_assign(size_type n, const T &x)
# 948 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 949 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (n > this->capacity())
# 950 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 953 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
detail::vector_base< T, Alloc> temp(n, x);
# 954 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
temp.swap(*this);
# 955 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
} else {
# 956 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (n > this->size())
# 957 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 959 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::fill(this->begin(), this->end(), x);
# 962 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::uninitialized_fill(this->end(), this->end() + (n - this->size()), x);
# 965 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(mSize) += (n - this->size());
# 966 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
} else
# 968 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 970 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::fill(this->begin(), this->begin() + n, x);
# 973 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
erase(this->begin() + n, this->end());
# 974 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
} }
# 975 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 977 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc>
# 978 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class ForwardIterator> void
# 980 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_base< T, Alloc> ::allocate_and_copy(size_type requested_size, ForwardIterator
# 981 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
first, ForwardIterator last, size_type &
# 982 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
allocated_size, iterator &
# 983 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
new_storage)
# 984 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 985 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (requested_size == (0))
# 986 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 987 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
allocated_size = (0);
# 988 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
new_storage = ((iterator)(((pointer)((T *)0))));
# 989 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return;
# 990 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 993 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
allocated_size = std::max< unsigned> (requested_size, ((2) * this->capacity()));
# 996 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
allocated_size = std::min< unsigned> (allocated_size, this->max_size());
# 1000 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
if (requested_size > allocated_size)
# 1001 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 1002 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
throw ((std::length_error)("assignment exceeds max_size()."));
# 1003 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1006 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
new_storage = ((mAllocator).Alloc::allocate(allocated_size));
# 1008 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
try
# 1009 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 1011 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
thrust::uninitialized_copy(first, last, new_storage);
# 1012 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1013 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
catch (...)
# 1014 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 1016 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
detail::destroy(new_storage, new_storage + requested_size);
# 1017 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
((mAllocator).Alloc::deallocate(&(*new_storage), allocated_size));
# 1020 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
throw;
# 1021 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1022 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1024 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1026 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T, class Alloc> void
# 1027 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
swap(detail::vector_base< T, Alloc> &a, detail::vector_base< T, Alloc> &
# 1028 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
b)
# 1029 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 1030 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
(a.detail::vector_base< T, Alloc> ::swap(b));
# 1031 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1035 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
namespace detail {
# 1041 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class InputIterator1, class InputIterator2> bool
# 1042 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_equal(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 1043 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
first2, host_space_tag, host_space_tag)
# 1046 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 1047 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return thrust::equal(first1, last1, first2);
# 1048 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1053 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class InputIterator1, class InputIterator2> bool
# 1054 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_equal(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 1055 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
first2, device_space_tag, device_space_tag)
# 1058 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 1059 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return thrust::equal(first1, last1, first2);
# 1060 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1065 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class InputIterator1, class InputIterator2> bool
# 1066 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_equal(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 1067 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
first2, host_space_tag, device_space_tag)
# 1070 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 1071 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
typedef typename iterator_traits< InputIterator2> ::value_type InputType2;
# 1074 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
raw_host_buffer< typename iterator_traits< InputIterator2> ::value_type> buffer(first2, first2 + thrust::distance(first1, last1));
# 1076 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return thrust::equal(first1, last1, (buffer.raw_host_buffer< typename iterator_traits< InputIterator2> ::value_type> ::begin()));
# 1077 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1082 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class InputIterator1, class InputIterator2> bool
# 1083 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_equal(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 1084 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
first2, device_space_tag, host_space_tag)
# 1087 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 1088 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
typedef typename iterator_traits< InputIterator1> ::value_type InputType1;
# 1091 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
raw_host_buffer< typename iterator_traits< InputIterator1> ::value_type> buffer(first1, last1);
# 1093 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return thrust::equal((buffer.raw_host_buffer< typename iterator_traits< InputIterator1> ::value_type> ::begin()), (buffer.raw_host_buffer< typename iterator_traits< InputIterator1> ::value_type> ::end()), first2);
# 1094 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1096 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class InputIterator1, class InputIterator2> bool
# 1097 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
vector_equal(InputIterator1 first1, InputIterator1 last1, InputIterator2
# 1098 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
first2)
# 1099 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 1100 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return vector_equal(first1, last1, first2, typename iterator_space< InputIterator1> ::type(), typename iterator_space< InputIterator2> ::type());
# 1103 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1105 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1110 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T1, class Alloc1, class
# 1111 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
T2, class Alloc2> bool
# 1112 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
operator==(const detail::vector_base< T1, Alloc1> &lhs, const detail::vector_base< T2, Alloc2> &
# 1113 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
rhs)
# 1114 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 1115 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return ((lhs.detail::vector_base< T1, Alloc1> ::size()) == (rhs.detail::vector_base< T2, Alloc2> ::size())) && detail::vector_equal((lhs.detail::vector_base< T1, Alloc1> ::begin()), (lhs.detail::vector_base< T1, Alloc1> ::end()), (rhs.detail::vector_base< T2, Alloc2> ::begin()));
# 1116 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1118 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T1, class Alloc1, class
# 1119 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
T2, class Alloc2> bool
# 1120 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
operator==(const detail::vector_base< T1, Alloc1> &lhs, const std::vector< T2, Alloc2> &
# 1121 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
rhs)
# 1122 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 1123 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return ((lhs.detail::vector_base< T1, Alloc1> ::size()) == (rhs.std::vector< T2, Alloc2> ::size())) && detail::vector_equal((lhs.detail::vector_base< T1, Alloc1> ::begin()), (lhs.detail::vector_base< T1, Alloc1> ::end()), (rhs.std::vector< T2, Alloc2> ::begin()));
# 1124 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1126 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T1, class Alloc1, class
# 1127 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
T2, class Alloc2> bool
# 1128 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
operator==(const std::vector< T1, Alloc1> &lhs, const detail::vector_base< T2, Alloc2> &
# 1129 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
rhs)
# 1130 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 1131 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return ((lhs.std::vector< T1, Alloc1> ::size()) == (rhs.detail::vector_base< T2, Alloc2> ::size())) && detail::vector_equal((lhs.std::vector< T1, Alloc1> ::begin()), (lhs.std::vector< T1, Alloc1> ::end()), (rhs.detail::vector_base< T2, Alloc2> ::begin()));
# 1132 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1134 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T1, class Alloc1, class
# 1135 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
T2, class Alloc2> bool
# 1136 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
operator!=(const detail::vector_base< T1, Alloc1> &lhs, const detail::vector_base< T2, Alloc2> &
# 1137 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
rhs)
# 1138 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 1139 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return !(lhs == rhs);
# 1140 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1142 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T1, class Alloc1, class
# 1143 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
T2, class Alloc2> bool
# 1144 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
operator!=(const detail::vector_base< T1, Alloc1> &lhs, const std::vector< T2, Alloc2> &
# 1145 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
rhs)
# 1146 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 1147 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return !(lhs == rhs);
# 1148 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1150 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
template<class T1, class Alloc1, class
# 1151 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
T2, class Alloc2> bool
# 1152 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
operator!=(const std::vector< T1, Alloc1> &lhs, const detail::vector_base< T2, Alloc2> &
# 1153 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
rhs)
# 1154 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
{
# 1155 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
return !(lhs == rhs);
# 1156 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 1158 "/home/normal/checkout/thrust/thrust/detail/vector_base.inl"
}
# 30 "/home/normal/checkout/thrust/thrust/device_vector.h"
namespace thrust {
# 34 "/home/normal/checkout/thrust/thrust/device_vector.h"
template<class T, class Alloc> class host_vector;
# 60 "/home/normal/checkout/thrust/thrust/device_vector.h"
template<class T, class Alloc = device_malloc_allocator< T> >
# 61 "/home/normal/checkout/thrust/thrust/device_vector.h"
class device_vector : public detail::vector_base< T, Alloc> {
# 65 "/home/normal/checkout/thrust/thrust/device_vector.h"
typedef detail::vector_base< T, Alloc> Parent;
# 69 "/home/normal/checkout/thrust/thrust/device_vector.h"
public: typedef typename detail::vector_base< T, Alloc> ::size_type size_type;
# 70 "/home/normal/checkout/thrust/thrust/device_vector.h"
typedef typename detail::vector_base< T, Alloc> ::value_type value_type;
# 75 "/home/normal/checkout/thrust/thrust/device_vector.h"
device_vector() : detail::vector_base< T, Alloc> ()
# 76 "/home/normal/checkout/thrust/thrust/device_vector.h"
{ }
# 84 "/home/normal/checkout/thrust/thrust/device_vector.h"
explicit device_vector(size_type n, const value_type &value = (value_type())) : detail::vector_base< T, Alloc> (n, value)
# 85 "/home/normal/checkout/thrust/thrust/device_vector.h"
{ }
# 91 "/home/normal/checkout/thrust/thrust/device_vector.h"
device_vector(const thrust::device_vector< T, Alloc> &v) : detail::vector_base< T, Alloc> (v)
# 92 "/home/normal/checkout/thrust/thrust/device_vector.h"
{ }
# 97 "/home/normal/checkout/thrust/thrust/device_vector.h"
template<class OtherT, class OtherAlloc>
# 99 "/home/normal/checkout/thrust/thrust/device_vector.h"
device_vector(const thrust::device_vector< OtherT, OtherAlloc> &v)
# 100 "/home/normal/checkout/thrust/thrust/device_vector.h"
{volatile int ___ = 1;exit(___);}
# 105 "/home/normal/checkout/thrust/thrust/device_vector.h"
template<class OtherT, class OtherAlloc> thrust::device_vector< T, Alloc> &
# 107 "/home/normal/checkout/thrust/thrust/device_vector.h"
operator=(const thrust::device_vector< OtherT, OtherAlloc> &v)
# 108 "/home/normal/checkout/thrust/thrust/device_vector.h"
{volatile int ___ = 1;exit(___);}
# 113 "/home/normal/checkout/thrust/thrust/device_vector.h"
template<class OtherT, class OtherAlloc>
# 115 "/home/normal/checkout/thrust/thrust/device_vector.h"
device_vector(const std::vector< OtherT, OtherAlloc> &v) : detail::vector_base< T, Alloc> (v)
# 116 "/home/normal/checkout/thrust/thrust/device_vector.h"
{ }
# 121 "/home/normal/checkout/thrust/thrust/device_vector.h"
template<class OtherT, class OtherAlloc> thrust::device_vector< T, Alloc> &
# 123 "/home/normal/checkout/thrust/thrust/device_vector.h"
operator=(const std::vector< OtherT, OtherAlloc> &v)
# 124 "/home/normal/checkout/thrust/thrust/device_vector.h"
{ detail::vector_base< T, Alloc> ::operator=(v); return *this; }
# 129 "/home/normal/checkout/thrust/thrust/device_vector.h"
template<class OtherT, class OtherAlloc> device_vector(const host_vector< OtherT, OtherAlloc> &);
# 137 "/home/normal/checkout/thrust/thrust/device_vector.h"
template<class InputIterator>
# 139 "/home/normal/checkout/thrust/thrust/device_vector.h"
device_vector(InputIterator first, InputIterator last) : detail::vector_base< T, Alloc> (first, last)
# 140 "/home/normal/checkout/thrust/thrust/device_vector.h"
{ }
# 141 "/home/normal/checkout/thrust/thrust/device_vector.h"
};
# 146 "/home/normal/checkout/thrust/thrust/device_vector.h"
}
# 30 "/home/normal/checkout/thrust/thrust/host_vector.h"
namespace thrust {
# 34 "/home/normal/checkout/thrust/thrust/host_vector.h"
template<class T, class Alloc> class device_vector;
# 60 "/home/normal/checkout/thrust/thrust/host_vector.h"
template<class T, class Alloc = std::allocator< T> >
# 61 "/home/normal/checkout/thrust/thrust/host_vector.h"
class host_vector : public detail::vector_base< T, Alloc> {
# 65 "/home/normal/checkout/thrust/thrust/host_vector.h"
typedef detail::vector_base< T, Alloc> Parent;
# 69 "/home/normal/checkout/thrust/thrust/host_vector.h"
public: typedef typename detail::vector_base< T, Alloc> ::size_type size_type;
# 70 "/home/normal/checkout/thrust/thrust/host_vector.h"
typedef typename detail::vector_base< T, Alloc> ::value_type value_type;
# 75 "/home/normal/checkout/thrust/thrust/host_vector.h"
host_vector() : detail::vector_base< T, Alloc> ()
# 76 "/home/normal/checkout/thrust/thrust/host_vector.h"
{ }
# 84 "/home/normal/checkout/thrust/thrust/host_vector.h"
explicit host_vector(size_type n, const value_type &value = (value_type())) : detail::vector_base< T, Alloc> (n, value)
# 85 "/home/normal/checkout/thrust/thrust/host_vector.h"
{ }
# 91 "/home/normal/checkout/thrust/thrust/host_vector.h"
host_vector(const thrust::host_vector< T, Alloc> &v) : detail::vector_base< T, Alloc> (v)
# 92 "/home/normal/checkout/thrust/thrust/host_vector.h"
{ }
# 98 "/home/normal/checkout/thrust/thrust/host_vector.h"
thrust::host_vector< T, Alloc> &operator=(const thrust::host_vector< T, Alloc> &v)
# 99 "/home/normal/checkout/thrust/thrust/host_vector.h"
{ detail::vector_base< T, Alloc> ::operator=(v); return *this; }
# 104 "/home/normal/checkout/thrust/thrust/host_vector.h"
template<class OtherT, class OtherAlloc>
# 106 "/home/normal/checkout/thrust/thrust/host_vector.h"
host_vector(const thrust::host_vector< OtherT, OtherAlloc> &v) : detail::vector_base< T, Alloc> (v)
# 107 "/home/normal/checkout/thrust/thrust/host_vector.h"
{ }
# 112 "/home/normal/checkout/thrust/thrust/host_vector.h"
template<class OtherT, class OtherAlloc> thrust::host_vector< T, Alloc> &
# 114 "/home/normal/checkout/thrust/thrust/host_vector.h"
operator=(const thrust::host_vector< OtherT, OtherAlloc> &v)
# 115 "/home/normal/checkout/thrust/thrust/host_vector.h"
{ detail::vector_base< T, Alloc> ::operator=(v); return *this; }
# 120 "/home/normal/checkout/thrust/thrust/host_vector.h"
template<class OtherT, class OtherAlloc>
# 122 "/home/normal/checkout/thrust/thrust/host_vector.h"
host_vector(const std::vector< OtherT, OtherAlloc> &v) : detail::vector_base< T, Alloc> (v)
# 123 "/home/normal/checkout/thrust/thrust/host_vector.h"
{ }
# 128 "/home/normal/checkout/thrust/thrust/host_vector.h"
template<class OtherT, class OtherAlloc> thrust::host_vector< T, Alloc> &
# 130 "/home/normal/checkout/thrust/thrust/host_vector.h"
operator=(const std::vector< OtherT, OtherAlloc> &v)
# 131 "/home/normal/checkout/thrust/thrust/host_vector.h"
{ detail::vector_base< T, Alloc> ::operator=(v); return *this; }
# 136 "/home/normal/checkout/thrust/thrust/host_vector.h"
template<class OtherT, class OtherAlloc> host_vector(const device_vector< OtherT, OtherAlloc> &);
# 144 "/home/normal/checkout/thrust/thrust/host_vector.h"
template<class InputIterator>
# 146 "/home/normal/checkout/thrust/thrust/host_vector.h"
host_vector(InputIterator first, InputIterator last) : detail::vector_base< T, Alloc> (first, last)
# 147 "/home/normal/checkout/thrust/thrust/host_vector.h"
{ }
# 148 "/home/normal/checkout/thrust/thrust/host_vector.h"
};
# 153 "/home/normal/checkout/thrust/thrust/host_vector.h"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/host_vector.inl"
namespace thrust {
# 27 "/home/normal/checkout/thrust/thrust/detail/host_vector.inl"
template<class T, class Alloc>
# 28 "/home/normal/checkout/thrust/thrust/detail/host_vector.inl"
template<class OtherT, class OtherAlloc>
# 30 "/home/normal/checkout/thrust/thrust/detail/host_vector.inl"
host_vector< T, Alloc> ::host_vector(const device_vector< OtherT, OtherAlloc> &v) : detail::vector_base< T, Alloc> (v)
# 32 "/home/normal/checkout/thrust/thrust/detail/host_vector.inl"
{
# 33 "/home/normal/checkout/thrust/thrust/detail/host_vector.inl"
;
# 34 "/home/normal/checkout/thrust/thrust/detail/host_vector.inl"
}
# 36 "/home/normal/checkout/thrust/thrust/detail/host_vector.inl"
}
# 24 "/home/normal/checkout/thrust/thrust/detail/device_vector.inl"
namespace thrust {
# 27 "/home/normal/checkout/thrust/thrust/detail/device_vector.inl"
template<class T, class Alloc>
# 28 "/home/normal/checkout/thrust/thrust/detail/device_vector.inl"
template<class OtherT, class OtherAlloc>
# 30 "/home/normal/checkout/thrust/thrust/detail/device_vector.inl"
device_vector< T, Alloc> ::device_vector(const host_vector< OtherT, OtherAlloc> &v) : detail::vector_base< T, Alloc> (v)
# 32 "/home/normal/checkout/thrust/thrust/detail/device_vector.inl"
{
# 33 "/home/normal/checkout/thrust/thrust/detail/device_vector.inl"
;
# 34 "/home/normal/checkout/thrust/thrust/detail/device_vector.inl"
}
# 36 "/home/normal/checkout/thrust/thrust/detail/device_vector.inl"
}
# 11 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
struct point2d {
# 13 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
float x, y;
# 16 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
point2d() { }
# 19 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
point2d(float _x, float _y) : x(_x), y(_y) { }
# 20 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
};
# 24 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
typedef thrust::pair< point2d, point2d> bbox;
# 27 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
struct bbox_reduction : public thrust::binary_function< thrust::pair< point2d, point2d> , thrust::pair< point2d, point2d> , thrust::pair< point2d, point2d> > {
# 30 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
bbox operator()(bbox a, bbox b)
# 31 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
{
# 33 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
point2d ll(min((a.first).x, (b.first).x), min((a.first).y, (b.first).y));
# 36 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
point2d ur(max((a.second).x, (b.second).x), max((a.second).y, (b.second).y));
# 38 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
return bbox(ll, ur);
# 39 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
}
# 40 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
};
# 43 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
struct bbox_transformation : public thrust::unary_function< point2d, thrust::pair< point2d, point2d> > {
# 46 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
bbox operator()(point2d point)
# 47 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
{
# 48 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
return bbox(point, point);
# 49 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
}
# 50 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
};
# 52 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
int main()
# 53 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
{
# 54 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
const size_t N = (40);
# 57 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
thrust::device_vector< point2d, thrust::device_malloc_allocator< point2d> > points(N);
# 60 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
for (size_t i = (0); i < N; i++) {
# 61 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
((points[i]) = (point2d(((float)rand()) / ((2147483647) + (1.0)), ((float)rand()) / ((2147483647) + (1.0))))); }
# 64 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
bbox init = bbox(points[(0)], points[(0)]);
# 67 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
bbox_transformation unary_op;
# 70 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
bbox_reduction binary_op;
# 73 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
bbox result = thrust::transform_reduce(points.begin(), points.end(), unary_op, init, binary_op);
# 76 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
((std::cout) << (("bounding box ")));
# 77 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
((((((((((((std::cout) << (("(")))) << (((result.first).x))))) << ((",")))) << (((result.first).y))))) << ((") ")));
# 78 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
((((((((((((((std::cout) << (("(")))) << (((result.second).x))))) << ((",")))) << (((result.second).y))))) << ((")")))) << (std::endl));
# 80 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
((std::cout) << (("TEST PASSED\n")));
# 82 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
return 0;
# 83 "/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu"
}
# 1 "/tmp/tmpxft_00005e37_00000000-1_bounding_box.cudafe1.stub.c"
# 1 "/tmp/tmpxft_00005e37_00000000-1_bounding_box.cudafe1.stub.c" 1
# 1 "/tmp/tmpxft_00005e37_00000000-3_bounding_box.fatbin.c" 1
# 1 "/usr/local/cuda/bin/../include/__cudaFatFormat.h" 1
# 83 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
extern "C" {
# 97 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
typedef struct {
    char* gpuProfileName;
    char* cubin;
} __cudaFatCubinEntry;
# 113 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
typedef struct {
    char* gpuProfileName;
    char* ptx;
} __cudaFatPtxEntry;
# 125 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
typedef struct __cudaFatDebugEntryRec {
    char* gpuProfileName;
    char* debug;
    struct __cudaFatDebugEntryRec *next;
    unsigned int size;
} __cudaFatDebugEntry;

typedef struct __cudaFatElfEntryRec {
    char* gpuProfileName;
    char* elf;
    struct __cudaFatElfEntryRec *next;
    unsigned int size;
} __cudaFatElfEntry;

typedef enum {
      __cudaFatDontSearchFlag = (1 << 0),
      __cudaFatDontCacheFlag = (1 << 1),
      __cudaFatSassDebugFlag = (1 << 2)
} __cudaFatCudaBinaryFlag;
# 152 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
typedef struct {
    char* name;
} __cudaFatSymbol;
# 166 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
typedef struct __cudaFatCudaBinaryRec {
    unsigned long magic;
    unsigned long version;
    unsigned long gpuInfoVersion;
    char* key;
    char* ident;
    char* usageMode;
    __cudaFatPtxEntry *ptx;
    __cudaFatCubinEntry *cubin;
    __cudaFatDebugEntry *debug;
    void* debugInfo;
    unsigned int flags;
    __cudaFatSymbol *exported;
    __cudaFatSymbol *imported;
    struct __cudaFatCudaBinaryRec *dependends;
    unsigned int characteristic;
    __cudaFatElfEntry *elf;
} __cudaFatCudaBinary;
# 203 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
    typedef enum {
        __cudaFatAvoidPTX,
        __cudaFatPreferBestCode,
        __cudaFatForcePTX
    } __cudaFatCompilationPolicy;
# 227 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
void fatGetCubinForGpuWithPolicy( __cudaFatCudaBinary *binary, __cudaFatCompilationPolicy policy, char* gpuName, char* *cubin, char* *dbgInfoFile );
# 240 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
unsigned char fatCheckJitForGpuWithPolicy( __cudaFatCudaBinary *binary, __cudaFatCompilationPolicy policy, char* gpuName, char* *ptx );
# 250 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
void fatFreeCubin( char* cubin, char* dbgInfoFile );


}
# 2 "/tmp/tmpxft_00005e37_00000000-3_bounding_box.fatbin.c" 2




extern "C" {


static const unsigned long long __deviceText_$sm_10$[] = {
0x33010101464c457full,0x0000000000000000ull,0x0000000100be0002ull,0x0000323c00000000ull,
0x000a000a00000034ull,0x0028000d00200034ull,0x000000000001001dull,0x0000000000000000ull,
0x0000000000000000ull,0x0000000000000000ull,0x0000000000000000ull,0x0000000100000000ull,
0x0000000000000003ull,0x000004bc00000000ull,0x00000000000012c0ull,0x0000000400000000ull,
0x0000000b00000000ull,0x0000000000000003ull,0x0000177c00000000ull,0x000000000000042dull,
0x0000000100000000ull,0x0000001300000000ull,0x0000000000000002ull,0x00001ba900000000ull,
0x0000000200000250ull,0x000000010000001full,0x0000082e00000010ull,0x0000000600000001ull,
0x00001df900000000ull,0x0000000300000008ull,0x0000000400000011ull,0x000009ab00000000ull,
0x0000000200000001ull,0x00001e0100000000ull,0x0000000000000008ull,0x0000000100000004ull,
0x000008ea00000000ull,0x0000000300000008ull,0x00001e0900000000ull,0x0000000000000020ull,
0x0000000400000004ull,0x000005f200000000ull,0x0000000600000001ull,0x00001e0900000000ull,
0x0000000300000008ull,0x000000040000000eull,0x0000076f00000000ull,0x0000000200000001ull,
0x00001e1100000000ull,0x0000000000000008ull,0x0000000100000007ull,0x000006ae00000000ull,
0x0000000300000008ull,0x00001e1900000000ull,0x0000000000000020ull,0x0000000400000007ull,
0x0000046700000000ull,0x0000000600000001ull,0x00001e1900000000ull,0x00000003000000c0ull,
0x000000040500000cull,0x00000f9700000000ull,0x0000000200000001ull,0x00001ed900000000ull,
0x0000000000000004ull,0x000000040000000aull,0x0000052b00000000ull,0x0000000200000001ull,
0x00001edd00000000ull,0x0000000000000014ull,0x000000010000000aull,0x00000e0600000000ull,
0x0000000300000008ull,0x00001ef100000000ull,0x0000000000000020ull,0x000000040000000aull,
0x00000ecf00000000ull,0x0000000300000008ull,0x00001ef100000000ull,0x0000000000000010ull,
0x000000040000000aull,0x000002dc00000000ull,0x0000000600000001ull,0x00001ef100000000ull,
0x00000003000000c0ull,0x000000040500000aull,0x000011f400000000ull,0x0000000200000001ull,
0x00001fb100000000ull,0x0000000000000004ull,0x000000040000000full,0x000003a000000000ull,
0x0000000200000001ull,0x00001fb500000000ull,0x0000000000000014ull,0x000000010000000full,
0x0000106300000000ull,0x0000000300000008ull,0x00001fc900000000ull,0x0000000000000020ull,
0x000000040000000full,0x0000112c00000000ull,0x0000000300000008ull,0x00001fc900000000ull,
0x0000000000000010ull,0x000000040000000full,0x0000011d00000000ull,0x0010000600000001ull,
0x00001fc900000000ull,0x00000003000008d8ull,0x000000040d000008ull,0x00000c2f00000000ull,
0x0000000200000001ull,0x000028a100000000ull,0x0000000000000048ull,0x0000000400000014ull,
0x000001fb00000000ull,0x0000000200000001ull,0x000028e900000000ull,0x0000000000000020ull,
0x0000000100000014ull,0x00000a6a00000000ull,0x0000000300000008ull,0x0000290900000000ull,
0x0000000000000030ull,0x0000000400000014ull,0x00000b4d00000000ull,0x0000000300000008ull,
0x0000290900000000ull,0x0000000000000010ull,0x0000000400000014ull,0x0000003600000000ull,
0x0010000600000001ull,0x0000290900000000ull,0x00000003000008c8ull,0x000000040f000006ull,
0x00000d8c00000000ull,0x0000000200000001ull,0x000031d100000000ull,0x0000000000000048ull,
0x0000000400000019ull,0x000000a800000000ull,0x0000000200000001ull,0x0000321900000000ull,
0x0000000000000020ull,0x0000000100000019ull,0x00000d1500000000ull,0x0000000300000008ull,
0x0000323900000000ull,0x0000000000000020ull,0x0000000400000019ull,0x68732e0000000000ull,
0x2e00626174727473ull,0x2e00626174727473ull,0x2e006261746d7973ull,0x61626f6c672e766eull,
0x2e0074696e692e6cull,0x61626f6c672e766eull,0x2e747865742e006cull,0x75726874364e5a5full,
0x6961746564367473ull,0x656369766564366cull,0x6564366164756334ull,0x657233316c696174ull,
0x735f6e5f65637564ull,0x5f534e50496d656dull,0x7037497269617034ull,0x36536432746e696full,
0x34315f375345455full,0x6465725f786f6262ull,0x45456e6f69746375ull,0x5f3054506a5f5476ull,
0x2e766e2e005f3154ull,0x4e5a5f2e6f666e69ull,0x3674737572687436ull,0x64366c6961746564ull,
0x7563346563697665ull,0x6961746564366164ull,0x637564657233316cull,0x6d656d735f6e5f65ull,
0x6170345f534e5049ull,0x6e696f7037497269ull,0x45455f3653643274ull,0x6f626234315f3753ull,
0x7463756465725f78ull,0x5f547645456e6f69ull,0x5f31545f3054506aull,0x5f2e747865742e00ull,
0x7375726874364e5aull,0x6c69617465643674ull,0x3465636976656436ull,0x7465643661647563ull,
0x64657233316c6961ull,0x6d735f6e5f656375ull,0x38315f534e496d65ull,0x726f66736e617274ull,
0x7461726574695f6dull,0x6f6262393149726full,0x66736e6172745f78ull,0x6e6f6974616d726full,
0x6f6e35315f30534eull,0x6574695f6c616d72ull,0x534e49726f746172ull,0x636976656430315full,
0x7037497274705f65ull,0x45456432746e696full,0x6170345f534e4545ull,0x39535f3953497269ull,
0x31315f534e45455full,0x616665645f657375ull,0x4453454545746c75ull,0x5f786f626234315full,
0x6f69746375646572ull,0x506a5f547645456eull,0x2e005f31545f3054ull,0x2e6f666e692e766eull,
0x75726874364e5a5full,0x6961746564367473ull,0x656369766564366cull,0x6564366164756334ull,
0x657233316c696174ull,0x735f6e5f65637564ull,0x315f534e496d656dull,0x6f66736e61727438ull,
0x61726574695f6d72ull,0x6262393149726f74ull,0x736e6172745f786full,0x6f6974616d726f66ull,
0x6e35315f30534e6eull,0x74695f6c616d726full,0x4e49726f74617265ull,0x6976656430315f53ull,
0x37497274705f6563ull,0x456432746e696f70ull,0x70345f534e454545ull,0x535f395349726961ull,
0x315f534e45455f39ull,0x6665645f65737531ull,0x53454545746c7561ull,0x786f626234315f44ull,
0x697463756465725full,0x6a5f547645456e6full,0x005f31545f305450ull,0x5a5f2e747865742eull,
0x747375726874364eull,0x366c696174656436ull,0x6334656369766564ull,0x6174656436616475ull,
0x6e75616c33326c69ull,0x75736f6c635f6863ull,0x61765f79625f6572ull,0x5f32534e4965756cull,
0x61655f726f663831ull,0x6f6c635f6e5f6863ull,0x30534e4965727573ull,0x616d726f6e35315full,
0x7461726574695f6cull,0x30315f534e49726full,0x705f656369766564ull,0x6e696f7037497274ull,
0x6a45454545643274ull,0x736964385f30534eull,0x6564366863746170ull,0x6f6336316c696174ull,
0x74736e6f635f7970ull,0x5349726f74637572ull,0x4545454545455f38ull,0x2e766e2e005f5476ull,
0x4e5a5f2e6f666e69ull,0x3674737572687436ull,0x64366c6961746564ull,0x7563346563697665ull,
0x6961746564366164ull,0x636e75616c33326cull,0x7275736f6c635f68ull,0x6c61765f79625f65ull,
0x315f32534e496575ull,0x6361655f726f6638ull,0x736f6c635f6e5f68ull,0x5f30534e49657275ull,
0x6c616d726f6e3531ull,0x6f7461726574695full,0x6430315f534e4972ull,0x74705f6563697665ull,
0x746e696f70374972ull,0x4e6a454545456432ull,0x70736964385f3053ull,0x7465643668637461ull,
0x706f6336316c6961ull,0x7274736e6f635f79ull,0x385349726f746375ull,0x764545454545455full,
0x747865742e005f54ull,0x726874364e5a5f2eull,0x6174656436747375ull,0x6369766564366c69ull,
0x6436616475633465ull,0x6c33326c69617465ull,0x6c635f68636e7561ull,0x79625f657275736full,
0x4e4965756c61765full,0x726f6638315f3253ull,0x5f6e5f686361655full,0x49657275736f6c63ull,
0x6f6e35315f30534eull,0x6574695f6c616d72ull,0x534e49726f746172ull,0x636976656430315full,
0x7037497274705f65ull,0x45456432746e696full,0x385f30534e694545ull,0x6863746170736964ull,
0x316c696174656436ull,0x6f635f79706f6336ull,0x6f7463757274736eull,0x4545455f38534972ull,
0x2e005f5476454545ull,0x2e6f666e692e766eull,0x75726874364e5a5full,0x6961746564367473ull,
0x656369766564366cull,0x6564366164756334ull,0x616c33326c696174ull,0x6f6c635f68636e75ull,
0x5f79625f65727573ull,0x534e4965756c6176ull,0x5f726f6638315f32ull,0x635f6e5f68636165ull,
0x4e49657275736f6cull,0x726f6e35315f3053ull,0x726574695f6c616dull,0x5f534e49726f7461ull,
0x6563697665643031ull,0x6f7037497274705full,0x4545456432746e69ull,0x64385f30534e6945ull,
0x3668637461707369ull,0x36316c6961746564ull,0x6e6f635f79706f63ull,0x726f746375727473ull,
0x454545455f385349ull,0x742e005f54764545ull,0x364e5a5f2e747865ull,0x6436747375726874ull,
0x6564366c69617465ull,0x6475633465636976ull,0x6c69617465643661ull,0x68636e75616c3332ull,
0x657275736f6c635full,0x756c61765f79625full,0x38315f32534e4965ull,0x686361655f726f66ull,
0x75736f6c635f6e5full,0x315f30534e496572ull,0x5f6c616d726f6e35ull,0x726f746172657469ull,
0x656430315f534e49ull,0x7274705f65636976ull,0x32746e696f703749ull,0x534e694545454564ull,
0x6170736964385f30ull,0x6174656436686374ull,0x7274736564396c69ull,0x5f3853497265796full,
0x5476454545454545ull,0x68732e766e2e005full,0x4e5a5f2e64657261ull,0x3674737572687436ull,
0x64366c6961746564ull,0x7563346563697665ull,0x6961746564366164ull,0x636e75616c33326cull,
0x7275736f6c635f68ull,0x6c61765f79625f65ull,0x315f32534e496575ull,0x6361655f726f6638ull,
0x736f6c635f6e5f68ull,0x5f30534e49657275ull,0x6c616d726f6e3531ull,0x6f7461726574695full,
0x6430315f534e4972ull,0x74705f6563697665ull,0x746e696f70374972ull,0x4e69454545456432ull,
0x70736964385f3053ull,0x7465643668637461ull,0x74736564396c6961ull,0x3853497265796f72ull,
0x764545454545455full,0x692e766e2e005f54ull,0x364e5a5f2e6f666eull,0x6436747375726874ull,
0x6564366c69617465ull,0x6475633465636976ull,0x6c69617465643661ull,0x68636e75616c3332ull,
0x657275736f6c635full,0x756c61765f79625full,0x38315f32534e4965ull,0x686361655f726f66ull,
0x75736f6c635f6e5full,0x315f30534e496572ull,0x5f6c616d726f6e35ull,0x726f746172657469ull,
0x656430315f534e49ull,0x7274705f65636976ull,0x32746e696f703749ull,0x534e694545454564ull,
0x6170736964385f30ull,0x6174656436686374ull,0x7274736564396c69ull,0x5f3853497265796full,
0x5476454545454545ull,0x2e747865742e005full,0x75726874364e5a5full,0x6961746564367473ull,
0x656369766564366cull,0x6564366164756334ull,0x616c33326c696174ull,0x6f6c635f68636e75ull,
0x5f79625f65727573ull,0x534e4965756c6176ull,0x5f726f6638315f32ull,0x635f6e5f68636165ull,
0x4e49657275736f6cull,0x726f6e35315f3053ull,0x726574695f6c616dull,0x5f534e49726f7461ull,
0x6563697665643031ull,0x6f7037497274705full,0x4545456432746e69ull,0x64385f30534e6a45ull,
0x3668637461707369ull,0x64396c6961746564ull,0x7265796f72747365ull,0x454545455f385349ull,
0x6e2e005f54764545ull,0x6465726168732e76ull,0x726874364e5a5f2eull,0x6174656436747375ull,
0x6369766564366c69ull,0x6436616475633465ull,0x6c33326c69617465ull,0x6c635f68636e7561ull,
0x79625f657275736full,0x4e4965756c61765full,0x726f6638315f3253ull,0x5f6e5f686361655full,
0x49657275736f6c63ull,0x6f6e35315f30534eull,0x6574695f6c616d72ull,0x534e49726f746172ull,
0x636976656430315full,0x7037497274705f65ull,0x45456432746e696full,0x385f30534e6a4545ull,
0x6863746170736964ull,0x396c696174656436ull,0x65796f7274736564ull,0x4545455f38534972ull,
0x2e005f5476454545ull,0x2e6f666e692e766eull,0x75726874364e5a5full,0x6961746564367473ull,
0x656369766564366cull,0x6564366164756334ull,0x616c33326c696174ull,0x6f6c635f68636e75ull,
0x5f79625f65727573ull,0x534e4965756c6176ull,0x5f726f6638315f32ull,0x635f6e5f68636165ull,
0x4e49657275736f6cull,0x726f6e35315f3053ull,0x726574695f6c616dull,0x5f534e49726f7461ull,
0x6563697665643031ull,0x6f7037497274705full,0x4545456432746e69ull,0x64385f30534e6a45ull,
0x3668637461707369ull,0x64396c6961746564ull,0x7265796f72747365ull,0x454545455f385349ull,
0x6e2e005f54764545ull,0x6465726168732e76ull,0x726874364e5a5f2eull,0x6174656436747375ull,
0x6369766564366c69ull,0x6436616475633465ull,0x7233316c69617465ull,0x5f6e5f6563756465ull,
0x5f534e496d656d73ull,0x66736e6172743831ull,0x726574695f6d726full,0x62393149726f7461ull,
0x6e6172745f786f62ull,0x6974616d726f6673ull,0x35315f30534e6e6full,0x695f6c616d726f6eull,
0x49726f7461726574ull,0x76656430315f534eull,0x497274705f656369ull,0x6432746e696f7037ull,
0x345f534e45454545ull,0x5f39534972696170ull,0x5f534e45455f3953ull,0x65645f6573753131ull,
0x454545746c756166ull,0x6f626234315f4453ull,0x7463756465725f78ull,0x5f547645456e6f69ull,
0x5f31545f3054506aull,0x636f6c2e766e2e00ull,0x74364e5a5f2e6c61ull,0x6564367473757268ull,
0x766564366c696174ull,0x6164756334656369ull,0x316c696174656436ull,0x5f65637564657233ull,
0x4e496d656d735f6eull,0x6e61727438315f53ull,0x74695f6d726f6673ull,0x3149726f74617265ull,
0x72745f786f626239ull,0x616d726f66736e61ull,0x5f30534e6e6f6974ull,0x6c616d726f6e3531ull,
0x6f7461726574695full,0x6430315f534e4972ull,0x74705f6563697665ull,0x746e696f70374972ull,
0x534e454545456432ull,0x534972696170345full,0x4e45455f39535f39ull,0x5f65737531315f53ull,
0x45746c7561666564ull,0x6234315f44534545ull,0x756465725f786f62ull,0x7645456e6f697463ull,
0x545f3054506a5f54ull,0x632e766e2e005f31ull,0x31746e6174736e6full,0x726874364e5a5f2eull,
0x6174656436747375ull,0x6369766564366c69ull,0x6436616475633465ull,0x7233316c69617465ull,
0x5f6e5f6563756465ull,0x5f534e496d656d73ull,0x66736e6172743831ull,0x726574695f6d726full,
0x62393149726f7461ull,0x6e6172745f786f62ull,0x6974616d726f6673ull,0x35315f30534e6e6full,
0x695f6c616d726f6eull,0x49726f7461726574ull,0x76656430315f534eull,0x497274705f656369ull,
0x6432746e696f7037ull,0x345f534e45454545ull,0x5f39534972696170ull,0x5f534e45455f3953ull,
0x65645f6573753131ull,0x454545746c756166ull,0x6f626234315f4453ull,0x7463756465725f78ull,
0x5f547645456e6f69ull,0x5f31545f3054506aull,0x6168732e766e2e00ull,0x364e5a5f2e646572ull,
0x6436747375726874ull,0x6564366c69617465ull,0x6475633465636976ull,0x6c69617465643661ull,
0x6563756465723331ull,0x496d656d735f6e5full,0x696170345f534e50ull,0x746e696f70374972ull,
0x5345455f36536432ull,0x786f626234315f37ull,0x697463756465725full,0x6a5f547645456e6full,
0x005f31545f305450ull,0x736e6f632e766e2eull,0x5a5f2e31746e6174ull,0x747375726874364eull,
0x366c696174656436ull,0x6334656369766564ull,0x6174656436616475ull,0x7564657233316c69ull,
0x656d735f6e5f6563ull,0x70345f534e50496dull,0x696f703749726961ull,0x455f36536432746eull,
0x626234315f375345ull,0x63756465725f786full,0x547645456e6f6974ull,0x31545f3054506a5full,
0x68732e766e2e005full,0x4e5a5f2e64657261ull,0x3674737572687436ull,0x64366c6961746564ull,
0x7563346563697665ull,0x6961746564366164ull,0x636e75616c33326cull,0x7275736f6c635f68ull,
0x6c61765f79625f65ull,0x315f32534e496575ull,0x6361655f726f6638ull,0x736f6c635f6e5f68ull,
0x5f30534e49657275ull,0x6c616d726f6e3531ull,0x6f7461726574695full,0x6430315f534e4972ull,
0x74705f6563697665ull,0x746e696f70374972ull,0x4e69454545456432ull,0x70736964385f3053ull,
0x7465643668637461ull,0x706f6336316c6961ull,0x7274736e6f635f79ull,0x385349726f746375ull,
0x764545454545455full,0x6c2e766e2e005f54ull,0x4e5a5f2e6c61636full,0x3674737572687436ull,
0x64366c6961746564ull,0x7563346563697665ull,0x6961746564366164ull,0x636e75616c33326cull,
0x7275736f6c635f68ull,0x6c61765f79625f65ull,0x315f32534e496575ull,0x6361655f726f6638ull,
0x736f6c635f6e5f68ull,0x5f30534e49657275ull,0x6c616d726f6e3531ull,0x6f7461726574695full,
0x6430315f534e4972ull,0x74705f6563697665ull,0x746e696f70374972ull,0x4e69454545456432ull,
0x70736964385f3053ull,0x7465643668637461ull,0x706f6336316c6961ull,0x7274736e6f635f79ull,
0x385349726f746375ull,0x764545454545455full,0x632e766e2e005f54ull,0x31746e6174736e6full,
0x726874364e5a5f2eull,0x6174656436747375ull,0x6369766564366c69ull,0x6436616475633465ull,
0x6c33326c69617465ull,0x6c635f68636e7561ull,0x79625f657275736full,0x4e4965756c61765full,
0x726f6638315f3253ull,0x5f6e5f686361655full,0x49657275736f6c63ull,0x6f6e35315f30534eull,
0x6574695f6c616d72ull,0x534e49726f746172ull,0x636976656430315full,0x7037497274705f65ull,
0x45456432746e696full,0x385f30534e694545ull,0x6863746170736964ull,0x316c696174656436ull,
0x6f635f79706f6336ull,0x6f7463757274736eull,0x4545455f38534972ull,0x2e005f5476454545ull,
0x65726168732e766eull,0x6874364e5a5f2e64ull,0x7465643674737572ull,0x69766564366c6961ull,
0x3661647563346563ull,0x33326c6961746564ull,0x635f68636e75616cull,0x625f657275736f6cull,
0x4965756c61765f79ull,0x6f6638315f32534eull,0x6e5f686361655f72ull,0x657275736f6c635full,
0x6e35315f30534e49ull,0x74695f6c616d726full,0x4e49726f74617265ull,0x6976656430315f53ull,
0x37497274705f6563ull,0x456432746e696f70ull,0x5f30534e6a454545ull,0x6374617073696438ull,
0x6c69617465643668ull,0x635f79706f633631ull,0x7463757274736e6full,0x45455f385349726full,
0x005f547645454545ull,0x61636f6c2e766e2eull,0x6874364e5a5f2e6cull,0x7465643674737572ull,
0x69766564366c6961ull,0x3661647563346563ull,0x33326c6961746564ull,0x635f68636e75616cull,
0x625f657275736f6cull,0x4965756c61765f79ull,0x6f6638315f32534eull,0x6e5f686361655f72ull,
0x657275736f6c635full,0x6e35315f30534e49ull,0x74695f6c616d726full,0x4e49726f74617265ull,
0x6976656430315f53ull,0x37497274705f6563ull,0x456432746e696f70ull,0x5f30534e6a454545ull,
0x6374617073696438ull,0x6c69617465643668ull,0x635f79706f633631ull,0x7463757274736e6full,
0x45455f385349726full,0x005f547645454545ull,0x736e6f632e766e2eull,0x5a5f2e31746e6174ull,
0x747375726874364eull,0x366c696174656436ull,0x6334656369766564ull,0x6174656436616475ull,
0x6e75616c33326c69ull,0x75736f6c635f6863ull,0x61765f79625f6572ull,0x5f32534e4965756cull,
0x61655f726f663831ull,0x6f6c635f6e5f6863ull,0x30534e4965727573ull,0x616d726f6e35315full,
0x7461726574695f6cull,0x30315f534e49726full,0x705f656369766564ull,0x6e696f7037497274ull,
0x6a45454545643274ull,0x736964385f30534eull,0x6564366863746170ull,0x6f6336316c696174ull,
0x74736e6f635f7970ull,0x5349726f74637572ull,0x4545454545455f38ull,0x4e5a5f00005f5476ull,
0x3674737572687436ull,0x64366c6961746564ull,0x7563346563697665ull,0x6961746564366164ull,
0x637564657233316cull,0x6d656d735f6e5f65ull,0x6170345f534e5049ull,0x6e696f7037497269ull,
0x45455f3653643274ull,0x6f626234315f3753ull,0x7463756465725f78ull,0x5f547645456e6f69ull,
0x5f31545f3054506aull,0x726874364e5a5f00ull,0x6174656436747375ull,0x6369766564366c69ull,
0x6436616475633465ull,0x7233316c69617465ull,0x5f6e5f6563756465ull,0x5f534e496d656d73ull,
0x66736e6172743831ull,0x726574695f6d726full,0x62393149726f7461ull,0x6e6172745f786f62ull,
0x6974616d726f6673ull,0x35315f30534e6e6full,0x695f6c616d726f6eull,0x49726f7461726574ull,
0x76656430315f534eull,0x497274705f656369ull,0x6432746e696f7037ull,0x345f534e45454545ull,
0x5f39534972696170ull,0x5f534e45455f3953ull,0x65645f6573753131ull,0x454545746c756166ull,
0x6f626234315f4453ull,0x7463756465725f78ull,0x5f547645456e6f69ull,0x5f31545f3054506aull,
0x726874364e5a5f00ull,0x6174656436747375ull,0x6369766564366c69ull,0x6436616475633465ull,
0x6c33326c69617465ull,0x6c635f68636e7561ull,0x79625f657275736full,0x4e4965756c61765full,
0x726f6638315f3253ull,0x5f6e5f686361655full,0x49657275736f6c63ull,0x6f6e35315f30534eull,
0x6574695f6c616d72ull,0x534e49726f746172ull,0x636976656430315full,0x7037497274705f65ull,
0x45456432746e696full,0x385f30534e6a4545ull,0x6863746170736964ull,0x316c696174656436ull,
0x6f635f79706f6336ull,0x6f7463757274736eull,0x4545455f38534972ull,0x5f005f5476454545ull,
0x7375726874364e5aull,0x6c69617465643674ull,0x3465636976656436ull,0x7465643661647563ull,
0x75616c33326c6961ull,0x736f6c635f68636eull,0x765f79625f657275ull,0x32534e4965756c61ull,
0x655f726f6638315full,0x6c635f6e5f686361ull,0x534e49657275736full,0x6d726f6e35315f30ull,
0x61726574695f6c61ull,0x315f534e49726f74ull,0x5f65636976656430ull,0x696f703749727470ull,
0x454545456432746eull,0x6964385f30534e69ull,0x6436686374617073ull,0x6336316c69617465ull,
0x736e6f635f79706full,0x49726f7463757274ull,0x45454545455f3853ull,0x4e5a5f005f547645ull,
0x3674737572687436ull,0x64366c6961746564ull,0x7563346563697665ull,0x6961746564366164ull,
0x636e75616c33326cull,0x7275736f6c635f68ull,0x6c61765f79625f65ull,0x315f32534e496575ull,
0x6361655f726f6638ull,0x736f6c635f6e5f68ull,0x5f30534e49657275ull,0x6c616d726f6e3531ull,
0x6f7461726574695full,0x6430315f534e4972ull,0x74705f6563697665ull,0x746e696f70374972ull,
0x4e69454545456432ull,0x70736964385f3053ull,0x7465643668637461ull,0x74736564396c6961ull,
0x3853497265796f72ull,0x764545454545455full,0x74364e5a5f005f54ull,0x6564367473757268ull,
0x766564366c696174ull,0x6164756334656369ull,0x326c696174656436ull,0x5f68636e75616c33ull,
0x5f657275736f6c63ull,0x65756c61765f7962ull,0x6638315f32534e49ull,0x5f686361655f726full,
0x7275736f6c635f6eull,0x35315f30534e4965ull,0x695f6c616d726f6eull,0x49726f7461726574ull,
0x76656430315f534eull,0x497274705f656369ull,0x6432746e696f7037ull,0x30534e6a45454545ull,
0x746170736964385full,0x6961746564366863ull,0x6f7274736564396cull,0x455f385349726579ull,
0x5f54764545454545ull,0x0000000000000000ull,0x0000000000000000ull,0x0000000000000000ull,
0x0100030000000000ull,0x0000000000000000ull,0x0200030000000000ull,0x0000000000000000ull,
0x0300030000000000ull,0x0000000000000000ull,0x0000030000000000ull,0x0000000000000000ull,
0x0000030000000000ull,0x0000000000000000ull,0x190003000008c800ull,0x0000000000000000ull,
0x1b00030000000000ull,0x0000000000000000ull,0x140003000008d800ull,0x0000000000000000ull,
0x1600030000000000ull,0x0000000000000000ull,0x0f0003000000c000ull,0x0000000000000000ull,
0x1100030000000000ull,0x0000000000000000ull,0x0a0003000000c000ull,0x0000000000000000ull,
0x0c00030000000000ull,0x0000000000000000ull,0x0700030000000800ull,0x0000000000000000ull,
0x0900030000000000ull,0x0000000000000000ull,0x0800030000000000ull,0x0000000000000000ull,
0x0400030000000800ull,0x0000000000000000ull,0x0600030000000000ull,0x0000000000000000ull,
0x0500030000000000ull,0x0000000000000000ull,0x1700030000000000ull,0x0000000000000000ull,
0x1800030000000000ull,0x0000000000000000ull,0x1500030000000000ull,0x0000000000000000ull,
0x1c00030000000000ull,0x0000000000000000ull,0x1a00030000000000ull,0x0000000000000000ull,
0x0d00030000000000ull,0x0000000000000000ull,0x0e00030000000000ull,0x0000000000000000ull,
0x0b00030000000000ull,0x0000000000000000ull,0x1200030000000000ull,0x0000000000000000ull,
0x1300030000000000ull,0x0000000000000000ull,0x1000030000000000ull,0x0000000000000100ull,
0x1910120000000000ull,0x0000000000006d00ull,0x1410120000000000ull,0x0000000000014500ull,
0x0f10120000000000ull,0x0000000000020300ull,0x0a10120000000000ull,0x000000000002c100ull,
0x0710120000000000ull,0x0000000000037700ull,0x0410120000000000ull,0x000001f000000100ull,
0x00000000040b04e0ull,0x000001f000000100ull,0x00000000040b04e0ull,0x23c7801000420900ull,
0x000780a000000900ull,0x23c7801000cc0104ull,0x20878060024c0504ull,0xc00780d000100100ull,
0x23c7801000ce0160ull,0x1007803003020904ull,0x20c7c83001cbfdc4ull,0xc00780d00018016cull,
0x2087802000c80960ull,0x0002803000000304ull,0x0028001100220000ull,0x0087c8307c05fd41ull,
0xc00500d000101164ull,0xc00500d000180d40ull,0xc00500d00e041140ull,0x40050021000411a0ull,
0xc00500d00e080d04ull,0x00078020000205a0ull,0x1007803003000d04ull,0x2107c83001cbfdc4ull,
0x00c780200004096cull,0x0002801000c00304ull,0x000001f000000100ull,0x040b0400000004e0ull,
0x080d040000000000ull,0x0000200020010000ull,0x23c7801000420900ull,0x000780a000000900ull,
0x23c7801000cc0104ull,0x20878060024c0504ull,0xc00780d000100100ull,0x23c7801000ce0160ull,
0x1007803003020904ull,0x20c7c83001cbfdc4ull,0xc00780d000180164ull,0x2087802000c80960ull,
0x0002803000000304ull,0x0028001100220000ull,0x0087c8307c05fd41ull,0xc00500d000101164ull,
0xc00500d000180d40ull,0xc00500d00e041140ull,0x40050021000411a0ull,0xc00500d00e080d04ull,
0x00478020000005a0ull,0x1007803003000d04ull,0x2107c83001cbfdc4ull,0x00c7802000040964ull,
0x0002801000c00304ull,0x000001f000000100ull,0x040b0400000004e0ull,0x080d040000000000ull,
0x0000200020010000ull,0x200780a000421900ull,0x200780a0004c1504ull,0x000780a000001d04ull,
0x079200400c142404ull,0x1007803003002120ull,0x20c7c83000cdfdc4ull,0x000000a001600364ull,
0x2207802000c82100ull,0x0002801001600304ull,0xc00780d00e100900ull,0x0000032004900580ull,
0xc00780d00e020500ull,0x200780400d480d80ull,0x1007803010060d00ull,0x20c780600c480dc4ull,
0xc00780d000000900ull,0x1007803003062960ull,0xc00780d0000805c4ull,0xc00780d000001160ull,
0xc00780d000080940ull,0x0a90202000860040ull,0x0084041000880c20ull,0x20c7ca3000cdfd10ull,
0x000000a002c00364ull,0x0002801002c00300ull,0x200780400d482900ull,0x1007803010142900ull,
0x228780600c4829c4ull,0xc00780d00e103100ull,0x0000032004902d80ull,0xc00780d00e162d00ull,
0xc00780d000103180ull,0xc00780d000182d60ull,0xc00780d000103160ull,0xc00780d000182d40ull,
0x0007802000140140ull,0x000780b003180d04ull,0x000780b0041811a0ull,0x1007803003143180ull,
0x2107c83000cdfdc4ull,0x000780b001160564ull,0x000780b0021609a0ull,0x0307802000102180ull,
0x0002801001c00304ull,0x00078200040e0500ull,0x20c78004001801c0ull,0x20478004001a01e4ull,
0x21078004001c01e4ull,0x20878004001e01e4ull,0x000000861ffe03e4ull,0x2247802040cc0100ull,
0x0007803006001104ull,0x40c7c8308009fda4ull,0x000000a004900364ull,0x0002801004900300ull,
0x00002320008e0100ull,0x0107c8300009fd00ull,0x40c2c830810ffd64ull,0x000000a004700364ull,
0x0001001004700300ull,0x000780d440600900ull,0x00e2041900e00020ull,0x00e60c1900e40819ull,
0x200780b400d80119ull,0x200780b401da05a0ull,0x200780b402dc09a0ull,0x200780b403de0d80ull,
0x2007800400180180ull,0x20478004001a01e4ull,0x20878004001c01e4ull,0x20c78004001e01e4ull,
0x000002f0000001e4ull,0x000000861ffe03e0ull,0x40c7ca308209fd00ull,0x000000a005e00364ull,
0x0002801005e00300ull,0x00001320008e0100ull,0x0107c8300009fd00ull,0x40c2c830830ffd64ull,
0x000000a005c00364ull,0x0001001005c00300ull,0x000780d420600900ull,0x00e2041900e00020ull,
0x00e60c1900e40819ull,0x200780b400d80119ull,0x200780b401da05a0ull,0x200780b402dc09a0ull,
0x200780b403de0d80ull,0x2007800400180180ull,0x20478004001a01e4ull,0x20878004001c01e4ull,
0x20c78004001e01e4ull,0x000002f0000001e4ull,0x000000861ffe03e0ull,0x40c7ca308409fd00ull,
0x000000a007300364ull,0x0002801007300300ull,0x00000b20008e0100ull,0x0107c8300009fd00ull,
0x40c2c830850ffd64ull,0x000000a007100364ull,0x0001001007100300ull,0x000780d410600900ull,
0x00e2041900e00020ull,0x00e60c1900e40819ull,0x200780b400d80119ull,0x200780b401da05a0ull,
0x200780b402dc09a0ull,0x200780b403de0d80ull,0x2007800400180180ull,0x20478004001a01e4ull,
0x20878004001c01e4ull,0x20c78004001e01e4ull,0x000002f0000001e4ull,0x000000861ffe03e0ull,
0x40c7ca308609fd00ull,0x000000a008800364ull,0x0002801008800300ull,0x00000720008e0100ull,
0x0107c8300009fd00ull,0x40c2c830870ffd64ull,0x000000a008600364ull,0x0001001008600300ull,
0x000780d408600900ull,0x00e2041900e00020ull,0x00e60c1900e40819ull,0x200780b400d80119ull,
0x200780b401da05a0ull,0x200780b402dc09a0ull,0x200780b403de0d80ull,0x2007800400180180ull,
0x20478004001a01e4ull,0x20878004001c01e4ull,0x20c78004001e01e4ull,0x000002f0000001e4ull,
0x000000861ffe03e0ull,0x40c7ca308809fd00ull,0x000000a009d00364ull,0x0002801009d00300ull,
0x00000320208e0100ull,0x0107c8300009fd00ull,0x40c2c830890ffd64ull,0x000000a009b00364ull,
0x0001001009b00300ull,0x000780d404600900ull,0x00e2041900e00020ull,0x00e60c1900e40819ull,
0x200780b400d80119ull,0x200780b401da05a0ull,0x200780b402dc09a0ull,0x200780b403de0d80ull,
0x2007800400180180ull,0x20478004001a01e4ull,0x20878004001c01e4ull,0x20c78004001e01e4ull,
0x000002f0000001e4ull,0x000000861ffe03e0ull,0x40c7ca308a09fd00ull,0x000000a00b200364ull,
0x000280100b200300ull,0x00000320108e0100ull,0x0107c8300009fd00ull,0x40c2c8308b0ffd64ull,
0x000000a00b000364ull,0x000100100b000300ull,0x000780d402600900ull,0x00e2041900e00020ull,
0x00e60c1900e40819ull,0x200780b400d80119ull,0x200780b401da05a0ull,0x200780b402dc09a0ull,
0x200780b403de0d80ull,0x2007800400180180ull,0x20478004001a01e4ull,0x20878004001c01e4ull,
0x20c78004001e01e4ull,0x000002f0000001e4ull,0x000000861ffe03e0ull,0x40c7ca308c09fd00ull,
0x000000a00c700364ull,0x000280100c700300ull,0x00000320088e0100ull,0x0107c8300009fd00ull,
0x40c2c8308d0ffd64ull,0x000000a00c500364ull,0x000100100c500300ull,0x000780d401600900ull,
0x00e2041900e00020ull,0x00e60c1900e40819ull,0x200780b400d80119ull,0x200780b401da05a0ull,
0x200780b402dc09a0ull,0x200780b403de0d80ull,0x2007800400180180ull,0x20478004001a01e4ull,
0x20878004001c01e4ull,0x20c78004001e01e4ull,0x000002f0000001e4ull,0x000000861ffe03e0ull,
0x40c7ca308e09fd00ull,0x000000a00dd00364ull,0x000280100dd00300ull,0x00000320048e0100ull,
0x0107c8300009fd00ull,0x40c2c8308f0ffd64ull,0x000000a00db00364ull,0x000100100db00300ull,
0x23c7801400f80d00ull,0x23c7801400fa0104ull,0x23c7801400fc0504ull,0x23c7801400fe0904ull,
0x200780b403d80d04ull,0x200780b400da01a0ull,0x200780b401dc05a0ull,0x200780b402de0980ull,
0x20c7800400180180ull,0x20078004001a01e4ull,0x20478004001c01e4ull,0x20878004001e01e4ull,
0x000002f0000001e4ull,0x000000861ffe03e0ull,0x40c7ca309009fd00ull,0x000000a00f300364ull,
0x000280100f300300ull,0x00000320028e0100ull,0x0107c8300009fd00ull,0x40c2c830910ffd64ull,
0x000000a00f100364ull,0x000100100f100300ull,0x23c7801400e80d00ull,0x23c7801400ea0104ull,
0x23c7801400ec0504ull,0x23c7801400ee0904ull,0x200780b403d80d04ull,0x200780b400da01a0ull,
0x200780b401dc05a0ull,0x200780b402de0980ull,0x20c7800400180180ull,0x20078004001a01e4ull,
0x20478004001c01e4ull,0x20878004001e01e4ull,0x000002f0000001e4ull,0x000000861ffe03e0ull,
0x40c7da309109fd00ull,0x000000a010d00364ull,0x0087c8307c0ffd00ull,0x0012801010d00364ull,
0x00000320018e0500ull,0x03c7801000f80100ull,0x0107803001080504ull,0x40c2801000220164ull,
0x014780a000020524ull,0x0007d8d00101fd2cull,0x000000a010b00304ull,0x0011001010b00300ull,
0x23c7801400e00d00ull,0x23c7801400e20104ull,0x23c7801400e40504ull,0x23c7801400e60904ull,
0x200780b403d80d04ull,0x200780b400da01a0ull,0x200780b401dc05a0ull,0x200780b402de0980ull,
0x20c7800400180180ull,0x20078004001a01e4ull,0x20478004001c01e4ull,0x20878004001e01e4ull,
0x000002f0000001e4ull,0x000000861ffe03e0ull,0x000002f000000100ull,0x00010030000003e0ull,
0x10078030040a0500ull,0x01ee041500f800c4ull,0xc00780d00e020121ull,0x23c7801400da01a0ull,
0x0000032004820904ull,0xc00780d00e040100ull,0x23c7801400dc01a0ull,0x0000032008820904ull,
0xc00780d00e040100ull,0x23c7801400de01a0ull,0x000003200c820504ull,0xc00781d00e020100ull,
0x0001ff00000200a0ull,0x0000ff0000010000ull,0x00007f0000008000ull,0x00003f0000004000ull,
0x00001f0000002000ull,0x00000f0000001000ull,0x0000070000000800ull,0x0000030000000400ull,
0x0000010000000200ull,0x00000000100b0400ull,0x00000c0000000800ull,0x080d040000001000ull,
0x0000200021010800ull,0x200780a000421900ull,0x200780a0004c1504ull,0x000780a000001d04ull,
0x079000400c142004ull,0x1007803004002520ull,0x20c7c83000cbfdc4ull,0x000000a001600364ull,
0x2247802000c82500ull,0x0002801001600304ull,0xc00780d00e120500ull,0x200780400d480980ull,
0x1007803010040900ull,0x208780600c4829c4ull,0x0000032004920900ull,0xc00780d00e040900ull,
0x0000032008920d80ull,0xc00780d00e060d00ull,0x000003200c921180ull,0xc00780d00e081100ull,
0x0007802000140180ull,0x1007803004142904ull,0x02878020001225c4ull,0x20c7ca3000cbfd04ull,
0x000000a002c00364ull,0x0002801002c00300ull,0x200780400d482900ull,0x1007803010142900ull,
0x228780600c4829c4ull,0xc00780d00e122d00ull,0x0000032004923180ull,0xc00780d00e183100ull,
0x0000032008923580ull,0xc00780d00e1a3900ull,0x000003200c923580ull,0xc00780d00e1a3500ull,
0x000780b001160580ull,0x000780b0021809a0ull,0x00078020001401a0ull,0x000780b0031c0d04ull,
0x1007803004142d80ull,0x2107c83000cbfdc4ull,0x000780b0041a1164ull,0x02c7802000122580ull,
0x0002801001c00304ull,0x00078200040e0500ull,0x20478004001001c0ull,0x20878004001201e4ull,
0x20c78004001401e4ull,0x21078004001601e4ull,0x000000861ffe03e4ull,0x2207802040ca0100ull,
0x0007803006001104ull,0x40c7c8308009fda4ull,0x000000a004900364ull,0x0002801004900300ull,
0x00002320008e0100ull,0x0107c8300009fd00ull,0x40c2c830810ffd64ull,0x000000a004700364ull,
0x0001001004700300ull,0x000780d440400900ull,0x00e2041900e00020ull,0x00e60c1900e40819ull,
0x200780b400d00119ull,0x200780b401d205a0ull,0x200780b402d409a0ull,0x200780b403d60d80ull,
0x2007800400100180ull,0x20478004001201e4ull,0x20878004001401e4ull,0x20c78004001601e4ull,
0x000002f0000001e4ull,0x000000861ffe03e0ull,0x40c7ca308209fd00ull,0x000000a005e00364ull,
0x0002801005e00300ull,0x00001320008e0100ull,0x0107c8300009fd00ull,0x40c2c830830ffd64ull,
0x000000a005c00364ull,0x0001001005c00300ull,0x000780d420400900ull,0x00e2041900e00020ull,
0x00e60c1900e40819ull,0x200780b400d00119ull,0x200780b401d205a0ull,0x200780b402d409a0ull,
0x200780b403d60d80ull,0x2007800400100180ull,0x20478004001201e4ull,0x20878004001401e4ull,
0x20c78004001601e4ull,0x000002f0000001e4ull,0x000000861ffe03e0ull,0x40c7ca308409fd00ull,
0x000000a007300364ull,0x0002801007300300ull,0x00000b20008e0100ull,0x0107c8300009fd00ull,
0x40c2c830850ffd64ull,0x000000a007100364ull,0x0001001007100300ull,0x000780d410400900ull,
0x00e2041900e00020ull,0x00e60c1900e40819ull,0x200780b400d00119ull,0x200780b401d205a0ull,
0x200780b402d409a0ull,0x200780b403d60d80ull,0x2007800400100180ull,0x20478004001201e4ull,
0x20878004001401e4ull,0x20c78004001601e4ull,0x000002f0000001e4ull,0x000000861ffe03e0ull,
0x40c7ca308609fd00ull,0x000000a008800364ull,0x0002801008800300ull,0x00000720008e0100ull,
0x0107c8300009fd00ull,0x40c2c830870ffd64ull,0x000000a008600364ull,0x0001001008600300ull,
0x000780d408400900ull,0x00e2041900e00020ull,0x00e60c1900e40819ull,0x200780b400d00119ull,
0x200780b401d205a0ull,0x200780b402d409a0ull,0x200780b403d60d80ull,0x2007800400100180ull,
0x20478004001201e4ull,0x20878004001401e4ull,0x20c78004001601e4ull,0x000002f0000001e4ull,
0x000000861ffe03e0ull,0x40c7ca308809fd00ull,0x000000a009d00364ull,0x0002801009d00300ull,
0x00000320208e0100ull,0x0107c8300009fd00ull,0x40c2c830890ffd64ull,0x000000a009b00364ull,
0x0001001009b00300ull,0x000780d404400900ull,0x00e2041900e00020ull,0x00e60c1900e40819ull,
0x200780b400d00119ull,0x200780b401d205a0ull,0x200780b402d409a0ull,0x200780b403d60d80ull,
0x2007800400100180ull,0x20478004001201e4ull,0x20878004001401e4ull,0x20c78004001601e4ull,
0x000002f0000001e4ull,0x000000861ffe03e0ull,0x40c7ca308a09fd00ull,0x000000a00b200364ull,
0x000280100b200300ull,0x00000320108e0100ull,0x0107c8300009fd00ull,0x40c2c8308b0ffd64ull,
0x000000a00b000364ull,0x000100100b000300ull,0x000780d402400900ull,0x00e2041900e00020ull,
0x00e60c1900e40819ull,0x200780b400d00119ull,0x200780b401d205a0ull,0x200780b402d409a0ull,
0x200780b403d60d80ull,0x2007800400100180ull,0x20478004001201e4ull,0x20878004001401e4ull,
0x20c78004001601e4ull,0x000002f0000001e4ull,0x000000861ffe03e0ull,0x40c7ca308c09fd00ull,
0x000000a00c700364ull,0x000280100c700300ull,0x00000320088e0100ull,0x0107c8300009fd00ull,
0x40c2c8308d0ffd64ull,0x000000a00c500364ull,0x000100100c500300ull,0x000780d401400900ull,
0x00e2041900e00020ull,0x00e60c1900e40819ull,0x200780b400d00119ull,0x200780b401d205a0ull,
0x200780b402d409a0ull,0x200780b403d60d80ull,0x2007800400100180ull,0x20478004001201e4ull,
0x20878004001401e4ull,0x20c78004001601e4ull,0x000002f0000001e4ull,0x000000861ffe03e0ull,
0x40c7ca308e09fd00ull,0x000000a00dd00364ull,0x000280100dd00300ull,0x00000320048e0100ull,
0x0107c8300009fd00ull,0x40c2c8308f0ffd64ull,0x000000a00db00364ull,0x000100100db00300ull,
0x23c7801400f00d00ull,0x23c7801400f20104ull,0x23c7801400f40504ull,0x23c7801400f60904ull,
0x200780b403d00d04ull,0x200780b400d201a0ull,0x200780b401d405a0ull,0x200780b402d60980ull,
0x20c7800400100180ull,0x20078004001201e4ull,0x20478004001401e4ull,0x20878004001601e4ull,
0x000002f0000001e4ull,0x000000861ffe03e0ull,0x40c7ca309009fd00ull,0x000000a00f300364ull,
0x000280100f300300ull,0x00000320028e0100ull,0x0107c8300009fd00ull,0x40c2c830910ffd64ull,
0x000000a00f100364ull,0x000100100f100300ull,0x23c7801400e00d00ull,0x23c7801400e20104ull,
0x23c7801400e40504ull,0x23c7801400e60904ull,0x200780b403d00d04ull,0x200780b400d201a0ull,
0x200780b401d405a0ull,0x200780b402d60980ull,0x20c7800400100180ull,0x20078004001201e4ull,
0x20478004001401e4ull,0x20878004001601e4ull,0x000002f0000001e4ull,0x000000861ffe03e0ull,
0x40c7da309109fd00ull,0x000000a010b00364ull,0x0087c8307c0ffd00ull,0x0012801010b00364ull,
0x00000320018e0500ull,0x03c7801000f80100ull,0x0107803001080504ull,0x40c2801000220164ull,
0x014780a000020524ull,0x0007d8d00101fd2cull,0x000000a010900304ull,0x0011001010900300ull,
0x00fa001500f80c00ull,0x00fe081500fc0415ull,0x200780b403d00d15ull,0x200780b400d201a0ull,
0x200780b401d405a0ull,0x200780b402d60980ull,0x20c7800400100180ull,0x20078004001201e4ull,
0x20478004001401e4ull,0x20878004001601e4ull,0x000002f0000001e4ull,0x000000861ffe03e0ull,
0x000002f000000100ull,0x00010030000003e0ull,0x10078030040a0500ull,0x01ec041500f000c4ull,
0xc00780d00e020121ull,0x23c7801400d201a0ull,0x0000032004820904ull,0xc00780d00e040100ull,
0x23c7801400d401a0ull,0x0000032008820904ull,0xc00780d00e040100ull,0x23c7801400d601a0ull,
0x000003200c820504ull,0xc00781d00e020100ull,0x0001ff00000200a0ull,0x0000ff0000010000ull,
0x00007f0000008000ull,0x00003f0000004000ull,0x00001f0000002000ull,0x00000f0000001000ull,
0x0000070000000800ull,0x0000030000000400ull,0x0000010000000200ull,0x00000000100b0400ull,
0x0000080000000400ull,0x080d040000000c00ull,0x0000200021010800ull,0x0000000600000000ull,
0x000000000000323cull,0x000001a000000000ull,0x00000005000001a0ull,0x6000000000000004ull,
0x0000000000001df9ull,0x0000001000000000ull,0x0000240500000010ull,0x6000000000000004ull,
0x0000000000001e09ull,0x0000000000000000ull,0x0000240600000020ull,0x6000000000000004ull,
0x0000000000001e09ull,0x0000001000000000ull,0x0000230500000010ull,0x6000000000000004ull,
0x0000000000001e19ull,0x0000000000000000ull,0x0000230600000020ull,0x6000000000000004ull,
0x0000000000001e19ull,0x000000d800000000ull,0x00002205000000d8ull,0x6000000000000004ull,
0x0000000000001ef1ull,0x0000000000000000ull,0x0000220600000030ull,0x6000000000000004ull,
0x0000000000001ef1ull,0x000000d800000000ull,0x00002105000000d8ull,0x6000000000000004ull,
0x0000000000001fc9ull,0x0000000000000000ull,0x0000210600000030ull,0x6000000000000004ull,
0x0000000000001fc9ull,0x0000094000000000ull,0x0000200500000940ull,0x6000000000000004ull,
0x0000000000002909ull,0x0000000000000000ull,0x0000200600000040ull,0x6000000000000004ull,
0x0000000000002909ull,0x0000093000000000ull,0x00001f0500000930ull,0x6000000000000004ull,
0x0000000000003239ull,0x0000000000000000ull,0x00001f0600000020ull,0x0000000000000004ull
};


}



extern "C" {


static const unsigned long long __deviceText_$compute_10$[] = {
0x6f69737265762e09ull,0x2e090a342e31206eull,0x7320746567726174ull,0x616d202c30315f6dull,
0x6f745f3436665f70ull,0x2f2f090a3233665full,0x656c69706d6f6320ull,0x2f20687469772064ull,
0x61636f6c2f727375ull,0x6f2f616475632f6cull,0x696c2f34366e6570ull,0x2f090a65622f2f62ull,
0x6e65706f766e202full,0x6220302e33206363ull,0x206e6f20746c6975ull,0x2d32302d30313032ull,
0x2d2f2f090a0a3931ull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,
0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,
0x43202f2f090a2d2dull,0x676e696c69706d6full,0x6d742f706d742f20ull,0x3030305f74667870ull,
0x30305f3733653530ull,0x372d303030303030ull,0x6e69646e756f625full,0x70632e786f625f67ull,
0x742f2820692e3370ull,0x23494263632f706dull,0x294e41493462442eull,0x2d2d2d2d2f2f090aull,
0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,
0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x0a2d2d2d2d2d2d2dull,0x2d2d2d2d2f2f090aull,
0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,
0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x0a2d2d2d2d2d2d2dull,0x6974704f202f2f09ull,
0x2f2f090a3a736e6full,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,
0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,
0x202f2f090a2d2d2dull,0x3a74656772615420ull,0x415349202c787470ull,0x202c30315f6d733aull,
0x6c3a6e6169646e45ull,0x50202c656c747469ull,0x53207265746e696full,0x090a32333a657a69ull,
0x09334f2d20202f2full,0x7a696d6974704f28ull,0x656c206e6f697461ull,0x2f2f090a296c6576ull,
0x44280930672d2020ull,0x76656c2067756265ull,0x202f2f090a296c65ull,0x65522809326d2d20ull,
0x7664612074726f70ull,0x29736569726f7369ull,0x2d2d2d2d2f2f090aull,0x2d2d2d2d2d2d2d2dull,
0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,
0x2d2d2d2d2d2d2d2dull,0x0a2d2d2d2d2d2d2dull,0x09656c69662e090aull,0x6d6d6f633c220931ull,
0x656e696c2d646e61ull,0x6c69662e090a223eull,0x6d742f2209320965ull,0x746678706d742f70ull,
0x336535303030305full,0x3030303030305f37ull,0x756f625f362d3030ull,0x6f625f676e69646eull,
0x6566616475632e78ull,0x090a227570672e32ull,0x093309656c69662eull,0x6e2f656d6f682f22ull,
0x68632f6c616d726full,0x742f74756f6b6365ull,0x68742f7473757268ull,0x7665642f74737572ull,
0x2e7274705f656369ull,0x6c69662e090a2268ull,0x6f682f2209340965ull,0x616d726f6e2f656dull,
0x6f6b636568632f6cull,0x636f7570672f7475ull,0x7365742f746f6c65ull,0x32616475632f7374ull,
0x73747365742f332eull,0x5f7473757268742full,0x676e69646e756f62ull,0x756f622f786f625full,
0x6f625f676e69646eull,0x2e090a2275632e78ull,0x22093509656c6966ull,0x6f6e2f656d6f682full,
0x6568632f6c616d72ull,0x68742f74756f6b63ull,0x7268742f74737572ull,0x726961702f747375ull,
0x69662e090a22682eull,0x682f22093609656cull,0x6d726f6e2f656d6full,0x6b636568632f6c61ull,
0x757268742f74756full,0x73757268742f7473ull,0x7461726574692f74ull,0x61726574692f726full,
0x616361665f726f74ull,0x2e090a22682e6564ull,0x22093709656c6966ull,0x6f6e2f656d6f682full,
0x6568632f6c616d72ull,0x68742f74756f6b63ull,0x7268742f74737572ull,0x726574692f747375ull,
0x6574692f726f7461ull,0x64615f726f746172ull,0x22682e726f747061ull,0x09656c69662e090aull,
0x656d6f682f220938ull,0x2f6c616d726f6e2full,0x74756f6b63656863ull,0x2f7473757268742full,
0x692f747375726874ull,0x2f726f7461726574ull,0x6e2f6c6961746564ull,0x74695f6c616d726full,
0x682e726f74617265ull,0x656c69662e090a22ull,0x6d6f682f22093909ull,0x6c616d726f6e2f65ull,
0x756f6b636568632full,0x7473757268742f74ull,0x2f7473757268742full,0x642f6c6961746564ull,
0x2f68637461707369ull,0x2e796f7274736564ull,0x6c69662e090a2268ull,0x682f220930310965ull,
0x6d726f6e2f656d6full,0x6b636568632f6c61ull,0x757268742f74756full,0x73757268742f7473ull,
0x6c69617465642f74ull,0x2f6563697665642full,0x726f662f61647563ull,0x6e692e686361655full,
0x6c69662e090a226cull,0x682f220931310965ull,0x6d726f6e2f656d6full,0x6b636568632f6c61ull,
0x757268742f74756full,0x73757268742f7473ull,0x6c69617465642f74ull,0x637461707369642full,
0x74696e696e752f68ull,0x5f64657a696c6169ull,0x0a22682e6c6c6966ull,0x3109656c69662e09ull,
0x656d6f682f220932ull,0x2f6c616d726f6e2full,0x74756f6b63656863ull,0x2f7473757268742full,
0x692f747375726874ull,0x2f726f7461726574ull,0x726f66736e617274ull,0x7461726574695f6dull,
0x2e090a22682e726full,0x09333109656c6966ull,0x696c2f7273752f22ull,0x34692f6363672f62ull,
0x78756e696c2d3638ull,0x342e342f756e672dull,0x756c636e692f332eull,0x65646474732f6564ull,
0x662e090a22682e66ull,0x2209343109656c69ull,0x636f6c2f7273752full,0x2f616475632f6c61ull,
0x692f2e2e2f6e6962ull,0x632f6564756c636eull,0x63697665642f7472ull,0x6d69746e75725f65ull,
0x662e090a22682e65ull,0x2209353109656c69ull,0x636f6c2f7273752full,0x2f616475632f6c61ull,
0x692f2e2e2f6e6962ull,0x682f6564756c636eull,0x696665645f74736full,0x090a22682e73656eull,
0x363109656c69662eull,0x6c2f7273752f2209ull,0x6475632f6c61636full,0x2e2e2f6e69622f61ull,
0x6564756c636e692full,0x6e69746c6975622full,0x682e73657079745full,0x656c69662e090a22ull,
0x73752f2209373109ull,0x2f6c61636f6c2f72ull,0x6e69622f61647563ull,0x6c636e692f2e2e2full,
0x697665642f656475ull,0x73657079745f6563ull,0x69662e090a22682eull,0x2f2209383109656cull,
0x61636f6c2f727375ull,0x622f616475632f6cull,0x6e692f2e2e2f6e69ull,0x72642f6564756c63ull,
0x7079745f72657669ull,0x2e090a22682e7365ull,0x09393109656c6966ull,0x6f6c2f7273752f22ull,
0x616475632f6c6163ull,0x2f2e2e2f6e69622full,0x2f6564756c636e69ull,0x5f65727574786574ull,
0x22682e7365707974ull,0x09656c69662e090aull,0x7273752f22093032ull,0x632f6c61636f6c2full,
0x2f6e69622f616475ull,0x756c636e692f2e2eull,0x6f746365762f6564ull,0x2e73657079745f72ull,
0x6c69662e090a2268ull,0x752f220931320965ull,0x6c61636f6c2f7273ull,0x69622f616475632full,
0x636e692f2e2e2f6eull,0x7665642f6564756cull,0x6e75616c5f656369ull,0x6d617261705f6863ull,
0x22682e7372657465ull,0x09656c69662e090aull,0x7273752f22093232ull,0x632f6c61636f6c2full,
0x2f6e69622f616475ull,0x756c636e692f2e2eull,0x732f7472632f6564ull,0x635f656761726f74ull,
0x0a22682e7373616cull,0x3209656c69662e09ull,0x2f7273752f220933ull,0x2f6564756c636e69ull,
0x7079742f73746962ull,0x2e090a22682e7365ull,0x09343209656c6966ull,0x6e692f7273752f22ull,
0x69742f6564756c63ull,0x2e090a22682e656dull,0x09353209656c6966ull,0x6e2f656d6f682f22ull,
0x68632f6c616d726full,0x742f74756f6b6365ull,0x68742f7473757268ull,0x7665642f74737572ull,
0x6c6c616d5f656369ull,0x636f6c6c615f636full,0x0a22682e726f7461ull,0x3209656c69662e09ull,
0x656d6f682f220936ull,0x2f6c616d726f6e2full,0x74756f6b63656863ull,0x2f7473757268742full,
0x642f747375726874ull,0x79742f6c69617465ull,0x74696172745f6570ull,0x662e090a22682e73ull,
0x2209373209656c69ull,0x6f6e2f656d6f682full,0x6568632f6c616d72ull,0x68742f74756f6b63ull,
0x7268742f74737572ull,0x617465642f747375ull,0x6f746365762f6c69ull,0x682e657361625f72ull,
0x656c69662e090a22ull,0x73752f2209383209ull,0x64756c636e692f72ull,0x2e342f2b2b632f65ull,
0x732f737469622f34ull,0x61726574695f6c74ull,0x657361625f726f74ull,0x682e73657079745full,
0x656c69662e090a22ull,0x6f682f2209393209ull,0x616d726f6e2f656dull,0x6f6b636568632f6cull,
0x73757268742f7475ull,0x7473757268742f74ull,0x6f7461726574692full,0x6c69617465642f72ull,
0x6f7461726574692full,0x7374696172745f72ull,0x2e090a226c6e692eull,0x09303309656c6966ull,
0x6e2f656d6f682f22ull,0x68632f6c616d726full,0x742f74756f6b6365ull,0x68742f7473757268ull,
0x6574692f74737572ull,0x65642f726f746172ull,0x6574692f6c696174ull,0x64615f726f746172ull,
0x6e692e726f747061ull,0x6c69662e090a226cull,0x682f220931330965ull,0x6d726f6e2f656d6full,
0x6b636568632f6c61ull,0x757268742f74756full,0x73757268742f7473ull,0x7461726574692f74ull,
0x69617465642f726full,0x7461726574692f6cull,0x64616361665f726full,0x090a226c6e692e65ull,
0x323309656c69662eull,0x2f656d6f682f2209ull,0x632f6c616d726f6eull,0x2f74756f6b636568ull,
0x742f747375726874ull,0x65642f7473757268ull,0x7665642f6c696174ull,0x616475632f656369ull,
0x5f6e72657478652full,0x705f646572616873ull,0x2e090a22682e7274ull,0x09333309656c6966ull,
0x6e2f656d6f682f22ull,0x68632f6c616d726full,0x742f74756f6b6365ull,0x68742f7473757268ull,
0x7465642f74737572ull,0x697665642f6c6961ull,0x2f616475632f6563ull,0x635f68636e75616cull,
0x692e657275736f6cull,0x69662e090a226c6eull,0x2f2209343309656cull,0x726f6e2f656d6f68ull,
0x636568632f6c616dull,0x7268742f74756f6bull,0x757268742f747375ull,0x69617465642f7473ull,
0x6563697665642f6cull,0x65722f616475632full,0x692e6e5f65637564ull,0x69662e090a226c6eull,
0x2f2209353309656cull,0x726f6e2f656d6f68ull,0x636568632f6c616dull,0x7268742f74756f6bull,
0x757268742f747375ull,0x69617465642f7473ull,0x692e726961702f6cull,0x69662e090a226c6eull,
0x2f2209363309656cull,0x726f6e2f656d6f68ull,0x636568632f6c616dull,0x7268742f74756f6bull,
0x757268742f747375ull,0x69617465642f7473ull,0x6563697665642f6cull,0x6c622f616475632full,
0x756465722f6b636full,0x2e090a22682e6563ull,0x09373309656c6966ull,0x6e2f656d6f682f22ull,
0x68632f6c616d726full,0x742f74756f6b6365ull,0x68742f7473757268ull,0x7465642f74737572ull,
0x6c6974752f6c6961ull,0x6e696b636f6c622full,0x662e090a22682e67ull,0x2209383309656c69ull,
0x636f6c2f7273752full,0x2f616475632f6c61ull,0x692f2e2e2f6e6962ull,0x632f6564756c636eull,
0x75665f6e6f6d6d6full,0x2e736e6f6974636eull,0x6c69662e090a2268ull,0x752f220939330965ull,
0x6c61636f6c2f7273ull,0x69622f616475632full,0x636e692f2e2e2f6eull,0x7472632f6564756cull,
0x616d5f636e75662full,0x090a22682e6f7263ull,0x303409656c69662eull,0x6c2f7273752f2209ull,
0x6475632f6c61636full,0x2e2e2f6e69622f61ull,0x6564756c636e692full,0x75665f6874616d2full,
0x2e736e6f6974636eull,0x6c69662e090a2268ull,0x752f220931340965ull,0x6c61636f6c2f7273ull,
0x69622f616475632full,0x636e692f2e2e2f6eull,0x7665642f6564756cull,0x636e75665f656369ull,
0x22682e736e6f6974ull,0x09656c69662e090aull,0x7273752f22093234ull,0x632f6c61636f6c2full,
0x2f6e69622f616475ull,0x756c636e692f2e2eull,0x5f6874616d2f6564ull,0x746e6174736e6f63ull,
0x662e090a22682e73ull,0x2209333409656c69ull,0x636f6c2f7273752full,0x2f616475632f6c61ull,
0x692f2e2e2f6e6962ull,0x732f6564756c636eull,0x6f74615f31315f6dull,0x636e75665f63696dull,
0x22682e736e6f6974ull,0x09656c69662e090aull,0x7273752f22093434ull,0x632f6c61636f6c2full,
0x2f6e69622f616475ull,0x756c636e692f2e2eull,0x32315f6d732f6564ull,0x5f63696d6f74615full,
0x6e6f6974636e7566ull,0x662e090a22682e73ull,0x2209353409656c69ull,0x636f6c2f7273752full,
0x2f616475632f6c61ull,0x692f2e2e2f6e6962ull,0x732f6564756c636eull,0x756f645f33315f6dull,
0x636e75665f656c62ull,0x22682e736e6f6974ull,0x09656c69662e090aull,0x7273752f22093634ull,
0x632f6c61636f6c2full,0x2f6e69622f616475ull,0x756c636e692f2e2eull,0x6f6d6d6f632f6564ull,
0x2e73657079745f6eull,0x6c69662e090a2268ull,0x752f220937340965ull,0x6c61636f6c2f7273ull,
0x69622f616475632full,0x636e692f2e2e2f6eull,0x5f6d732f6564756cull,0x696d6f74615f3032ull,
0x6974636e75665f63ull,0x090a22682e736e6full,0x383409656c69662eull,0x6c2f7273752f2209ull,
0x6475632f6c61636full,0x2e2e2f6e69622f61ull,0x6564756c636e692full,0x695f30325f6d732full,
0x6369736e6972746eull,0x662e090a22682e73ull,0x2209393409656c69ull,0x636f6c2f7273752full,
0x2f616475632f6c61ull,0x692f2e2e2f6e6962ull,0x742f6564756c636eull,0x665f657275747865ull,
0x6e75665f68637465ull,0x682e736e6f697463ull,0x656c69662e090a22ull,0x73752f2209303509ull,
0x2f6c61636f6c2f72ull,0x6e69622f61647563ull,0x6c636e692f2e2e2full,0x6874616d2f656475ull,
0x6f6974636e75665full,0x705f6c62645f736eull,0x0a0a22682e317874ull,0x6e72657478652e09ull,
0x6465726168732e09ull,0x206e67696c612e20ull,0x5a5f2038622e2034ull,0x747375726874364eull,
0x366c696174656436ull,0x6334656369766564ull,0x6d656d7334616475ull,0x2e090a0a3b5d5b45ull,
0x5a5f207972746e65ull,0x747375726874364eull,0x366c696174656436ull,0x6334656369766564ull,
0x6174656436616475ull,0x6e75616c33326c69ull,0x75736f6c635f6863ull,0x61765f79625f6572ull,
0x5f32534e4965756cull,0x61655f726f663831ull,0x6f6c635f6e5f6863ull,0x30534e4965727573ull,
0x616d726f6e35315full,0x7461726574695f6cull,0x30315f534e49726full,0x705f656369766564ull,
0x6e696f7037497274ull,0x6945454545643274ull,0x736964385f30534eull,0x6564366863746170ull,
0x736564396c696174ull,0x53497265796f7274ull,0x4545454545455f38ull,0x09090a28205f5476ull,
0x2e206d617261702eull,0x2034206e67696c61ull,0x75635f5f2038622eull,0x5f5f6d7261706164ull,
0x7375726874364e5aull,0x6c69617465643674ull,0x3465636976656436ull,0x7465643661647563ull,
0x75616c33326c6961ull,0x736f6c635f68636eull,0x765f79625f657275ull,0x32534e4965756c61ull,
0x655f726f6638315full,0x6c635f6e5f686361ull,0x534e49657275736full,0x6d726f6e35315f30ull,
0x61726574695f6c61ull,0x315f534e49726f74ull,0x5f65636976656430ull,0x696f703749727470ull,
0x454545456432746eull,0x6964385f30534e69ull,0x6436686374617073ull,0x6564396c69617465ull,
0x497265796f727473ull,0x45454545455f3853ull,0x765f5f5f5f547645ull,0x6d617261705f6c61ull,
0x090a295d32315b66ull,0x09636f6c2e090a7bull,0x0a30093534093333ull,0x5a5f5f3142424c24ull,
0x747375726874364eull,0x366c696174656436ull,0x6334656369766564ull,0x6174656436616475ull,
0x6e75616c33326c69ull,0x75736f6c635f6863ull,0x61765f79625f6572ull,0x5f32534e4965756cull,
0x61655f726f663831ull,0x6f6c635f6e5f6863ull,0x30534e4965727573ull,0x616d726f6e35315full,
0x7461726574695f6cull,0x30315f534e49726full,0x705f656369766564ull,0x6e696f7037497274ull,
0x6945454545643274ull,0x736964385f30534eull,0x6564366863746170ull,0x736564396c696174ull,
0x53497265796f7274ull,0x4545454545455f38ull,0x6c2e090a3a5f5476ull,0x383409333309636full,
0x74697865090a3009ull,0x6e6557444c240a3bull,0x6874364e5a5f5f64ull,0x7465643674737572ull,
0x69766564366c6961ull,0x3661647563346563ull,0x33326c6961746564ull,0x635f68636e75616cull,
0x625f657275736f6cull,0x4965756c61765f79ull,0x6f6638315f32534eull,0x6e5f686361655f72ull,
0x657275736f6c635full,0x6e35315f30534e49ull,0x74695f6c616d726full,0x4e49726f74617265ull,
0x6976656430315f53ull,0x37497274705f6563ull,0x456432746e696f70ull,0x5f30534e69454545ull,
0x6374617073696438ull,0x6c69617465643668ull,0x796f727473656439ull,0x45455f3853497265ull,
0x3a5f547645454545ull,0x5f202f2f207d090aull,0x7375726874364e5aull,0x6c69617465643674ull,
0x3465636976656436ull,0x7465643661647563ull,0x75616c33326c6961ull,0x736f6c635f68636eull,
0x765f79625f657275ull,0x32534e4965756c61ull,0x655f726f6638315full,0x6c635f6e5f686361ull,
0x534e49657275736full,0x6d726f6e35315f30ull,0x61726574695f6c61ull,0x315f534e49726f74ull,
0x5f65636976656430ull,0x696f703749727470ull,0x454545456432746eull,0x6964385f30534e69ull,
0x6436686374617073ull,0x6564396c69617465ull,0x497265796f727473ull,0x45454545455f3853ull,
0x2e090a0a5f547645ull,0x5a5f207972746e65ull,0x747375726874364eull,0x366c696174656436ull,
0x6334656369766564ull,0x6174656436616475ull,0x6e75616c33326c69ull,0x75736f6c635f6863ull,
0x61765f79625f6572ull,0x5f32534e4965756cull,0x61655f726f663831ull,0x6f6c635f6e5f6863ull,
0x30534e4965727573ull,0x616d726f6e35315full,0x7461726574695f6cull,0x30315f534e49726full,
0x705f656369766564ull,0x6e696f7037497274ull,0x6a45454545643274ull,0x736964385f30534eull,
0x6564366863746170ull,0x736564396c696174ull,0x53497265796f7274ull,0x4545454545455f38ull,
0x09090a28205f5476ull,0x2e206d617261702eull,0x2034206e67696c61ull,0x75635f5f2038622eull,
0x5f5f6d7261706164ull,0x7375726874364e5aull,0x6c69617465643674ull,0x3465636976656436ull,
0x7465643661647563ull,0x75616c33326c6961ull,0x736f6c635f68636eull,0x765f79625f657275ull,
0x32534e4965756c61ull,0x655f726f6638315full,0x6c635f6e5f686361ull,0x534e49657275736full,
0x6d726f6e35315f30ull,0x61726574695f6c61ull,0x315f534e49726f74ull,0x5f65636976656430ull,
0x696f703749727470ull,0x454545456432746eull,0x6964385f30534e6aull,0x6436686374617073ull,
0x6564396c69617465ull,0x497265796f727473ull,0x45454545455f3853ull,0x765f5f5f5f547645ull,
0x6d617261705f6c61ull,0x090a295d32315b66ull,0x09636f6c2e090a7bull,0x0a30093534093333ull,
0x5a5f5f3142424c24ull,0x747375726874364eull,0x366c696174656436ull,0x6334656369766564ull,
0x6174656436616475ull,0x6e75616c33326c69ull,0x75736f6c635f6863ull,0x61765f79625f6572ull,
0x5f32534e4965756cull,0x61655f726f663831ull,0x6f6c635f6e5f6863ull,0x30534e4965727573ull,
0x616d726f6e35315full,0x7461726574695f6cull,0x30315f534e49726full,0x705f656369766564ull,
0x6e696f7037497274ull,0x6a45454545643274ull,0x736964385f30534eull,0x6564366863746170ull,
0x736564396c696174ull,0x53497265796f7274ull,0x4545454545455f38ull,0x6c2e090a3a5f5476ull,
0x383409333309636full,0x74697865090a3009ull,0x6e6557444c240a3bull,0x6874364e5a5f5f64ull,
0x7465643674737572ull,0x69766564366c6961ull,0x3661647563346563ull,0x33326c6961746564ull,
0x635f68636e75616cull,0x625f657275736f6cull,0x4965756c61765f79ull,0x6f6638315f32534eull,
0x6e5f686361655f72ull,0x657275736f6c635full,0x6e35315f30534e49ull,0x74695f6c616d726full,
0x4e49726f74617265ull,0x6976656430315f53ull,0x37497274705f6563ull,0x456432746e696f70ull,
0x5f30534e6a454545ull,0x6374617073696438ull,0x6c69617465643668ull,0x796f727473656439ull,
0x45455f3853497265ull,0x3a5f547645454545ull,0x5f202f2f207d090aull,0x7375726874364e5aull,
0x6c69617465643674ull,0x3465636976656436ull,0x7465643661647563ull,0x75616c33326c6961ull,
0x736f6c635f68636eull,0x765f79625f657275ull,0x32534e4965756c61ull,0x655f726f6638315full,
0x6c635f6e5f686361ull,0x534e49657275736full,0x6d726f6e35315f30ull,0x61726574695f6c61ull,
0x315f534e49726f74ull,0x5f65636976656430ull,0x696f703749727470ull,0x454545456432746eull,
0x6964385f30534e6aull,0x6436686374617073ull,0x6564396c69617465ull,0x497265796f727473ull,
0x45454545455f3853ull,0x2e090a0a5f547645ull,0x5a5f207972746e65ull,0x747375726874364eull,
0x366c696174656436ull,0x6334656369766564ull,0x6174656436616475ull,0x6e75616c33326c69ull,
0x75736f6c635f6863ull,0x61765f79625f6572ull,0x5f32534e4965756cull,0x61655f726f663831ull,
0x6f6c635f6e5f6863ull,0x30534e4965727573ull,0x616d726f6e35315full,0x7461726574695f6cull,
0x30315f534e49726full,0x705f656369766564ull,0x6e696f7037497274ull,0x6945454545643274ull,
0x736964385f30534eull,0x6564366863746170ull,0x6f6336316c696174ull,0x74736e6f635f7970ull,
0x5349726f74637572ull,0x4545454545455f38ull,0x09090a28205f5476ull,0x2e206d617261702eull,
0x2034206e67696c61ull,0x75635f5f2038622eull,0x5f5f6d7261706164ull,0x7375726874364e5aull,
0x6c69617465643674ull,0x3465636976656436ull,0x7465643661647563ull,0x75616c33326c6961ull,
0x736f6c635f68636eull,0x765f79625f657275ull,0x32534e4965756c61ull,0x655f726f6638315full,
0x6c635f6e5f686361ull,0x534e49657275736full,0x6d726f6e35315f30ull,0x61726574695f6c61ull,
0x315f534e49726f74ull,0x5f65636976656430ull,0x696f703749727470ull,0x454545456432746eull,
0x6964385f30534e69ull,0x6436686374617073ull,0x6336316c69617465ull,0x736e6f635f79706full,
0x49726f7463757274ull,0x45454545455f3853ull,0x765f5f5f5f547645ull,0x6d617261705f6c61ull,
0x090a295d36315b66ull,0x206765722e090a7bull,0x687225203631752eull,0x722e090a3b3e353cull,
0x203233752e206765ull,0x0a3b3e37313c7225ull,0x662e206765722e09ull,0x3e343c6625203233ull,
0x206765722e090a3bull,0x702520646572702eull,0x6c2e090a3b3e353cull,0x6c612e206c61636full,
0x622e2034206e6769ull,0x616475635f5f2038ull,0x5f616475635f5f5full,0x36315b3034305f66ull,
0x636f6c2e090a3b5dull,0x3009353409333309ull,0x5f5f3142424c240aull,0x7375726874364e5aull,
0x6c69617465643674ull,0x3465636976656436ull,0x7465643661647563ull,0x75616c33326c6961ull,
0x736f6c635f68636eull,0x765f79625f657275ull,0x32534e4965756c61ull,0x655f726f6638315full,
0x6c635f6e5f686361ull,0x534e49657275736full,0x6d726f6e35315f30ull,0x61726574695f6c61ull,
0x315f534e49726f74ull,0x5f65636976656430ull,0x696f703749727470ull,0x454545456432746eull,
0x6964385f30534e69ull,0x6436686374617073ull,0x6336316c69617465ull,0x736e6f635f79706full,
0x49726f7463757274ull,0x45454545455f3853ull,0x6c090a3a5f547645ull,0x2e6d617261702e64ull,
0x3166250920323366ull,0x6475635f5f5b202cull,0x5a5f5f6d72617061ull,0x747375726874364eull,
0x366c696174656436ull,0x6334656369766564ull,0x6174656436616475ull,0x6e75616c33326c69ull,
0x75736f6c635f6863ull,0x61765f79625f6572ull,0x5f32534e4965756cull,0x61655f726f663831ull,
0x6f6c635f6e5f6863ull,0x30534e4965727573ull,0x616d726f6e35315full,0x7461726574695f6cull,
0x30315f534e49726full,0x705f656369766564ull,0x6e696f7037497274ull,0x6945454545643274ull,
0x736964385f30534eull,0x6564366863746170ull,0x6f6336316c696174ull,0x74736e6f635f7970ull,
0x5349726f74637572ull,0x4545454545455f38ull,0x61765f5f5f5f5476ull,0x666d617261705f6cull,
0x7473090a3b5d382bull,0x662e6c61636f6c2eull,0x635f5f5b09203233ull,0x75635f5f5f616475ull,
0x3034305f665f6164ull,0x316625202c5d382bull,0x61702e646c090a3bull,0x203233662e6d6172ull,
0x5f5b202c32662509ull,0x726170616475635full,0x6874364e5a5f5f6dull,0x7465643674737572ull,
0x69766564366c6961ull,0x3661647563346563ull,0x33326c6961746564ull,0x635f68636e75616cull,
0x625f657275736f6cull,0x4965756c61765f79ull,0x6f6638315f32534eull,0x6e5f686361655f72ull,
0x657275736f6c635full,0x6e35315f30534e49ull,0x74695f6c616d726full,0x4e49726f74617265ull,
0x6976656430315f53ull,0x37497274705f6563ull,0x456432746e696f70ull,0x5f30534e69454545ull,
0x6374617073696438ull,0x6c69617465643668ull,0x635f79706f633631ull,0x7463757274736e6full,
0x45455f385349726full,0x5f5f547645454545ull,0x61705f6c61765f5full,0x5d32312b666d6172ull,
0x6f6c2e7473090a3bull,0x203233662e6c6163ull,0x616475635f5f5b09ull,0x5f616475635f5f5full,
0x32312b3034305f66ull,0x0a3b326625202c5dull,0x333309636f6c2e09ull,0x6d090a3009373409ull,
0x09203631752e766full,0x6e25202c31687225ull,0x090a3b782e646974ull,0x203631752e766f6dull,
0x25202c3268722509ull,0x3b782e6469617463ull,0x69772e6c756d090aull,0x09203631752e6564ull,
0x687225202c317225ull,0x3b31687225202c32ull,0x33752e747663090aull,0x2509203631752e32ull,
0x64697425202c3272ull,0x646461090a3b782eull,0x722509203233752eull,0x202c327225202c33ull,
0x6f6d090a3b317225ull,0x2509203233732e76ull,0x3b337225202c3472ull,0x7261702e646c090aull,
0x09203233752e6d61ull,0x5f5f5b202c357225ull,0x6d72617061647563ull,0x726874364e5a5f5full,
0x6174656436747375ull,0x6369766564366c69ull,0x6436616475633465ull,0x6c33326c69617465ull,
0x6c635f68636e7561ull,0x79625f657275736full,0x4e4965756c61765full,0x726f6638315f3253ull,
0x5f6e5f686361655full,0x49657275736f6c63ull,0x6f6e35315f30534eull,0x6574695f6c616d72ull,
0x534e49726f746172ull,0x636976656430315full,0x7037497274705f65ull,0x45456432746e696full,
0x385f30534e694545ull,0x6863746170736964ull,0x316c696174656436ull,0x6f635f79706f6336ull,
0x6f7463757274736eull,0x4545455f38534972ull,0x5f5f5f5476454545ull,0x7261705f6c61765full,
0x0a3b5d302b666d61ull,0x2e6f6c2e6c756d09ull,0x3672250920323375ull,0x38202c337225202cull,
0x752e646461090a3bull,0x2c37722509203233ull,0x7225202c35722520ull,0x702e646c090a3b36ull,
0x3233732e6d617261ull,0x5b202c3872250920ull,0x6170616475635f5full,0x74364e5a5f5f6d72ull,
0x6564367473757268ull,0x766564366c696174ull,0x6164756334656369ull,0x326c696174656436ull,
0x5f68636e75616c33ull,0x5f657275736f6c63ull,0x65756c61765f7962ull,0x6638315f32534e49ull,
0x5f686361655f726full,0x7275736f6c635f6eull,0x35315f30534e4965ull,0x695f6c616d726f6eull,
0x49726f7461726574ull,0x76656430315f534eull,0x497274705f656369ull,0x6432746e696f7037ull,
0x30534e6945454545ull,0x746170736964385full,0x6961746564366863ull,0x5f79706f6336316cull,
0x63757274736e6f63ull,0x455f385349726f74ull,0x5f54764545454545ull,0x705f6c61765f5f5full,
0x5d342b666d617261ull,0x2e70746573090a3bull,0x09203233732e656cull,0x387225202c317025ull,
0x090a3b337225202cull,0x6172622031702540ull,0x5f325f744c240920ull,0x6d090a3b30353032ull,
0x09203631752e766full,0x6e25202c33687225ull,0x3b782e6469617463ull,0x69772e6c756d090aull,
0x09203631752e6564ull,0x687225202c397225ull,0x3b31687225202c33ull,0x325f325f744c240aull,
0x2f2f200a3a323635ull,0x4c203e706f6f6c3cull,0x79646f6220706f6full,0x373420656e696c20ull,
0x6e697473656e202cull,0x3a68747065642067ull,0x69747365202c3120ull,0x746920646574616dull,
0x736e6f6974617265ull,0x776f6e6b6e75203aull,0x752e766f6d090a6eull,0x3031722509203233ull,
0x6573090a3b30202cull,0x33752e71652e7074ull,0x202c327025092032ull,0x317225202c377225ull,
0x32702540090a3b30ull,0x4c24092061726220ull,0x383138325f325f74ull,0x6f6c3c2f2f200a3bull,
0x74726150203e706full,0x706f6f6c20666f20ull,0x696c2079646f6220ull,0x68202c373420656eull,
0x6562616c20646165ull,0x5f744c242064656cull,0x090a323635325f32ull,0x203233752e766f6dull,
0x5f202c3131722509ull,0x5f5f5f616475635full,0x305f665f61647563ull,0x6d090a3b382b3034ull,
0x09203233732e766full,0x7225202c32317225ull,0x6c2e646c090a3b37ull,0x3233752e6c61636full,
0x202c333172250920ull,0x5d302b313172255bull,0x6c672e7473090a3bull,0x3233752e6c61626full,
0x2b323172255b0920ull,0x33317225202c5d30ull,0x6f6c2e646c090a3bull,0x203233752e6c6163ull,
0x5b202c3431722509ull,0x3b5d342b31317225ull,0x6f6c672e7473090aull,0x203233752e6c6162ull,
0x342b323172255b09ull,0x3b34317225202c5dull,0x325f325f744c240aull,0x2f2f200a3a383138ull,
0x50203e706f6f6c3cull,0x6c20666f20747261ull,0x79646f6220706f6full,0x373420656e696c20ull,
0x6c2064616568202cull,0x242064656c656261ull,0x3635325f325f744cull,0x732e646461090a32ull,
0x2c34722509203233ull,0x7225202c34722520ull,0x2e6c756d090a3b39ull,0x09203233752e6f6cull,
0x7225202c35317225ull,0x61090a3b38202c39ull,0x09203233752e6464ull,0x377225202c377225ull,
0x0a3b35317225202cull,0x617261702e646c09ull,0x2509203233732e6dull,0x635f5f5b202c3872ull,
0x5f6d726170616475ull,0x75726874364e5a5full,0x6961746564367473ull,0x656369766564366cull,
0x6564366164756334ull,0x616c33326c696174ull,0x6f6c635f68636e75ull,0x5f79625f65727573ull,
0x534e4965756c6176ull,0x5f726f6638315f32ull,0x635f6e5f68636165ull,0x4e49657275736f6cull,
0x726f6e35315f3053ull,0x726574695f6c616dull,0x5f534e49726f7461ull,0x6563697665643031ull,
0x6f7037497274705full,0x4545456432746e69ull,0x64385f30534e6945ull,0x3668637461707369ull,
0x36316c6961746564ull,0x6e6f635f79706f63ull,0x726f746375727473ull,0x454545455f385349ull,
0x5f5f5f5f54764545ull,0x617261705f6c6176ull,0x090a3b5d342b666dull,0x2e746c2e70746573ull,
0x3370250920323373ull,0x25202c347225202cull,0x702540090a3b3872ull,0x2409206172622033ull,
0x3635325f325f744cull,0x325f744c240a3b32ull,0x090a3a303530325full,0x09333309636f6c2eull,
0x7865090a30093834ull,0x57444c240a3b7469ull,0x364e5a5f5f646e65ull,0x6436747375726874ull,
0x6564366c69617465ull,0x6475633465636976ull,0x6c69617465643661ull,0x68636e75616c3332ull,
0x657275736f6c635full,0x756c61765f79625full,0x38315f32534e4965ull,0x686361655f726f66ull,
0x75736f6c635f6e5full,0x315f30534e496572ull,0x5f6c616d726f6e35ull,0x726f746172657469ull,
0x656430315f534e49ull,0x7274705f65636976ull,0x32746e696f703749ull,0x534e694545454564ull,
0x6170736964385f30ull,0x6174656436686374ull,0x79706f6336316c69ull,0x757274736e6f635full,
0x5f385349726f7463ull,0x5476454545454545ull,0x2f2f207d090a3a5full,0x726874364e5a5f20ull,
0x6174656436747375ull,0x6369766564366c69ull,0x6436616475633465ull,0x6c33326c69617465ull,
0x6c635f68636e7561ull,0x79625f657275736full,0x4e4965756c61765full,0x726f6638315f3253ull,
0x5f6e5f686361655full,0x49657275736f6c63ull,0x6f6e35315f30534eull,0x6574695f6c616d72ull,
0x534e49726f746172ull,0x636976656430315full,0x7037497274705f65ull,0x45456432746e696full,
0x385f30534e694545ull,0x6863746170736964ull,0x316c696174656436ull,0x6f635f79706f6336ull,
0x6f7463757274736eull,0x4545455f38534972ull,0x0a0a5f5476454545ull,0x207972746e652e09ull,
0x75726874364e5a5full,0x6961746564367473ull,0x656369766564366cull,0x6564366164756334ull,
0x616c33326c696174ull,0x6f6c635f68636e75ull,0x5f79625f65727573ull,0x534e4965756c6176ull,
0x5f726f6638315f32ull,0x635f6e5f68636165ull,0x4e49657275736f6cull,0x726f6e35315f3053ull,
0x726574695f6c616dull,0x5f534e49726f7461ull,0x6563697665643031ull,0x6f7037497274705full,
0x4545456432746e69ull,0x64385f30534e6a45ull,0x3668637461707369ull,0x36316c6961746564ull,
0x6e6f635f79706f63ull,0x726f746375727473ull,0x454545455f385349ull,0x0a28205f54764545ull,
0x6d617261702e0909ull,0x206e67696c612e20ull,0x5f5f2038622e2034ull,0x6d72617061647563ull,
0x726874364e5a5f5full,0x6174656436747375ull,0x6369766564366c69ull,0x6436616475633465ull,
0x6c33326c69617465ull,0x6c635f68636e7561ull,0x79625f657275736full,0x4e4965756c61765full,
0x726f6638315f3253ull,0x5f6e5f686361655full,0x49657275736f6c63ull,0x6f6e35315f30534eull,
0x6574695f6c616d72ull,0x534e49726f746172ull,0x636976656430315full,0x7037497274705f65ull,
0x45456432746e696full,0x385f30534e6a4545ull,0x6863746170736964ull,0x316c696174656436ull,
0x6f635f79706f6336ull,0x6f7463757274736eull,0x4545455f38534972ull,0x5f5f5f5476454545ull,
0x7261705f6c61765full,0x295d36315b666d61ull,0x65722e090a7b090aull,0x25203631752e2067ull,
0x090a3b3e353c6872ull,0x33752e206765722eull,0x3e37313c72252032ull,0x206765722e090a3bull,
0x3c6625203233662eull,0x65722e090a3b3e34ull,0x20646572702e2067ull,0x090a3b3e353c7025ull,
0x2e206c61636f6c2eull,0x2034206e67696c61ull,0x75635f5f2038622eull,0x6475635f5f5f6164ull,
0x5b3237305f665f61ull,0x6c2e090a3b5d3631ull,0x353409333309636full,0x3142424c240a3009ull,
0x726874364e5a5f5full,0x6174656436747375ull,0x6369766564366c69ull,0x6436616475633465ull,
0x6c33326c69617465ull,0x6c635f68636e7561ull,0x79625f657275736full,0x4e4965756c61765full,
0x726f6638315f3253ull,0x5f6e5f686361655full,0x49657275736f6c63ull,0x6f6e35315f30534eull,
0x6574695f6c616d72ull,0x534e49726f746172ull,0x636976656430315full,0x7037497274705f65ull,
0x45456432746e696full,0x385f30534e6a4545ull,0x6863746170736964ull,0x316c696174656436ull,
0x6f635f79706f6336ull,0x6f7463757274736eull,0x4545455f38534972ull,0x0a3a5f5476454545ull,
0x617261702e646c09ull,0x2509203233662e6dull,0x635f5f5b202c3166ull,0x5f6d726170616475ull,
0x75726874364e5a5full,0x6961746564367473ull,0x656369766564366cull,0x6564366164756334ull,
0x616c33326c696174ull,0x6f6c635f68636e75ull,0x5f79625f65727573ull,0x534e4965756c6176ull,
0x5f726f6638315f32ull,0x635f6e5f68636165ull,0x4e49657275736f6cull,0x726f6e35315f3053ull,
0x726574695f6c616dull,0x5f534e49726f7461ull,0x6563697665643031ull,0x6f7037497274705full,
0x4545456432746e69ull,0x64385f30534e6a45ull,0x3668637461707369ull,0x36316c6961746564ull,
0x6e6f635f79706f63ull,0x726f746375727473ull,0x454545455f385349ull,0x5f5f5f5f54764545ull,
0x617261705f6c6176ull,0x090a3b5d382b666dull,0x6c61636f6c2e7473ull,0x5f5b09203233662eull,
0x5f5f5f616475635full,0x305f665f61647563ull,0x25202c5d382b3237ull,0x2e646c090a3b3166ull,
0x33662e6d61726170ull,0x202c326625092032ull,0x70616475635f5f5bull,0x364e5a5f5f6d7261ull,
0x6436747375726874ull,0x6564366c69617465ull,0x6475633465636976ull,0x6c69617465643661ull,
0x68636e75616c3332ull,0x657275736f6c635full,0x756c61765f79625full,0x38315f32534e4965ull,
0x686361655f726f66ull,0x75736f6c635f6e5full,0x315f30534e496572ull,0x5f6c616d726f6e35ull,
0x726f746172657469ull,0x656430315f534e49ull,0x7274705f65636976ull,0x32746e696f703749ull,
0x534e6a4545454564ull,0x6170736964385f30ull,0x6174656436686374ull,0x79706f6336316c69ull,
0x757274736e6f635full,0x5f385349726f7463ull,0x5476454545454545ull,0x5f6c61765f5f5f5full,
0x312b666d61726170ull,0x2e7473090a3b5d32ull,0x33662e6c61636f6cull,0x75635f5f5b092032ull,
0x6475635f5f5f6164ull,0x2b3237305f665f61ull,0x326625202c5d3231ull,0x09636f6c2e090a3bull,
0x0a30093734093333ull,0x3631752e766f6d09ull,0x202c316872250920ull,0x3b782e6469746e25ull,
0x31752e766f6d090aull,0x2c32687225092036ull,0x2e64696174632520ull,0x2e6c756d090a3b78ull,
0x3631752e65646977ull,0x25202c3172250920ull,0x687225202c326872ull,0x2e747663090a3b31ull,
0x203631752e323375ull,0x7425202c32722509ull,0x61090a3b782e6469ull,0x09203233752e6464ull,
0x327225202c337225ull,0x090a3b317225202cull,0x203233732e766f6dull,0x7225202c34722509ull,
0x702e646c090a3b33ull,0x3233752e6d617261ull,0x5b202c3572250920ull,0x6170616475635f5full,
0x74364e5a5f5f6d72ull,0x6564367473757268ull,0x766564366c696174ull,0x6164756334656369ull,
0x326c696174656436ull,0x5f68636e75616c33ull,0x5f657275736f6c63ull,0x65756c61765f7962ull,
0x6638315f32534e49ull,0x5f686361655f726full,0x7275736f6c635f6eull,0x35315f30534e4965ull,
0x695f6c616d726f6eull,0x49726f7461726574ull,0x76656430315f534eull,0x497274705f656369ull,
0x6432746e696f7037ull,0x30534e6a45454545ull,0x746170736964385full,0x6961746564366863ull,
0x5f79706f6336316cull,0x63757274736e6f63ull,0x455f385349726f74ull,0x5f54764545454545ull,
0x705f6c61765f5f5full,0x5d302b666d617261ull,0x6c2e6c756d090a3bull,0x2509203233752e6full,
0x2c337225202c3672ull,0x646461090a3b3820ull,0x722509203233752eull,0x202c357225202c37ull,
0x646c090a3b367225ull,0x752e6d617261702eull,0x2c38722509203233ull,0x616475635f5f5b20ull,
0x4e5a5f5f6d726170ull,0x3674737572687436ull,0x64366c6961746564ull,0x7563346563697665ull,
0x6961746564366164ull,0x636e75616c33326cull,0x7275736f6c635f68ull,0x6c61765f79625f65ull,
0x315f32534e496575ull,0x6361655f726f6638ull,0x736f6c635f6e5f68ull,0x5f30534e49657275ull,
0x6c616d726f6e3531ull,0x6f7461726574695full,0x6430315f534e4972ull,0x74705f6563697665ull,
0x746e696f70374972ull,0x4e6a454545456432ull,0x70736964385f3053ull,0x7465643668637461ull,
0x706f6336316c6961ull,0x7274736e6f635f79ull,0x385349726f746375ull,0x764545454545455full,
0x6c61765f5f5f5f54ull,0x2b666d617261705full,0x746573090a3b5d34ull,0x3233752e65672e70ull,
0x25202c3170250920ull,0x3b387225202c3372ull,0x622031702540090aull,0x5f744c2409206172ull,
0x0a3b303530325f33ull,0x3631752e766f6d09ull,0x202c336872250920ull,0x2e64696174636e25ull,
0x2e6c756d090a3b78ull,0x3631752e65646977ull,0x25202c3972250920ull,0x687225202c336872ull,
0x335f744c240a3b31ull,0x200a3a323635325full,0x3e706f6f6c3c2f2full,0x6f6220706f6f4c20ull,
0x20656e696c207964ull,0x7473656e202c3734ull,0x7470656420676e69ull,0x7365202c31203a68ull,
0x20646574616d6974ull,0x6f69746172657469ull,0x6e6b6e75203a736eull,0x766f6d090a6e776full,
0x722509203233752eull,0x090a3b30202c3031ull,0x2e71652e70746573ull,0x3270250920323375ull,
0x25202c377225202cull,0x2540090a3b303172ull,0x0920617262203270ull,0x38325f335f744c24ull,
0x3c2f2f200a3b3831ull,0x6150203e706f6f6cull,0x6f6c20666f207472ull,0x2079646f6220706full,
0x2c373420656e696cull,0x616c206461656820ull,0x4c242064656c6562ull,0x323635325f335f74ull,
0x33752e766f6d090aull,0x2c31317225092032ull,0x5f616475635f5f20ull,0x665f616475635f5full,
0x0a3b382b3237305full,0x3233732e766f6d09ull,0x202c323172250920ull,0x646c090a3b377225ull,
0x752e6c61636f6c2eull,0x3331722509203233ull,0x2b313172255b202cull,0x2e7473090a3b5d30ull,
0x752e6c61626f6c67ull,0x3172255b09203233ull,0x7225202c5d302b32ull,0x2e646c090a3b3331ull,
0x33752e6c61636f6cull,0x2c34317225092032ull,0x342b313172255b20ull,0x672e7473090a3b5dull,
0x33752e6c61626f6cull,0x323172255b092032ull,0x317225202c5d342bull,0x335f744c240a3b34ull,
0x200a3a383138325full,0x3e706f6f6c3c2f2full,0x666f207472615020ull,0x6f6220706f6f6c20ull,
0x20656e696c207964ull,0x64616568202c3734ull,0x64656c6562616c20ull,0x325f335f744c2420ull,
0x646461090a323635ull,0x722509203233752eull,0x202c397225202c34ull,0x756d090a3b347225ull,
0x3233752e6f6c2e6cull,0x202c353172250920ull,0x0a3b38202c397225ull,0x3233752e64646109ull,
0x25202c3772250920ull,0x35317225202c3772ull,0x61702e646c090a3bull,0x203233752e6d6172ull,
0x5f5b202c38722509ull,0x726170616475635full,0x6874364e5a5f5f6dull,0x7465643674737572ull,
0x69766564366c6961ull,0x3661647563346563ull,0x33326c6961746564ull,0x635f68636e75616cull,
0x625f657275736f6cull,0x4965756c61765f79ull,0x6f6638315f32534eull,0x6e5f686361655f72ull,
0x657275736f6c635full,0x6e35315f30534e49ull,0x74695f6c616d726full,0x4e49726f74617265ull,
0x6976656430315f53ull,0x37497274705f6563ull,0x456432746e696f70ull,0x5f30534e6a454545ull,
0x6374617073696438ull,0x6c69617465643668ull,0x635f79706f633631ull,0x7463757274736e6full,
0x45455f385349726full,0x5f5f547645454545ull,0x61705f6c61765f5full,0x3b5d342b666d6172ull,
0x6c2e70746573090aull,0x2509203233752e74ull,0x2c347225202c3370ull,0x40090a3b38722520ull,
0x2061726220337025ull,0x325f335f744c2409ull,0x744c240a3b323635ull,0x3a303530325f335full,
0x3309636f6c2e090aull,0x090a300938340933ull,0x4c240a3b74697865ull,0x5a5f5f646e655744ull,
0x747375726874364eull,0x366c696174656436ull,0x6334656369766564ull,0x6174656436616475ull,
0x6e75616c33326c69ull,0x75736f6c635f6863ull,0x61765f79625f6572ull,0x5f32534e4965756cull,
0x61655f726f663831ull,0x6f6c635f6e5f6863ull,0x30534e4965727573ull,0x616d726f6e35315full,
0x7461726574695f6cull,0x30315f534e49726full,0x705f656369766564ull,0x6e696f7037497274ull,
0x6a45454545643274ull,0x736964385f30534eull,0x6564366863746170ull,0x6f6336316c696174ull,
0x74736e6f635f7970ull,0x5349726f74637572ull,0x4545454545455f38ull,0x207d090a3a5f5476ull,
0x74364e5a5f202f2full,0x6564367473757268ull,0x766564366c696174ull,0x6164756334656369ull,
0x326c696174656436ull,0x5f68636e75616c33ull,0x5f657275736f6c63ull,0x65756c61765f7962ull,
0x6638315f32534e49ull,0x5f686361655f726full,0x7275736f6c635f6eull,0x35315f30534e4965ull,
0x695f6c616d726f6eull,0x49726f7461726574ull,0x76656430315f534eull,0x497274705f656369ull,
0x6432746e696f7037ull,0x30534e6a45454545ull,0x746170736964385full,0x6961746564366863ull,
0x5f79706f6336316cull,0x63757274736e6f63ull,0x455f385349726f74ull,0x5f54764545454545ull,
0x72746e652e090a0aull,0x6874364e5a5f2079ull,0x7465643674737572ull,0x69766564366c6961ull,
0x3661647563346563ull,0x33316c6961746564ull,0x6e5f656375646572ull,0x534e496d656d735full,
0x736e61727438315full,0x6574695f6d726f66ull,0x393149726f746172ull,0x6172745f786f6262ull,
0x74616d726f66736eull,0x315f30534e6e6f69ull,0x5f6c616d726f6e35ull,0x726f746172657469ull,
0x656430315f534e49ull,0x7274705f65636976ull,0x32746e696f703749ull,0x5f534e4545454564ull,
0x3953497269617034ull,0x534e45455f39535full,0x645f65737531315full,0x4545746c75616665ull,
0x626234315f445345ull,0x63756465725f786full,0x547645456e6f6974ull,0x31545f3054506a5full,
0x702e09090a28205full,0x6c612e206d617261ull,0x622e2034206e6769ull,0x616475635f5f2038ull,
0x4e5a5f5f6d726170ull,0x3674737572687436ull,0x64366c6961746564ull,0x7563346563697665ull,
0x6961746564366164ull,0x637564657233316cull,0x6d656d735f6e5f65ull,0x727438315f534e49ull,
0x5f6d726f66736e61ull,0x726f746172657469ull,0x5f786f6262393149ull,0x726f66736e617274ull,
0x534e6e6f6974616dull,0x6d726f6e35315f30ull,0x61726574695f6c61ull,0x315f534e49726f74ull,
0x5f65636976656430ull,0x696f703749727470ull,0x454545456432746eull,0x72696170345f534eull,
0x455f39535f395349ull,0x737531315f534e45ull,0x6c75616665645f65ull,0x315f445345454574ull,
0x65725f786f626234ull,0x456e6f6974637564ull,0x3054506a5f547645ull,0x765f5f5f5f31545full,
0x6d617261705f6c61ull,0x5d385b7475706e69ull,0x7261702e09090a2cull,0x203233752e206d61ull,
0x6170616475635f5full,0x74364e5a5f5f6d72ull,0x6564367473757268ull,0x766564366c696174ull,
0x6164756334656369ull,0x316c696174656436ull,0x5f65637564657233ull,0x4e496d656d735f6eull,
0x6e61727438315f53ull,0x74695f6d726f6673ull,0x3149726f74617265ull,0x72745f786f626239ull,
0x616d726f66736e61ull,0x5f30534e6e6f6974ull,0x6c616d726f6e3531ull,0x6f7461726574695full,
0x6430315f534e4972ull,0x74705f6563697665ull,0x746e696f70374972ull,0x534e454545456432ull,
0x534972696170345full,0x4e45455f39535f39ull,0x5f65737531315f53ull,0x45746c7561666564ull,
0x6234315f44534545ull,0x756465725f786f62ull,0x7645456e6f697463ull,0x545f3054506a5f54ull,
0x09090a2c6e5f5f31ull,0x2e206d617261702eull,0x75635f5f20323375ull,0x5f5f6d7261706164ull,
0x7375726874364e5aull,0x6c69617465643674ull,0x3465636976656436ull,0x7465643661647563ull,
0x64657233316c6961ull,0x6d735f6e5f656375ull,0x38315f534e496d65ull,0x726f66736e617274ull,
0x7461726574695f6dull,0x6f6262393149726full,0x66736e6172745f78ull,0x6e6f6974616d726full,
0x6f6e35315f30534eull,0x6574695f6c616d72ull,0x534e49726f746172ull,0x636976656430315full,
0x7037497274705f65ull,0x45456432746e696full,0x6170345f534e4545ull,0x39535f3953497269ull,
0x31315f534e45455full,0x616665645f657375ull,0x4453454545746c75ull,0x5f786f626234315full,
0x6f69746375646572ull,0x506a5f547645456eull,0x625f5f31545f3054ull,0x7365725f6b636f6cull,
0x09090a2c73746c75ull,0x2e206d617261702eull,0x2031206e67696c61ull,0x75635f5f2038622eull,
0x5f5f6d7261706164ull,0x7375726874364e5aull,0x6c69617465643674ull,0x3465636976656436ull,
0x7465643661647563ull,0x64657233316c6961ull,0x6d735f6e5f656375ull,0x38315f534e496d65ull,
0x726f66736e617274ull,0x7461726574695f6dull,0x6f6262393149726full,0x66736e6172745f78ull,
0x6e6f6974616d726full,0x6f6e35315f30534eull,0x6574695f6c616d72ull,0x534e49726f746172ull,
0x636976656430315full,0x7037497274705f65ull,0x45456432746e696full,0x6170345f534e4545ull,
0x39535f3953497269ull,0x31315f534e45455full,0x616665645f657375ull,0x4453454545746c75ull,
0x5f786f626234315full,0x6f69746375646572ull,0x506a5f547645456eull,0x625f5f31545f3054ull,
0x706f5f7972616e69ull,0x0a7b090a295d315bull,0x752e206765722e09ull,0x32313c7225203233ull,
0x65722e090a3b3e32ull,0x25203233662e2067ull,0x0a3b3e3833313c66ull,0x702e206765722e09ull,
0x323c702520646572ull,0x6f6c2e090a3b3e36ull,0x696c612e206c6163ull,0x38622e2034206e67ull,
0x5f616475635f5f20ull,0x5f30373332545f5full,0x2e090a3b5d385b30ull,0x612e206c61636f6cull,
0x2e2034206e67696cull,0x6475635f5f203862ull,0x616475635f5f5f61ull,0x31383332545f5f5full,
0x3b5d385b3834325full,0x3309636f6c2e090aull,0x0a30093731310934ull,0x5a5f5f3142424c24ull,
0x747375726874364eull,0x366c696174656436ull,0x6334656369766564ull,0x6174656436616475ull,
0x7564657233316c69ull,0x656d735f6e5f6563ull,0x7438315f534e496dull,0x6d726f66736e6172ull,
0x6f7461726574695full,0x786f626239314972ull,0x6f66736e6172745full,0x4e6e6f6974616d72ull,
0x726f6e35315f3053ull,0x726574695f6c616dull,0x5f534e49726f7461ull,0x6563697665643031ull,
0x6f7037497274705full,0x4545456432746e69ull,0x696170345f534e45ull,0x5f39535f39534972ull,
0x7531315f534e4545ull,0x75616665645f6573ull,0x5f4453454545746cull,0x725f786f62623431ull,
0x6e6f697463756465ull,0x54506a5f54764545ull,0x090a3a5f31545f30ull,0x09343309636f6c2eull,
0x7663090a30093337ull,0x31752e3233752e74ull,0x202c317225092036ull,0x3b782e6469746e25ull,
0x33752e747663090aull,0x2509203631752e32ull,0x61746325202c3272ull,0x6d090a3b782e6469ull,
0x33752e6f6c2e6c75ull,0x202c337225092032ull,0x327225202c317225ull,0x752e747663090a3bull,
0x09203631752e3233ull,0x697425202c347225ull,0x6461090a3b782e64ull,0x2509203233752e64ull,
0x2c337225202c3572ull,0x6d090a3b34722520ull,0x09203233732e766full,0x357225202c367225ull,
0x09636f6c2e090a3bull,0x0a30093637093433ull,0x617261702e646c09ull,0x2509203233752e6dull,
0x635f5f5b202c3772ull,0x5f6d726170616475ull,0x75726874364e5a5full,0x6961746564367473ull,
0x656369766564366cull,0x6564366164756334ull,0x657233316c696174ull,0x735f6e5f65637564ull,
0x315f534e496d656dull,0x6f66736e61727438ull,0x61726574695f6d72ull,0x6262393149726f74ull,
0x736e6172745f786full,0x6f6974616d726f66ull,0x6e35315f30534e6eull,0x74695f6c616d726full,
0x4e49726f74617265ull,0x6976656430315f53ull,0x37497274705f6563ull,0x456432746e696f70ull,
0x70345f534e454545ull,0x535f395349726961ull,0x315f534e45455f39ull,0x6665645f65737531ull,
0x53454545746c7561ull,0x786f626234315f44ull,0x697463756465725full,0x6a5f547645456e6full,
0x5f5f31545f305450ull,0x61705f6c61765f5full,0x7475706e696d6172ull,0x756d090a3b5d302bull,
0x3233752e6f6c2e6cull,0x25202c3872250920ull,0x090a3b38202c3572ull,0x203233752e646461ull,
0x7225202c39722509ull,0x0a3b387225202c37ull,0x617261702e646c09ull,0x2509203233752e6dull,
0x5f5f5b202c303172ull,0x6d72617061647563ull,0x726874364e5a5f5full,0x6174656436747375ull,
0x6369766564366c69ull,0x6436616475633465ull,0x7233316c69617465ull,0x5f6e5f6563756465ull,
0x5f534e496d656d73ull,0x66736e6172743831ull,0x726574695f6d726full,0x62393149726f7461ull,
0x6e6172745f786f62ull,0x6974616d726f6673ull,0x35315f30534e6e6full,0x695f6c616d726f6eull,
0x49726f7461726574ull,0x76656430315f534eull,0x497274705f656369ull,0x6432746e696f7037ull,
0x345f534e45454545ull,0x5f39534972696170ull,0x5f534e45455f3953ull,0x65645f6573753131ull,
0x454545746c756166ull,0x6f626234315f4453ull,0x7463756465725f78ull,0x5f547645456e6f69ull,
0x5f31545f3054506aull,0x6573090a3b5d6e5full,0x33752e65672e7074ull,0x202c317025092032ull,
0x317225202c357225ull,0x31702540090a3b30ull,0x4c24092061726220ull,0x393930325f345f74ull,
0x636f6c2e090a3b34ull,0x3009343809343309ull,0x33732e766f6d090aull,0x2c31317225092032ull,
0x6d090a3b39722520ull,0x09203233752e766full,0x5f5f202c32317225ull,0x545f5f5f61647563ull,
0x0a3b305f30373332ull,0x626f6c672e646c09ull,0x09203233752e6c61ull,0x255b202c33317225ull,
0x0a3b5d302b313172ull,0x61636f6c2e747309ull,0x5b09203233752e6cull,0x2c5d302b32317225ull,
0x090a3b3331722520ull,0x61626f6c672e646cull,0x2509203233752e6cull,0x72255b202c343172ull,
0x090a3b5d342b3131ull,0x6c61636f6c2e7473ull,0x255b09203233752eull,0x202c5d342b323172ull,
0x6c090a3b34317225ull,0x2e6c61636f6c2e64ull,0x3166250920323366ull,0x6475635f5f5b202cull,
0x373332545f5f5f61ull,0x0a3b5d302b305f30ull,0x3233662e766f6d09ull,0x25202c3266250920ull,
0x2e646c090a3b3166ull,0x33662e6c61636f6cull,0x202c336625092032ull,0x5f616475635f5f5bull,
0x5f30373332545f5full,0x6d090a3b5d342b30ull,0x09203233662e766full,0x336625202c346625ull,
0x662e766f6d090a3bull,0x2c35662509203233ull,0x6d090a3b31662520ull,0x09203233662e766full,
0x336625202c366625ull,0x09636f6c2e090a3bull,0x0a30093538093433ull,0x3233752e74766309ull,
0x722509203631752eull,0x74636e25202c3531ull,0x090a3b782e646961ull,0x752e6f6c2e6c756dull,
0x3631722509203233ull,0x202c35317225202cull,0x6461090a3b317225ull,0x2509203233752e64ull,
0x36317225202c3672ull,0x090a3b357225202cull,0x09343309636f6c2eull,0x756d090a30093638ull,
0x3233752e6f6c2e6cull,0x202c373172250920ull,0x3b38202c36317225ull,0x33752e646461090aull,
0x202c397225092032ull,0x317225202c397225ull,0x2e617262090a3b37ull,0x744c240920696e75ull,
0x38333730325f345full,0x5f345f744c240a3bull,0x090a3a3439393032ull,0x203233662e766f6dull,
0x6625202c36662509ull,0x2e766f6d090a3b37ull,0x3566250920323366ull,0x090a3b386625202cull,
0x203233662e766f6dull,0x6625202c34662509ull,0x2e766f6d090a3b39ull,0x3266250920323366ull,
0x0a3b30316625202cull,0x30325f345f744c24ull,0x6c2e090a3a383337ull,0x363709343309636full,
0x702e646c090a3009ull,0x3233752e6d617261ull,0x202c303172250920ull,0x70616475635f5f5bull,
0x364e5a5f5f6d7261ull,0x6436747375726874ull,0x6564366c69617465ull,0x6475633465636976ull,
0x6c69617465643661ull,0x6563756465723331ull,0x496d656d735f6e5full,0x61727438315f534eull,
0x695f6d726f66736eull,0x49726f7461726574ull,0x745f786f62623931ull,0x6d726f66736e6172ull,
0x30534e6e6f697461ull,0x616d726f6e35315full,0x7461726574695f6cull,0x30315f534e49726full,
0x705f656369766564ull,0x6e696f7037497274ull,0x4e45454545643274ull,0x4972696170345f53ull,
0x45455f39535f3953ull,0x65737531315f534eull,0x746c75616665645full,0x34315f4453454545ull,
0x6465725f786f6262ull,0x45456e6f69746375ull,0x5f3054506a5f5476ull,0x0a3b5d6e5f5f3154ull,
0x343309636f6c2e09ull,0x73090a3009363809ull,0x752e65672e707465ull,0x2c32702509203233ull,
0x7225202c36722520ull,0x702540090a3b3031ull,0x2409206172622032ull,0x3231325f345f744cull,
0x747663090a3b3035ull,0x3631752e3233752eull,0x202c383172250920ull,0x2e64696174636e25ull,
0x2e6c756d090a3b78ull,0x09203233752e6f6cull,0x7225202c36317225ull,0x3b317225202c3831ull,
0x325f345f744c240aull,0x2f200a3a32363731ull,0x203e706f6f6c3c2full,0x646f6220706f6f4cull,
0x3820656e696c2079ull,0x697473656e202c36ull,0x687470656420676eull,0x747365202c31203aull,
0x6920646574616d69ull,0x6e6f697461726574ull,0x6f6e6b6e75203a73ull,0x636f6c2e090a6e77ull,
0x3009323909343309ull,0x33732e766f6d090aull,0x2c39317225092032ull,0x6d090a3b39722520ull,
0x09203233752e766full,0x5f5f202c30327225ull,0x635f5f5f61647563ull,0x32545f5f5f616475ull,
0x3b3834325f313833ull,0x6f6c672e646c090aull,0x203233752e6c6162ull,0x5b202c3132722509ull,
0x3b5d302b39317225ull,0x636f6c2e7473090aull,0x09203233752e6c61ull,0x5d302b303272255bull,
0x0a3b31327225202cull,0x626f6c672e646c09ull,0x09203233752e6c61ull,0x255b202c32327225ull,
0x0a3b5d342b393172ull,0x61636f6c2e747309ull,0x5b09203233752e6cull,0x2c5d342b30327225ull,
0x090a3b3232722520ull,0x09343309636f6c2eull,0x646c090a30093339ull,0x662e6c61636f6c2eull,
0x3131662509203233ull,0x6475635f5f5b202cull,0x616475635f5f5f61ull,0x31383332545f5f5full,
0x3b5d302b3834325full,0x33662e6e696d090aull,0x202c326625092032ull,0x6625202c31316625ull,
0x6c2e646c090a3b32ull,0x3233662e6c61636full,0x202c323166250920ull,0x5f616475635f5f5bull,
0x5f5f616475635f5full,0x325f31383332545full,0x090a3b5d342b3834ull,0x203233662e6e696dull,
0x6625202c34662509ull,0x3b346625202c3231ull,0x33662e78616d090aull,0x202c356625092032ull,
0x6625202c31316625ull,0x2e78616d090a3b35ull,0x3666250920323366ull,0x202c32316625202cull,
0x6c2e090a3b366625ull,0x343909343309636full,0x2e646461090a3009ull,0x3672250920323375ull,
0x202c36317225202cull,0x6c2e090a3b367225ull,0x353909343309636full,0x2e6c756d090a3009ull,
0x09203233752e6f6cull,0x7225202c33327225ull,0x090a3b38202c3631ull,0x203233752e646461ull,
0x7225202c39722509ull,0x3b33327225202c39ull,0x3309636f6c2e090aull,0x090a300936370934ull,
0x6d617261702e646cull,0x722509203233752eull,0x635f5f5b202c3031ull,0x5f6d726170616475ull,
0x75726874364e5a5full,0x6961746564367473ull,0x656369766564366cull,0x6564366164756334ull,
0x657233316c696174ull,0x735f6e5f65637564ull,0x315f534e496d656dull,0x6f66736e61727438ull,
0x61726574695f6d72ull,0x6262393149726f74ull,0x736e6172745f786full,0x6f6974616d726f66ull,
0x6e35315f30534e6eull,0x74695f6c616d726full,0x4e49726f74617265ull,0x6976656430315f53ull,
0x37497274705f6563ull,0x456432746e696f70ull,0x70345f534e454545ull,0x535f395349726961ull,
0x315f534e45455f39ull,0x6665645f65737531ull,0x53454545746c7561ull,0x786f626234315f44ull,
0x697463756465725full,0x6a5f547645456e6full,0x5f5f31545f305450ull,0x6f6c2e090a3b5d6eull,
0x0935390934330963ull,0x2e70746573090a30ull,0x09203233752e746cull,0x367225202c337025ull,
0x0a3b30317225202cull,0x7262203370254009ull,0x345f744c24092061ull,0x0a3b32363731325full,
0x31325f345f744c24ull,0x6c2e090a3a303532ull,0x393909343309636full,0x326c756d090a3009ull,
0x3233752e6f6c2e34ull,0x202c343272250920ull,0x3b3631202c347225ull,0x33752e766f6d090aull,
0x2c35327225092032ull,0x726874364e5a5f20ull,0x6174656436747375ull,0x6369766564366c69ull,
0x7334616475633465ull,0x61090a3b456d656dull,0x09203233752e6464ull,0x7225202c36327225ull,
0x35327225202c3432ull,0x68732e7473090a3bull,0x3233662e64657261ull,0x2b363272255b0920ull,
0x3b326625202c5d30ull,0x6168732e7473090aull,0x203233662e646572ull,0x342b363272255b09ull,
0x0a3b346625202c5dull,0x726168732e747309ull,0x09203233662e6465ull,0x5d382b363272255bull,
0x090a3b356625202cull,0x65726168732e7473ull,0x5b09203233662e64ull,0x5d32312b36327225ull,
0x090a3b366625202cull,0x636e79732e726162ull,0x6c2e090a3b300920ull,0x363709343309636full,
0x702e646c090a3009ull,0x3233752e6d617261ull,0x202c303172250920ull,0x70616475635f5f5bull,
0x364e5a5f5f6d7261ull,0x6436747375726874ull,0x6564366c69617465ull,0x6475633465636976ull,
0x6c69617465643661ull,0x6563756465723331ull,0x496d656d735f6e5full,0x61727438315f534eull,
0x695f6d726f66736eull,0x49726f7461726574ull,0x745f786f62623931ull,0x6d726f66736e6172ull,
0x30534e6e6f697461ull,0x616d726f6e35315full,0x7461726574695f6cull,0x30315f534e49726full,
0x705f656369766564ull,0x6e696f7037497274ull,0x4e45454545643274ull,0x4972696170345f53ull,
0x45455f39535f3953ull,0x65737531315f534eull,0x746c75616665645full,0x34315f4453454545ull,
0x6465725f786f6262ull,0x45456e6f69746375ull,0x5f3054506a5f5476ull,0x0a3b5d6e5f5f3154ull,
0x343309636f6c2e09ull,0x090a300932303109ull,0x203233752e627573ull,0x25202c3732722509ull,
0x337225202c303172ull,0x752e6e696d090a3bull,0x3832722509203233ull,0x202c37327225202cull,
0x6f6d090a3b317225ull,0x2509203233752e76ull,0x323135202c393272ull,0x2e70746573090a3bull,
0x09203233752e656cull,0x327225202c347025ull,0x3b39327225202c38ull,0x622034702540090aull,
0x5f744c2409206172ull,0x3b34373232325f34ull,0x33752e646461090aull,0x2c30337225092032ull,
0x3135202c34722520ull,0x2e746573090a3b32ull,0x752e3233752e7467ull,0x3133722509203233ull,
0x202c38327225202cull,0x6e090a3b30337225ull,0x09203233732e6765ull,0x7225202c32337225ull,
0x766f6d090a3b3133ull,0x722509203233752eull,0x3b313135202c3333ull,0x656c2e746573090aull,
0x3233752e3233752eull,0x202c343372250920ull,0x337225202c347225ull,0x2e67656e090a3b33ull,
0x3372250920323373ull,0x3b34337225202c35ull,0x33622e646e61090aull,0x2c36337225092032ull,
0x25202c3233722520ull,0x6f6d090a3b353372ull,0x2509203233752e76ull,0x0a3b30202c373372ull,
0x71652e7074657309ull,0x702509203233732eull,0x2c36337225202c35ull,0x090a3b3733722520ull,
0x6172622035702540ull,0x5f345f744c240920ull,0x090a3b3638373232ull,0x09363309636f6c2eull,
0x646c090a30093135ull,0x2e6465726168732eull,0x3166250920323366ull,0x363272255b202c33ull,
0x646c090a3b5d342bull,0x2e6465726168732eull,0x3166250920323366ull,0x363272255b202c34ull,
0x646c090a3b5d382bull,0x2e6465726168732eull,0x3166250920323366ull,0x363272255b202c35ull,
0x6c090a3b5d32312bull,0x6465726168732e64ull,0x662509203233662eull,0x3272255b202c3631ull,
0x3b5d363931382b36ull,0x6168732e646c090aull,0x203233662e646572ull,0x5b202c3731662509ull,
0x3032382b36327225ull,0x2e646c090a3b5d30ull,0x662e646572616873ull,0x3831662509203233ull,
0x2b363272255b202cull,0x090a3b5d34303238ull,0x65726168732e646cull,0x2509203233662e64ull,
0x72255b202c393166ull,0x090a3b5d302b3632ull,0x65726168732e646cull,0x2509203233662e64ull,
0x72255b202c303266ull,0x5d323931382b3632ull,0x662e6e696d090a3bull,0x3132662509203233ull,
0x202c39316625202cull,0x73090a3b30326625ull,0x6465726168732e74ull,0x255b09203233662eull,
0x202c5d302b363272ull,0x6d090a3b31326625ull,0x09203233662e6e69ull,0x6625202c32326625ull,
0x36316625202c3331ull,0x68732e7473090a3bull,0x3233662e64657261ull,0x2b363272255b0920ull,
0x32326625202c5d34ull,0x662e78616d090a3bull,0x3332662509203233ull,0x202c34316625202cull,
0x73090a3b37316625ull,0x6465726168732e74ull,0x255b09203233662eull,0x202c5d382b363272ull,
0x6d090a3b33326625ull,0x09203233662e7861ull,0x6625202c34326625ull,0x38316625202c3531ull,
0x68732e7473090a3bull,0x3233662e64657261ull,0x2b363272255b0920ull,0x326625202c5d3231ull,
0x345f744c240a3b34ull,0x0a3a36383732325full,0x6e79732e72616209ull,0x4c240a3b30092063ull,
0x373232325f345f74ull,0x2e766f6d090a3a34ull,0x3372250920323375ull,0x0a3b363532202c38ull,
0x656c2e7074657309ull,0x702509203233752eull,0x2c38327225202c36ull,0x090a3b3833722520ull,
0x6172622036702540ull,0x5f345f744c240920ull,0x090a3b3839323332ull,0x203233752e646461ull,
0x25202c3933722509ull,0x3b363532202c3472ull,0x74672e746573090aull,0x3233752e3233752eull,
0x202c303472250920ull,0x7225202c38327225ull,0x67656e090a3b3933ull,0x722509203233732eull,
0x30347225202c3134ull,0x752e766f6d090a3bull,0x3234722509203233ull,0x090a3b353532202cull,
0x752e656c2e746573ull,0x09203233752e3233ull,0x7225202c33347225ull,0x3b32347225202c34ull,
0x33732e67656e090aull,0x2c34347225092032ull,0x090a3b3334722520ull,0x203233622e646e61ull,
0x25202c3534722509ull,0x347225202c313472ull,0x2e766f6d090a3b34ull,0x3472250920323375ull,
0x73090a3b30202c36ull,0x732e71652e707465ull,0x2c37702509203233ull,0x25202c3534722520ull,
0x2540090a3b363472ull,0x0920617262203770ull,0x33325f345f744c24ull,0x6c2e090a3b303138ull,
0x323509363309636full,0x732e646c090a3009ull,0x33662e6465726168ull,0x2c35326625092032ull,
0x342b363272255b20ull,0x732e646c090a3b5dull,0x33662e6465726168ull,0x2c36326625092032ull,
0x382b363272255b20ull,0x732e646c090a3b5dull,0x33662e6465726168ull,0x2c37326625092032ull,
0x312b363272255b20ull,0x2e646c090a3b5d32ull,0x662e646572616873ull,0x3832662509203233ull,
0x2b363272255b202cull,0x090a3b5d30303134ull,0x65726168732e646cull,0x2509203233662e64ull,
0x72255b202c393266ull,0x5d343031342b3632ull,0x68732e646c090a3bull,0x3233662e64657261ull,
0x202c303366250920ull,0x31342b363272255bull,0x646c090a3b5d3830ull,0x2e6465726168732eull,
0x3366250920323366ull,0x363272255b202c31ull,0x646c090a3b5d302bull,0x2e6465726168732eull,
0x3366250920323366ull,0x363272255b202c32ull,0x0a3b5d363930342bull,0x3233662e6e696d09ull,
0x202c333366250920ull,0x6625202c31336625ull,0x2e7473090a3b3233ull,0x662e646572616873ull,
0x3272255b09203233ull,0x6625202c5d302b36ull,0x6e696d090a3b3333ull,0x662509203233662eull,
0x35326625202c3433ull,0x0a3b38326625202cull,0x726168732e747309ull,0x09203233662e6465ull,
0x5d342b363272255bull,0x0a3b34336625202cull,0x3233662e78616d09ull,0x202c353366250920ull,
0x6625202c36326625ull,0x2e7473090a3b3932ull,0x662e646572616873ull,0x3272255b09203233ull,
0x6625202c5d382b36ull,0x78616d090a3b3533ull,0x662509203233662eull,0x37326625202c3633ull,
0x0a3b30336625202cull,0x726168732e747309ull,0x09203233662e6465ull,0x32312b363272255bull,
0x3b36336625202c5dull,0x325f345f744c240aull,0x62090a3a30313833ull,0x20636e79732e7261ull,
0x5f744c240a3b3009ull,0x3a38393233325f34ull,0x33752e766f6d090aull,0x2c37347225092032ull,
0x73090a3b38323120ull,0x752e656c2e707465ull,0x2c38702509203233ull,0x25202c3832722520ull,
0x2540090a3b373472ull,0x0920617262203870ull,0x34325f345f744c24ull,0x6461090a3b323233ull,
0x2509203233752e64ull,0x347225202c383472ull,0x090a3b383231202cull,0x752e74672e746573ull,
0x09203233752e3233ull,0x7225202c39347225ull,0x38347225202c3832ull,0x732e67656e090a3bull,
0x3035722509203233ull,0x0a3b39347225202cull,0x3233752e766f6d09ull,0x202c313572250920ull,
0x6573090a3b373231ull,0x3233752e656c2e74ull,0x722509203233752eull,0x2c347225202c3235ull,
0x090a3b3135722520ull,0x203233732e67656eull,0x25202c3335722509ull,0x6e61090a3b323572ull,
0x2509203233622e64ull,0x357225202c343572ull,0x3b33357225202c30ull,0x33752e766f6d090aull,
0x2c35357225092032ull,0x746573090a3b3020ull,0x3233732e71652e70ull,0x25202c3970250920ull,
0x357225202c343572ull,0x39702540090a3b35ull,0x4c24092061726220ull,0x333834325f345f74ull,
0x636f6c2e090a3b34ull,0x3009333509363309ull,0x6168732e646c090aull,0x203233662e646572ull,
0x5b202c3733662509ull,0x3b5d342b36327225ull,0x6168732e646c090aull,0x203233662e646572ull,
0x5b202c3833662509ull,0x3b5d382b36327225ull,0x6168732e646c090aull,0x203233662e646572ull,
0x5b202c3933662509ull,0x5d32312b36327225ull,0x68732e646c090a3bull,0x3233662e64657261ull,
0x202c303466250920ull,0x30322b363272255bull,0x646c090a3b5d3235ull,0x2e6465726168732eull,
0x3466250920323366ull,0x363272255b202c31ull,0x0a3b5d363530322bull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c32346625ull,0x303630322b363272ull,0x732e646c090a3b5dull,
0x33662e6465726168ull,0x2c33346625092032ull,0x302b363272255b20ull,0x732e646c090a3b5dull,
0x33662e6465726168ull,0x2c34346625092032ull,0x322b363272255b20ull,0x6d090a3b5d383430ull,
0x09203233662e6e69ull,0x6625202c35346625ull,0x34346625202c3334ull,0x68732e7473090a3bull,
0x3233662e64657261ull,0x2b363272255b0920ull,0x35346625202c5d30ull,0x662e6e696d090a3bull,
0x3634662509203233ull,0x202c37336625202cull,0x73090a3b30346625ull,0x6465726168732e74ull,
0x255b09203233662eull,0x202c5d342b363272ull,0x6d090a3b36346625ull,0x09203233662e7861ull,
0x6625202c37346625ull,0x31346625202c3833ull,0x68732e7473090a3bull,0x3233662e64657261ull,
0x2b363272255b0920ull,0x37346625202c5d38ull,0x662e78616d090a3bull,0x3834662509203233ull,
0x202c39336625202cull,0x73090a3b32346625ull,0x6465726168732e74ull,0x255b09203233662eull,
0x2c5d32312b363272ull,0x240a3b3834662520ull,0x3834325f345f744cull,0x726162090a3a3433ull,
0x300920636e79732eull,0x5f345f744c240a3bull,0x090a3a3232333432ull,0x203233752e766f6dull,
0x36202c3635722509ull,0x70746573090a3b34ull,0x203233752e656c2eull,0x25202c3031702509ull,
0x357225202c383272ull,0x31702540090a3b36ull,0x2409206172622030ull,0x3335325f345f744cull,
0x646461090a3b3634ull,0x722509203233752eull,0x2c347225202c3735ull,0x6573090a3b343620ull,
0x3233752e74672e74ull,0x722509203233752eull,0x38327225202c3835ull,0x0a3b37357225202cull,
0x3233732e67656e09ull,0x202c393572250920ull,0x6d090a3b38357225ull,0x09203233752e766full,
0x3336202c30367225ull,0x6c2e746573090a3bull,0x33752e3233752e65ull,0x2c31367225092032ull,
0x7225202c34722520ull,0x67656e090a3b3036ull,0x722509203233732eull,0x31367225202c3236ull,
0x622e646e61090a3bull,0x3336722509203233ull,0x202c39357225202cull,0x6d090a3b32367225ull,
0x09203233752e766full,0x3b30202c34367225ull,0x652e70746573090aull,0x2509203233732e71ull,
0x367225202c313170ull,0x3b34367225202c33ull,0x203131702540090aull,0x744c240920617262ull,
0x38353835325f345full,0x09636f6c2e090a3bull,0x0a30093435093633ull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c39346625ull,0x0a3b5d342b363272ull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c30356625ull,0x0a3b5d382b363272ull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c31356625ull,0x3b5d32312b363272ull,0x6168732e646c090aull,
0x203233662e646572ull,0x5b202c3235662509ull,0x3230312b36327225ull,0x2e646c090a3b5d38ull,
0x662e646572616873ull,0x3335662509203233ull,0x2b363272255b202cull,0x090a3b5d32333031ull,
0x65726168732e646cull,0x2509203233662e64ull,0x72255b202c343566ull,0x5d363330312b3632ull,
0x68732e646c090a3bull,0x3233662e64657261ull,0x202c353566250920ull,0x5d302b363272255bull,
0x68732e646c090a3bull,0x3233662e64657261ull,0x202c363566250920ull,0x30312b363272255bull,
0x696d090a3b5d3432ull,0x2509203233662e6eull,0x356625202c373566ull,0x3b36356625202c35ull,
0x6168732e7473090aull,0x203233662e646572ull,0x302b363272255b09ull,0x3b37356625202c5dull,
0x33662e6e696d090aull,0x2c38356625092032ull,0x25202c3934662520ull,0x7473090a3b323566ull,
0x2e6465726168732eull,0x72255b0920323366ull,0x25202c5d342b3632ull,0x616d090a3b383566ull,
0x2509203233662e78ull,0x356625202c393566ull,0x3b33356625202c30ull,0x6168732e7473090aull,
0x203233662e646572ull,0x382b363272255b09ull,0x3b39356625202c5dull,0x33662e78616d090aull,
0x2c30366625092032ull,0x25202c3135662520ull,0x7473090a3b343566ull,0x2e6465726168732eull,
0x72255b0920323366ull,0x202c5d32312b3632ull,0x4c240a3b30366625ull,0x353835325f345f74ull,
0x2e726162090a3a38ull,0x3b300920636e7973ull,0x325f345f744c240aull,0x6d090a3a36343335ull,
0x09203233752e766full,0x3233202c35367225ull,0x2e70746573090a3bull,0x09203233752e656cull,
0x7225202c32317025ull,0x35367225202c3832ull,0x3231702540090a3bull,0x4c24092061726220ull,
0x373336325f345f74ull,0x2e646461090a3b30ull,0x3672250920323375ull,0x202c347225202c36ull,
0x746573090a3b3233ull,0x2e3233752e74672eull,0x3672250920323375ull,0x2c38327225202c37ull,
0x090a3b3636722520ull,0x203233732e67656eull,0x25202c3836722509ull,0x6f6d090a3b373672ull,
0x2509203233752e76ull,0x3b3133202c393672ull,0x656c2e746573090aull,0x3233752e3233752eull,
0x202c303772250920ull,0x367225202c347225ull,0x2e67656e090a3b39ull,0x3772250920323373ull,
0x3b30377225202c31ull,0x33622e646e61090aull,0x2c32377225092032ull,0x25202c3836722520ull,
0x6f6d090a3b313772ull,0x2509203233752e76ull,0x0a3b30202c333772ull,0x71652e7074657309ull,
0x702509203233732eull,0x32377225202c3331ull,0x0a3b33377225202cull,0x6220333170254009ull,
0x5f744c2409206172ull,0x3b32383836325f34ull,0x3309636f6c2e090aull,0x090a300935350936ull,
0x65726168732e646cull,0x2509203233662e64ull,0x72255b202c313666ull,0x090a3b5d342b3632ull,
0x65726168732e646cull,0x2509203233662e64ull,0x72255b202c323666ull,0x090a3b5d382b3632ull,
0x65726168732e646cull,0x2509203233662e64ull,0x72255b202c333666ull,0x0a3b5d32312b3632ull,
0x726168732e646c09ull,0x09203233662e6465ull,0x255b202c34366625ull,0x5d3631352b363272ull,
0x68732e646c090a3bull,0x3233662e64657261ull,0x202c353666250920ull,0x32352b363272255bull,
0x2e646c090a3b5d30ull,0x662e646572616873ull,0x3636662509203233ull,0x2b363272255b202cull,
0x6c090a3b5d343235ull,0x6465726168732e64ull,0x662509203233662eull,0x3272255b202c3736ull,
0x6c090a3b5d302b36ull,0x6465726168732e64ull,0x662509203233662eull,0x3272255b202c3836ull,
0x0a3b5d3231352b36ull,0x3233662e6e696d09ull,0x202c393666250920ull,0x6625202c37366625ull,
0x2e7473090a3b3836ull,0x662e646572616873ull,0x3272255b09203233ull,0x6625202c5d302b36ull,
0x6e696d090a3b3936ull,0x662509203233662eull,0x31366625202c3037ull,0x0a3b34366625202cull,
0x726168732e747309ull,0x09203233662e6465ull,0x5d342b363272255bull,0x0a3b30376625202cull,
0x3233662e78616d09ull,0x202c313766250920ull,0x6625202c32366625ull,0x2e7473090a3b3536ull,
0x662e646572616873ull,0x3272255b09203233ull,0x6625202c5d382b36ull,0x78616d090a3b3137ull,
0x662509203233662eull,0x33366625202c3237ull,0x0a3b36366625202cull,0x726168732e747309ull,
0x09203233662e6465ull,0x32312b363272255bull,0x3b32376625202c5dull,0x325f345f744c240aull,
0x62090a3a32383836ull,0x20636e79732e7261ull,0x5f744c240a3b3009ull,0x3a30373336325f34ull,
0x33752e766f6d090aull,0x2c34377225092032ull,0x6573090a3b363120ull,0x33752e656c2e7074ull,
0x2c34317025092032ull,0x25202c3832722520ull,0x2540090a3b343772ull,0x2061726220343170ull,
0x325f345f744c2409ull,0x61090a3b34393337ull,0x09203233752e6464ull,0x7225202c35377225ull,
0x090a3b3631202c34ull,0x752e74672e746573ull,0x09203233752e3233ull,0x7225202c36377225ull,
0x35377225202c3832ull,0x732e67656e090a3bull,0x3737722509203233ull,0x0a3b36377225202cull,
0x3233752e766f6d09ull,0x202c383772250920ull,0x746573090a3b3531ull,0x2e3233752e656c2eull,
0x3772250920323375ull,0x202c347225202c39ull,0x6e090a3b38377225ull,0x09203233732e6765ull,
0x7225202c30387225ull,0x646e61090a3b3937ull,0x722509203233622eull,0x37377225202c3138ull,
0x0a3b30387225202cull,0x3233752e766f6d09ull,0x202c323872250920ull,0x70746573090a3b30ull,
0x203233732e71652eull,0x25202c3531702509ull,0x387225202c313872ull,0x31702540090a3b32ull,
0x2409206172622035ull,0x3937325f345f744cull,0x6f6c2e090a3b3630ull,0x0936350936330963ull,
0x68732e646c090a30ull,0x3233662e64657261ull,0x202c333766250920ull,0x5d342b363272255bull,
0x68732e646c090a3bull,0x3233662e64657261ull,0x202c343766250920ull,0x5d382b363272255bull,
0x68732e646c090a3bull,0x3233662e64657261ull,0x202c353766250920ull,0x32312b363272255bull,
0x732e646c090a3b5dull,0x33662e6465726168ull,0x2c36376625092032ull,0x322b363272255b20ull,
0x646c090a3b5d3036ull,0x2e6465726168732eull,0x3766250920323366ull,0x363272255b202c37ull,
0x090a3b5d3436322bull,0x65726168732e646cull,0x2509203233662e64ull,0x72255b202c383766ull,
0x3b5d3836322b3632ull,0x6168732e646c090aull,0x203233662e646572ull,0x5b202c3937662509ull,
0x3b5d302b36327225ull,0x6168732e646c090aull,0x203233662e646572ull,0x5b202c3038662509ull,
0x3635322b36327225ull,0x2e6e696d090a3b5dull,0x3866250920323366ull,0x2c39376625202c31ull,
0x090a3b3038662520ull,0x65726168732e7473ull,0x5b09203233662e64ull,0x2c5d302b36327225ull,
0x090a3b3138662520ull,0x203233662e6e696dull,0x25202c3238662509ull,0x376625202c333766ull,
0x732e7473090a3b36ull,0x33662e6465726168ull,0x363272255b092032ull,0x386625202c5d342bull,
0x2e78616d090a3b32ull,0x3866250920323366ull,0x2c34376625202c33ull,0x090a3b3737662520ull,
0x65726168732e7473ull,0x5b09203233662e64ull,0x2c5d382b36327225ull,0x090a3b3338662520ull,
0x203233662e78616dull,0x25202c3438662509ull,0x376625202c353766ull,0x732e7473090a3b38ull,
0x33662e6465726168ull,0x363272255b092032ull,0x6625202c5d32312bull,0x5f744c240a3b3438ull,
0x3a36303937325f34ull,0x79732e726162090aull,0x240a3b300920636eull,0x3337325f345f744cull,
0x766f6d090a3a3439ull,0x722509203233752eull,0x090a3b38202c3338ull,0x2e656c2e70746573ull,
0x3170250920323375ull,0x2c38327225202c36ull,0x090a3b3338722520ull,0x7262203631702540ull,
0x345f744c24092061ull,0x0a3b38313438325full,0x3233752e64646109ull,0x202c343872250920ull,
0x0a3b38202c347225ull,0x2e74672e74657309ull,0x203233752e323375ull,0x25202c3538722509ull,
0x387225202c383272ull,0x2e67656e090a3b34ull,0x3872250920323373ull,0x3b35387225202c36ull,
0x33752e766f6d090aull,0x2c37387225092032ull,0x746573090a3b3720ull,0x2e3233752e656c2eull,
0x3872250920323375ull,0x202c347225202c38ull,0x6e090a3b37387225ull,0x09203233732e6765ull,
0x7225202c39387225ull,0x646e61090a3b3838ull,0x722509203233622eull,0x36387225202c3039ull,
0x0a3b39387225202cull,0x3233752e766f6d09ull,0x202c313972250920ull,0x70746573090a3b30ull,
0x203233732e71652eull,0x25202c3731702509ull,0x397225202c303972ull,0x31702540090a3b31ull,
0x2409206172622037ull,0x3938325f345f744cull,0x6f6c2e090a3b3033ull,0x0937350936330963ull,
0x68732e646c090a30ull,0x3233662e64657261ull,0x202c353866250920ull,0x5d342b363272255bull,
0x68732e646c090a3bull,0x3233662e64657261ull,0x202c363866250920ull,0x5d382b363272255bull,
0x68732e646c090a3bull,0x3233662e64657261ull,0x202c373866250920ull,0x32312b363272255bull,
0x732e646c090a3b5dull,0x33662e6465726168ull,0x2c38386625092032ull,0x312b363272255b20ull,
0x646c090a3b5d3233ull,0x2e6465726168732eull,0x3866250920323366ull,0x363272255b202c39ull,
0x090a3b5d3633312bull,0x65726168732e646cull,0x2509203233662e64ull,0x72255b202c303966ull,
0x3b5d3034312b3632ull,0x6168732e646c090aull,0x203233662e646572ull,0x5b202c3139662509ull,
0x3b5d302b36327225ull,0x6168732e646c090aull,0x203233662e646572ull,0x5b202c3239662509ull,
0x3832312b36327225ull,0x2e6e696d090a3b5dull,0x3966250920323366ull,0x2c31396625202c33ull,
0x090a3b3239662520ull,0x65726168732e7473ull,0x5b09203233662e64ull,0x2c5d302b36327225ull,
0x090a3b3339662520ull,0x203233662e6e696dull,0x25202c3439662509ull,0x386625202c353866ull,
0x732e7473090a3b38ull,0x33662e6465726168ull,0x363272255b092032ull,0x396625202c5d342bull,
0x2e78616d090a3b34ull,0x3966250920323366ull,0x2c36386625202c35ull,0x090a3b3938662520ull,
0x65726168732e7473ull,0x5b09203233662e64ull,0x2c5d382b36327225ull,0x090a3b3539662520ull,
0x203233662e78616dull,0x25202c3639662509ull,0x396625202c373866ull,0x732e7473090a3b30ull,
0x33662e6465726168ull,0x363272255b092032ull,0x6625202c5d32312bull,0x5f744c240a3b3639ull,
0x3a30333938325f34ull,0x79732e726162090aull,0x240a3b300920636eull,0x3438325f345f744cull,
0x766f6d090a3a3831ull,0x722509203233752eull,0x090a3b34202c3239ull,0x2e656c2e70746573ull,
0x3170250920323375ull,0x2c38327225202c38ull,0x090a3b3239722520ull,0x7262203831702540ull,
0x345f744c24092061ull,0x0a3b32343439325full,0x3233752e64646109ull,0x202c333972250920ull,
0x0a3b34202c347225ull,0x2e74672e74657309ull,0x203233752e323375ull,0x25202c3439722509ull,
0x397225202c383272ull,0x2e67656e090a3b33ull,0x3972250920323373ull,0x3b34397225202c35ull,
0x33752e766f6d090aull,0x2c36397225092032ull,0x746573090a3b3320ull,0x2e3233752e656c2eull,
0x3972250920323375ull,0x202c347225202c37ull,0x6e090a3b36397225ull,0x09203233732e6765ull,
0x7225202c38397225ull,0x646e61090a3b3739ull,0x722509203233622eull,0x35397225202c3939ull,
0x0a3b38397225202cull,0x3233752e766f6d09ull,0x2c30303172250920ull,0x746573090a3b3020ull,
0x3233732e71652e70ull,0x202c393170250920ull,0x7225202c39397225ull,0x2540090a3b303031ull,
0x2061726220393170ull,0x325f345f744c2409ull,0x2e090a3b34353939ull,0x3509363309636f6cull,
0x2e646c090a300938ull,0x662e646572616873ull,0x3739662509203233ull,0x2b363272255b202cull,
0x2e646c090a3b5d34ull,0x662e646572616873ull,0x3839662509203233ull,0x2b363272255b202cull,
0x2e646c090a3b5d38ull,0x662e646572616873ull,0x3939662509203233ull,0x2b363272255b202cull,
0x646c090a3b5d3231ull,0x2e6465726168732eull,0x3166250920323366ull,0x3272255b202c3030ull,
0x090a3b5d38362b36ull,0x65726168732e646cull,0x2509203233662e64ull,0x255b202c31303166ull,
0x3b5d32372b363272ull,0x6168732e646c090aull,0x203233662e646572ull,0x202c323031662509ull,
0x36372b363272255bull,0x732e646c090a3b5dull,0x33662e6465726168ull,0x3330316625092032ull,
0x2b363272255b202cull,0x2e646c090a3b5d30ull,0x662e646572616873ull,0x3031662509203233ull,
0x363272255b202c34ull,0x6d090a3b5d34362bull,0x09203233662e6e69ull,0x25202c3530316625ull,
0x6625202c33303166ull,0x7473090a3b343031ull,0x2e6465726168732eull,0x72255b0920323366ull,
0x25202c5d302b3632ull,0x6d090a3b35303166ull,0x09203233662e6e69ull,0x25202c3630316625ull,
0x316625202c373966ull,0x2e7473090a3b3030ull,0x662e646572616873ull,0x3272255b09203233ull,
0x6625202c5d342b36ull,0x616d090a3b363031ull,0x2509203233662e78ull,0x6625202c37303166ull,
0x30316625202c3839ull,0x732e7473090a3b31ull,0x33662e6465726168ull,0x363272255b092032ull,
0x316625202c5d382bull,0x78616d090a3b3730ull,0x662509203233662eull,0x396625202c383031ull,
0x3230316625202c39ull,0x68732e7473090a3bull,0x3233662e64657261ull,0x2b363272255b0920ull,
0x316625202c5d3231ull,0x5f744c240a3b3830ull,0x3a34353939325f34ull,0x79732e726162090aull,
0x240a3b300920636eull,0x3439325f345f744cull,0x766f6d090a3a3234ull,0x722509203233752eull,
0x0a3b32202c313031ull,0x656c2e7074657309ull,0x702509203233752eull,0x38327225202c3032ull,
0x3b3130317225202cull,0x203032702540090aull,0x744c240920617262ull,0x36363430335f345full,
0x752e646461090a3bull,0x3031722509203233ull,0x202c347225202c32ull,0x2e746573090a3b32ull,
0x752e3233752e7467ull,0x3031722509203233ull,0x2c38327225202c33ull,0x0a3b323031722520ull,
0x3233732e67656e09ull,0x2c34303172250920ull,0x0a3b333031722520ull,0x3233752e766f6d09ull,
0x2c35303172250920ull,0x746573090a3b3120ull,0x2e3233752e656c2eull,0x3172250920323375ull,
0x2c347225202c3630ull,0x0a3b353031722520ull,0x3233732e67656e09ull,0x2c37303172250920ull,
0x0a3b363031722520ull,0x3233622e646e6109ull,0x2c38303172250920ull,0x202c343031722520ull,
0x090a3b3730317225ull,0x203233752e766f6dull,0x202c393031722509ull,0x70746573090a3b30ull,
0x203233732e71652eull,0x25202c3132702509ull,0x7225202c38303172ull,0x2540090a3b393031ull,
0x2061726220313270ull,0x335f345f744c2409ull,0x2e090a3b38373930ull,0x3509363309636f6cull,
0x2e646c090a300939ull,0x662e646572616873ull,0x3031662509203233ull,0x363272255b202c39ull,
0x646c090a3b5d342bull,0x2e6465726168732eull,0x3166250920323366ull,0x3272255b202c3031ull,
0x6c090a3b5d382b36ull,0x6465726168732e64ull,0x662509203233662eull,0x72255b202c313131ull,
0x0a3b5d32312b3632ull,0x726168732e646c09ull,0x09203233662e6465ull,0x5b202c3231316625ull,
0x5d36332b36327225ull,0x68732e646c090a3bull,0x3233662e64657261ull,0x2c33313166250920ull,
0x342b363272255b20ull,0x2e646c090a3b5d30ull,0x662e646572616873ull,0x3131662509203233ull,
0x363272255b202c34ull,0x6c090a3b5d34342bull,0x6465726168732e64ull,0x662509203233662eull,
0x72255b202c353131ull,0x090a3b5d302b3632ull,0x65726168732e646cull,0x2509203233662e64ull,
0x255b202c36313166ull,0x3b5d32332b363272ull,0x33662e6e696d090aull,0x3731316625092032ull,
0x2c3531316625202cull,0x0a3b363131662520ull,0x726168732e747309ull,0x09203233662e6465ull,
0x5d302b363272255bull,0x3b3731316625202cull,0x33662e6e696d090aull,0x3831316625092032ull,
0x2c3930316625202cull,0x0a3b323131662520ull,0x726168732e747309ull,0x09203233662e6465ull,
0x5d342b363272255bull,0x3b3831316625202cull,0x33662e78616d090aull,0x3931316625092032ull,
0x2c3031316625202cull,0x0a3b333131662520ull,0x726168732e747309ull,0x09203233662e6465ull,
0x5d382b363272255bull,0x3b3931316625202cull,0x33662e78616d090aull,0x3032316625092032ull,
0x2c3131316625202cull,0x0a3b343131662520ull,0x726168732e747309ull,0x09203233662e6465ull,
0x32312b363272255bull,0x3032316625202c5dull,0x5f345f744c240a3bull,0x090a3a3837393033ull,
0x636e79732e726162ull,0x744c240a3b300920ull,0x36363430335f345full,0x752e766f6d090a3aull,
0x3131722509203233ull,0x73090a3b30202c30ull,0x752e71652e707465ull,0x3232702509203233ull,
0x25202c347225202cull,0x6d090a3b30313172ull,0x09203233752e766full,0x31202c3131317225ull,
0x2e70746573090a3bull,0x09203233752e656cull,0x7225202c33327025ull,0x31317225202c3832ull,
0x32702540090a3b31ull,0x2409206172622033ull,0x3431335f345f744cull,0x6c6573090a3b3039ull,
0x2509203233732e70ull,0x2c31202c32313172ull,0x32327025202c3020ull,0x752e646461090a3bull,
0x3131722509203233ull,0x202c347225202c33ull,0x2e746573090a3b31ull,0x752e3233752e7467ull,
0x3131722509203233ull,0x2c38327225202c34ull,0x0a3b333131722520ull,0x3233732e67656e09ull,
0x2c35313172250920ull,0x0a3b343131722520ull,0x3233622e646e6109ull,0x2c36313172250920ull,
0x202c323131722520ull,0x090a3b3531317225ull,0x203233752e766f6dull,0x202c373131722509ull,
0x70746573090a3b30ull,0x203233732e71652eull,0x25202c3432702509ull,0x7225202c36313172ull,
0x2540090a3b373131ull,0x2061726220343270ull,0x335f345f744c2409ull,0x2e090a3b32303032ull,
0x3609363309636f6cull,0x2e646c090a300930ull,0x662e646572616873ull,0x3231662509203233ull,
0x363272255b202c31ull,0x646c090a3b5d342bull,0x2e6465726168732eull,0x3166250920323366ull,
0x3272255b202c3232ull,0x6c090a3b5d382b36ull,0x6465726168732e64ull,0x662509203233662eull,
0x72255b202c333231ull,0x0a3b5d32312b3632ull,0x726168732e646c09ull,0x09203233662e6465ull,
0x5b202c3432316625ull,0x5d30322b36327225ull,0x68732e646c090a3bull,0x3233662e64657261ull,
0x2c35323166250920ull,0x322b363272255b20ull,0x2e646c090a3b5d34ull,0x662e646572616873ull,
0x3231662509203233ull,0x363272255b202c36ull,0x6c090a3b5d38322bull,0x6465726168732e64ull,
0x662509203233662eull,0x72255b202c373231ull,0x090a3b5d302b3632ull,0x65726168732e646cull,
0x2509203233662e64ull,0x255b202c38323166ull,0x3b5d36312b363272ull,0x33662e6e696d090aull,
0x3932316625092032ull,0x2c3732316625202cull,0x0a3b383231662520ull,0x726168732e747309ull,
0x09203233662e6465ull,0x5d302b363272255bull,0x3b3932316625202cull,0x33662e6e696d090aull,
0x3033316625092032ull,0x2c3132316625202cull,0x0a3b343231662520ull,0x726168732e747309ull,
0x09203233662e6465ull,0x5d342b363272255bull,0x3b3033316625202cull,0x33662e78616d090aull,
0x3133316625092032ull,0x2c3232316625202cull,0x0a3b353231662520ull,0x726168732e747309ull,
0x09203233662e6465ull,0x5d382b363272255bull,0x3b3133316625202cull,0x33662e78616d090aull,
0x3233316625092032ull,0x2c3332316625202cull,0x0a3b363231662520ull,0x726168732e747309ull,
0x09203233662e6465ull,0x32312b363272255bull,0x3233316625202c5dull,0x5f345f744c240a3bull,
0x090a3a3230303233ull,0x636e79732e726162ull,0x744c240a3b300920ull,0x30393431335f345full,
0x09636f6c2e090a3aull,0x3009323031093433ull,0x323270252140090aull,0x4c24092061726220ull,
0x313532335f345f74ull,0x636f6c2e090a3b34ull,0x0936303109343309ull,0x34326c756d090a30ull,
0x203233752e6f6c2eull,0x202c383131722509ull,0x3b3631202c327225ull,0x7261702e646c090aull,
0x09203233752e6d61ull,0x5b202c3931317225ull,0x6170616475635f5full,0x74364e5a5f5f6d72ull,
0x6564367473757268ull,0x766564366c696174ull,0x6164756334656369ull,0x316c696174656436ull,
0x5f65637564657233ull,0x4e496d656d735f6eull,0x6e61727438315f53ull,0x74695f6d726f6673ull,
0x3149726f74617265ull,0x72745f786f626239ull,0x616d726f66736e61ull,0x5f30534e6e6f6974ull,
0x6c616d726f6e3531ull,0x6f7461726574695full,0x6430315f534e4972ull,0x74705f6563697665ull,
0x746e696f70374972ull,0x534e454545456432ull,0x534972696170345full,0x4e45455f39535f39ull,
0x5f65737531315f53ull,0x45746c7561666564ull,0x6234315f44534545ull,0x756465725f786f62ull,
0x7645456e6f697463ull,0x545f3054506a5f54ull,0x6b636f6c625f5f31ull,0x73746c757365725full,
0x2e646461090a3b5dull,0x3172250920323375ull,0x31317225202c3032ull,0x3831317225202c39ull,
0x68732e646c090a3bull,0x3233662e64657261ull,0x2c33333166250920ull,0x302b363272255b20ull,
0x672e7473090a3b5dull,0x33662e6c61626f6cull,0x323172255b092032ull,0x6625202c5d302b30ull,
0x646c090a3b333331ull,0x2e6465726168732eull,0x3166250920323366ull,0x3272255b202c3433ull,
0x73090a3b5d342b36ull,0x6c61626f6c672e74ull,0x255b09203233662eull,0x2c5d342b30323172ull,
0x0a3b343331662520ull,0x726168732e646c09ull,0x09203233662e6465ull,0x5b202c3533316625ull,
0x3b5d382b36327225ull,0x6f6c672e7473090aull,0x203233662e6c6162ull,0x2b30323172255b09ull,
0x33316625202c5d38ull,0x732e646c090a3b35ull,0x33662e6465726168ull,0x3633316625092032ull,
0x2b363272255b202cull,0x7473090a3b5d3231ull,0x2e6c61626f6c672eull,0x72255b0920323366ull,
0x2c5d32312b303231ull,0x0a3b363331662520ull,0x32335f345f744c24ull,0x6c2e090a3a343135ull,
0x323109343309636full,0x697865090a300933ull,0x6557444c240a3b74ull,0x74364e5a5f5f646eull,
0x6564367473757268ull,0x766564366c696174ull,0x6164756334656369ull,0x316c696174656436ull,
0x5f65637564657233ull,0x4e496d656d735f6eull,0x6e61727438315f53ull,0x74695f6d726f6673ull,
0x3149726f74617265ull,0x72745f786f626239ull,0x616d726f66736e61ull,0x5f30534e6e6f6974ull,
0x6c616d726f6e3531ull,0x6f7461726574695full,0x6430315f534e4972ull,0x74705f6563697665ull,
0x746e696f70374972ull,0x534e454545456432ull,0x534972696170345full,0x4e45455f39535f39ull,
0x5f65737531315f53ull,0x45746c7561666564ull,0x6234315f44534545ull,0x756465725f786f62ull,
0x7645456e6f697463ull,0x545f3054506a5f54ull,0x2f207d090a3a5f31ull,0x6874364e5a5f202full,
0x7465643674737572ull,0x69766564366c6961ull,0x3661647563346563ull,0x33316c6961746564ull,
0x6e5f656375646572ull,0x534e496d656d735full,0x736e61727438315full,0x6574695f6d726f66ull,
0x393149726f746172ull,0x6172745f786f6262ull,0x74616d726f66736eull,0x315f30534e6e6f69ull,
0x5f6c616d726f6e35ull,0x726f746172657469ull,0x656430315f534e49ull,0x7274705f65636976ull,
0x32746e696f703749ull,0x5f534e4545454564ull,0x3953497269617034ull,0x534e45455f39535full,
0x645f65737531315full,0x4545746c75616665ull,0x626234315f445345ull,0x63756465725f786full,
0x547645456e6f6974ull,0x31545f3054506a5full,0x746e652e090a0a5full,0x74364e5a5f207972ull,
0x6564367473757268ull,0x766564366c696174ull,0x6164756334656369ull,0x316c696174656436ull,
0x5f65637564657233ull,0x50496d656d735f6eull,0x72696170345f534eull,0x32746e696f703749ull,
0x375345455f365364ull,0x5f786f626234315full,0x6f69746375646572ull,0x506a5f547645456eull,
0x28205f31545f3054ull,0x617261702e09090aull,0x5f203233752e206dull,0x726170616475635full,
0x6874364e5a5f5f6dull,0x7465643674737572ull,0x69766564366c6961ull,0x3661647563346563ull,
0x33316c6961746564ull,0x6e5f656375646572ull,0x4e50496d656d735full,0x4972696170345f53ull,
0x6432746e696f7037ull,0x5f375345455f3653ull,0x725f786f62623431ull,0x6e6f697463756465ull,
0x54506a5f54764545ull,0x6e695f5f31545f30ull,0x2e09090a2c747570ull,0x752e206d61726170ull,
0x6475635f5f203233ull,0x5a5f5f6d72617061ull,0x747375726874364eull,0x366c696174656436ull,
0x6334656369766564ull,0x6174656436616475ull,0x7564657233316c69ull,0x656d735f6e5f6563ull,
0x70345f534e50496dull,0x696f703749726961ull,0x455f36536432746eull,0x626234315f375345ull,
0x63756465725f786full,0x547645456e6f6974ull,0x31545f3054506a5full,0x2e09090a2c6e5f5full,
0x752e206d61726170ull,0x6475635f5f203233ull,0x5a5f5f6d72617061ull,0x747375726874364eull,
0x366c696174656436ull,0x6334656369766564ull,0x6174656436616475ull,0x7564657233316c69ull,
0x656d735f6e5f6563ull,0x70345f534e50496dull,0x696f703749726961ull,0x455f36536432746eull,
0x626234315f375345ull,0x63756465725f786full,0x547645456e6f6974ull,0x31545f3054506a5full,
0x5f6b636f6c625f5full,0x2c73746c75736572ull,0x617261702e09090aull,0x6e67696c612e206dull,
0x5f2038622e203120ull,0x726170616475635full,0x6874364e5a5f5f6dull,0x7465643674737572ull,
0x69766564366c6961ull,0x3661647563346563ull,0x33316c6961746564ull,0x6e5f656375646572ull,
0x4e50496d656d735full,0x4972696170345f53ull,0x6432746e696f7037ull,0x5f375345455f3653ull,
0x725f786f62623431ull,0x6e6f697463756465ull,0x54506a5f54764545ull,0x69625f5f31545f30ull,
0x5b706f5f7972616eull,0x090a7b090a295d31ull,0x33752e206765722eull,0x3431313c72252032ull,
0x6765722e090a3b3eull,0x6625203233662e20ull,0x090a3b3e3833313cull,0x72702e206765722eull,
0x36323c7025206465ull,0x636f6c2e090a3b3eull,0x0937313109343309ull,0x5f3142424c240a30ull,
0x75726874364e5a5full,0x6961746564367473ull,0x656369766564366cull,0x6564366164756334ull,
0x657233316c696174ull,0x735f6e5f65637564ull,0x5f534e50496d656dull,0x7037497269617034ull,
0x36536432746e696full,0x34315f375345455full,0x6465725f786f6262ull,0x45456e6f69746375ull,
0x5f3054506a5f5476ull,0x6c2e090a3a5f3154ull,0x333709343309636full,0x2e747663090a3009ull,
0x203631752e323375ull,0x6e25202c31722509ull,0x090a3b782e646974ull,0x2e3233752e747663ull,
0x3272250920363175ull,0x646961746325202cull,0x6c756d090a3b782eull,0x203233752e6f6c2eull,
0x7225202c33722509ull,0x0a3b327225202c31ull,0x3233752e74766309ull,0x722509203631752eull,
0x2e64697425202c34ull,0x2e646461090a3b78ull,0x3572250920323375ull,0x25202c337225202cull,
0x766f6d090a3b3472ull,0x722509203233732eull,0x0a3b357225202c36ull,0x343309636f6c2e09ull,
0x6c090a3009363709ull,0x2e6d617261702e64ull,0x3772250920323375ull,0x6475635f5f5b202cull,
0x5a5f5f6d72617061ull,0x747375726874364eull,0x366c696174656436ull,0x6334656369766564ull,
0x6174656436616475ull,0x7564657233316c69ull,0x656d735f6e5f6563ull,0x70345f534e50496dull,
0x696f703749726961ull,0x455f36536432746eull,0x626234315f375345ull,0x63756465725f786full,
0x547645456e6f6974ull,0x31545f3054506a5full,0x5d7475706e695f5full,0x6c2e6c756d090a3bull,
0x2509203233752e6full,0x2c357225202c3872ull,0x6461090a3b363120ull,0x2509203233752e64ull,
0x2c377225202c3972ull,0x6c090a3b38722520ull,0x2e6d617261702e64ull,0x3172250920323375ull,
0x75635f5f5b202c30ull,0x5f5f6d7261706164ull,0x7375726874364e5aull,0x6c69617465643674ull,
0x3465636976656436ull,0x7465643661647563ull,0x64657233316c6961ull,0x6d735f6e5f656375ull,
0x345f534e50496d65ull,0x6f70374972696170ull,0x5f36536432746e69ull,0x6234315f37534545ull,
0x756465725f786f62ull,0x7645456e6f697463ull,0x545f3054506a5f54ull,0x090a3b5d6e5f5f31ull,
0x2e65672e70746573ull,0x3170250920323375ull,0x25202c357225202cull,0x2540090a3b303172ull,
0x0920617262203170ull,0x30325f355f744c24ull,0x6c2e090a3b343939ull,0x343809343309636full,
0x672e646c090a3009ull,0x33662e6c61626f6cull,0x202c316625092032ull,0x3b5d302b3972255bull,
0x6f6c672e646c090aull,0x203233662e6c6162ull,0x255b202c32662509ull,0x090a3b5d342b3972ull,
0x61626f6c672e646cull,0x2509203233662e6cull,0x3972255b202c3366ull,0x646c090a3b5d382bull,
0x2e6c61626f6c672eull,0x3466250920323366ull,0x312b3972255b202cull,0x6f6c2e090a3b5d32ull,
0x0935380934330963ull,0x752e747663090a30ull,0x09203631752e3233ull,0x6e25202c31317225ull,
0x3b782e6469617463ull,0x6f6c2e6c756d090aull,0x722509203233752eull,0x31317225202c3231ull,
0x090a3b317225202cull,0x203233752e646461ull,0x7225202c36722509ull,0x3b357225202c3231ull,
0x3309636f6c2e090aull,0x090a300936380934ull,0x752e6f6c2e6c756dull,0x3331722509203233ull,
0x202c32317225202cull,0x646461090a3b3631ull,0x722509203233752eull,0x202c397225202c39ull,
0x62090a3b33317225ull,0x0920696e752e6172ull,0x30325f355f744c24ull,0x744c240a3b383337ull,
0x34393930325f355full,0x662e766f6d090a3aull,0x2c34662509203233ull,0x6d090a3b35662520ull,
0x09203233662e766full,0x366625202c336625ull,0x662e766f6d090a3bull,0x2c32662509203233ull,
0x6d090a3b37662520ull,0x09203233662e766full,0x386625202c316625ull,0x5f355f744c240a3bull,
0x090a3a3833373032ull,0x09343309636f6c2eull,0x646c090a30093637ull,0x752e6d617261702eull,
0x3031722509203233ull,0x6475635f5f5b202cull,0x5a5f5f6d72617061ull,0x747375726874364eull,
0x366c696174656436ull,0x6334656369766564ull,0x6174656436616475ull,0x7564657233316c69ull,
0x656d735f6e5f6563ull,0x70345f534e50496dull,0x696f703749726961ull,0x455f36536432746eull,
0x626234315f375345ull,0x63756465725f786full,0x547645456e6f6974ull,0x31545f3054506a5full,
0x2e090a3b5d6e5f5full,0x3809343309636f6cull,0x746573090a300936ull,0x3233752e65672e70ull,
0x25202c3270250920ull,0x30317225202c3672ull,0x2032702540090a3bull,0x744c240920617262ull,
0x30353231325f355full,0x752e747663090a3bull,0x09203631752e3233ull,0x6e25202c34317225ull,
0x3b782e6469617463ull,0x6f6c2e6c756d090aull,0x722509203233752eull,0x34317225202c3231ull,
0x240a3b317225202cull,0x3731325f355f744cull,0x3c2f2f200a3a3236ull,0x6f4c203e706f6f6cull,
0x2079646f6220706full,0x2c363820656e696cull,0x676e697473656e20ull,0x203a687470656420ull,
0x6d69747365202c31ull,0x6574692064657461ull,0x3a736e6f69746172ull,0x6e776f6e6b6e7520ull,
0x3309636f6c2e090aull,0x090a300933390934ull,0x61626f6c672e646cull,0x2509203233662e6cull,
0x3972255b202c3966ull,0x696d090a3b5d302bull,0x2509203233662e6eull,0x2c396625202c3166ull,
0x6c090a3b31662520ull,0x6c61626f6c672e64ull,0x662509203233662eull,0x3972255b202c3031ull,
0x696d090a3b5d342bull,0x2509203233662e6eull,0x30316625202c3266ull,0x090a3b326625202cull,
0x61626f6c672e646cull,0x2509203233662e6cull,0x72255b202c313166ull,0x6d090a3b5d382b39ull,
0x09203233662e7861ull,0x316625202c336625ull,0x0a3b336625202c31ull,0x626f6c672e646c09ull,
0x09203233662e6c61ull,0x255b202c32316625ull,0x0a3b5d32312b3972ull,0x3233662e78616d09ull,
0x25202c3466250920ull,0x346625202c323166ull,0x09636f6c2e090a3bull,0x0a30093439093433ull,
0x3233752e64646109ull,0x25202c3672250920ull,0x367225202c323172ull,0x09636f6c2e090a3bull,
0x0a30093539093433ull,0x2e6f6c2e6c756d09ull,0x3172250920323375ull,0x2c32317225202c35ull,
0x6461090a3b363120ull,0x2509203233752e64ull,0x2c397225202c3972ull,0x090a3b3531722520ull,
0x09343309636f6c2eull,0x646c090a30093637ull,0x752e6d617261702eull,0x3031722509203233ull,
0x6475635f5f5b202cull,0x5a5f5f6d72617061ull,0x747375726874364eull,0x366c696174656436ull,
0x6334656369766564ull,0x6174656436616475ull,0x7564657233316c69ull,0x656d735f6e5f6563ull,
0x70345f534e50496dull,0x696f703749726961ull,0x455f36536432746eull,0x626234315f375345ull,
0x63756465725f786full,0x547645456e6f6974ull,0x31545f3054506a5full,0x2e090a3b5d6e5f5full,
0x3909343309636f6cull,0x746573090a300935ull,0x3233752e746c2e70ull,0x25202c3370250920ull,
0x30317225202c3672ull,0x2033702540090a3bull,0x744c240920617262ull,0x32363731325f355full,
0x5f355f744c240a3bull,0x090a3a3035323132ull,0x09343309636f6c2eull,0x756d090a30093939ull,
0x752e6f6c2e34326cull,0x3631722509203233ull,0x31202c347225202cull,0x2e766f6d090a3b36ull,
0x3172250920323375ull,0x74364e5a5f202c37ull,0x6564367473757268ull,0x766564366c696174ull,
0x6164756334656369ull,0x0a3b456d656d7334ull,0x3233752e64646109ull,0x202c383172250920ull,
0x7225202c36317225ull,0x2e7473090a3b3731ull,0x662e646572616873ull,0x3172255b09203233ull,
0x6625202c5d302b38ull,0x732e7473090a3b31ull,0x33662e6465726168ull,0x383172255b092032ull,
0x326625202c5d342bull,0x68732e7473090a3bull,0x3233662e64657261ull,0x2b383172255b0920ull,
0x3b336625202c5d38ull,0x6168732e7473090aull,0x203233662e646572ull,0x312b383172255b09ull,
0x3b346625202c5d32ull,0x79732e726162090aull,0x090a3b300920636eull,0x09343309636f6c2eull,
0x646c090a30093637ull,0x752e6d617261702eull,0x3031722509203233ull,0x6475635f5f5b202cull,
0x5a5f5f6d72617061ull,0x747375726874364eull,0x366c696174656436ull,0x6334656369766564ull,
0x6174656436616475ull,0x7564657233316c69ull,0x656d735f6e5f6563ull,0x70345f534e50496dull,
0x696f703749726961ull,0x455f36536432746eull,0x626234315f375345ull,0x63756465725f786full,
0x547645456e6f6974ull,0x31545f3054506a5full,0x2e090a3b5d6e5f5full,0x3109343309636f6cull,
0x7573090a30093230ull,0x2509203233752e62ull,0x317225202c393172ull,0x0a3b337225202c30ull,
0x3233752e6e696d09ull,0x202c303272250920ull,0x7225202c39317225ull,0x2e766f6d090a3b31ull,
0x3272250920323375ull,0x0a3b323135202c31ull,0x656c2e7074657309ull,0x702509203233752eull,
0x2c30327225202c34ull,0x090a3b3132722520ull,0x6172622034702540ull,0x5f355f744c240920ull,
0x090a3b3437323232ull,0x203233752e646461ull,0x25202c3232722509ull,0x3b323135202c3472ull,
0x74672e746573090aull,0x3233752e3233752eull,0x202c333272250920ull,0x7225202c30327225ull,
0x67656e090a3b3232ull,0x722509203233732eull,0x33327225202c3432ull,0x752e766f6d090a3bull,
0x3532722509203233ull,0x090a3b313135202cull,0x752e656c2e746573ull,0x09203233752e3233ull,
0x7225202c36327225ull,0x3b35327225202c34ull,0x33732e67656e090aull,0x2c37327225092032ull,
0x090a3b3632722520ull,0x203233622e646e61ull,0x25202c3832722509ull,0x327225202c343272ull,
0x2e766f6d090a3b37ull,0x3272250920323375ull,0x73090a3b30202c39ull,0x732e71652e707465ull,
0x2c35702509203233ull,0x25202c3832722520ull,0x2540090a3b393272ull,0x0920617262203570ull,
0x32325f355f744c24ull,0x6c2e090a3b363837ull,0x313509363309636full,0x732e646c090a3009ull,
0x33662e6465726168ull,0x2c33316625092032ull,0x342b383172255b20ull,0x732e646c090a3b5dull,
0x33662e6465726168ull,0x2c34316625092032ull,0x382b383172255b20ull,0x732e646c090a3b5dull,
0x33662e6465726168ull,0x2c35316625092032ull,0x312b383172255b20ull,0x2e646c090a3b5d32ull,
0x662e646572616873ull,0x3631662509203233ull,0x2b383172255b202cull,0x090a3b5d36393138ull,
0x65726168732e646cull,0x2509203233662e64ull,0x72255b202c373166ull,0x5d303032382b3831ull,
0x68732e646c090a3bull,0x3233662e64657261ull,0x202c383166250920ull,0x32382b383172255bull,
0x646c090a3b5d3430ull,0x2e6465726168732eull,0x3166250920323366ull,0x383172255b202c39ull,
0x646c090a3b5d302bull,0x2e6465726168732eull,0x3266250920323366ull,0x383172255b202c30ull,
0x0a3b5d323931382bull,0x3233662e6e696d09ull,0x202c313266250920ull,0x6625202c39316625ull,
0x2e7473090a3b3032ull,0x662e646572616873ull,0x3172255b09203233ull,0x6625202c5d302b38ull,
0x6e696d090a3b3132ull,0x662509203233662eull,0x33316625202c3232ull,0x0a3b36316625202cull,
0x726168732e747309ull,0x09203233662e6465ull,0x5d342b383172255bull,0x0a3b32326625202cull,
0x3233662e78616d09ull,0x202c333266250920ull,0x6625202c34316625ull,0x2e7473090a3b3731ull,
0x662e646572616873ull,0x3172255b09203233ull,0x6625202c5d382b38ull,0x78616d090a3b3332ull,
0x662509203233662eull,0x35316625202c3432ull,0x0a3b38316625202cull,0x726168732e747309ull,
0x09203233662e6465ull,0x32312b383172255bull,0x3b34326625202c5dull,0x325f355f744c240aull,
0x62090a3a36383732ull,0x20636e79732e7261ull,0x5f744c240a3b3009ull,0x3a34373232325f35ull,
0x33752e766f6d090aull,0x2c30337225092032ull,0x73090a3b36353220ull,0x752e656c2e707465ull,
0x2c36702509203233ull,0x25202c3032722520ull,0x2540090a3b303372ull,0x0920617262203670ull,
0x33325f355f744c24ull,0x6461090a3b383932ull,0x2509203233752e64ull,0x347225202c313372ull,
0x090a3b363532202cull,0x752e74672e746573ull,0x09203233752e3233ull,0x7225202c32337225ull,
0x31337225202c3032ull,0x732e67656e090a3bull,0x3333722509203233ull,0x0a3b32337225202cull,
0x3233752e766f6d09ull,0x202c343372250920ull,0x6573090a3b353532ull,0x3233752e656c2e74ull,
0x722509203233752eull,0x2c347225202c3533ull,0x090a3b3433722520ull,0x203233732e67656eull,
0x25202c3633722509ull,0x6e61090a3b353372ull,0x2509203233622e64ull,0x337225202c373372ull,
0x3b36337225202c33ull,0x33752e766f6d090aull,0x2c38337225092032ull,0x746573090a3b3020ull,
0x3233732e71652e70ull,0x25202c3770250920ull,0x337225202c373372ull,0x37702540090a3b38ull,
0x4c24092061726220ull,0x313833325f355f74ull,0x636f6c2e090a3b30ull,0x3009323509363309ull,
0x6168732e646c090aull,0x203233662e646572ull,0x5b202c3532662509ull,0x3b5d342b38317225ull,
0x6168732e646c090aull,0x203233662e646572ull,0x5b202c3632662509ull,0x3b5d382b38317225ull,
0x6168732e646c090aull,0x203233662e646572ull,0x5b202c3732662509ull,0x5d32312b38317225ull,
0x68732e646c090a3bull,0x3233662e64657261ull,0x202c383266250920ull,0x31342b383172255bull,
0x646c090a3b5d3030ull,0x2e6465726168732eull,0x3266250920323366ull,0x383172255b202c39ull,
0x0a3b5d343031342bull,0x726168732e646c09ull,0x09203233662e6465ull,0x255b202c30336625ull,
0x383031342b383172ull,0x732e646c090a3b5dull,0x33662e6465726168ull,0x2c31336625092032ull,
0x302b383172255b20ull,0x732e646c090a3b5dull,0x33662e6465726168ull,0x2c32336625092032ull,
0x342b383172255b20ull,0x6d090a3b5d363930ull,0x09203233662e6e69ull,0x6625202c33336625ull,
0x32336625202c3133ull,0x68732e7473090a3bull,0x3233662e64657261ull,0x2b383172255b0920ull,
0x33336625202c5d30ull,0x662e6e696d090a3bull,0x3433662509203233ull,0x202c35326625202cull,
0x73090a3b38326625ull,0x6465726168732e74ull,0x255b09203233662eull,0x202c5d342b383172ull,
0x6d090a3b34336625ull,0x09203233662e7861ull,0x6625202c35336625ull,0x39326625202c3632ull,
0x68732e7473090a3bull,0x3233662e64657261ull,0x2b383172255b0920ull,0x35336625202c5d38ull,
0x662e78616d090a3bull,0x3633662509203233ull,0x202c37326625202cull,0x73090a3b30336625ull,
0x6465726168732e74ull,0x255b09203233662eull,0x2c5d32312b383172ull,0x240a3b3633662520ull,
0x3833325f355f744cull,0x726162090a3a3031ull,0x300920636e79732eull,0x5f355f744c240a3bull,
0x090a3a3839323332ull,0x203233752e766f6dull,0x31202c3933722509ull,0x746573090a3b3832ull,
0x3233752e656c2e70ull,0x25202c3870250920ull,0x337225202c303272ull,0x38702540090a3b39ull,
0x4c24092061726220ull,0x323334325f355f74ull,0x2e646461090a3b32ull,0x3472250920323375ull,
0x202c347225202c30ull,0x6573090a3b383231ull,0x3233752e74672e74ull,0x722509203233752eull,
0x30327225202c3134ull,0x0a3b30347225202cull,0x3233732e67656e09ull,0x202c323472250920ull,
0x6d090a3b31347225ull,0x09203233752e766full,0x3231202c33347225ull,0x2e746573090a3b37ull,
0x752e3233752e656cull,0x3434722509203233ull,0x25202c347225202cull,0x656e090a3b333472ull,
0x2509203233732e67ull,0x347225202c353472ull,0x2e646e61090a3b34ull,0x3472250920323362ull,
0x2c32347225202c36ull,0x090a3b3534722520ull,0x203233752e766f6dull,0x30202c3734722509ull,
0x2e70746573090a3bull,0x09203233732e7165ull,0x347225202c397025ull,0x3b37347225202c36ull,
0x622039702540090aull,0x5f744c2409206172ull,0x3b34333834325f35ull,0x3309636f6c2e090aull,
0x090a300933350936ull,0x65726168732e646cull,0x2509203233662e64ull,0x72255b202c373366ull,
0x090a3b5d342b3831ull,0x65726168732e646cull,0x2509203233662e64ull,0x72255b202c383366ull,
0x090a3b5d382b3831ull,0x65726168732e646cull,0x2509203233662e64ull,0x72255b202c393366ull,
0x0a3b5d32312b3831ull,0x726168732e646c09ull,0x09203233662e6465ull,0x255b202c30346625ull,
0x323530322b383172ull,0x732e646c090a3b5dull,0x33662e6465726168ull,0x2c31346625092032ull,
0x322b383172255b20ull,0x6c090a3b5d363530ull,0x6465726168732e64ull,0x662509203233662eull,
0x3172255b202c3234ull,0x3b5d303630322b38ull,0x6168732e646c090aull,0x203233662e646572ull,
0x5b202c3334662509ull,0x3b5d302b38317225ull,0x6168732e646c090aull,0x203233662e646572ull,
0x5b202c3434662509ull,0x3430322b38317225ull,0x6e696d090a3b5d38ull,0x662509203233662eull,
0x33346625202c3534ull,0x0a3b34346625202cull,0x726168732e747309ull,0x09203233662e6465ull,
0x5d302b383172255bull,0x0a3b35346625202cull,0x3233662e6e696d09ull,0x202c363466250920ull,
0x6625202c37336625ull,0x2e7473090a3b3034ull,0x662e646572616873ull,0x3172255b09203233ull,
0x6625202c5d342b38ull,0x78616d090a3b3634ull,0x662509203233662eull,0x38336625202c3734ull,
0x0a3b31346625202cull,0x726168732e747309ull,0x09203233662e6465ull,0x5d382b383172255bull,
0x0a3b37346625202cull,0x3233662e78616d09ull,0x202c383466250920ull,0x6625202c39336625ull,
0x2e7473090a3b3234ull,0x662e646572616873ull,0x3172255b09203233ull,0x25202c5d32312b38ull,
0x744c240a3b383466ull,0x34333834325f355full,0x732e726162090a3aull,0x0a3b300920636e79ull,
0x34325f355f744c24ull,0x6f6d090a3a323233ull,0x2509203233752e76ull,0x3b3436202c383472ull,
0x6c2e70746573090aull,0x2509203233752e65ull,0x327225202c303170ull,0x3b38347225202c30ull,
0x203031702540090aull,0x744c240920617262ull,0x36343335325f355full,0x752e646461090a3bull,
0x3934722509203233ull,0x36202c347225202cull,0x2e746573090a3b34ull,0x752e3233752e7467ull,
0x3035722509203233ull,0x202c30327225202cull,0x6e090a3b39347225ull,0x09203233732e6765ull,
0x7225202c31357225ull,0x766f6d090a3b3035ull,0x722509203233752eull,0x0a3b3336202c3235ull,
0x2e656c2e74657309ull,0x203233752e323375ull,0x25202c3335722509ull,0x32357225202c3472ull,
0x732e67656e090a3bull,0x3435722509203233ull,0x0a3b33357225202cull,0x3233622e646e6109ull,
0x202c353572250920ull,0x7225202c31357225ull,0x766f6d090a3b3435ull,0x722509203233752eull,
0x090a3b30202c3635ull,0x2e71652e70746573ull,0x3170250920323373ull,0x2c35357225202c31ull,
0x090a3b3635722520ull,0x7262203131702540ull,0x355f744c24092061ull,0x0a3b38353835325full,
0x363309636f6c2e09ull,0x6c090a3009343509ull,0x6465726168732e64ull,0x662509203233662eull,
0x3172255b202c3934ull,0x6c090a3b5d342b38ull,0x6465726168732e64ull,0x662509203233662eull,
0x3172255b202c3035ull,0x6c090a3b5d382b38ull,0x6465726168732e64ull,0x662509203233662eull,
0x3172255b202c3135ull,0x090a3b5d32312b38ull,0x65726168732e646cull,0x2509203233662e64ull,
0x72255b202c323566ull,0x5d383230312b3831ull,0x68732e646c090a3bull,0x3233662e64657261ull,
0x202c333566250920ull,0x30312b383172255bull,0x646c090a3b5d3233ull,0x2e6465726168732eull,
0x3566250920323366ull,0x383172255b202c34ull,0x0a3b5d363330312bull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c35356625ull,0x0a3b5d302b383172ull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c36356625ull,0x343230312b383172ull,0x2e6e696d090a3b5dull,
0x3566250920323366ull,0x2c35356625202c37ull,0x090a3b3635662520ull,0x65726168732e7473ull,
0x5b09203233662e64ull,0x2c5d302b38317225ull,0x090a3b3735662520ull,0x203233662e6e696dull,
0x25202c3835662509ull,0x356625202c393466ull,0x732e7473090a3b32ull,0x33662e6465726168ull,
0x383172255b092032ull,0x356625202c5d342bull,0x2e78616d090a3b38ull,0x3566250920323366ull,
0x2c30356625202c39ull,0x090a3b3335662520ull,0x65726168732e7473ull,0x5b09203233662e64ull,
0x2c5d382b38317225ull,0x090a3b3935662520ull,0x203233662e78616dull,0x25202c3036662509ull,
0x356625202c313566ull,0x732e7473090a3b34ull,0x33662e6465726168ull,0x383172255b092032ull,
0x6625202c5d32312bull,0x5f744c240a3b3036ull,0x3a38353835325f35ull,0x79732e726162090aull,
0x240a3b300920636eull,0x3335325f355f744cull,0x766f6d090a3a3634ull,0x722509203233752eull,
0x0a3b3233202c3735ull,0x656c2e7074657309ull,0x702509203233752eull,0x30327225202c3231ull,
0x0a3b37357225202cull,0x6220323170254009ull,0x5f744c2409206172ull,0x3b30373336325f35ull,
0x33752e646461090aull,0x2c38357225092032ull,0x3233202c34722520ull,0x672e746573090a3bull,
0x33752e3233752e74ull,0x2c39357225092032ull,0x25202c3032722520ull,0x656e090a3b383572ull,
0x2509203233732e67ull,0x357225202c303672ull,0x2e766f6d090a3b39ull,0x3672250920323375ull,
0x090a3b3133202c31ull,0x752e656c2e746573ull,0x09203233752e3233ull,0x7225202c32367225ull,
0x3b31367225202c34ull,0x33732e67656e090aull,0x2c33367225092032ull,0x090a3b3236722520ull,
0x203233622e646e61ull,0x25202c3436722509ull,0x367225202c303672ull,0x2e766f6d090a3b33ull,
0x3672250920323375ull,0x73090a3b30202c35ull,0x732e71652e707465ull,0x3331702509203233ull,
0x202c34367225202cull,0x40090a3b35367225ull,0x6172622033317025ull,0x5f355f744c240920ull,
0x090a3b3238383632ull,0x09363309636f6c2eull,0x646c090a30093535ull,0x2e6465726168732eull,
0x3666250920323366ull,0x383172255b202c31ull,0x646c090a3b5d342bull,0x2e6465726168732eull,
0x3666250920323366ull,0x383172255b202c32ull,0x646c090a3b5d382bull,0x2e6465726168732eull,
0x3666250920323366ull,0x383172255b202c33ull,0x6c090a3b5d32312bull,0x6465726168732e64ull,
0x662509203233662eull,0x3172255b202c3436ull,0x0a3b5d3631352b38ull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c35366625ull,0x5d3032352b383172ull,0x68732e646c090a3bull,
0x3233662e64657261ull,0x202c363666250920ull,0x32352b383172255bull,0x2e646c090a3b5d34ull,
0x662e646572616873ull,0x3736662509203233ull,0x2b383172255b202cull,0x2e646c090a3b5d30ull,
0x662e646572616873ull,0x3836662509203233ull,0x2b383172255b202cull,0x6d090a3b5d323135ull,
0x09203233662e6e69ull,0x6625202c39366625ull,0x38366625202c3736ull,0x68732e7473090a3bull,
0x3233662e64657261ull,0x2b383172255b0920ull,0x39366625202c5d30ull,0x662e6e696d090a3bull,
0x3037662509203233ull,0x202c31366625202cull,0x73090a3b34366625ull,0x6465726168732e74ull,
0x255b09203233662eull,0x202c5d342b383172ull,0x6d090a3b30376625ull,0x09203233662e7861ull,
0x6625202c31376625ull,0x35366625202c3236ull,0x68732e7473090a3bull,0x3233662e64657261ull,
0x2b383172255b0920ull,0x31376625202c5d38ull,0x662e78616d090a3bull,0x3237662509203233ull,
0x202c33366625202cull,0x73090a3b36366625ull,0x6465726168732e74ull,0x255b09203233662eull,
0x2c5d32312b383172ull,0x240a3b3237662520ull,0x3836325f355f744cull,0x726162090a3a3238ull,
0x300920636e79732eull,0x5f355f744c240a3bull,0x090a3a3037333632ull,0x203233752e766f6dull,
0x31202c3636722509ull,0x70746573090a3b36ull,0x203233752e656c2eull,0x25202c3431702509ull,
0x367225202c303272ull,0x31702540090a3b36ull,0x2409206172622034ull,0x3337325f355f744cull,
0x646461090a3b3439ull,0x722509203233752eull,0x2c347225202c3736ull,0x6573090a3b363120ull,
0x3233752e74672e74ull,0x722509203233752eull,0x30327225202c3836ull,0x0a3b37367225202cull,
0x3233732e67656e09ull,0x202c393672250920ull,0x6d090a3b38367225ull,0x09203233752e766full,
0x3531202c30377225ull,0x6c2e746573090a3bull,0x33752e3233752e65ull,0x2c31377225092032ull,
0x7225202c34722520ull,0x67656e090a3b3037ull,0x722509203233732eull,0x31377225202c3237ull,
0x622e646e61090a3bull,0x3337722509203233ull,0x202c39367225202cull,0x6d090a3b32377225ull,
0x09203233752e766full,0x3b30202c34377225ull,0x652e70746573090aull,0x2509203233732e71ull,
0x377225202c353170ull,0x3b34377225202c33ull,0x203531702540090aull,0x744c240920617262ull,
0x36303937325f355full,0x09636f6c2e090a3bull,0x0a30093635093633ull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c33376625ull,0x0a3b5d342b383172ull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c34376625ull,0x0a3b5d382b383172ull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c35376625ull,0x3b5d32312b383172ull,0x6168732e646c090aull,
0x203233662e646572ull,0x5b202c3637662509ull,0x3036322b38317225ull,0x732e646c090a3b5dull,
0x33662e6465726168ull,0x2c37376625092032ull,0x322b383172255b20ull,0x646c090a3b5d3436ull,
0x2e6465726168732eull,0x3766250920323366ull,0x383172255b202c38ull,0x090a3b5d3836322bull,
0x65726168732e646cull,0x2509203233662e64ull,0x72255b202c393766ull,0x090a3b5d302b3831ull,
0x65726168732e646cull,0x2509203233662e64ull,0x72255b202c303866ull,0x3b5d3635322b3831ull,
0x33662e6e696d090aull,0x2c31386625092032ull,0x25202c3937662520ull,0x7473090a3b303866ull,
0x2e6465726168732eull,0x72255b0920323366ull,0x25202c5d302b3831ull,0x696d090a3b313866ull,
0x2509203233662e6eull,0x376625202c323866ull,0x3b36376625202c33ull,0x6168732e7473090aull,
0x203233662e646572ull,0x342b383172255b09ull,0x3b32386625202c5dull,0x33662e78616d090aull,
0x2c33386625092032ull,0x25202c3437662520ull,0x7473090a3b373766ull,0x2e6465726168732eull,
0x72255b0920323366ull,0x25202c5d382b3831ull,0x616d090a3b333866ull,0x2509203233662e78ull,
0x376625202c343866ull,0x3b38376625202c35ull,0x6168732e7473090aull,0x203233662e646572ull,
0x312b383172255b09ull,0x34386625202c5d32ull,0x5f355f744c240a3bull,0x090a3a3630393732ull,
0x636e79732e726162ull,0x744c240a3b300920ull,0x34393337325f355full,0x752e766f6d090a3aull,
0x3537722509203233ull,0x6573090a3b38202cull,0x33752e656c2e7074ull,0x2c36317025092032ull,
0x25202c3032722520ull,0x2540090a3b353772ull,0x2061726220363170ull,0x325f355f744c2409ull,
0x61090a3b38313438ull,0x09203233752e6464ull,0x7225202c36377225ull,0x73090a3b38202c34ull,
0x33752e74672e7465ull,0x2509203233752e32ull,0x327225202c373772ull,0x3b36377225202c30ull,
0x33732e67656e090aull,0x2c38377225092032ull,0x090a3b3737722520ull,0x203233752e766f6dull,
0x37202c3937722509ull,0x6c2e746573090a3bull,0x33752e3233752e65ull,0x2c30387225092032ull,
0x7225202c34722520ull,0x67656e090a3b3937ull,0x722509203233732eull,0x30387225202c3138ull,
0x622e646e61090a3bull,0x3238722509203233ull,0x202c38377225202cull,0x6d090a3b31387225ull,
0x09203233752e766full,0x3b30202c33387225ull,0x652e70746573090aull,0x2509203233732e71ull,
0x387225202c373170ull,0x3b33387225202c32ull,0x203731702540090aull,0x744c240920617262ull,
0x30333938325f355full,0x09636f6c2e090a3bull,0x0a30093735093633ull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c35386625ull,0x0a3b5d342b383172ull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c36386625ull,0x0a3b5d382b383172ull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c37386625ull,0x3b5d32312b383172ull,0x6168732e646c090aull,
0x203233662e646572ull,0x5b202c3838662509ull,0x3233312b38317225ull,0x732e646c090a3b5dull,
0x33662e6465726168ull,0x2c39386625092032ull,0x312b383172255b20ull,0x646c090a3b5d3633ull,
0x2e6465726168732eull,0x3966250920323366ull,0x383172255b202c30ull,0x090a3b5d3034312bull,
0x65726168732e646cull,0x2509203233662e64ull,0x72255b202c313966ull,0x090a3b5d302b3831ull,
0x65726168732e646cull,0x2509203233662e64ull,0x72255b202c323966ull,0x3b5d3832312b3831ull,
0x33662e6e696d090aull,0x2c33396625092032ull,0x25202c3139662520ull,0x7473090a3b323966ull,
0x2e6465726168732eull,0x72255b0920323366ull,0x25202c5d302b3831ull,0x696d090a3b333966ull,
0x2509203233662e6eull,0x386625202c343966ull,0x3b38386625202c35ull,0x6168732e7473090aull,
0x203233662e646572ull,0x342b383172255b09ull,0x3b34396625202c5dull,0x33662e78616d090aull,
0x2c35396625092032ull,0x25202c3638662520ull,0x7473090a3b393866ull,0x2e6465726168732eull,
0x72255b0920323366ull,0x25202c5d382b3831ull,0x616d090a3b353966ull,0x2509203233662e78ull,
0x386625202c363966ull,0x3b30396625202c37ull,0x6168732e7473090aull,0x203233662e646572ull,
0x312b383172255b09ull,0x36396625202c5d32ull,0x5f355f744c240a3bull,0x090a3a3033393832ull,
0x636e79732e726162ull,0x744c240a3b300920ull,0x38313438325f355full,0x752e766f6d090a3aull,
0x3438722509203233ull,0x6573090a3b34202cull,0x33752e656c2e7074ull,0x2c38317025092032ull,
0x25202c3032722520ull,0x2540090a3b343872ull,0x2061726220383170ull,0x325f355f744c2409ull,
0x61090a3b32343439ull,0x09203233752e6464ull,0x7225202c35387225ull,0x73090a3b34202c34ull,
0x33752e74672e7465ull,0x2509203233752e32ull,0x327225202c363872ull,0x3b35387225202c30ull,
0x33732e67656e090aull,0x2c37387225092032ull,0x090a3b3638722520ull,0x203233752e766f6dull,
0x33202c3838722509ull,0x6c2e746573090a3bull,0x33752e3233752e65ull,0x2c39387225092032ull,
0x7225202c34722520ull,0x67656e090a3b3838ull,0x722509203233732eull,0x39387225202c3039ull,
0x622e646e61090a3bull,0x3139722509203233ull,0x202c37387225202cull,0x6d090a3b30397225ull,
0x09203233752e766full,0x3b30202c32397225ull,0x652e70746573090aull,0x2509203233732e71ull,
0x397225202c393170ull,0x3b32397225202c31ull,0x203931702540090aull,0x744c240920617262ull,
0x34353939325f355full,0x09636f6c2e090a3bull,0x0a30093835093633ull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c37396625ull,0x0a3b5d342b383172ull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c38396625ull,0x0a3b5d382b383172ull,0x726168732e646c09ull,
0x09203233662e6465ull,0x255b202c39396625ull,0x3b5d32312b383172ull,0x6168732e646c090aull,
0x203233662e646572ull,0x202c303031662509ull,0x38362b383172255bull,0x732e646c090a3b5dull,
0x33662e6465726168ull,0x3130316625092032ull,0x2b383172255b202cull,0x646c090a3b5d3237ull,
0x2e6465726168732eull,0x3166250920323366ull,0x3172255b202c3230ull,0x090a3b5d36372b38ull,
0x65726168732e646cull,0x2509203233662e64ull,0x255b202c33303166ull,0x0a3b5d302b383172ull,
0x726168732e646c09ull,0x09203233662e6465ull,0x5b202c3430316625ull,0x5d34362b38317225ull,
0x662e6e696d090a3bull,0x3031662509203233ull,0x3330316625202c35ull,0x3b3430316625202cull,
0x6168732e7473090aull,0x203233662e646572ull,0x302b383172255b09ull,0x3530316625202c5dull,
0x662e6e696d090a3bull,0x3031662509203233ull,0x2c37396625202c36ull,0x0a3b303031662520ull,
0x726168732e747309ull,0x09203233662e6465ull,0x5d342b383172255bull,0x3b3630316625202cull,
0x33662e78616d090aull,0x3730316625092032ull,0x202c38396625202cull,0x090a3b3130316625ull,
0x65726168732e7473ull,0x5b09203233662e64ull,0x2c5d382b38317225ull,0x0a3b373031662520ull,
0x3233662e78616d09ull,0x2c38303166250920ull,0x25202c3939662520ull,0x73090a3b32303166ull,
0x6465726168732e74ull,0x255b09203233662eull,0x2c5d32312b383172ull,0x0a3b383031662520ull,
0x39325f355f744c24ull,0x6162090a3a343539ull,0x0920636e79732e72ull,0x355f744c240a3b30ull,
0x0a3a32343439325full,0x3233752e766f6d09ull,0x202c333972250920ull,0x70746573090a3b32ull,
0x203233752e656c2eull,0x25202c3032702509ull,0x397225202c303272ull,0x32702540090a3b33ull,
0x2409206172622030ull,0x3430335f355f744cull,0x646461090a3b3636ull,0x722509203233752eull,
0x2c347225202c3439ull,0x746573090a3b3220ull,0x2e3233752e74672eull,0x3972250920323375ull,
0x2c30327225202c35ull,0x090a3b3439722520ull,0x203233732e67656eull,0x25202c3639722509ull,
0x6f6d090a3b353972ull,0x2509203233752e76ull,0x0a3b31202c373972ull,0x2e656c2e74657309ull,
0x203233752e323375ull,0x25202c3839722509ull,0x37397225202c3472ull,0x732e67656e090a3bull,
0x3939722509203233ull,0x0a3b38397225202cull,0x3233622e646e6109ull,0x2c30303172250920ull,
0x25202c3639722520ull,0x6f6d090a3b393972ull,0x2509203233752e76ull,0x3b30202c31303172ull,
0x652e70746573090aull,0x2509203233732e71ull,0x317225202c313270ull,0x30317225202c3030ull,
0x32702540090a3b31ull,0x2409206172622031ull,0x3930335f355f744cull,0x6f6c2e090a3b3837ull,
0x0939350936330963ull,0x68732e646c090a30ull,0x3233662e64657261ull,0x2c39303166250920ull,
0x342b383172255b20ull,0x732e646c090a3b5dull,0x33662e6465726168ull,0x3031316625092032ull,
0x2b383172255b202cull,0x2e646c090a3b5d38ull,0x662e646572616873ull,0x3131662509203233ull,
0x383172255b202c31ull,0x6c090a3b5d32312bull,0x6465726168732e64ull,0x662509203233662eull,
0x72255b202c323131ull,0x0a3b5d36332b3831ull,0x726168732e646c09ull,0x09203233662e6465ull,
0x5b202c3331316625ull,0x5d30342b38317225ull,0x68732e646c090a3bull,0x3233662e64657261ull,
0x2c34313166250920ull,0x342b383172255b20ull,0x2e646c090a3b5d34ull,0x662e646572616873ull,
0x3131662509203233ull,0x383172255b202c35ull,0x646c090a3b5d302bull,0x2e6465726168732eull,
0x3166250920323366ull,0x3172255b202c3631ull,0x090a3b5d32332b38ull,0x203233662e6e696dull,
0x202c373131662509ull,0x25202c3531316625ull,0x73090a3b36313166ull,0x6465726168732e74ull,
0x255b09203233662eull,0x202c5d302b383172ull,0x090a3b3731316625ull,0x203233662e6e696dull,
0x202c383131662509ull,0x25202c3930316625ull,0x73090a3b32313166ull,0x6465726168732e74ull,
0x255b09203233662eull,0x202c5d342b383172ull,0x090a3b3831316625ull,0x203233662e78616dull,
0x202c393131662509ull,0x25202c3031316625ull,0x73090a3b33313166ull,0x6465726168732e74ull,
0x255b09203233662eull,0x202c5d382b383172ull,0x090a3b3931316625ull,0x203233662e78616dull,
0x202c303231662509ull,0x25202c3131316625ull,0x73090a3b34313166ull,0x6465726168732e74ull,
0x255b09203233662eull,0x2c5d32312b383172ull,0x0a3b303231662520ull,0x30335f355f744c24ull,
0x6162090a3a383739ull,0x0920636e79732e72ull,0x355f744c240a3b30ull,0x0a3a36363430335full,
0x3233752e766f6d09ull,0x2c32303172250920ull,0x746573090a3b3020ull,0x3233752e71652e70ull,
0x202c323270250920ull,0x317225202c347225ull,0x766f6d090a3b3230ull,0x722509203233752eull,
0x0a3b31202c333031ull,0x656c2e7074657309ull,0x702509203233752eull,0x30327225202c3332ull,
0x3b3330317225202cull,0x203332702540090aull,0x744c240920617262ull,0x30393431335f355full,
0x2e706c6573090a3bull,0x3172250920323373ull,0x30202c31202c3430ull,0x0a3b32327025202cull,
0x3233752e64646109ull,0x2c35303172250920ull,0x3b31202c34722520ull,0x74672e746573090aull,
0x3233752e3233752eull,0x2c36303172250920ull,0x25202c3032722520ull,0x6e090a3b35303172ull,
0x09203233732e6765ull,0x25202c3730317225ull,0x61090a3b36303172ull,0x09203233622e646eull,
0x25202c3830317225ull,0x7225202c34303172ull,0x6f6d090a3b373031ull,0x2509203233752e76ull,
0x3b30202c39303172ull,0x652e70746573090aull,0x2509203233732e71ull,0x317225202c343270ull,
0x30317225202c3830ull,0x32702540090a3b39ull,0x2409206172622034ull,0x3032335f355f744cull,
0x6f6c2e090a3b3230ull,0x0930360936330963ull,0x68732e646c090a30ull,0x3233662e64657261ull,
0x2c31323166250920ull,0x342b383172255b20ull,0x732e646c090a3b5dull,0x33662e6465726168ull,
0x3232316625092032ull,0x2b383172255b202cull,0x2e646c090a3b5d38ull,0x662e646572616873ull,
0x3231662509203233ull,0x383172255b202c33ull,0x6c090a3b5d32312bull,0x6465726168732e64ull,
0x662509203233662eull,0x72255b202c343231ull,0x0a3b5d30322b3831ull,0x726168732e646c09ull,
0x09203233662e6465ull,0x5b202c3532316625ull,0x5d34322b38317225ull,0x68732e646c090a3bull,
0x3233662e64657261ull,0x2c36323166250920ull,0x322b383172255b20ull,0x2e646c090a3b5d38ull,
0x662e646572616873ull,0x3231662509203233ull,0x383172255b202c37ull,0x646c090a3b5d302bull,
0x2e6465726168732eull,0x3166250920323366ull,0x3172255b202c3832ull,0x090a3b5d36312b38ull,
0x203233662e6e696dull,0x202c393231662509ull,0x25202c3732316625ull,0x73090a3b38323166ull,
0x6465726168732e74ull,0x255b09203233662eull,0x202c5d302b383172ull,0x090a3b3932316625ull,
0x203233662e6e696dull,0x202c303331662509ull,0x25202c3132316625ull,0x73090a3b34323166ull,
0x6465726168732e74ull,0x255b09203233662eull,0x202c5d342b383172ull,0x090a3b3033316625ull,
0x203233662e78616dull,0x202c313331662509ull,0x25202c3232316625ull,0x73090a3b35323166ull,
0x6465726168732e74ull,0x255b09203233662eull,0x202c5d382b383172ull,0x090a3b3133316625ull,
0x203233662e78616dull,0x202c323331662509ull,0x25202c3332316625ull,0x73090a3b36323166ull,
0x6465726168732e74ull,0x255b09203233662eull,0x2c5d32312b383172ull,0x0a3b323331662520ull,
0x32335f355f744c24ull,0x6162090a3a323030ull,0x0920636e79732e72ull,0x355f744c240a3b30ull,
0x0a3a30393431335full,0x343309636f6c2e09ull,0x090a300932303109ull,0x6220323270252140ull,
0x5f744c2409206172ull,0x3b34313532335f35ull,0x3309636f6c2e090aull,0x0a30093630310934ull,
0x6c2e34326c756d09ull,0x2509203233752e6full,0x7225202c30313172ull,0x090a3b3631202c32ull,
0x6d617261702e646cull,0x722509203233752eull,0x5f5f5b202c313131ull,0x6d72617061647563ull,
0x726874364e5a5f5full,0x6174656436747375ull,0x6369766564366c69ull,0x6436616475633465ull,
0x7233316c69617465ull,0x5f6e5f6563756465ull,0x534e50496d656d73ull,0x374972696170345full,
0x536432746e696f70ull,0x315f375345455f36ull,0x65725f786f626234ull,0x456e6f6974637564ull,
0x3054506a5f547645ull,0x6f6c625f5f31545full,0x6c757365725f6b63ull,0x6461090a3b5d7374ull,
0x2509203233752e64ull,0x7225202c32313172ull,0x317225202c313131ull,0x2e646c090a3b3031ull,
0x662e646572616873ull,0x3331662509203233ull,0x383172255b202c33ull,0x7473090a3b5d302bull,
0x2e6c61626f6c672eull,0x72255b0920323366ull,0x202c5d302b323131ull,0x090a3b3333316625ull,
0x65726168732e646cull,0x2509203233662e64ull,0x255b202c34333166ull,0x0a3b5d342b383172ull,
0x626f6c672e747309ull,0x09203233662e6c61ull,0x342b32313172255bull,0x3433316625202c5dull,
0x68732e646c090a3bull,0x3233662e64657261ull,0x2c35333166250920ull,0x382b383172255b20ull,
0x672e7473090a3b5dull,0x33662e6c61626f6cull,0x313172255b092032ull,0x6625202c5d382b32ull,
0x646c090a3b353331ull,0x2e6465726168732eull,0x3166250920323366ull,0x3172255b202c3633ull,
0x090a3b5d32312b38ull,0x61626f6c672e7473ull,0x5b09203233662e6cull,0x32312b3231317225ull,
0x3633316625202c5dull,0x5f355f744c240a3bull,0x090a3a3431353233ull,0x09343309636f6c2eull,
0x65090a3009333231ull,0x444c240a3b746978ull,0x4e5a5f5f646e6557ull,0x3674737572687436ull,
0x64366c6961746564ull,0x7563346563697665ull,0x6961746564366164ull,0x637564657233316cull,
0x6d656d735f6e5f65ull,0x6170345f534e5049ull,0x6e696f7037497269ull,0x45455f3653643274ull,
0x6f626234315f3753ull,0x7463756465725f78ull,0x5f547645456e6f69ull,0x5f31545f3054506aull,
0x202f2f207d090a3aull,0x75726874364e5a5full,0x6961746564367473ull,0x656369766564366cull,
0x6564366164756334ull,0x657233316c696174ull,0x735f6e5f65637564ull,0x5f534e50496d656dull,
0x7037497269617034ull,0x36536432746e696full,0x34315f375345455full,0x6465725f786f6262ull,
0x45456e6f69746375ull,0x5f3054506a5f5476ull,0x0000000a0a5f3154ull
};


}


static __cudaFatPtxEntry __ptxEntries [] = {{(char*)"compute_10",(char*)__deviceText_$compute_10$},{0,0}};
static __cudaFatCubinEntry __cubinEntries[] = {{0,0}};
static __cudaFatDebugEntry __debugEntries0 = {0, 0, 0, 0} ;
static __cudaFatElfEntry __elfEntries0 = {0, 0, 0, 0} ;
static __cudaFatElfEntry __elfEntries1 = {(char*)"sm_10", (char*)__deviceText_$sm_10$, &__elfEntries0, (unsigned int)sizeof(__deviceText_$sm_10$)};



static __cudaFatCudaBinary __fatDeviceText __attribute__ ((section (".nvFatBinSegment")))= {0x1ee55a01,0x00000004,0x2e00b786,(char*)"bd9884342dd4e649",(char*)"/home/normal/checkout/gpuocelot/tests/cuda2.3/tests/thrust_bounding_box/bounding_box.cu",(char*)" ",__ptxEntries,__cubinEntries,&__debugEntries0,0,0,0,0,0,0x0773eeab,&__elfEntries1};
# 2 "/tmp/tmpxft_00005e37_00000000-1_bounding_box.cudafe1.stub.c" 2
# 1 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 1
# 113 "/usr/local/cuda/bin/../include/crt/host_runtime.h"
# 1 "/usr/local/cuda/bin/../include/host_defines.h" 1
# 114 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 2
# 140 "/usr/local/cuda/bin/../include/crt/host_runtime.h"
extern "C" {


extern void** __cudaRegisterFatBinary(
  void *fatCubin
);

extern void __cudaUnregisterFatBinary(
  void **fatCubinHandle
);

extern void __cudaRegisterVar(
        void **fatCubinHandle,
        char *hostVar,
        char *deviceAddress,
  const char *deviceName,
        int ext,
        int size,
        int constant,
        int global
);

extern void __cudaRegisterTexture(
        void **fatCubinHandle,
  const struct textureReference *hostVar,
  const void **deviceAddress,
  const char *deviceName,
        int dim,
        int norm,
        int ext
);

extern void __cudaRegisterSurface(
        void **fatCubinHandle,
  const struct surfaceReference *hostVar,
  const void **deviceAddress,
  const char *deviceName,
        int dim,
        int ext
);

extern void __cudaRegisterShared(
  void **fatCubinHandle,
  void **devicePtr
);

extern void __cudaRegisterSharedVar(
  void **fatCubinHandle,
  void **devicePtr,
  size_t size,
  size_t alignment,
  int storage
);

extern void __cudaRegisterFunction(
        void **fatCubinHandle,
  const char *hostFun,
        char *deviceFun,
  const char *deviceName,
        int thread_limit,
        uint3 *tid,
        uint3 *bid,
        dim3 *bDim,
        dim3 *gDim,
        int *wSize
);


}




extern int atexit(void(*)(void)) throw();







static void **__cudaFatCubinHandle;

static void __cudaUnregisterBinaryUtil(void)
{
  __cudaUnregisterFatBinary(__cudaFatCubinHandle);
}
# 279 "/usr/local/cuda/bin/../include/crt/host_runtime.h"
# 1 "/usr/local/cuda/bin/../include/common_functions.h" 1
# 68 "/usr/local/cuda/bin/../include/common_functions.h"
# 1 "/usr/local/cuda/bin/../include/crt/func_macro.h" 1 3
# 69 "/usr/local/cuda/bin/../include/common_functions.h" 2

static __attribute__((__unused__)) clock_t __cuda_clock(void)
{
  return clock();
}

static __attribute__((__unused__)) void *__cuda_memset(void *s, int c, size_t n)
{
  char *p = (char*)s;

  while (n--) *p++ = (char)c;

  return s;
}

static __attribute__((__unused__)) void *__cuda_memcpy(void *d, const void *s, size_t n)
{
  char *p = (char*)d;
  const char *r = (const char*)s;

  while (n--) *p++ = *r++;

  return d;
}
# 102 "/usr/local/cuda/bin/../include/common_functions.h"
# 1 "/usr/local/cuda/bin/../include/math_functions.h" 1 3
# 947 "/usr/local/cuda/bin/../include/math_functions.h" 3
int __cuda_error_not_implememted(void);
# 970 "/usr/local/cuda/bin/../include/math_functions.h" 3
static __attribute__((__unused__)) int __cuda_abs(int a)
{
  return abs(a);
}

static __attribute__((__unused__)) float __cuda_fabsf(float a)
{
  return fabsf(a);
}

static __attribute__((__unused__)) long long int __cuda_llabs(long long int a)
{



  return ::llabs(a);

}

static __attribute__((__unused__)) float __cuda_exp2f(float a)
{
  return exp2f(a);
}

# 1 "/usr/local/cuda/bin/../include/device_functions.h" 1 3
# 454 "/usr/local/cuda/bin/../include/device_functions.h" 3
# 1 "/usr/local/cuda/bin/../include/math_constants.h" 1 3
# 455 "/usr/local/cuda/bin/../include/device_functions.h" 2 3
# 2400 "/usr/local/cuda/bin/../include/device_functions.h" 3
# 1 "/usr/local/cuda/bin/../include/common_types.h" 1 3
# 37 "/usr/local/cuda/bin/../include/common_types.h" 3
union __cudart_FloatUintCvt {
    float f;
    unsigned int i;
};

union __cudart_FloatIntCvt {
    float f;
    int i;
};

union __cudart_DoubleUlonglongCvt {
    double d;
    unsigned long long int i;
};

union __cudart_DoubleLonglongCvt {
    double d;
    long long int i;
};

union __cudart_DoubleInthiloCvt {
    double d;
    signed int i[2];
};

struct __cudart_UintUint {
    unsigned int lo;
    unsigned int hi;
};
# 2401 "/usr/local/cuda/bin/../include/device_functions.h" 2 3

static const unsigned char __internal_rcpTab[128] =
{
  0xff, 0xfd, 0xfb, 0xf9, 0xf7, 0xf5, 0xf4, 0xf2,
  0xf0, 0xee, 0xed, 0xeb, 0xe9, 0xe8, 0xe6, 0xe4,
  0xe3, 0xe1, 0xe0, 0xde, 0xdd, 0xdb, 0xda, 0xd8,
  0xd7, 0xd5, 0xd4, 0xd3, 0xd1, 0xd0, 0xcf, 0xcd,
  0xcc, 0xcb, 0xca, 0xc8, 0xc7, 0xc6, 0xc5, 0xc4,
  0xc2, 0xc1, 0xc0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb,
  0xba, 0xb9, 0xb8, 0xb7, 0xb6, 0xb5, 0xb4, 0xb3,
  0xb2, 0xb1, 0xb0, 0xaf, 0xae, 0xad, 0xac, 0xab,
  0xaa, 0xa9, 0xa8, 0xa8, 0xa7, 0xa6, 0xa5, 0xa4,
  0xa3, 0xa3, 0xa2, 0xa1, 0xa0, 0x9f, 0x9f, 0x9e,
  0x9d, 0x9c, 0x9c, 0x9b, 0x9a, 0x99, 0x99, 0x98,
  0x97, 0x97, 0x96, 0x95, 0x95, 0x94, 0x93, 0x93,
  0x92, 0x91, 0x91, 0x90, 0x8f, 0x8f, 0x8e, 0x8e,
  0x8d, 0x8c, 0x8c, 0x8b, 0x8b, 0x8a, 0x89, 0x89,
  0x88, 0x88, 0x87, 0x87, 0x86, 0x85, 0x85, 0x84,
  0x84, 0x83, 0x83, 0x82, 0x82, 0x81, 0x81, 0x80
};

static const unsigned int __internal_invSqrtCubeTab[96] =
{
  0xfa0bf8fe, 0xee6b28fa, 0xe5f024f7, 0xdaf268f3,
  0xd2f000f0, 0xc890c0ec, 0xc10378e9, 0xb9a758e6,
  0xb4da40e4, 0xadcea0e1, 0xa6f278de, 0xa279c0dc,
  0x9beb48d9, 0x97a5c4d7, 0x916340d4, 0x8d4fc8d2,
  0x895000d0, 0x8563b8ce, 0x818ac0cc, 0x7dc4e8ca,
  0x7a1200c8, 0x7671d8c6, 0x72e440c4, 0x6f6908c2,
  0x6db240c1, 0x6a523cbf, 0x670424bd, 0x6563c0bc,
  0x623028ba, 0x609ce8b9, 0x5d8364b7, 0x5bfd18b6,
  0x58fd40b4, 0x5783a8b3, 0x560e48b2, 0x533000b0,
  0x51c70caf, 0x506238ae, 0x4da4c0ac, 0x4c4c10ab,
  0x4af768aa, 0x49a6b8a9, 0x485a00a8, 0x471134a7,
  0x45cc58a6, 0x434e40a4, 0x4214f8a3, 0x40df88a2,
  0x3fade0a1, 0x3e8000a0, 0x3d55dc9f, 0x3c2f789e,
  0x3c2f789e, 0x3b0cc49d, 0x39edc09c, 0x38d2609b,
  0x37baa89a, 0x36a68899, 0x35960098, 0x34890497,
  0x34890497, 0x337f9896, 0x3279ac95, 0x31774094,
  0x30784893, 0x30784893, 0x2f7cc892, 0x2e84b091,
  0x2d900090, 0x2d900090, 0x2c9eac8f, 0x2bb0b88e,
  0x2bb0b88e, 0x2ac6148d, 0x29dec08c, 0x29dec08c,
  0x28fab08b, 0x2819e88a, 0x2819e88a, 0x273c5889,
  0x273c5889, 0x26620088, 0x258ad487, 0x258ad487,
  0x24b6d886, 0x24b6d886, 0x23e5fc85, 0x23184084,
  0x23184084, 0x224d9883, 0x224d9883, 0x21860882,
  0x21860882, 0x20c18081, 0x20c18081, 0x20000080
};

static __attribute__((__unused__)) float __internal_frcp_kernel (float x,enum cudaRoundMode mode)
{
  unsigned long long prod;
  volatile union __cudart_FloatUintCvt arg;
  unsigned int expo;
  unsigned int sign;
  unsigned f, y;

  arg.f = x;
  sign = arg.i & 0x80000000;
  expo = (arg.i >> 23);
  expo = expo & 0xff;
  f = expo - 1;

  if (f <= 0xFD) {
    y = (arg.i << 8);
    y = y | 0x80000000;

    arg.i = __internal_rcpTab[(y >> 24) - 128];

    f = arg.i * arg.i;
    f = f << 16;
    prod = ((unsigned long long)y) * f;
    arg.i = (arg.i << 24) - (unsigned)(prod >> 32);

    f = arg.i + arg.i;
    prod = ((unsigned long long)y) * f;
    f = (unsigned)(-(int)(prod >> 32));
    prod = ((unsigned long long)arg.i) * f;
    y = y >> 8;

    expo = (2 * 127) - expo - 2;
    arg.i = (unsigned)(prod >> 32);
    if (mode == cudaRoundNearest) {
      arg.i = arg.i >> 6;
    } else {
      arg.i = (arg.i + 32) >> 6;
    }
    if ((int)expo >= 0) {
      f = y * arg.i;
      arg.i = ((expo << 23) + arg.i) | sign;
    } else {

      expo = -(int)expo;
      arg.i = arg.i >> expo;
      f = y * arg.i;
      arg.i = arg.i | sign;
    }
    if (mode == cudaRoundNearest) {
      expo = f + y;
      if ((int)f < 0) f = (unsigned)(-(int)f);
      if ((int)expo < 0) expo = (unsigned)(-(int)expo);
      if (expo < f) arg.i++;
    } else if (mode == cudaRoundZero) {
      if ((int)f > 0) arg.i = arg.i - 1;
    } else if (mode == cudaRoundPosInf) {
      if (((int)f > 0) && sign) arg.i = arg.i - 1;
      if (((int)f < 0) && !sign) arg.i = arg.i + 1;
    } else {
      if (((int)f > 0) && !sign) arg.i = arg.i - 1;
      if (((int)f < 0) && sign) arg.i = arg.i + 1;
    }
    return arg.f;
  } else {

    if (!(arg.i << 1)) {
      arg.i = 0x7F800000 | arg.i;
      return arg.f;
    }

    if ((arg.i << 1) == 0xff000000) {
      arg.i &= 0x80000000;
      return arg.f;
    }

    if ((arg.i << 1) > 0xff000000) {
      arg.i |= 0x00400000;
      return arg.f;
    }

    f = 0;
    arg.i <<= 8;
    do {
      f++;
      arg.i <<= 1;
    } while ((int)arg.i > 0);
    arg.i >>= 8;
    arg.i |= sign;
    arg.f = __internal_frcp_kernel (arg.f, mode);
    expo = ((arg.i << 1) >> 24);
    if ((expo + f) < 255) {
      arg.i = (arg.i + (f << 23));
      return arg.f;
    }
    if (mode == cudaRoundNearest) {
      arg.i = (arg.i & 0x80000000) | 0x7f800000;
    } else if (mode == cudaRoundZero) {
      arg.i = (arg.i & 0x80000000) | 0x7f7fffff;
    } else if (mode == cudaRoundPosInf) {
      arg.i = (arg.i & 0x80000000) | ((sign) ? 0x7f7fffff : 0x7f800000);
    } else {
      arg.i = (arg.i & 0x80000000) | ((sign) ? 0x7f800000 : 0x7f7fffff);
    }
    return arg.f;
  }
}

static __attribute__((__unused__)) float __internal_fsqrt_kernel (float radicand, enum cudaRoundMode mode)

{
  unsigned long long prod;
  volatile union __cudart_FloatUintCvt arg;
  unsigned int expo;
  unsigned int s, f, x;

  arg.f = radicand;
  expo = arg.i >> 23;
  expo = expo & 0xff;
  f = expo - 1;

  if ((arg.i <= 0x80000000) && (f <= 0xFD)) {

    x = (arg.i << 8) | 0x80000000;
    x = x >> (expo & 1);

    arg.i = f = __internal_invSqrtCubeTab[((unsigned)x >> 25) - 32];

    prod = ((unsigned long long)x) * f;
    arg.i = ((arg.i * 3) << 22) - (unsigned)(prod >> 32);

    prod = ((unsigned long long)arg.i) * arg.i;
    s = (unsigned)(prod >> 32);
    prod = ((unsigned long long)x) * s;
    f = 0x30000000 - (unsigned)(prod >> 32);
    prod = ((unsigned long long)f) * arg.i;
    arg.i = (unsigned)(prod >> 32);

    prod = ((unsigned long long)x) * arg.i;
    arg.i = (unsigned)(prod >> 32);
    if (mode == cudaRoundNearest) {
      arg.i = arg.i >> 3;
    } else {
      arg.i = (arg.i + 4) >> 3;
    }
    x = (x << 16) - (arg.i * arg.i);

    if (mode == cudaRoundNearest) {
      f = x - (2 * arg.i + 1);
      if ((int)f < 0) f = (unsigned)(-(int)f);
      if ((int)x < 0) x = (unsigned)(-(int)x);
      if (f < x) arg.i ++;
    } else if ((mode == cudaRoundZero) || (mode == cudaRoundMinInf)) {
      if ((int)x < 0) arg.i--;
    } else if (mode == cudaRoundPosInf) {
      if ((int)x > 0) arg.i++;
    }
    arg.i = arg.i + (((expo + 125) & ~0x1) << 22);
    return arg.f;
  } else {

    if (!(arg.i << 1) || (arg.i == 0x7F800000)) {
      return arg.f;
    }

    if ((arg.i << 1) > 0xFF000000) {
      arg.i |= 0x00400000;
      return arg.f;
    }

    if (arg.i & 0x80000000) {
      arg.i = 0xFFC00000;
      return arg.f;
    }

    x = 0;
    arg.i <<= 8;
    do {
      x++;
      arg.i <<= 1;
    } while ((int)arg.i > 0);
    arg.i >>= 8;
    arg.i += (x & 1) << 23;
    x += (x & 1);
    arg.f = __internal_fsqrt_kernel (arg.f, mode);
    arg.i -= ((x >> 1) << 23);
    return arg.f;
  }
}

static __attribute__((__unused__)) float __internal_fdiv_kernel (float dividend, float divisor, enum cudaRoundMode mode)

{
  unsigned long long prod;
  unsigned r, f, x, y, expox, expoy, sign;
  volatile union __cudart_FloatUintCvt cvtx, cvty, res;

  cvtx.f = dividend;
  cvty.f = divisor;
  expox = ((cvtx.i >> 23) & 0xff) - 1;
  expoy = ((cvty.i >> 23) & 0xff) - 1;
  sign = ((cvtx.i ^ cvty.i) & 0x80000000);

  if ((expox <= 0xFD) && (expoy <= 0xFD)) {
divide:
    expox = expox - expoy + 127 - 1;
    expoy = expox;

    y = (cvty.i << 8) | 0x80000000;
    x = (cvtx.i & 0x00ffffff) | 0x00800000;

    r = __internal_rcpTab[(y >> 24) - 128];

    f = r * r;
    prod = ((unsigned long long)y) * (f << 16);
    r = (r << 24) - (unsigned)(prod >> 32);

    prod = ((unsigned long long)y) * (r << 1);
    f = (unsigned)-(int)(prod >> 32);
    prod = ((unsigned long long)f) * (r << 1);
    r = (unsigned)(prod >> 32);

    prod = ((unsigned long long)x) * (r << 1);

    if (((int)((prod >> 32) << 8)) > 0) {
      expox--;
      prod = prod + prod;
    }
    if (mode == cudaRoundNearest) {

      r = (unsigned)(prod >> 32);
      y = y >> 8;

      if (expox <= 0xFD) {
        int rem0, rem1, inc;

        prod = ((unsigned long long)y) * r;
        x = x << (23 + ((prod >> 32) >> 15));
        rem1 = x - (unsigned)(prod & 0xffffffff);
        rem0 = rem1 - y;
        inc = abs(rem0) < abs(rem1);

        res.i = sign | ((expox << 23) + r + inc);
        return res.f;
      } else if ((int)expox >= 254) {

        res.i = sign | 0x7f800000;
        return res.f;
      } else {

        int shift = -(int)expox;
        if (shift > 23) {

          r = (shift < 25) && ((x != y) || (r > 0x00ff0000));
          res.i = sign | r;
          return res.f;
        }
        if (x == y) {

          shift = -(int)expoy;
          r = 0x00800000 >> shift;
          res.i = sign | r;
          return res.f;
        }
        {
          unsigned long long tempx;
          long long remlo, remhi;

          r = r >> shift;
          prod = ((unsigned long long)y) * r;
          tempx = ((unsigned long long)x) << (23 - shift);
          remlo = 2 * tempx - 2 * prod - y;
          remhi = remlo + 2 * tempx;
          if (remlo < 0) remlo = -remlo;
          if (remhi < 0) remhi = -remhi;
          if (remhi < remlo) tempx = 2 * tempx;
          remlo = tempx - prod;
          remhi = remlo - y;
          if (remlo < 0) remlo = -remlo;
          if (remhi < 0) remhi = -remhi;
          if ((remhi < remlo) || ((remhi == remlo) && (r & 1))) r++;
          res.i = sign | r;
          return res.f;
        }
      }
    } else if (mode == cudaRoundZero) {

      prod += 0x0000000080000000ULL;
      r = (unsigned)(prod >> 32);
      y = y >> 8;

      if (expox <= 0xFD) {
        int rem1;
        prod = ((unsigned long long)y) * r;
        x = x << (23 + ((prod >> 32) >> 15));
        rem1 = x - (unsigned)(prod & 0xffffffff);
        if (rem1 < 0) r--;
        r = (expox << 23) + r;
        if (r == 0x7f800000) r = 0x7f7fffff;
        res.i = sign | r;
        return res.f;
      } else if ((int)expox >= 254) {

        res.i = sign | 0x7f7fffff;
        return res.f;
      } else {

        int shift = -(int)expox;
        if ((x == y) && (shift < 31)) {
          shift = -(int)expoy;
          r = 0x00800000 >> shift;
          res.i = sign | r;
          return res.f;
        }
        if (shift > 23) {
          r = 0;
          res.i = sign | r;
          return res.f;
        }
        {
          unsigned long long tempx;
          long long remlo, remhi;

          r = r >> shift;
          prod = ((unsigned long long)y) * r;
          tempx = ((unsigned long long)x) << (23 - shift);
          remlo = 2 * tempx - 2 * prod - y;
          remhi = remlo + 2 * tempx;
          if (remlo < 0) remlo = -remlo;
          if (remhi < 0) remhi = -remhi;
          if (remhi < remlo) tempx = 2 * tempx;
          remlo = tempx - prod;
          if ((remlo < 0) & (r != 0)) r--;
          res.i = sign | r;
          return res.f;
        }
      }
    } else if (mode == cudaRoundPosInf) {

      prod += 0x0000000080000000ULL;
      r = (unsigned)(prod >> 32);
      y = y >> 8;

      if (expox <= 0xFD) {
        int rem1;
        prod = ((unsigned long long)y) * r;
        x = x << (23 + ((prod >> 32) >> 15));
        rem1 = x - (unsigned)(prod & 0xffffffff);
        if ((rem1 < 0) && (sign)) r--;
        if ((rem1 > 0) && (!sign)) r++;
        r = (expox << 23) + r;
        if ((r == 0x7f800000) && (sign)) r = 0x7f7fffff;
        res.i = sign | r;
        return res.f;
      } else if ((int)expox >= 254) {

        r = sign ? 0x7f7fffff : 0x7f800000;
        res.i = sign | r;
        return res.f;
      } else {

        int shift = -(int)expox;
        if ((x == y) && (shift <= 24)) {
          shift = -(int)expoy;
          r = 0x00800000 >> shift;
          if (r == 0) r = !sign;
          res.i = sign | r;
          return res.f;
        }
        if (shift > 23) {
          r = !sign;
          res.i = sign | r;
          return res.f;
        }
        {
          unsigned long long tempx;
          long long remlo, remhi;

          r = r >> shift;
          prod = ((unsigned long long)y) * r;
          tempx = ((unsigned long long)x) << (23 - shift);
          remlo = 2 * tempx - 2 * prod - y;
          remhi = remlo + 2 * tempx;
          if (remlo < 0) remlo = -remlo;
          if (remhi < 0) remhi = -remhi;
          if (remhi < remlo) tempx = 2 * tempx;
          remlo = tempx - prod;
          if ((remlo < 0) && (r != 0) && (sign)) r--;
          if ((remlo > 0) && (!sign)) r++;
          res.i = sign | r;
          return res.f;
        }
      }
    } else if (mode == cudaRoundMinInf) {

      prod += 0x0000000080000000ULL;
      r = (unsigned)(prod >> 32);
      y = y >> 8;

      if (expox <= 0xFD) {
        int rem1;
        prod = ((unsigned long long)y) * r;
        x = x << (23 + ((prod >> 32) >> 15));
        rem1 = x - (unsigned)(prod & 0xffffffff);
        if ((rem1 < 0) && (!sign)) r--;
        if ((rem1 > 0) && (sign)) r++;
        r = (expox << 23) + r;
        if ((r == 0x7f800000) && (!sign)) r = 0x7f7fffff;
        res.i = sign | r;
        return res.f;
      } else if ((int)expox >= 254) {

        r = sign ? 0x7f800000 : 0x7f7fffff;
        res.i = sign | r;
        return res.f;
      } else {

        int shift = -(int)expox;
        if ((x == y) && (shift <= 24)) {
          shift = -(int)expoy;
          r = 0x00800000 >> shift;
          if (r == 0) r = !!sign;
          res.i = sign | r;
          return res.f;
        }
        if (shift > 23) {
          r = !!sign;
          res.i = sign | r;
          return res.f;
        }
        {
          unsigned long long tempx;
          long long remlo, remhi;

          r = r >> shift;
          prod = ((unsigned long long)y) * r;
          tempx = ((unsigned long long)x) << (23 - shift);
          remlo = 2 * tempx - 2 * prod - y;
          remhi = remlo + 2 * tempx;
          if (remlo < 0) remlo = -remlo;
          if (remhi < 0) remhi = -remhi;
          if (remhi < remlo) tempx = 2 * tempx;
          remlo = tempx - prod;
          if ((remlo < 0) && (r != 0) && (!sign)) r--;
          if ((remlo > 0) && (sign)) r++;
          res.i = sign | r;
          return res.f;
        }
      }
    }
  }
  {
    int xzero, yzero, xinf, yinf, xnan, ynan;

    xnan = (cvtx.i << 1) > 0xff000000;
    ynan = (cvty.i << 1) > 0xff000000;

    if (xnan) {
      res.i = cvtx.i | 0x00400000;
      return res.f;
    }
    if (ynan) {
      res.i = cvty.i | 0x00400000;
      return res.f;
    }
    xzero = (cvtx.i << 1) == 0x00000000;
    yzero = (cvty.i << 1) == 0x00000000;
    xinf = (cvtx.i << 1) == 0xff000000;
    yinf = (cvty.i << 1) == 0xff000000;

    if ((xzero & yzero) | (xinf & yinf)) {
      res.i = 0xffc00000;
      return res.f;
    }

    if (xzero | yinf) {
      res.i = sign;
      return res.f;
    }

    if (yzero | xinf) {
      res.i = sign | 0x7f800000;
      return res.f;
    }

    if ((int)expox < 0) {
      cvtx.i = cvtx.i << 9;
      while ((int)cvtx.i >= 0) {
        expox--;
        cvtx.i = cvtx.i + cvtx.i;
      }
      cvtx.i = cvtx.i >> 8;
    }
    if ((int)expoy < 0) {
      cvty.i = cvty.i << 9;
      while ((int)cvty.i >= 0) {
        expoy--;
        cvty.i = cvty.i + cvty.i;
      }
      cvty.i = cvty.i >> 8;
    }
    goto divide;
  }
}

static __attribute__((__unused__)) float __internal_fmul_kernel (float a, float b, enum cudaRoundMode mode)

{
  unsigned long long product;
  volatile union __cudart_FloatUintCvt xx, yy;
  unsigned expo_x, expo_y;

  xx.f = a;
  yy.f = b;

  expo_y = 0xFF;
  expo_x = expo_y & (xx.i >> 23);
  expo_x = expo_x - 1;
  expo_y = expo_y & (yy.i >> 23);
  expo_y = expo_y - 1;

  if ((expo_x <= 0xFD) &&
      (expo_y <= 0xFD)) {
multiply:
    expo_x = expo_x + expo_y;
    expo_y = xx.i ^ yy.i;
    xx.i = xx.i & 0x00ffffff;
    yy.i = yy.i << 8;
    xx.i = xx.i | 0x00800000;
    yy.i = yy.i | 0x80000000;

    product = ((unsigned long long)xx.i) * yy.i;
    expo_x = expo_x - 127 + 2;
    expo_y = expo_y & 0x80000000;
    xx.i = (unsigned int)(product >> 32);
    yy.i = (unsigned int)(product & 0xffffffff);

    if (xx.i < 0x00800000) {
      xx.i = (xx.i << 1) | (yy.i >> 31);
      yy.i = (yy.i << 1);
      expo_x--;
    }
    if (expo_x <= 0xFD) {
      xx.i = xx.i | expo_y;
      xx.i = xx.i + (expo_x << 23);

      if (mode == cudaRoundNearest) {
        if (yy.i < 0x80000000) return xx.f;
        xx.i += ((yy.i == 0x80000000) ? (xx.i & 1) : (yy.i >> 31));
      } else if (mode == cudaRoundZero) {
      } else if (mode == cudaRoundPosInf) {
        xx.i += (yy.i && !expo_y);
      } else if (mode == cudaRoundMinInf) {
        xx.i += (yy.i && expo_y);
      }
      return xx.f;
    } else if ((int)expo_x >= 254) {

      if (mode == cudaRoundNearest) {
         xx.i = expo_y | 0x7F800000;
      } else if (mode == cudaRoundZero) {
         xx.i = expo_y | 0x7F7FFFFF;
      } else if (mode == cudaRoundPosInf) {
         xx.i = (expo_y ? 0xff7fffff : 0x7F800000);
      } else {
         xx.i = (expo_y ? 0xFF800000 : 0x7f7fffff);
      }
      return xx.f;
    } else {

      expo_x = ((unsigned int)-((int)expo_x));
      if (mode == cudaRoundNearest) {
        if (expo_x > 25) {

          xx.i = expo_y;
          return xx.f;
        } else {
          yy.i = (xx.i << (32 - expo_x)) | ((yy.i) ? 1 : 0);
          xx.i = expo_y + (xx.i >> expo_x);
          xx.i += ((yy.i == 0x80000000) ? (xx.i & 1) : (yy.i >> 31));
          return xx.f;
        }
      } else if (mode == cudaRoundZero) {
        if (expo_x > 25) expo_x = 25;
        xx.i = expo_y + (xx.i >> expo_x);
        return xx.f;
      } else if (mode == cudaRoundPosInf) {
        if (expo_x > 25) expo_x = 25;
        yy.i = (xx.i << (32 - expo_x)) | ((yy.i) ? 1 : 0);
        xx.i = expo_y + (xx.i >> expo_x);
        xx.i += (yy.i && !expo_y);
        return xx.f;
      } else {
        if (expo_x > 25) expo_x = 25;
        yy.i = (xx.i << (32 - expo_x)) | ((yy.i) ? 1 : 0);
        xx.i = expo_y + (xx.i >> expo_x);
        xx.i += (yy.i && expo_y);
        return xx.f;
      }
    }
  } else {
    product = xx.i ^ yy.i;
    product = product & 0x80000000;
    if (!(xx.i & 0x7fffffff)) {
      if (expo_y != 254) {
        xx.i = (unsigned int)product;
        return xx.f;
      }
      expo_y = yy.i << 1;
      if (expo_y == 0xFF000000) {
        xx.i = expo_y | 0x00C00000;
      } else {
        xx.i = yy.i | 0x00400000;
      }
      return xx.f;
    }
    if (!(yy.i & 0x7fffffff)) {
      if (expo_x != 254) {
        xx.i = (unsigned int)product;
        return xx.f;
      }
      expo_x = xx.i << 1;
      if (expo_x == 0xFF000000) {
        xx.i = expo_x | 0x00C00000;
      } else {
        xx.i = xx.i | 0x00400000;
      }
      return xx.f;
    }
    if ((expo_y != 254) && (expo_x != 254)) {
      expo_y++;
      expo_x++;
      if (expo_x == 0) {
        expo_y |= xx.i & 0x80000000;




        xx.i = xx.i << 8;
        while (!(xx.i & 0x80000000)) {
          xx.i <<= 1;
          expo_x--;
        }
        xx.i = (xx.i >> 8) | (expo_y & 0x80000000);
        expo_y &= ~0x80000000;
        expo_y--;
        goto multiply;
      }
      if (expo_y == 0) {
        expo_x |= yy.i & 0x80000000;
        yy.i = yy.i << 8;
        while (!(yy.i & 0x80000000)) {
          yy.i <<= 1;
          expo_y--;
        }
        yy.i = (yy.i >> 8) | (expo_x & 0x80000000);
        expo_x &= ~0x80000000;
        expo_x--;
        goto multiply;
      }
    }
    expo_x = xx.i << 1;
    expo_y = yy.i << 1;

    if (expo_x > 0xFF000000) {

      xx.i = xx.i | 0x00400000;
      return xx.f;
    }

    if (expo_y > 0xFF000000) {

      xx.i = yy.i | 0x00400000;
      return xx.f;
    }
    xx.i = (unsigned int)product | 0x7f800000;
    return xx.f;
  }
}

static __attribute__((__unused__)) float __internal_fmaf_kernel (float a, float b, float c, enum cudaRoundMode mode)

{
  unsigned long long product;
  unsigned int xx, yy, zz, ww;
  unsigned int temp, s, u;
  unsigned int expo_x, expo_y, expo_z;
  volatile union __cudart_FloatUintCvt cvt;

  cvt.f = a;
  xx = cvt.i;
  cvt.f = b;
  yy = cvt.i;
  cvt.f = c;
  zz = cvt.i;

  temp = 0xff;
  expo_x = temp & (xx >> 23);
  expo_x = expo_x - 1;
  expo_y = temp & (yy >> 23);
  expo_y = expo_y - 1;
  expo_z = temp & (zz >> 23);
  expo_z = expo_z - 1;

  if (!((expo_x <= 0xFD) &&
        (expo_y <= 0xFD) &&
        (expo_z <= 0xFD))) {




    if ((yy << 1) > 0xff000000) {
      return b + b;
    }
    if ((zz << 1) > 0xff000000) {
      return c + c;
    }
    if ((xx << 1) > 0xff000000) {
      return a + a;
    }
# 3180 "/usr/local/cuda/bin/../include/device_functions.h" 3
    if ((((xx << 1) == 0) && ((yy << 1) == 0xff000000)) ||
        (((yy << 1) == 0) && ((xx << 1) == 0xff000000))) {
      cvt.i = 0xffc00000;
      return cvt.f;
    }
    if ((zz << 1) == 0xff000000) {
      if (((yy << 1) == 0xff000000) || ((xx << 1) == 0xff000000)) {
        if ((int)(xx ^ yy ^ zz) < 0) {
          cvt.i = 0xffc00000;
          return cvt.f;
        }
      }
    }




    if ((xx << 1) == 0xff000000) {
      xx = xx ^ (yy & 0x80000000);
      cvt.i = xx;
      return cvt.f;
    }
    if ((yy << 1) == 0xff000000) {
      yy = yy ^ (xx & 0x80000000);
      cvt.i = yy;
      return cvt.f;
    }
    if ((zz << 1) == 0xff000000) {
      cvt.i = zz;
      return cvt.f;
    }





    if (zz == 0x80000000) {
      if (((xx << 1) == 0) || ((yy << 1) == 0)) {
        if ((int)(xx ^ yy) < 0) {
          cvt.i = zz;
          return cvt.f;
        }
      }
    }



    if (((zz << 1) == 0) &&
        (((xx << 1) == 0) || ((yy << 1) == 0))) {
      if (mode == cudaRoundMinInf) {
        zz = 0x80000000 & (xx ^ yy ^ zz);
      } else {
        zz &= 0x7fffffff;
      }
      cvt.i = zz;
      return cvt.f;
    }



    if (((xx << 1) == 0) || ((yy << 1) == 0)) {
      cvt.i = zz;
      return cvt.f;
    }

    if (expo_x == (unsigned)-1) {
      temp = xx & 0x80000000;
      xx = xx << 8;
      while (!(xx & 0x80000000)) {
        xx <<= 1;
        expo_x--;
      }
      expo_x++;
      xx = (xx >> 8) | temp;
    }

    if (expo_y == (unsigned)-1) {
      temp = yy & 0x80000000;
      yy = yy << 8;
      while (!(yy & 0x80000000)) {
        yy <<= 1;
        expo_y--;
      }
      expo_y++;
      yy = (yy >> 8) | temp;
    }

    if ((expo_z == (unsigned)-1) && ((zz << 1) != 0)) {
      temp = zz & 0x80000000;
      zz = zz << 8;
      while (!(zz & 0x80000000)) {
        zz <<= 1;
        expo_z--;
      }
      expo_z++;
      zz = (zz >> 8) | temp;
    }
  }

  expo_x = expo_x + expo_y;
  expo_y = xx ^ yy;
  xx = xx & 0x00ffffff;
  yy = yy << 8;
  xx = xx | 0x00800000;
  yy = yy | 0x80000000;

  product = ((unsigned long long)xx) * yy;
  xx = (unsigned)(product >> 32);
  yy = (unsigned)(product & 0xffffffff);

  expo_x = expo_x - 127 + 2;
  expo_y = expo_y & 0x80000000;

  if (xx < 0x00800000) {
    xx = (xx << 1) | (yy >> 31);
    yy = (yy << 1);
    expo_x--;
  }
  temp = 0;

  if ((zz << 1) != 0) {
    s = zz & 0x80000000;
    zz &= 0x00ffffff;
    zz |= 0x00800000;
    ww = 0;

    if ((int)expo_z > (int)expo_x) {
      temp = expo_z;
      expo_z = expo_x;
      expo_x = temp;
      temp = zz;
      zz = xx;
      xx = temp;
      temp = ww;
      ww = yy;
      yy = temp;
      temp = expo_y;
      expo_y = s;
      s = temp;
    }


    expo_z = expo_x - expo_z;
    u = expo_y ^ s;
    if (expo_z <= 49) {

      temp = 0;
      while (expo_z >= 32) {
        temp = ww | (temp != 0);
        ww = zz;
        zz = 0;
        expo_z -= 32;
      }
      if (expo_z) {
        temp = ((temp >> expo_z) | (ww << (32 - expo_z)) |
                ((temp << (32 - expo_z)) != 0));
        ww = (ww >> expo_z) | (zz << (32 - expo_z));
        zz = (zz >> expo_z);
      }

    } else {
      temp = 1;
      ww = 0;
      zz = 0;
    }
    if ((int)u < 0) {

      temp = (unsigned)(-(int)temp);
      s = (temp != 0);
      u = yy - s;
      s = u > yy;
      yy = u - ww;
      s += yy > u;
      xx = (xx - zz) - s;
      if (!(xx | yy | temp)) {

        if (mode == cudaRoundMinInf) {
          xx = 0x80000000;
        }
        cvt.i = xx;
        return cvt.f;
      }
      if ((int)xx < 0) {


        temp = ~temp;
        yy = ~yy;
        xx = ~xx;
        if (++temp == 0) {
          if (++yy == 0) {
            ++xx;
          }
        }
        expo_y ^= 0x80000000;
      }

      while (!(xx & 0x00800000)) {
        xx = (xx << 1) | (yy >> 31);
        yy = (yy << 1);
        expo_x--;
      }
    } else {

      yy = yy + ww;
      s = yy < ww;
      xx = xx + zz + s;
      if (xx & 0x01000000) {
        temp = temp | (yy << 31);
        yy = (yy >> 1) | (xx << 31);
        xx = ((xx & 0x80000000) | (xx >> 1)) & ~0x40000000;
        expo_x++;
      }
    }
  }
  temp = yy | (temp != 0);
  if (expo_x <= 0xFD) {

    xx |= expo_y;
    if (mode == cudaRoundNearest) {
      s = xx & 1;
      xx += (temp == 0x80000000) ? s : (temp >> 31);
    } else if (mode == cudaRoundPosInf) {
      xx += temp && !expo_y;
    } else if (mode == cudaRoundMinInf) {
      xx += temp && expo_y;
    }
    xx = xx + (expo_x << 23);
    cvt.i = xx;
    return cvt.f;
  } else if ((int)expo_x >= 126) {

    if (mode == cudaRoundNearest) {
      xx = expo_y | 0x7f800000;
    } else if (mode == cudaRoundZero) {
      xx = expo_y | 0x7F7FFFFF;
    } else if (mode == cudaRoundPosInf) {
      xx = expo_y ? 0xFF7FFFFF : 0x7f800000;
    } else if (mode == cudaRoundMinInf) {
      xx = expo_y ? 0xff800000 : 0x7f7fffff;
    }
    cvt.i = xx;
    return cvt.f;
  }

  expo_x = (unsigned int)(-(int)expo_x);
  if (expo_x > 25) {

    xx = 0;
    if (mode == cudaRoundPosInf) {
      xx += !expo_y;
    } else if (mode == cudaRoundMinInf) {
      xx += !!expo_y;
    }
    cvt.i = expo_y | xx;
    return cvt.f;
  }
  temp = (xx << (32 - expo_x)) | ((temp) ? 1 : 0);
  xx = xx >> expo_x;
  if (mode == cudaRoundNearest) {
    xx = xx + ((temp == 0x80000000) ? (xx & 1) : (temp >> 31));
  } else if (mode == cudaRoundPosInf) {
    xx = xx + (!expo_y && temp);
  } else if (mode == cudaRoundMinInf) {
    xx = xx + (expo_y && temp);
  }
  xx = expo_y + xx;
  cvt.i = xx;
  return cvt.f;
}

static __attribute__((__unused__)) float __internal_fadd_kernel (float a, float b, enum cudaRoundMode mode)

{
  volatile union __cudart_FloatUintCvt xx, yy;
  unsigned int expo_x;
  unsigned int expo_y;
  unsigned int temp;

  xx.f = a;
  yy.f = b;


  expo_y = yy.i << 1;
  if (expo_y > (xx.i << 1)) {
    expo_y = xx.i;
    xx.i = yy.i;
    yy.i = expo_y;
  }

  temp = 0xff;
  expo_x = temp & (xx.i >> 23);
  expo_x = expo_x - 1;
  expo_y = temp & (yy.i >> 23);
  expo_y = expo_y - 1;

  if ((expo_x <= 0xFD) &&
      (expo_y <= 0xFD)) {
add:
    expo_y = expo_x - expo_y;
    if (expo_y > 25) {
      expo_y = 31;
    }
    temp = xx.i ^ yy.i;
    xx.i = xx.i & ~0x7f000000;
    xx.i = xx.i | 0x00800000;
    yy.i = yy.i & ~0xff000000;
    yy.i = yy.i | 0x00800000;

    if ((int)temp < 0) {

      temp = 32 - expo_y;
      temp = (expo_y) ? (yy.i << temp) : 0;
      temp = (unsigned)(-((int)temp));
      xx.i = xx.i - (yy.i >> expo_y) - (temp ? 1 : 0);
      if (xx.i & 0x00800000) {
        if (expo_x <= 0xFD) {
          xx.i = xx.i + (expo_x << 23);
          if (mode == cudaRoundNearest) {
            if (temp < 0x80000000) return xx.f;
            xx.i += ((temp == 0x80000000) ? (xx.i & 1) : (temp >> 31));
          } else if (mode == cudaRoundZero) {
          } else if (mode == cudaRoundPosInf) {
            xx.i += (temp && !(xx.i & 0x80000000));
          } else if (mode == cudaRoundMinInf) {
            xx.i += (temp && (xx.i & 0x80000000));
          }
          return xx.f;
        }
      } else {
        if ((temp | (xx.i << 1)) == 0) {

          if (mode == cudaRoundMinInf) {
            xx.i = 0x80000000;
          } else {
            xx.i = 0;
          }
          return xx.f;
        }

        yy.i = xx.i & 0x80000000;
        do {
          xx.i = (xx.i << 1) | (temp >> 31);
          temp <<= 1;
          expo_x--;
        } while (!(xx.i & 0x00800000));
        xx.i = xx.i | yy.i;
      }
    } else {

      temp = 32 - expo_y;
      temp = (expo_y) ? (yy.i << temp) : 0;
      xx.i = xx.i + (yy.i >> expo_y);
      if (!(xx.i & 0x01000000)) {
        if (expo_x <= 0xFD) {
          xx.i = xx.i + (expo_x << 23);
          if (mode == cudaRoundNearest) {
            if (temp < 0x80000000) return xx.f;
            xx.i += ((temp == 0x80000000) ? (xx.i & 1) : (temp >> 31));
          } else if (mode == cudaRoundZero) {
          } else if (mode == cudaRoundPosInf) {
            xx.i += (temp && !(xx.i & 0x80000000));
          } else if (mode == cudaRoundMinInf) {
            xx.i += (temp && (xx.i & 0x80000000));
          }
          return xx.f;
        }
      } else {

        temp = (xx.i << 31) | (temp >> 1);
        xx.i = ((xx.i & 0x80000000) | (xx.i >> 1)) & ~0x40000000;
        expo_x++;
      }
    }
    if (expo_x <= 0xFD) {
      xx.i = xx.i + (expo_x << 23);
      if (mode == cudaRoundNearest) {
        if (temp < 0x80000000) return xx.f;
        xx.i += ((temp == 0x80000000) ? (xx.i & 1) : (temp >> 31));
      } else if (mode == cudaRoundZero) {
      } else if (mode == cudaRoundPosInf) {
        xx.i += (temp && !(xx.i & 0x80000000));
      } else if (mode == cudaRoundMinInf) {
        xx.i += (temp && (xx.i & 0x80000000));
      }
      return xx.f;
    }
    if ((int)expo_x >= 254) {

      temp = xx.i & 0x80000000;
      if (mode == cudaRoundNearest) {
        xx.i = (temp) | 0x7f800000;
      } else if (mode == cudaRoundZero) {
        xx.i = (temp) | 0x7f7fffff;
      } else if (mode == cudaRoundMinInf) {
        xx.i = (temp ? 0xFF800000 : 0x7f7fffff);
      } else if (mode == cudaRoundPosInf) {
        xx.i = (temp ? 0xff7fffff : 0x7F800000);
      }
      return xx.f;
    }

    expo_y = expo_x + 32;
    yy.i = xx.i & 0x80000000;
    xx.i = xx.i & ~0xff000000;
    expo_x = (unsigned)(-((int)expo_x));
    temp = xx.i << expo_y | ((temp) ? 1 : 0);
    xx.i = yy.i | (xx.i >> expo_x);
    if (mode == cudaRoundNearest) {
      xx.i += (temp == 0x80000000) ? (xx.i & 1) : (temp >> 31);
    } else if (mode == cudaRoundZero) {
    } else if (mode == cudaRoundPosInf) {
      xx.i += (temp && !yy.i);
    } else if (mode == cudaRoundMinInf) {
      xx.i += (temp && yy.i);
    }
    return xx.f;
  } else {

    if (!(yy.i << 1)) {
      if (mode == cudaRoundMinInf) {
        if (!(xx.i << 1)) {
          xx.i = xx.i | yy.i;
        }
      } else {
        if (xx.i == 0x80000000) {
          xx.i = yy.i;
        }
      }
      if ((xx.i << 1) > 0xff000000) {
        xx.i |= 0x00400000;
      }
      return xx.f;
    }
    if ((expo_y != 254) && (expo_x != 254)) {

      if (expo_x == (unsigned int) -1) {
        temp = xx.i & 0x80000000;
        xx.i = xx.i << 8;
        while (!(xx.i & 0x80000000)) {
          xx.i <<= 1;
          expo_x--;
        }
        expo_x++;
        xx.i = (xx.i >> 8) | temp;
      }
      if (expo_y == (unsigned int) -1) {
        temp = yy.i & 0x80000000;
        yy.i = yy.i << 8;
        while (!(yy.i & 0x80000000)) {
          yy.i <<= 1;
          expo_y--;
        }
        expo_y++;
        yy.i = (yy.i >> 8) | temp;
      }
      goto add;
    }
    expo_x = xx.i << 1;
    expo_y = yy.i << 1;

    if (expo_x > 0xff000000) {

      xx.i = xx.i | 0x00400000;
      return xx.f;
    }

    if (expo_y > 0xff000000) {

      xx.i = yy.i | 0x00400000;
      return xx.f;
    }
    if ((expo_x == 0xff000000) && (expo_y == 0xff000000)) {




      expo_x = xx.i ^ yy.i;
      xx.i = xx.i | ((expo_x) ? 0xffc00000 : 0);
      return xx.f;
    }

    if (expo_y == 0xff000000) {
      xx.i = yy.i;
    }
    return xx.f;
  }
}

static __attribute__((__unused__)) float __frcp_rn (float a)
{
  return __internal_frcp_kernel (a, cudaRoundNearest);
}

static __attribute__((__unused__)) float __frcp_rz (float a)
{
  return __internal_frcp_kernel (a, cudaRoundZero);
}

static __attribute__((__unused__)) float __frcp_rd (float a)
{
  return __internal_frcp_kernel (a, cudaRoundMinInf);
}

static __attribute__((__unused__)) float __frcp_ru (float a)
{
  return __internal_frcp_kernel (a, cudaRoundPosInf);
}

static __attribute__((__unused__)) float __fsqrt_rn (float a)
{
  return __internal_fsqrt_kernel (a, cudaRoundNearest);
}

static __attribute__((__unused__)) float __fsqrt_rz (float a)
{
  return __internal_fsqrt_kernel (a, cudaRoundZero);
}

static __attribute__((__unused__)) float __fsqrt_rd (float a)
{
  return __internal_fsqrt_kernel (a, cudaRoundMinInf);
}

static __attribute__((__unused__)) float __fsqrt_ru (float a)
{
  return __internal_fsqrt_kernel (a, cudaRoundPosInf);
}

static __attribute__((__unused__)) float __fdiv_rn (float a, float b)
{
  return __internal_fdiv_kernel (a, b, cudaRoundNearest);
}

static __attribute__((__unused__)) float __fdiv_rz (float a, float b)
{
  return __internal_fdiv_kernel (a, b, cudaRoundZero);
}

static __attribute__((__unused__)) float __fdiv_rd (float a, float b)
{
  return __internal_fdiv_kernel (a, b, cudaRoundMinInf);
}

static __attribute__((__unused__)) float __fdiv_ru (float a, float b)
{
  return __internal_fdiv_kernel (a, b, cudaRoundPosInf);
}

static __attribute__((__unused__)) float __fadd_rd (float a, float b)
{
  return __internal_fadd_kernel (a, b, cudaRoundMinInf);
}

static __attribute__((__unused__)) float __fadd_ru (float a, float b)
{
  return __internal_fadd_kernel (a, b, cudaRoundPosInf);
}

static __attribute__((__unused__)) float __fmul_rd (float a, float b)
{
  return __internal_fmul_kernel (a, b, cudaRoundMinInf);
}

static __attribute__((__unused__)) float __fmul_ru (float a, float b)
{
  return __internal_fmul_kernel (a, b, cudaRoundPosInf);
}

static __attribute__((__unused__)) float __fmaf_rn (float a, float b, float c)
{
  return __internal_fmaf_kernel (a, b, c, cudaRoundNearest);
}

static __attribute__((__unused__)) float __fmaf_rz (float a, float b, float c)
{
  return __internal_fmaf_kernel (a, b, c, cudaRoundZero);
}

static __attribute__((__unused__)) float __fmaf_ru (float a, float b, float c)
{
  return __internal_fmaf_kernel (a, b, c, cudaRoundPosInf);
}

static __attribute__((__unused__)) float __fmaf_rd (float a, float b, float c)
{
  return __internal_fmaf_kernel (a, b, c, cudaRoundMinInf);
}

static __attribute__((__unused__)) int __cuda___isnan(double a);
static __attribute__((__unused__)) int __cuda___isnanf(float a);
static __attribute__((__unused__)) int __double2int_rz(double);
static __attribute__((__unused__)) unsigned int __double2uint_rz(double);
static __attribute__((__unused__)) long long int __double2ll_rz(double);
static __attribute__((__unused__)) unsigned long long int __double2ull_rz(double);
# 3787 "/usr/local/cuda/bin/../include/device_functions.h" 3
static __attribute__((__unused__)) int __mulhi(int a, int b)
{
  long long int c = (long long int)a * (long long int)b;

  return (int)(c >> 32);
}

static __attribute__((__unused__)) unsigned int __umulhi(unsigned int a, unsigned int b)
{
  unsigned long long int c = (unsigned long long int)a * (unsigned long long int)b;

  return (unsigned int)(c >> 32);
}

static __attribute__((__unused__)) unsigned long long int __umul64hi(unsigned long long int a, unsigned long long int b)
{
  unsigned int a_lo = (unsigned int)a;
  unsigned long long int a_hi = a >> 32;
  unsigned int b_lo = (unsigned int)b;
  unsigned long long int b_hi = b >> 32;
  unsigned long long int m1 = a_lo * b_hi;
  unsigned long long int m2 = a_hi * b_lo;
  unsigned int carry;

  carry = (0ULL + __umulhi(a_lo, b_lo) + (unsigned int)m1 + (unsigned int)m2) >> 32;

  return a_hi * b_hi + (m1 >> 32) + (m2 >> 32) + carry;
}

static __attribute__((__unused__)) long long int __mul64hi(long long int a, long long int b)
{
  long long int res;
  res = __umul64hi(a, b);
  if (a < 0LL) res = res - b;
  if (b < 0LL) res = res - a;
  return res;
}

static __attribute__((__unused__)) float __saturatef(float a)
{
  if (__cuda___isnanf(a)) return 0.0f;
  return a >= 1.0f ? 1.0f : a <= 0.0f ? 0.0f : a;
}

static __attribute__((__unused__)) unsigned int __sad(int a, int b, unsigned int c)
{
  long long int diff = (long long int)a - (long long int)b;

  return (unsigned int)(__cuda_llabs(diff) + (long long int)c);
}

static __attribute__((__unused__)) unsigned int __usad(unsigned int a, unsigned int b, unsigned int c)
{
  long long int diff = (long long int)a - (long long int)b;

  return (unsigned int)(__cuda_llabs(diff) + (long long int)c);
}

static __attribute__((__unused__)) int __mul24(int a, int b)
{
  a &= 0xffffff;
  a = (a & 0x800000) != 0 ? a | ~0xffffff : a;
  b &= 0xffffff;
  b = (b & 0x800000) != 0 ? b | ~0xffffff : b;

  return a * b;
}

static __attribute__((__unused__)) unsigned int __umul24(unsigned int a, unsigned int b)
{
  a &= 0xffffff;
  b &= 0xffffff;

  return a * b;
}

static __attribute__((__unused__)) float __int_as_float(int a)
{
  volatile union __cudart_FloatIntCvt u;

  u.i = a;
  return u.f;
}

static __attribute__((__unused__)) int __float_as_int(float a)
{
  volatile union __cudart_FloatIntCvt u;

  u.f = a;
  return u.i;
}

static __attribute__((__unused__)) long long int __internal_float2ll_kernel(float a, long long int max, long long int min, long long int nan, enum cudaRoundMode rndMode)
{
  unsigned long long int res, t = 0ULL;
  int shift;
  unsigned int ia;

  if (sizeof(a) == sizeof(double) && __cuda___isnan((double)a)) return nan; if (sizeof(a) == sizeof(float) && __cuda___isnanf((float)a)) return nan; if (a >= max) return max; if (a <= min) return min;
  ia = __float_as_int(a);
  shift = 189 - ((ia >> 23) & 0xff);
  res = (unsigned long long int)(((ia << 8) | 0x80000000) >> 1) << 32;
  if (shift >= 64) {
    t = res;
    res = 0;
  } else if (shift) {
    t = res << (64 - shift);
    res = res >> shift;
  }
  if (rndMode == cudaRoundNearest && (long long int)t < 0LL) {
    res += t == 0x8000000000000000ULL ? res & 1ULL : 1ULL;
  }
  else if (rndMode == cudaRoundMinInf && t != 0ULL && ia > 0x80000000) {
    res++;
  }
  else if (rndMode == cudaRoundPosInf && t != 0ULL && (int)ia > 0) {
    res++;
  }
  if ((int)ia < 0) res = (unsigned long long int)-(long long int)res;
  return (long long int)res;
}

static __attribute__((__unused__)) int __internal_float2int(float a, enum cudaRoundMode rndMode)
{
  return (int)__internal_float2ll_kernel(a, 2147483647LL, -2147483648LL, 0LL, rndMode);
}

static __attribute__((__unused__)) int __float2int_rz(float a)
{
  return __internal_float2int(a, cudaRoundZero);
}

static __attribute__((__unused__)) int __float2int_ru(float a)
{
  return __internal_float2int(a, cudaRoundPosInf);
}

static __attribute__((__unused__)) int __float2int_rd(float a)
{
  return __internal_float2int(a, cudaRoundMinInf);
}

static __attribute__((__unused__)) int __float2int_rn(float a)
{
  return __internal_float2int(a, cudaRoundNearest);
}

static __attribute__((__unused__)) long long int __internal_float2ll(float a, enum cudaRoundMode rndMode)
{
  return __internal_float2ll_kernel(a, 9223372036854775807LL, -9223372036854775807LL -1LL, -9223372036854775807LL -1LL, rndMode);
}

static __attribute__((__unused__)) long long int __float2ll_rz(float a)
{
  return __internal_float2ll(a, cudaRoundZero);
}

static __attribute__((__unused__)) long long int __float2ll_ru(float a)
{
  return __internal_float2ll(a, cudaRoundPosInf);
}

static __attribute__((__unused__)) long long int __float2ll_rd(float a)
{
  return __internal_float2ll(a, cudaRoundMinInf);
}

static __attribute__((__unused__)) long long int __float2ll_rn(float a)
{
  return __internal_float2ll(a, cudaRoundNearest);
}

static __attribute__((__unused__)) unsigned long long int __internal_float2ull_kernel(float a, unsigned long long int max, unsigned long long int nan, enum cudaRoundMode rndMode)
{
  unsigned long long int res, t = 0ULL;
  int shift;
  unsigned int ia;

  if (sizeof(a) == sizeof(double) && __cuda___isnan((double)a)) return nan; if (sizeof(a) == sizeof(float) && __cuda___isnanf((float)a)) return nan; if (a >= max) return max; if (a <= 0LL) return 0LL;
  ia = __float_as_int(a);
  shift = 190 - ((ia >> 23) & 0xff);
  res = (unsigned long long int)((ia << 8) | 0x80000000) << 32;
  if (shift >= 64) {
    t = res >> (int)(shift > 64);
    res = 0;
  } else if (shift) {
    t = res << (64 - shift);
    res = res >> shift;
  }
  if (rndMode == cudaRoundNearest && (long long int)t < 0LL) {
    res += t == 0x8000000000000000ULL ? res & 1ULL : 1ULL;
  }
  else if (rndMode == cudaRoundPosInf && t != 0ULL) {
    res++;
  }
  return res;
}

static __attribute__((__unused__)) unsigned int __internal_float2uint(float a, enum cudaRoundMode rndMode)
{
  return (unsigned int)__internal_float2ull_kernel(a, 4294967295U, 0U, rndMode);
}

static __attribute__((__unused__)) unsigned int __float2uint_rz(float a)
{
  return __internal_float2uint(a, cudaRoundZero);
}

static __attribute__((__unused__)) unsigned int __float2uint_ru(float a)
{
  return __internal_float2uint(a, cudaRoundPosInf);
}

static __attribute__((__unused__)) unsigned int __float2uint_rd(float a)
{
  return __internal_float2uint(a, cudaRoundMinInf);
}

static __attribute__((__unused__)) unsigned int __float2uint_rn(float a)
{
  return __internal_float2uint(a, cudaRoundNearest);
}

static __attribute__((__unused__)) unsigned long long int __internal_float2ull(float a, enum cudaRoundMode rndMode)
{
  return __internal_float2ull_kernel(a, 18446744073709551615ULL, 9223372036854775808ULL, rndMode);
}

static __attribute__((__unused__)) unsigned long long int __float2ull_rz(float a)
{
  return __internal_float2ull(a, cudaRoundZero);
}

static __attribute__((__unused__)) unsigned long long int __float2ull_ru(float a)
{
  return __internal_float2ull(a, cudaRoundPosInf);
}

static __attribute__((__unused__)) unsigned long long int __float2ull_rd(float a)
{
  return __internal_float2ull(a, cudaRoundMinInf);
}

static __attribute__((__unused__)) unsigned long long int __float2ull_rn(float a)
{
  return __internal_float2ull(a, cudaRoundNearest);
}

static __attribute__((__unused__)) int __internal_normalize64(unsigned long long int *a)
{
  int lz = 0;

  if ((*a & 0xffffffff00000000ULL) == 0ULL) {
    *a <<= 32;
    lz += 32;
  }
  if ((*a & 0xffff000000000000ULL) == 0ULL) {
    *a <<= 16;
    lz += 16;
  }
  if ((*a & 0xff00000000000000ULL) == 0ULL) {
    *a <<= 8;
    lz += 8;
  }
  if ((*a & 0xf000000000000000ULL) == 0ULL) {
    *a <<= 4;
    lz += 4;
  }
  if ((*a & 0xC000000000000000ULL) == 0ULL) {
    *a <<= 2;
    lz += 2;
  }
  if ((*a & 0x8000000000000000ULL) == 0ULL) {
    *a <<= 1;
    lz += 1;
  }
  return lz;
}

static __attribute__((__unused__)) int __internal_normalize(unsigned int *a)
{
  unsigned long long int t = (unsigned long long int)*a;
  int lz = __internal_normalize64(&t);

  *a = (unsigned int)(t >> 32);

  return lz - 32;
}

static __attribute__((__unused__)) float __internal_int2float_kernel(int a, enum cudaRoundMode rndMode)
{
  volatile union __cudart_FloatUintCvt res;
  int shift;
  unsigned int t;
  res.i = a;
  if (a == 0) return res.f;
  if (a < 0) res.i = (unsigned int)-a;
  shift = __internal_normalize((unsigned int*)&res.i);
  t = res.i << 24;
  res.i = (res.i >> 8);
  res.i += (127 + 30 - shift) << 23;
  if (a < 0) res.i |= 0x80000000;
  if ((rndMode == cudaRoundNearest) && (t >= 0x80000000)) {
    res.i += (t == 0x80000000) ? (res.i & 1) : (t >> 31);
  }
  else if ((rndMode == cudaRoundMinInf) && t && (a < 0)) {
    res.i++;
  }
  else if ((rndMode == cudaRoundPosInf) && t && (a > 0)) {
    res.i++;
  }
  return res.f;
}

static __attribute__((__unused__)) float __int2float_rz(int a)
{
  return __internal_int2float_kernel(a, cudaRoundZero);
}

static __attribute__((__unused__)) float __int2float_ru(int a)
{
  return __internal_int2float_kernel(a, cudaRoundPosInf);
}

static __attribute__((__unused__)) float __int2float_rd(int a)
{
  return __internal_int2float_kernel(a, cudaRoundMinInf);
}

static __attribute__((__unused__)) float __int2float_rn(int a)
{
  return __internal_int2float_kernel(a, cudaRoundNearest);
}

static __attribute__((__unused__)) float __internal_uint2float_kernel(unsigned int a, enum cudaRoundMode rndMode)
{
  volatile union __cudart_FloatUintCvt res;
  int shift;
  unsigned int t;
  res.i = a;
  if (a == 0) return res.f;
  shift = __internal_normalize((unsigned int*)&res.i);
  t = res.i << 24;
  res.i = (res.i >> 8);
  res.i += (127 + 30 - shift) << 23;
  if (rndMode == cudaRoundNearest) {
    res.i += (t == 0x80000000) ? (res.i & 1) : (t >> 31);
  }
  else if ((rndMode == cudaRoundPosInf) && t) {
    res.i++;
  }
  return res.f;
}

static __attribute__((__unused__)) float __uint2float_rz(unsigned int a)
{
  return __internal_uint2float_kernel(a, cudaRoundZero);
}

static __attribute__((__unused__)) float __uint2float_ru(unsigned int a)
{
  return __internal_uint2float_kernel(a, cudaRoundPosInf);
}

static __attribute__((__unused__)) float __uint2float_rd(unsigned int a)
{
  return __internal_uint2float_kernel(a, cudaRoundMinInf);
}

static __attribute__((__unused__)) float __uint2float_rn(unsigned int a)
{
  return __internal_uint2float_kernel(a, cudaRoundNearest);
}

static __attribute__((__unused__)) float __internal_ull2float_kernel(unsigned long long int a, enum cudaRoundMode rndMode)
{
  unsigned long long int temp;
  unsigned int res, t;
  int shift;
  if (a == 0ULL) return 0.0f;
  temp = a;
  shift = __internal_normalize64(&temp);
  temp = (temp >> 8) | ((temp & 0xffULL) ? 1ULL : 0ULL);
  res = (unsigned int)(temp >> 32);
  t = (unsigned int)temp;
  res += (127 + 62 - shift) << 23;
  if (rndMode == cudaRoundNearest) {
    res += (t == 0x80000000) ? (res & 1) : (t >> 31);
  } else if (rndMode == cudaRoundPosInf) {
    res += (t != 0);
  }
  return __int_as_float(res);
}

static __attribute__((__unused__)) float __internal_ll2float_kernel(long long int a, enum cudaRoundMode rndMode)
{
  unsigned long long int temp;
  volatile float res = 0.0f;

  if (a < 0LL) {
    temp = (~((unsigned long long int)a)) + 1ULL;
    if (rndMode == cudaRoundPosInf) {
      rndMode = cudaRoundMinInf;
    } else if (rndMode == cudaRoundMinInf) {
      rndMode = cudaRoundPosInf;
    }
  } else {
    temp = (unsigned long long int)a;
  }
  res = __internal_ull2float_kernel (temp, rndMode);
  if (a < 0LL) {
    res = -res;
  }
  return res;
}

static __attribute__((__unused__)) float __ll2float_rn(long long int a)
{
  return __internal_ll2float_kernel(a, cudaRoundNearest);
}

static __attribute__((__unused__)) float __ll2float_rz(long long int a)
{
  return __internal_ll2float_kernel(a, cudaRoundZero);
}

static __attribute__((__unused__)) float __ll2float_ru(long long int a)
{
  return __internal_ll2float_kernel(a, cudaRoundPosInf);
}

static __attribute__((__unused__)) float __ll2float_rd(long long int a)
{
  return __internal_ll2float_kernel(a, cudaRoundMinInf);
}

static __attribute__((__unused__)) float __ull2float_rn(unsigned long long int a)
{
  return __internal_ull2float_kernel(a, cudaRoundNearest);
}

static __attribute__((__unused__)) float __ull2float_rz(unsigned long long int a)
{
  return __internal_ull2float_kernel(a, cudaRoundZero);
}

static __attribute__((__unused__)) float __ull2float_ru(unsigned long long int a)
{
  return __internal_ull2float_kernel(a, cudaRoundPosInf);
}

static __attribute__((__unused__)) float __ull2float_rd(unsigned long long int a)
{
  return __internal_ull2float_kernel(a, cudaRoundMinInf);
}

static __attribute__((__unused__)) unsigned short __float2half_rn(float f)
{
  unsigned int x = __float_as_int (f);
  unsigned int u = (x & 0x7fffffff), remainder, shift, lsb, lsb_s1, lsb_m1;
  unsigned int sign, exponent, mantissa;


  if (u > 0x7f800000) {
    return 0x7fff;
  }

  sign = ((x >> 16) & 0x8000);


  if (u > 0x477fefff) {
    return sign | 0x7c00;
  }
  if (u < 0x33000001) {
    return sign | 0x0000;
  }

  exponent = ((u >> 23) & 0xff);
  mantissa = (u & 0x7fffff);

  if (exponent > 0x70) {
    shift = 13;
    exponent -= 0x70;
  } else {
    shift = 0x7e - exponent;
    exponent = 0;
    mantissa |= 0x800000;
  }
  lsb = (1 << shift);
  lsb_s1 = (lsb >> 1);
  lsb_m1 = (lsb - 1);


  remainder = (mantissa & lsb_m1);
  mantissa >>= shift;
  if (remainder > lsb_s1 || (remainder == lsb_s1 && (mantissa & 0x1))) {
    ++mantissa;
    if (!(mantissa & 0x3ff)) {
      ++exponent;
      mantissa = 0;
    }
  }

  return sign | (exponent << 10) | mantissa;
}

static __attribute__((__unused__)) float __half2float(unsigned short h)
{
  unsigned int sign = ((h >> 15) & 1);
  unsigned int exponent = ((h >> 10) & 0x1f);
  unsigned int mantissa = ((h & 0x3ff) << 13);

  if (exponent == 0x1f) {
    mantissa = (mantissa
                ? (sign = 0, 0x7fffff)
                : 0);
    exponent = 0xff;
  } else if (!exponent) {
    if (mantissa) {
      unsigned int msb;
      exponent = 0x71;
      do {
        msb = (mantissa & 0x400000);
        mantissa <<= 1;
        --exponent;
      } while (!msb);
      mantissa &= 0x7fffff;
    }
  } else {
    exponent += 0x70;
  }

  return __int_as_float ((sign << 31) | (exponent << 23) | mantissa);
}

static __attribute__((__unused__)) float __fadd_rz(float a, float b)
{
  return __internal_fadd_kernel(a, b, cudaRoundZero);
}

static __attribute__((__unused__)) float __fmul_rz(float a, float b)
{
  return __internal_fmul_kernel(a, b, cudaRoundZero);
}

static __attribute__((__unused__)) float __fadd_rn(float a, float b)
{
  return __internal_fadd_kernel(a, b, cudaRoundNearest);
}

static __attribute__((__unused__)) float __fmul_rn(float a, float b)
{
  return __internal_fmul_kernel(a, b, cudaRoundNearest);
}

static __attribute__((__unused__)) void __brkpt(int c)
{

}


extern "C" {


extern int __cudaSynchronizeThreads(void**, void*);


}




static __attribute__((__unused__)) inline __attribute__((always_inline)) void __syncthreads(void)
{
  volatile int _ = 0;
  L: if (__cudaSynchronizeThreads((void**)&&L, (void*)&_)) goto L;
}
# 4372 "/usr/local/cuda/bin/../include/device_functions.h" 3
static __attribute__((__unused__)) void __prof_trigger(int a)
{
}

static __attribute__((__unused__)) void __threadfence(void)
{
  __syncthreads();
}

static __attribute__((__unused__)) void __threadfence_block(void)
{
  __syncthreads();
}




static __attribute__((__unused__)) void __trap(void)
{
  __builtin_trap();
}
# 4411 "/usr/local/cuda/bin/../include/device_functions.h" 3
static __attribute__((__unused__)) float __fdividef(float a, float b)
{
  volatile float aa = a;
  volatile float bb = b;

  if (__cuda_fabsf(bb) > 8.507059173e37f) {
    if (__cuda_fabsf(aa) <= 3.402823466e38f) {
      return ((aa / bb) / 3.402823466e38f) / 3.402823466e38f;
    } else {
      bb = 1.0f / bb;
      bb = bb / 3.402823466e38f;
      return aa * bb;
    }
  } else {
    return aa / bb;
  }
}


static __attribute__((__unused__)) float __sinf(float a)
{

  if ((__float_as_int(a) << 1) == 0xff000000) {
    return __fadd_rn (a, -a);
  }

  return sinf(a);
}

static __attribute__((__unused__)) float __cosf(float a)
{

  if ((__float_as_int(a) << 1) == 0xff000000) {
    return __fadd_rn (a, -a);
  }

  return cosf(a);
}

static __attribute__((__unused__)) float __log2f(float a)
{
  return log2f(a);
}






static __attribute__((__unused__)) float __tanf(float a)
{
  return __fdividef (__sinf(a), __cosf(a));
}

static __attribute__((__unused__)) void __sincosf(float a, float *sptr, float *cptr)
{
  *sptr = __sinf(a);
  *cptr = __cosf(a);
}

static __attribute__((__unused__)) float __expf(float a)
{
  return __cuda_exp2f(a * 1.442695041f);
}

static __attribute__((__unused__)) float __exp10f(float a)
{
  return __cuda_exp2f(a * 3.321928094f);
}

static __attribute__((__unused__)) float __log10f(float a)
{
  return 0.301029996f * __log2f(a);
}

static __attribute__((__unused__)) float __logf(float a)
{
  return 0.693147181f * __log2f(a);
}

static __attribute__((__unused__)) float __powf(float a, float b)
{
  return __cuda_exp2f(b * __log2f(a));
}

static __attribute__((__unused__)) float fdividef(float a, float b)
{



  return a / b;

}



static __attribute__((__unused__)) int __clz(int a)
{
  return (a)?(158-(__float_as_int(__uint2float_rz((unsigned int)a))>>23)):32;
}

static __attribute__((__unused__)) int __clzll(long long int a)
{
  int ahi = ((int)((unsigned long long)a >> 32));
  int alo = ((int)((unsigned long long)a & 0xffffffffULL));
  int res;
  if (ahi) {
    res = 0;
  } else {
    res = 32;
    ahi = alo;
  }
  res = res + __clz(ahi);
  return res;
}

static __attribute__((__unused__)) int __popc(unsigned int a)
{
  a = a - ((a >> 1) & 0x55555555);
  a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
  a = (a + (a >> 4)) & 0x0f0f0f0f;
  a = ((__umul24(a, 0x808080) << 1) + a) >> 24;
  return a;
}

static __attribute__((__unused__)) int __popcll(unsigned long long int a)
{
  unsigned int ahi = ((unsigned int)(a >> 32));
  unsigned int alo = ((unsigned int)(a & 0xffffffffULL));
  alo = alo - ((alo >> 1) & 0x55555555);
  alo = (alo & 0x33333333) + ((alo >> 2) & 0x33333333);
  ahi = ahi - ((ahi >> 1) & 0x55555555);
  ahi = (ahi & 0x33333333) + ((ahi >> 2) & 0x33333333);
  alo = alo + ahi;
  alo = (alo & 0x0f0f0f0f) + ((alo >> 4) & 0x0f0f0f0f);
  alo = ((__umul24(alo, 0x808080) << 1) + alo) >> 24;
  return alo;
}

static __attribute__((__unused__)) unsigned int __brev(unsigned int a)
{

  unsigned int t;
  a = (a << 15) | (a >> 17);
  t = (a ^ (a >> 10)) & 0x003f801f;
  a = (t + (t << 10)) ^ a;
  t = (a ^ (a >> 4)) & 0x0e038421;
  a = (t + (t << 4)) ^ a;
  t = (a ^ (a >> 2)) & 0x22488842;
  a = (t + (t << 2)) ^ a;
  return a;
}

static __attribute__((__unused__)) unsigned long long int __brevll(unsigned long long int a)
{
  unsigned int hi = (unsigned int)(a >> 32);
  unsigned int lo = (unsigned int)(a & 0xffffffffULL);
  unsigned int t;
  t = __brev(lo);
  lo = __brev(hi);
  return ((unsigned long long int)t << 32) + (unsigned long long int)lo;
}



static __attribute__((__unused__)) int __ffs(int a)
{
  return 32 - __clz (a & -a);
}

static __attribute__((__unused__)) int __ffsll(long long int a)
{
  return 64 - __clzll (a & -a);
}
# 4594 "/usr/local/cuda/bin/../include/device_functions.h" 3
static __attribute__((__unused__)) double fdivide(double a, double b)
{
  return (double)fdividef((float)a, (float)b);
}



static __attribute__((__unused__)) int __double2int_rz(double a)
{
  return __float2int_rz((float)a);
}

static __attribute__((__unused__)) unsigned int __double2uint_rz(double a)
{
  return __float2uint_rz((float)a);
}

static __attribute__((__unused__)) long long int __double2ll_rz(double a)
{
  return __float2ll_rz((float)a);
}

static __attribute__((__unused__)) unsigned long long int __double2ull_rz(double a)
{
  return __float2ull_rz((float)a);
}
# 4671 "/usr/local/cuda/bin/../include/device_functions.h" 3
# 1 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h" 1 3
# 215 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h" 3
extern "C" {


extern void __cudaMutexOperation(int lock);


}







static __attribute__((__unused__)) int __iAtomicAdd(int *address, int val)
{
  int old;

  __cudaMutexOperation(1); old = *address; *address = old + val; __cudaMutexOperation(0);



  return old;
}

static __attribute__((__unused__)) unsigned int __uAtomicAdd(unsigned int *address, unsigned int val)
{
  unsigned int old;

  __cudaMutexOperation(1); old = *address; *address = old + val; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) int __iAtomicExch(int *address, int val)
{
  int old;

  __cudaMutexOperation(1); old = *address; *address = val; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) unsigned int __uAtomicExch(unsigned int *address, unsigned int val)
{
  unsigned int old;

  __cudaMutexOperation(1); old = *address; *address = val; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) float __fAtomicExch(float *address, float val)
{
  float old;

  __cudaMutexOperation(1); old = *address; *address = val; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) int __iAtomicMin(int *address, int val)
{
  int old;

  __cudaMutexOperation(1); old = *address; *address = old < val ? old : val; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) unsigned int __uAtomicMin(unsigned int *address, unsigned int val)
{
  unsigned int old;

  __cudaMutexOperation(1); old = *address; *address = old < val ? old : val; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) int __iAtomicMax(int *address, int val)
{
  int old;

  __cudaMutexOperation(1); old = *address; *address = old > val ? old : val; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) unsigned int __uAtomicMax(unsigned int *address, unsigned int val)
{
  unsigned int old;

  __cudaMutexOperation(1); old = *address; *address = old > val ? old : val; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) unsigned int __uAtomicInc(unsigned int *address, unsigned int val)
{
  unsigned int old;

  __cudaMutexOperation(1); old = *address; *address = (old >= val) ? 0 : old + 1; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) unsigned int __uAtomicDec(unsigned int *address, unsigned int val)
{
  unsigned int old;

  __cudaMutexOperation(1); old = *address; *address = ((old == 0) | (old > val)) ? val : (old - 1); __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) int __iAtomicAnd(int *address, int val)
{
  int old;

  __cudaMutexOperation(1); old = *address; *address = old & val; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) unsigned int __uAtomicAnd(unsigned int *address, unsigned int val)
{
  unsigned int old;

  __cudaMutexOperation(1); old = *address; *address = old & val; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) int __iAtomicOr(int *address, int val)
{
  int old;

  __cudaMutexOperation(1); old = *address; *address = old | val; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) unsigned int __uAtomicOr(unsigned int *address, unsigned int val)
{
  unsigned int old;

  __cudaMutexOperation(1); old = *address; *address = old | val; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) int __iAtomicXor(int *address, int val)
{
  int old;

  __cudaMutexOperation(1); old = *address; *address = old ^ val; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) unsigned int __uAtomicXor(unsigned int *address, unsigned int val)
{
  unsigned int old;

  __cudaMutexOperation(1); old = *address; *address = old ^ val; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) int __iAtomicCAS(int *address, int compare, int val)
{
  int old;

  __cudaMutexOperation(1); old = *address; *address = old == compare ? val : old; __cudaMutexOperation(0);




  return old;
}

static __attribute__((__unused__)) unsigned int __uAtomicCAS(unsigned int *address, unsigned int compare, unsigned int val)
{
  unsigned int old;

  __cudaMutexOperation(1); old = *address; *address = old == compare ? val : old; __cudaMutexOperation(0);




  return old;
}
# 4672 "/usr/local/cuda/bin/../include/device_functions.h" 2 3
# 1 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h" 1 3
# 108 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h" 3
extern "C" {


extern void __cudaMutexOperation(int lock);


}







static __attribute__((__unused__)) unsigned long long int __ullAtomicAdd(unsigned long long int *address, unsigned long long int val)
{
  unsigned long long int old;

  __cudaMutexOperation(1); old = *address; *address = old + val; __cudaMutexOperation(0);



  return old;
}

static __attribute__((__unused__)) unsigned long long int __ullAtomicExch(unsigned long long int *address, unsigned long long int val)
{
  unsigned long long int old;

  __cudaMutexOperation(1); old = *address; *address = val; __cudaMutexOperation(0);



  return old;
}

static __attribute__((__unused__)) unsigned long long int __ullAtomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val)
{
  unsigned long long int old;

  __cudaMutexOperation(1); old = *address; *address = old == compare ? val : old; __cudaMutexOperation(0);



  return old;
}



static __attribute__((__unused__)) int __any(int cond)
{
  return cond;
}

static __attribute__((__unused__)) int __all(int cond)
{
  return cond;
}
# 4673 "/usr/local/cuda/bin/../include/device_functions.h" 2 3
# 1 "/usr/local/cuda/bin/../include/sm_13_double_functions.h" 1 3
# 272 "/usr/local/cuda/bin/../include/sm_13_double_functions.h" 3
static __attribute__((__unused__)) double __longlong_as_double(long long int a)
{
  volatile union __cudart_DoubleLonglongCvt u;
  u.i = a;
  return u.d;
}

static __attribute__((__unused__)) long long int __double_as_longlong(double a)
{
  volatile union __cudart_DoubleLonglongCvt u;
  u.d = a;
  return u.i;
}


static __attribute__((__unused__)) float __internal_double2float_kernel(double a, enum cudaRoundMode rndMode)
{
  volatile union __cudart_DoubleUlonglongCvt xx;
  volatile union __cudart_FloatUintCvt res;

  unsigned long long sticky;
  int shift;
  xx.d = a;
  res.i = (((unsigned int) (xx.i >> 32)) & 0x80000000);
  if (a == 0.0) {

    return res.f;
  }
  if ((xx.i & 0x7ff0000000000000ULL) == 0x7ff0000000000000ULL) {
    if ((xx.i & 0x7fffffffffffffffULL) > 0x7ff0000000000000ULL) {

      res.i = ((unsigned int)((xx.i >> 32) & 0x80000000) |
               (255U << 23) | 0x00400000 |
               (unsigned int)((xx.i >> (53 - 24)) & 0x007fffff));
    } else {

      res.i |= 0x7f800000;
    }
    return res.f;
  }
  shift = ((int) ((xx.i >> 52) & 0x7ff)) - 1023;

  xx.i = (xx.i & 0x000fffffffffffffULL);
  if (shift >= 128) {
    if ((rndMode == cudaRoundZero) ||
        ((rndMode == cudaRoundMinInf) && !res.i) ||
        ((rndMode == cudaRoundPosInf) && res.i)) {
      res.i |= 0x7f7fffff;
    } else {
      res.i |= 0x7f800000;
    }
    return res.f;
  }
  if (shift <= -127) {

    xx.i |= 0x0010000000000000ULL;
    if (shift < -180) {
      sticky = xx.i;
      xx.i = 0;
    } else {
      sticky = xx.i << (64 - (-126 - shift));
      xx.i >>= (-126 - shift);
    }
    sticky |= xx.i << (64 - 29);
    if ((((rndMode == cudaRoundPosInf) && !res.i) ||
         ((rndMode == cudaRoundMinInf) && res.i)) &&
        sticky) {
      res.i += 1;
    }
    res.i += ((unsigned int) (xx.i >> 29)) & 0x007fffff;
    return res.f;
  }
  sticky = xx.i << (64 - 29);
  if ((((rndMode == cudaRoundPosInf) && !res.i) ||
       ((rndMode == cudaRoundMinInf) && res.i)) &&
      sticky) {
    res.i += 1;
  }
  res.i += ((unsigned int) (xx.i >> 29)) & 0x007fffff;
  res.i += (unsigned int) (127 + shift) << 23;
  return res.f;
}

static __attribute__((__unused__)) double __internal_ll2double_kernel(long long int a, enum cudaRoundMode rndMode)
{
  volatile union __cudart_DoubleUlonglongCvt res;
  int shift;
  unsigned int t;
  res.i = a;
  if (a == 0) return res.d;
  if (a < 0) res.i = (unsigned long long int)-a;
  shift = __internal_normalize64((unsigned long long int*)&res.i);
  t = ((unsigned int) res.i) << 21;
  res.i >>= 11;
  res.i += ((unsigned long long int)(1023 + 62 - shift)) << 52;
  if (a < 0) res.i |= 0x8000000000000000ULL;
  if ((rndMode == cudaRoundNearest) && (t >= 0x80000000)) {
    res.i += (t == 0x80000000) ? (res.i & 1) : 1;
  }
  else if ((rndMode == cudaRoundMinInf) && t && (a < 0)) {
    res.i++;
  }
  else if ((rndMode == cudaRoundPosInf) && t && (a > 0)) {
    res.i++;
  }
  return res.d;
}

static __attribute__((__unused__)) double __internal_ull2double_kernel(unsigned long long int a, enum cudaRoundMode rndMode)
{
  volatile union __cudart_DoubleUlonglongCvt res;
  int shift;
  unsigned int t;
  res.i = a;
  if (a == 0) return res.d;
  shift = __internal_normalize64((unsigned long long int *)&res.i);
  t = ((unsigned int) res.i) << 21;
  res.i >>= 11;
  res.i += ((unsigned long long int)(1023 + 62 - shift)) << 52;
  if ((rndMode == cudaRoundNearest) && (t >= 0x80000000)) {
    res.i += (t == 0x80000000) ? (res.i & 1) : 1;
  }
  else if ((rndMode == cudaRoundPosInf) && t) {
    res.i++;
  }
  return res.d;
}

static __attribute__((__unused__)) long long int __internal_double2ll_kernel(double a, long long int max, long long int min, long long int nan, enum cudaRoundMode rndMode)
{
  volatile union __cudart_DoubleUlonglongCvt xx, res;
  unsigned long long int t = 0;
  int shift;

  xx.d = a;
  if (sizeof(a) == sizeof(double) && __cuda___isnan((double)a)) return nan; if (sizeof(a) == sizeof(float) && __cuda___isnanf((float)a)) return nan; if (a >= max) return max; if (a <= min) return min;
  shift = (int) (1023 + 62 - ((xx.i >> 52) & 0x7ff));
  res.i = ((xx.i << 11) | 0x8000000000000000ULL) >> 1;
  if (shift >= 64) {
    t = res.i;
    res.i = 0;
  } else if (shift) {
    t = res.i << (64 - shift);
    res.i = res.i >> shift;
  }
  if ((rndMode == cudaRoundNearest) && (t >= 0x8000000000000000ULL)) {
    res.i += (t == 0x8000000000000000ULL) ? (res.i & 1) : 1;
  }
  else if ((rndMode == cudaRoundMinInf) && t &&
          (xx.i > 0x8000000000000000ULL)) {
    res.i++;
  }
  else if ((rndMode == cudaRoundPosInf) && t && ((long long int)xx.i > 0)) {
    res.i++;
  }
  if ((long long int)xx.i < 0) {
    res.i = (unsigned long long int)(-(long long int)res.i);
  }
  return res.i;
}

static __attribute__((__unused__)) unsigned long long int __internal_double2ull_kernel(double a, unsigned long long int max, unsigned long long int nan, enum cudaRoundMode rndMode)
{
  volatile union __cudart_DoubleUlonglongCvt xx, res;
  unsigned long long int t = 0;
  int shift;

  xx.d = a;
  if (sizeof(a) == sizeof(double) && __cuda___isnan((double)a)) return nan; if (sizeof(a) == sizeof(float) && __cuda___isnanf((float)a)) return nan; if (a >= max) return max; if (a <= 0LL) return 0LL;

  if (a == 0.0) return 0LL;
  shift = (int) (1023 + 63 - ((xx.i >> 52) & 0x7ff));
  res.i = ((xx.i << 11) | 0x8000000000000000ULL);
  if (shift >= 64) {
    t = res.i >> (int)(shift > 64);
    res.i = 0;
  } else if (shift) {
    t = res.i << (64 - shift);
    res.i = res.i >> shift;
  }
  if ((rndMode == cudaRoundNearest) && (t >= 0x8000000000000000ULL)) {
    res.i += (t == 0x8000000000000000ULL) ? (res.i & 1) : 1;
  }
  else if ((rndMode == cudaRoundPosInf) && t) {
    res.i++;
  }
  return res.i;
}

static __attribute__((__unused__)) int __double2hiint(double a)
{
  volatile union __cudart_DoubleInthiloCvt cvt;

  cvt.d = a;
  return cvt.i[1];
}

static __attribute__((__unused__)) int __double2loint(double a)
{
  volatile union __cudart_DoubleInthiloCvt cvt;

  cvt.d = a;
  return cvt.i[0];
}

static __attribute__((__unused__)) double __hiloint2double(int a, int b)
{
  volatile union __cudart_DoubleInthiloCvt cvt;

  cvt.i[0] = b;
  cvt.i[1] = a;
  return cvt.d;
}

static __attribute__((__unused__)) float __double2float_rn(double a)
{
  return (float)a;
}

static __attribute__((__unused__)) float __double2float_rz(double a)
{
  return __internal_double2float_kernel(a, cudaRoundZero);
}

static __attribute__((__unused__)) float __double2float_ru(double a)
{
  return __internal_double2float_kernel(a, cudaRoundPosInf);
}

static __attribute__((__unused__)) float __double2float_rd(double a)
{
  return __internal_double2float_kernel(a, cudaRoundMinInf);
}

static __attribute__((__unused__)) int __internal_double2int(double a, enum cudaRoundMode rndMode)
{
  return (int)__internal_double2ll_kernel(a, 2147483647LL, -2147483648LL, -2147483648LL, rndMode);
}

static __attribute__((__unused__)) int __double2int_rn(double a)
{
  return __internal_double2int(a, cudaRoundNearest);
}

static __attribute__((__unused__)) int __double2int_ru(double a)
{
  return __internal_double2int(a, cudaRoundPosInf);
}

static __attribute__((__unused__)) int __double2int_rd(double a)
{
  return __internal_double2int(a, cudaRoundMinInf);
}

static __attribute__((__unused__)) unsigned int __internal_double2uint(double a, enum cudaRoundMode rndMode)
{
  return (unsigned int)__internal_double2ull_kernel(a, 4294967295ULL, 2147483648ULL, rndMode);
}

static __attribute__((__unused__)) unsigned int __double2uint_rn(double a)
{
  return __internal_double2uint(a, cudaRoundNearest);
}

static __attribute__((__unused__)) unsigned int __double2uint_ru(double a)
{
  return __internal_double2uint(a, cudaRoundPosInf);
}

static __attribute__((__unused__)) unsigned int __double2uint_rd(double a)
{
  return __internal_double2uint(a, cudaRoundMinInf);
}

static __attribute__((__unused__)) long long int __internal_double2ll(double a, enum cudaRoundMode rndMode)
{
  return __internal_double2ll_kernel(a, 9223372036854775807LL, -9223372036854775807LL -1LL, -9223372036854775807LL -1LL, rndMode);
}

static __attribute__((__unused__)) long long int __double2ll_rn(double a)
{
  return __internal_double2ll(a, cudaRoundNearest);
}

static __attribute__((__unused__)) long long int __double2ll_ru(double a)
{
  return __internal_double2ll(a, cudaRoundPosInf);
}

static __attribute__((__unused__)) long long int __double2ll_rd(double a)
{
  return __internal_double2ll(a, cudaRoundMinInf);
}

static __attribute__((__unused__)) unsigned long long int __internal_double2ull(double a, enum cudaRoundMode rndMode)
{
  return __internal_double2ull_kernel(a, 18446744073709551615ULL, 9223372036854775808ULL, rndMode);
}

static __attribute__((__unused__)) unsigned long long int __double2ull_rn(double a)
{
  return __internal_double2ull(a, cudaRoundNearest);
}

static __attribute__((__unused__)) unsigned long long int __double2ull_ru(double a)
{
  return __internal_double2ull(a, cudaRoundPosInf);
}

static __attribute__((__unused__)) unsigned long long int __double2ull_rd(double a)
{
  return __internal_double2ull(a, cudaRoundMinInf);
}

static __attribute__((__unused__)) double __int2double_rn(int a)
{
  return (double)a;
}

static __attribute__((__unused__)) double __uint2double_rn(unsigned int a)
{
  return (double)a;
}

static __attribute__((__unused__)) double __ll2double_rn(long long int a)
{
  return (double)a;
}

static __attribute__((__unused__)) double __ll2double_rz(long long int a)
{
  return __internal_ll2double_kernel(a, cudaRoundZero);
}

static __attribute__((__unused__)) double __ll2double_rd(long long int a)
{
  return __internal_ll2double_kernel(a, cudaRoundMinInf);
}

static __attribute__((__unused__)) double __ll2double_ru(long long int a)
{
  return __internal_ll2double_kernel(a, cudaRoundPosInf);
}

static __attribute__((__unused__)) double __ull2double_rn(unsigned long long int a)
{
  return __internal_ull2double_kernel(a, cudaRoundNearest);
}

static __attribute__((__unused__)) double __ull2double_rz(unsigned long long int a)
{
  return __internal_ull2double_kernel(a, cudaRoundZero);
}

static __attribute__((__unused__)) double __ull2double_rd(unsigned long long int a)
{
  return __internal_ull2double_kernel(a, cudaRoundMinInf);
}

static __attribute__((__unused__)) double __ull2double_ru(unsigned long long int a)
{
  return __internal_ull2double_kernel(a, cudaRoundPosInf);
}







static __attribute__((__unused__)) double __internal_fma_kernel(double x, double y, double z, enum cudaRoundMode rndMode)
{
  struct __cudart_UintUint xx, yy, zz, ww;
  unsigned int s, t, u, prod0, prod1, prod2, prod3, expo_x, expo_y, expo_z;

  xx.hi = __double2hiint(x);
  xx.lo = __double2loint(x);
  yy.hi = __double2hiint(y);
  yy.lo = __double2loint(y);
  zz.hi = __double2hiint(z);
  zz.lo = __double2loint(z);

  expo_z = 0x7FF;
  t = xx.hi >> 20;
  expo_x = expo_z & t;
  expo_x = expo_x - 1;
  t = yy.hi >> 20;
  expo_y = expo_z & t;
  expo_y = expo_y - 1;
  t = zz.hi >> 20;
  expo_z = expo_z & t;
  expo_z = expo_z - 1;

  if (!((expo_x <= 0x7FD) &&
        (expo_y <= 0x7FD) &&
        (expo_z <= 0x7FD))) {





    if (((yy.hi << 1) | (yy.lo != 0)) > 0xffe00000) {
      yy.hi |= 0x00080000;
      return __hiloint2double(yy.hi, yy.lo);
    }
    if (((zz.hi << 1) | (zz.lo != 0)) > 0xffe00000) {
      zz.hi |= 0x00080000;
      return __hiloint2double(zz.hi, zz.lo);
    }
    if (((xx.hi << 1) | (xx.lo != 0)) > 0xffe00000) {
      xx.hi |= 0x00080000;
      return __hiloint2double(xx.hi, xx.lo);
    }
# 697 "/usr/local/cuda/bin/../include/sm_13_double_functions.h" 3
    if (((((xx.hi << 1) | xx.lo) == 0) &&
         (((yy.hi << 1) | (yy.lo != 0)) == 0xffe00000)) ||
        ((((yy.hi << 1) | yy.lo) == 0) &&
         (((xx.hi << 1) | (xx.lo != 0)) == 0xffe00000))) {
      xx.hi = 0xfff80000;
      xx.lo = 0x00000000;
      return __hiloint2double(xx.hi, xx.lo);
    }
    if (((zz.hi << 1) | (zz.lo != 0)) == 0xffe00000) {
      if ((((yy.hi << 1) | (yy.lo != 0)) == 0xffe00000) ||
          (((xx.hi << 1) | (xx.lo != 0)) == 0xffe00000)) {
        if ((int)(xx.hi ^ yy.hi ^ zz.hi) < 0) {
          xx.hi = 0xfff80000;
          xx.lo = 0x00000000;
          return __hiloint2double(xx.hi, xx.lo);
        }
      }
    }




    if (((xx.hi << 1) | (xx.lo != 0)) == 0xffe00000) {
      xx.hi = xx.hi ^ (yy.hi & 0x80000000);
      return __hiloint2double(xx.hi, xx.lo);
    }
    if (((yy.hi << 1) | (yy.lo != 0)) == 0xffe00000) {
      yy.hi = yy.hi ^ (xx.hi & 0x80000000);
      return __hiloint2double(yy.hi, yy.lo);
    }
    if (((zz.hi << 1) | (zz.lo != 0)) == 0xffe00000) {
      return __hiloint2double(zz.hi, zz.lo);
    }





    if ((zz.hi == 0x80000000) && (zz.lo == 0)) {
      if ((((xx.hi << 1) | xx.lo) == 0) ||
          (((yy.hi << 1) | yy.lo) == 0)) {
        if ((int)(xx.hi ^ yy.hi) < 0) {
          return __hiloint2double(zz.hi, zz.lo);
        }
      }
    }



    if ((((zz.hi << 1) | zz.lo) == 0) &&
        ((((xx.hi << 1) | xx.lo) == 0) ||
         (((yy.hi << 1) | yy.lo) == 0))) {
      if (rndMode == cudaRoundMinInf) {
        return __hiloint2double((xx.hi ^ yy.hi ^ zz.hi) & 0x80000000, zz.lo);
      } else {
        zz.hi &= 0x7fffffff;
        return __hiloint2double(zz.hi, zz.lo);
      }
    }




    if ((((xx.hi << 1) | xx.lo) == 0) ||
        (((yy.hi << 1) | yy.lo) == 0)) {
      return __hiloint2double(zz.hi, zz.lo);
    }

    if (expo_x == 0xffffffff) {
      expo_x++;
      t = xx.hi & 0x80000000;
      s = xx.lo >> 21;
      xx.lo = xx.lo << 11;
      xx.hi = xx.hi << 11;
      xx.hi = xx.hi | s;
      if (!xx.hi) {
        xx.hi = xx.lo;
        xx.lo = 0;
        expo_x -= 32;
      }
      while ((int)xx.hi > 0) {
        s = xx.lo >> 31;
        xx.lo = xx.lo + xx.lo;
        xx.hi = xx.hi + xx.hi;
        xx.hi = xx.hi | s;
        expo_x--;
      }
      xx.lo = (xx.lo >> 11);
      xx.lo |= (xx.hi << 21);
      xx.hi = (xx.hi >> 11) | t;
    }
    if (expo_y == 0xffffffff) {
      expo_y++;
      t = yy.hi & 0x80000000;
      s = yy.lo >> 21;
      yy.lo = yy.lo << 11;
      yy.hi = yy.hi << 11;
      yy.hi = yy.hi | s;
      if (!yy.hi) {
        yy.hi = yy.lo;
        yy.lo = 0;
        expo_y -= 32;
      }
      while ((int)yy.hi > 0) {
        s = yy.lo >> 31;
        yy.lo = yy.lo + yy.lo;
        yy.hi = yy.hi + yy.hi;
        yy.hi = yy.hi | s;
        expo_y--;
      }
      yy.lo = (yy.lo >> 11);
      yy.lo |= (yy.hi << 21);
      yy.hi = (yy.hi >> 11) | t;
    }
    if (expo_z == 0xffffffff) {
      expo_z++;
      t = zz.hi & 0x80000000;
      s = zz.lo >> 21;
      zz.lo = zz.lo << 11;
      zz.hi = zz.hi << 11;
      zz.hi = zz.hi | s;
      if (!zz.hi) {
        zz.hi = zz.lo;
        zz.lo = 0;
        expo_z -= 32;
      }
      while ((int)zz.hi > 0) {
        s = zz.lo >> 31;
        zz.lo = zz.lo + zz.lo;
        zz.hi = zz.hi + zz.hi;
        zz.hi = zz.hi | s;
        expo_z--;
      }
      zz.lo = (zz.lo >> 11);
      zz.lo |= (zz.hi << 21);
      zz.hi = (zz.hi >> 11) | t;
    }
  }

  expo_x = expo_x + expo_y;
  expo_y = xx.hi ^ yy.hi;
  t = xx.lo >> 21;
  xx.lo = xx.lo << 11;
  xx.hi = xx.hi << 11;
  xx.hi = xx.hi | t;
  yy.hi = yy.hi & 0x000fffff;
  xx.hi = xx.hi | 0x80000000;
  yy.hi = yy.hi | 0x00100000;

  prod0 = xx.lo * yy.lo;
  prod1 = __umulhi (xx.lo, yy.lo);
  prod2 = xx.hi * yy.lo;
  prod3 = xx.lo * yy.hi;
  prod1 += prod2;
  t = prod1 < prod2;
  prod1 += prod3;
  t += prod1 < prod3;
  prod2 = __umulhi (xx.hi, yy.lo);
  prod3 = __umulhi (xx.lo, yy.hi);
  prod2 += prod3;
  s = prod2 < prod3;
  prod3 = xx.hi * yy.hi;
  prod2 += prod3;
  s += prod2 < prod3;
  prod2 += t;
  s += prod2 < t;
  prod3 = __umulhi (xx.hi, yy.hi) + s;

  yy.lo = prod0;
  yy.hi = prod1;
  xx.lo = prod2;
  xx.hi = prod3;
  expo_x = expo_x - (1023 - 2);
  expo_y = expo_y & 0x80000000;

  if (xx.hi < 0x00100000) {
    s = xx.lo >> 31;
    s = (xx.hi << 1) + s;
    xx.hi = s;
    s = yy.hi >> 31;
    s = (xx.lo << 1) + s;
    xx.lo = s;
    s = yy.lo >> 31;
    s = (yy.hi << 1) + s;
    yy.hi = s;
    s = yy.lo << 1;
    yy.lo = s;
    expo_x--;
  }

  t = 0;
  if (((zz.hi << 1) | zz.lo) != 0) {

    s = zz.hi & 0x80000000;

    zz.hi &= 0x000fffff;
    zz.hi |= 0x00100000;
    ww.hi = 0;
    ww.lo = 0;


    if ((int)expo_z > (int)expo_x) {
      t = expo_z;
      expo_z = expo_x;
      expo_x = t;
      t = zz.hi;
      zz.hi = xx.hi;
      xx.hi = t;
      t = zz.lo;
      zz.lo = xx.lo;
      xx.lo = t;
      t = ww.hi;
      ww.hi = yy.hi;
      yy.hi = t;
      t = ww.lo;
      ww.lo = yy.lo;
      yy.lo = t;
      t = expo_y;
      expo_y = s;
      s = t;
    }



    expo_z = expo_x - expo_z;
    u = expo_y ^ s;
    if (expo_z <= 107) {

      t = 0;
      while (expo_z >= 32) {
        t = ww.lo | (t != 0);
        ww.lo = ww.hi;
        ww.hi = zz.lo;
        zz.lo = zz.hi;
        zz.hi = 0;
        expo_z -= 32;
      }
      if (expo_z) {
        t = (t >> expo_z) | (ww.lo << (32 - expo_z)) |
                ((t << (32 - expo_z)) != 0);
        ww.lo = (ww.lo >> expo_z) | (ww.hi << (32 - expo_z));
        ww.hi = (ww.hi >> expo_z) | (zz.lo << (32 - expo_z));
        zz.lo = (zz.lo >> expo_z) | (zz.hi << (32 - expo_z));
        zz.hi = (zz.hi >> expo_z);
      }
    } else {
      t = 1;
      ww.lo = 0;
      ww.hi = 0;
      zz.lo = 0;
      zz.hi = 0;
    }
    if ((int)u < 0) {

      t = (unsigned)(-(int)t);
      s = (t != 0);
      u = yy.lo - s;
      s = u > yy.lo;
      yy.lo = u - ww.lo;
      s += yy.lo > u;
      u = yy.hi - s;
      s = u > yy.hi;
      yy.hi = u - ww.hi;
      s += yy.hi > u;
      u = xx.lo - s;
      s = u > xx.lo;
      xx.lo = u - zz.lo;
      s += xx.lo > u;
      xx.hi = (xx.hi - zz.hi) - s;
      if (!(xx.hi | xx.lo | yy.hi | yy.lo | t)) {

        if (rndMode == cudaRoundMinInf) {
          return __hiloint2double(0x80000000, xx.lo);
        } else {
          return __hiloint2double(xx.hi, xx.lo);
        }
      }
      if ((int)xx.hi < 0) {



        t = ~t;
        yy.lo = ~yy.lo;
        yy.hi = ~yy.hi;
        xx.lo = ~xx.lo;
        xx.hi = ~xx.hi;
        if (++t == 0) {
          if (++yy.lo == 0) {
            if (++yy.hi == 0) {
              if (++xx.lo == 0) {
              ++xx.hi;
              }
            }
          }
        }
        expo_y ^= 0x80000000;
      }


      while (!(xx.hi & 0x00100000)) {
        xx.hi = (xx.hi << 1) | (xx.lo >> 31);
        xx.lo = (xx.lo << 1) | (yy.hi >> 31);
        yy.hi = (yy.hi << 1) | (yy.lo >> 31);
        yy.lo = (yy.lo << 1);
        expo_x--;
      }
    } else {

      yy.lo = yy.lo + ww.lo;
      s = yy.lo < ww.lo;
      yy.hi = yy.hi + s;
      u = yy.hi < s;
      yy.hi = yy.hi + ww.hi;
      u += yy.hi < ww.hi;
      xx.lo = xx.lo + u;
      s = xx.lo < u;
      xx.lo = xx.lo + zz.lo;
      s += xx.lo < zz.lo;
      xx.hi = xx.hi + zz.hi + s;
      if (xx.hi & 0x00200000) {
        t = t | (yy.lo << 31);
        yy.lo = (yy.lo >> 1) | (yy.hi << 31);
        yy.hi = (yy.hi >> 1) | (xx.lo << 31);
        xx.lo = (xx.lo >> 1) | (xx.hi << 31);
        xx.hi = ((xx.hi & 0x80000000) | (xx.hi >> 1)) & ~0x40000000;
        expo_x++;
      }
    }
  }
  t = yy.lo | (t != 0);
  t = yy.hi | (t != 0);

  xx.hi |= expo_y;
  if (expo_x <= 0x7FD) {

    xx.hi = xx.hi & ~0x00100000;
    s = xx.lo & 1;
    u = xx.lo;
    if (rndMode == cudaRoundNearest) {
      xx.lo += (t == 0x80000000) ? s : (t >> 31);
    } else if (((rndMode == cudaRoundPosInf) && t && (!expo_y)) ||
               ((rndMode == cudaRoundMinInf) && t && expo_y)) {
      xx.lo += 1;
    }
    xx.hi += (u > xx.lo);
    xx.hi += ((expo_x + 1) << 20);
    return __hiloint2double(xx.hi, xx.lo);
  } else if ((int)expo_x >= 2046) {

    if ((rndMode == cudaRoundNearest) ||
        ((rndMode == cudaRoundPosInf) && (!expo_y)) ||
        ((rndMode == cudaRoundMinInf) && expo_y)) {
      xx.hi = (xx.hi & 0x80000000) | 0x7ff00000;
      xx.lo = 0;
    } else {
      xx.hi = (xx.hi & 0x80000000) | 0x7fefffff;
      xx.lo = 0xffffffff;
    }
    return __hiloint2double(xx.hi, xx.lo);
  }

  expo_x = (unsigned)(-(int)expo_x);
  if (expo_x > 54) {

    if (((rndMode == cudaRoundPosInf) && (!expo_y)) ||
        ((rndMode == cudaRoundMinInf) && expo_y)) {
      return __hiloint2double(xx.hi & 0x80000000, 1);
    } else {
      return __hiloint2double(xx.hi & 0x80000000, 0);
    }
  }
  yy.hi = xx.hi & 0x80000000;
  xx.hi = xx.hi & ~0xffe00000;
  if (expo_x >= 32) {
    t = xx.lo | (t != 0);
    xx.lo = xx.hi;
    xx.hi = 0;
    expo_x -= 32;
  }
  if (expo_x) {
    t = (t >> expo_x) | (xx.lo << (32 - expo_x)) | (t != 0);
    xx.lo = (xx.lo >> expo_x) | (xx.hi << (32 - expo_x));
    xx.hi = (xx.hi >> expo_x);
  }
  expo_x = xx.lo & 1;
  u = xx.lo;
  if (rndMode == cudaRoundNearest) {
    xx.lo += (t == 0x80000000) ? expo_x : (t >> 31);
  } else if (((rndMode == cudaRoundPosInf) && t && (!expo_y)) ||
             ((rndMode == cudaRoundMinInf) && t && expo_y)) {
    xx.lo += 1;
  }
  xx.hi += (u > xx.lo);
  xx.hi |= yy.hi;
  return __hiloint2double(xx.hi, xx.lo);
}

static __attribute__((__unused__)) double __fma_rn(double x, double y, double z)
{
  return __internal_fma_kernel(x, y, z, cudaRoundNearest);
}

static __attribute__((__unused__)) double __fma_rd(double x, double y, double z)
{
  return __internal_fma_kernel(x, y, z, cudaRoundMinInf);
}

static __attribute__((__unused__)) double __fma_ru(double x, double y, double z)
{
  return __internal_fma_kernel(x, y, z, cudaRoundPosInf);
}

static __attribute__((__unused__)) double __fma_rz(double x, double y, double z)
{
  return __internal_fma_kernel(x, y, z, cudaRoundZero);
}

static __attribute__((__unused__)) double __dadd_rz(double a, double b)
{
  return __fma_rz(a, 1.0, b);
}

static __attribute__((__unused__)) double __dadd_ru(double a, double b)
{
  return __fma_ru(a, 1.0, b);
}

static __attribute__((__unused__)) double __dadd_rd(double a, double b)
{
  return __fma_rd(a, 1.0, b);
}

static __attribute__((__unused__)) double __dmul_rz(double a, double b)
{
  return __fma_rz(a, b, __hiloint2double(0x80000000, 0x00000000));
}

static __attribute__((__unused__)) double __dmul_ru(double a, double b)
{
  return __fma_ru(a, b, __hiloint2double(0x80000000, 0x00000000));
}

static __attribute__((__unused__)) double __dmul_rd(double a, double b)
{
  return __fma_rd(a, b, 0.0);
}

static __attribute__((__unused__)) double __dadd_rn(double a, double b)
{
  return __fma_rn(a, 1.0, b);
}

static __attribute__((__unused__)) double __dmul_rn(double a, double b)
{
  return __fma_rn(a, b, __hiloint2double(0x80000000, 0x00000000));
}
# 4674 "/usr/local/cuda/bin/../include/device_functions.h" 2 3
# 1 "/usr/local/cuda/bin/../include/sm_20_atomic_functions.h" 1 3
# 79 "/usr/local/cuda/bin/../include/sm_20_atomic_functions.h" 3
extern "C" {


extern void __cudaMutexOperation(int lock);


}







static __attribute__((__unused__)) float __fAtomicAdd(float *address, float val)
{
  float old;

  __cudaMutexOperation(1); old = *address; *address = old + val; __cudaMutexOperation(0);



  return old;
}
# 4675 "/usr/local/cuda/bin/../include/device_functions.h" 2 3
# 1 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h" 1 3
# 156 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h" 3
static __attribute__((__unused__)) void __threadfence_system(void)
{
  __syncthreads();
}

static __attribute__((__unused__)) unsigned int __ballot(int pred)
{
  return (unsigned int)1;
}

static __attribute__((__unused__)) int __syncthreads_count(int pred)
{
  return 1;
}

static __attribute__((__unused__)) int __syncthreads_and(int pred)
{
  return pred;
}

static __attribute__((__unused__)) int __syncthreads_or(int pred)
{
  return pred;
}

static __attribute__((__unused__)) long long int clock64(void)
{
  return (long long int)__cuda_clock();
}

static __attribute__((__unused__)) double __internal_ddiv_kernel (double x, double y, enum cudaRoundMode mode)

{
  volatile union __cudart_DoubleLonglongCvt cvt;
  unsigned long long a, b, q, sign;
  int expoa, expob, normalize, i;

  cvt.d = x;
  a = cvt.i;
  cvt.d = y;
  b = cvt.i;

  sign = (a ^ b) & 0x8000000000000000ULL;

  expoa = ((int)(a >> 52) & 0x7ff) - 1;
  expob = ((int)(b >> 52) & 0x7ff) - 1;

  if (((unsigned)expoa >= 0x7fe) || ((unsigned)expob >= 0x7fe)) {

    if ((a << 1) > 0xffe0000000000000ULL) {
      cvt.i = a | 0x0008000000000000ULL;
      return cvt.d;
    }
    if ((b << 1) > 0xffe0000000000000ULL) {
      cvt.i = b | 0x0008000000000000ULL;
      return cvt.d;
    }

    if ((((a << 1) == 0x0000000000000000ULL) &&
         ((b << 1) == 0x0000000000000000ULL)) ||
        (((a << 1) == 0xffe0000000000000ULL) &&
         ((b << 1) == 0xffe0000000000000ULL))) {
      cvt.i = 0xfff8000000000000ULL;
      return cvt.d;
    }

    if (((a << 1) == 0x0000000000000000ULL) ||
        ((b << 1) == 0xffe0000000000000ULL)) {
      cvt.i = sign;
      return cvt.d;
    }

    if (((b << 1) == 0x0000000000000000ULL) ||
        ((a << 1) == 0xffe0000000000000ULL)) {
      cvt.i = sign | 0x7ff0000000000000ULL;
      return cvt.d;
    }
    if (expoa < 0) {
      a = a << 12;
      while ((long long)a > 0) {
        a = a + a;
        expoa--;
      }
      a = a >> 11;
    }
    if (expob < 0) {
      b = b << 12;
      while ((long long)b > 0) {
        b = b + b;
        expob--;
      }
      b = b >> 11;
    }
  }
  a = (a & 0x000fffffffffffffULL) | 0x0010000000000000ULL;
  b = (b & 0x000fffffffffffffULL) | 0x0010000000000000ULL;

  q = 0ULL;
  a = a - b;
  normalize = (long long)a < 0;
  for (i = 0; i < (54 + normalize); i++) {
    if ((long long)a < 0) {
      q = q + q;
      a = a + a;
      a = a + b;
    } else {
      q = q + q + 1;
      a = a + a;
      a = a - b;
    }
  }
  expoa = (expoa - expob) - normalize + 1022;
  if ((unsigned)expoa < 0x7fe) {

    if (mode == cudaRoundNearest) {
      q++;
    } else if ((mode == cudaRoundPosInf) && (!sign)) {
      if ((q & 1) || (a != (unsigned long long)-(long long)b)) q += 2;
    } else if ((mode == cudaRoundMinInf) && (sign)) {
      if ((q & 1) || (a != (unsigned long long)-(long long)b)) q += 2;
    }
    q = (q >> 1) & 0x000fffffffffffffULL;
    q = sign | (((long long)(expoa+1) << 52) + q);
  } else if (expoa >= 0x7fe) {

    if ((mode == cudaRoundNearest) ||
        ((mode == cudaRoundPosInf) && !sign) ||
        ((mode == cudaRoundMinInf) && sign)) {
      q = sign | 0x7ff0000000000000ULL;
    } else {
      q = sign | 0x7fefffffffffffffULL;
    }
  } else {

    unsigned long long sticky;
    expoa = -expoa;
    if (expoa > 63) expoa = 63;

    sticky = (q << (64 - expoa)) | (a!=(unsigned long long)-(long long)b);
    q = q >> expoa;
    if (mode == cudaRoundNearest) {
      if ((q & 1) && (sticky || (q & 2))) q++;
    } else if ((mode == cudaRoundPosInf) && (!sign)) {
      if ((q & 1) || (sticky)) q += 2;
    } else if ((mode == cudaRoundMinInf) && (sign)) {
      if ((q & 1) || (sticky)) q += 2;
    }
    q = q >> 1;
    q = q | sign;
  }
  cvt.i = q;
  return cvt.d;
}

static __attribute__((__unused__)) double __ddiv_rn(double a, double b)
{
  return __internal_ddiv_kernel (a, b, cudaRoundNearest);
}

static __attribute__((__unused__)) double __ddiv_rz(double a, double b)
{
  return __internal_ddiv_kernel (a, b, cudaRoundZero);
}

static __attribute__((__unused__)) double __ddiv_ru(double a, double b)
{
  return __internal_ddiv_kernel (a, b, cudaRoundPosInf);
}

static __attribute__((__unused__)) double __ddiv_rd(double a, double b)
{
  return __internal_ddiv_kernel (a, b, cudaRoundMinInf);
}

static __attribute__((__unused__)) double __drcp_rn(double a)
{
  return __internal_ddiv_kernel (1.0, a, cudaRoundNearest);
}

static __attribute__((__unused__)) double __drcp_rz(double a)
{
  return __internal_ddiv_kernel (1.0, a, cudaRoundZero);
}

static __attribute__((__unused__)) double __drcp_ru(double a)
{
  return __internal_ddiv_kernel (1.0, a, cudaRoundPosInf);
}

static __attribute__((__unused__)) double __drcp_rd(double a)
{
  return __internal_ddiv_kernel (1.0, a, cudaRoundMinInf);
}

static __attribute__((__unused__)) double __internal_dsqrt_kernel (double a, enum cudaRoundMode mode)

{
  volatile union __cudart_DoubleLonglongCvt cvt;
  unsigned long long ia, manthi, mantlo;
  unsigned long long t, q, r, s;
  int expoa;
  int round, sticky, odd;
  int sign;

  cvt.d = a;
  ia = cvt.i;
  expoa = ((int)(ia >> 52) & 0x7ff) - 1;
  sign = (int)(ia >> 63);


  if (((unsigned)expoa >= 0x7fe) || sign) {

    if ((ia << 1) > 0xffe0000000000000ULL) {
      cvt.i |= 0x0008000000000000ULL;
      return cvt.d;
    }

    if (ia > 0x8000000000000000ULL) {
      cvt.i = 0xfff8000000000000ULL;
      return cvt.d;
    }

    if ((ia << 1) == 0xffe0000000000000ULL) {
      return cvt.d;
    }

    if ((ia << 1) == 0x0000000000000000ULL) {
      return cvt.d;
    }

    if (expoa < 0) {
      ia = ia << 12;
      while ((long long)ia > 0) {
        ia = ia + ia;
        expoa--;
      }
      ia = ia >> 11;
    }
  }


  ia = (ia << 11) | 0x8000000000000000ULL;
  if (!(expoa & 1)) {

    ia >>= 1;
  }

  manthi = ia >> 32;
  mantlo = ia & 0xffffffffULL;


  t = ((manthi >> 24) | 0x100) >> 1;
  t = (expoa & 1) ? (t - 10) : t;
  q = ((manthi >> 16) / t);
  t = (((q + t) >> 1) << 8) | 0xff;
  q = manthi / t;
  t = (q + t) >> 1;
  if (t > 0xffff) t = 0xffff;


  r = manthi - t * t;
  while ((long long)r < 0) {
    t--;
    r += 2 * t + 1;
  }


  s = ((r << 15) + (mantlo >> 17)) / t;
  if (s > 0xffff) s = 0xffff;


  r = (r << 32) + mantlo;
  r = r - (t << 17) * s;
  r = r - s * s;
  t = (t << 16) + s;
  while ((long long)r < 0) {
    t--;
    r += 2 * t + 1;
  }


  s = (r << 15) / t;
  if (s > 0xffff) s = 0xffff;


  r = r << 32;
  r = r - (t << 17) * s;
  r = r - s * s;
  t = (t << 16) + s;
  while ((long long)r < 0) {
    t--;
    r += 2 * t + 1;
  }


  s = (r << 5) / t;
  if (s > 0x3f) s = 0x3f;


  r = r << 12;
  r = r - ((t << 7) + s) * s;
  t = (t << 6) + s;
  while ((long long)r < 0) {
    t--;
    r += 2 * t + 1;
  }


  round = (int)(t & 1);
  sticky = (r != 0ULL);
  t = t >> 1;
  odd = (int)(t & 1);


  if (mode == cudaRoundNearest) {
    t += round && (sticky || odd);
  } else if (mode == cudaRoundPosInf) {
    t += round || sticky;
  }


  expoa = (expoa >> 1) + 0x1ff;
  q = (((unsigned long long int)expoa) << 52) + t;
  cvt.i = q;
  return cvt.d;
}

static __attribute__((__unused__)) double __dsqrt_rn(double a)
{
  return __internal_dsqrt_kernel (a, cudaRoundNearest);
}

static __attribute__((__unused__)) double __dsqrt_rz(double a)
{
  return __internal_dsqrt_kernel (a, cudaRoundZero);
}

static __attribute__((__unused__)) double __dsqrt_ru(double a)
{
  return __internal_dsqrt_kernel (a, cudaRoundPosInf);
}

static __attribute__((__unused__)) double __dsqrt_rd(double a)
{
  return __internal_dsqrt_kernel (a, cudaRoundMinInf);
}

static __attribute__((__unused__)) float __fmaf_ieee_rn(float a, float b, float c)
{
  return __fmaf_rn(a, b, c);
}

static __attribute__((__unused__)) float __fmaf_ieee_ru(float a, float b, float c)
{
  return __fmaf_ru(a, b, c);
}

static __attribute__((__unused__)) float __fmaf_ieee_rd(float a, float b, float c)
{
  return __fmaf_rd(a, b, c);
}

static __attribute__((__unused__)) float __fmaf_ieee_rz(float a, float b, float c)
{
  return __fmaf_rz(a, b, c);
}
# 4676 "/usr/local/cuda/bin/../include/device_functions.h" 2 3
# 1 "/usr/local/cuda/bin/../include/texture_fetch_functions.h" 1 3
# 1911 "/usr/local/cuda/bin/../include/texture_fetch_functions.h" 3
extern "C" {


extern void __cudaTextureFetch(const void *tex, void *index, int integer, void *val);


}


static __attribute__((__unused__)) int4 __itexfetchi(const void *tex, int4 index)
{
  int4 val;

  __cudaTextureFetch(tex, (void*)&index, 1, (void*)&val);

  return val;
}

static __attribute__((__unused__)) uint4 __utexfetchi(const void *tex, int4 index)
{
  uint4 val;

  __cudaTextureFetch(tex, (void*)&index, 1, (void*)&val);

  return val;
}

static __attribute__((__unused__)) float4 __ftexfetchi(const void *tex, int4 index)
{
  float4 val;

  __cudaTextureFetch(tex, (void*)&index, 1, (void*)&val);

  return val;
}

static __attribute__((__unused__)) int4 __itexfetch(const void *tex, float4 index, int dim)
{
  int4 val;

  __cudaTextureFetch(tex, (void*)&index, 0, (void*)&val);

  return val;
}

static __attribute__((__unused__)) uint4 __utexfetch(const void *tex, float4 index, int dim)
{
  uint4 val;

  __cudaTextureFetch(tex, (void*)&index, 0, (void*)&val);

  return val;
}

static __attribute__((__unused__)) float4 __ftexfetch(const void *tex, float4 index, int dim)
{
  float4 val;

  __cudaTextureFetch(tex, (void*)&index, 0, (void*)&val);

  return val;
}
# 4677 "/usr/local/cuda/bin/../include/device_functions.h" 2 3
# 995 "/usr/local/cuda/bin/../include/math_functions.h" 2 3


static __attribute__((__unused__)) int __cuda___signbitf(float a)
{
  return (int)((unsigned int)__float_as_int(a) >> 31);
}




static __attribute__((__unused__)) float __cuda_copysignf(float a, float b)
{
  return __int_as_float((__float_as_int(b) & 0x80000000) |
                        (__float_as_int(a) & ~0x80000000));
}
# 1019 "/usr/local/cuda/bin/../include/math_functions.h" 3
static __attribute__((__unused__)) float __internal_nearbyintf(float a)
{
  float fa = fabsf(a);

  if (fa >= 8388608.0f) {
    return a;
  } else {
    volatile float u = 8388608.0f + fa;

    u = u - 8388608.0f;
    return copysignf(u, a);
  }
}

static __attribute__((__unused__)) float __internal_fminf(float a, float b)
{
  volatile union {
    float f;
    unsigned int i;
  } cvta, cvtb;
  int nana, nanb;

  cvta.f = a;
  cvtb.f = b;
  nana = ((cvta.i << 1) > 0xff000000);
  nanb = ((cvtb.i << 1) > 0xff000000);
  if (nana && nanb) return a + b;
  if (nana) return b;
  if (nanb) return a;
  if ((cvta.i | cvtb.i) == 0x80000000) {
    return __int_as_float(0x80000000);
  }
  return a < b ? a : b;
}

static __attribute__((__unused__)) float __internal_fmaxf(float a, float b)
{
  volatile union {
    float f;
    unsigned int i;
  } cvta, cvtb;
  int nana, nanb;

  cvta.f = a;
  cvtb.f = b;
  nana = ((cvta.i << 1) > 0xff000000);
  nanb = ((cvtb.i << 1) > 0xff000000);
  if (nana && nanb) return a + b;
  if (nana) return b;
  if (nanb) return a;
  if ((cvta.f == 0.0f) && (cvtb.f == 0.0f)) {
    cvta.i &= cvtb.i;
    return cvta.f;
  }
  return a > b ? a : b;
}
# 1084 "/usr/local/cuda/bin/../include/math_functions.h" 3
static __attribute__((__unused__)) long int __cuda_labs(long int a)
{
  return labs(a);
}

static __attribute__((__unused__)) float __cuda_ceilf(float a)
{
  return ceilf(a);
}

static __attribute__((__unused__)) float __cuda_floorf(float a)
{
  return floorf(a);
}

static __attribute__((__unused__)) float __cuda_sqrtf(float a)
{
  return sqrtf(a);
}

static __attribute__((__unused__)) float __cuda_rsqrtf(float a)
{
  return rsqrtf(a);
}

static __attribute__((__unused__)) float __cuda_truncf(float a)
{
  return truncf(a);
}

static __attribute__((__unused__)) int __cuda_max(int a, int b)
{



  return a > b ? a : b;

}

static __attribute__((__unused__)) int __cuda_min(int a, int b)
{



  return a < b ? a : b;

}

static __attribute__((__unused__)) unsigned int __cuda_umax(unsigned int a, unsigned int b)
{



  return a > b ? a : b;

}

static __attribute__((__unused__)) unsigned int __cuda_umin(unsigned int a, unsigned int b)
{



  return a < b ? a : b;

}

static __attribute__((__unused__)) long long int __cuda_llmax(long long int a, long long int b)
{



  return a > b ? a : b;

}

static __attribute__((__unused__)) long long int __cuda_llmin(long long int a, long long int b)
{



  return a < b ? a : b;

}

static __attribute__((__unused__)) unsigned long long int __cuda_ullmax(unsigned long long int a, unsigned long long int b)
{



  return a > b ? a : b;

}

static __attribute__((__unused__)) unsigned long long int __cuda_ullmin(unsigned long long int a, unsigned long long int b)
{



  return a < b ? a : b;

}

static __attribute__((__unused__)) long long int __cuda_llrintf(float a)
{
  return __float2ll_rn(a);
}

static __attribute__((__unused__)) long int __cuda_lrintf(float a)
{



  return (long int)__float2int_rn(a);

}

static __attribute__((__unused__)) float __cuda_nearbyintf(float a)
{



  return __internal_nearbyintf(a);

}

static __attribute__((__unused__)) float __cuda_fmaxf(float a, float b)
{



  return __internal_fmaxf(a, b);

}

static __attribute__((__unused__)) float __cuda_fminf(float a, float b)
{



  return __internal_fminf(a, b);

}






static __attribute__((__unused__)) int __cuda___finitef(float a)
{
  return __cuda_fabsf(a) < __int_as_float(0x7f800000);
}
# 1246 "/usr/local/cuda/bin/../include/math_functions.h" 3
static __attribute__((__unused__)) int __cuda___isinff(float a)
{
  return __cuda_fabsf(a) == __int_as_float(0x7f800000);
}

static __attribute__((__unused__)) int __cuda___isnanf(float a)
{
  return !(__cuda_fabsf(a) <= __int_as_float(0x7f800000));
}

static __attribute__((__unused__)) float __cuda_nextafterf(float a, float b)
{
  unsigned int ia;
  unsigned int ib;
  ia = __float_as_int(a);
  ib = __float_as_int(b);




  if (__cuda___isnanf(a) || __cuda___isnanf(b)) return a + b;
  if (__int_as_float (ia | ib) == 0.0f) return __int_as_float(ib);





  if (__int_as_float(ia) == 0.0f) {
    return __int_as_float (0x00000001 | (__float_as_int(b) & 0x80000000));
  }

  if ((a < b) && (a < 0.0f)) ia--;
  if ((a < b) && (a > 0.0f)) ia++;
  if ((a > b) && (a < 0.0f)) ia++;
  if ((a > b) && (a > 0.0f)) ia--;
  a = __int_as_float(ia);





  return a;
}

static __attribute__((__unused__)) unsigned long long int __internal_nan_kernel(const char *s)
{
  unsigned long long i = 0;
  int c;
  int ovfl = 0;
  int invld = 0;
  if (s && (*s == '0')) {
    s++;
    if ((*s == 'x') || (*s == 'X')) {
      s++;
      while (*s == '0') s++;
      while (*s) {
        if (i > 0x0fffffffffffffffULL) {
          ovfl = 1;
        }
        c = (((*s) >= 'A') && ((*s) <= 'F')) ? (*s + 'a' - 'A') : (*s);
        if ((c >= 'a') && (c <= 'f')) {
          c = c - 'a' + 10;
          i = i * 16 + c;
        } else if ((c >= '0') && (c <= '9')) {
          c = c - '0';
          i = i * 16 + c;
        } else {
          invld = 1;
        }
        s++;
      }
    } else {
      while (*s == '0') s++;
      while (*s) {
        if (i > 0x1fffffffffffffffULL) {
          ovfl = 1;
        }
        c = *s;
        if ((c >= '0') && (c <= '7')) {
          c = c - '0';
          i = i * 8 + c;
        } else {
          invld = 1;
        }
        s++;
      }
    }
  } else if (s) {
    while (*s) {
      c = *s;
      if ((i > 1844674407370955161ULL) ||
          ((i == 1844674407370955161ULL) && (c > '5'))) {
        ovfl = 1;
      }
      if ((c >= '0') && (c <= '9')) {
        c = c - '0';
        i = i * 10 + c;
      } else {
        invld = 1;
      }
      s++;
    }
  }
  if (ovfl) {
    i = ~0ULL;
  }
  if (invld) {
    i = 0ULL;
  }
  i = (i & 0x000fffffffffffffULL) | 0x7ff8000000000000ULL;
  return i;
}

static __attribute__((__unused__)) float __cuda_nanf(const char *tagp)
{




  unsigned int i;

  i = (unsigned int)__internal_nan_kernel (tagp);
  return __int_as_float((i & 0x007fffff) | 0x7fc00000);

}

static __attribute__((__unused__)) float __internal_fmad(float a, float b, float c)
{

  return __fmaf_rn (a, b, c);



}


static __attribute__((__unused__)) float __internal_atanhf_kernel(float a_1, float a_2)
{
  float a, a2, t;

  a = a_1 + a_2;
  a2 = a * a;
  t = 1.566305595598990E-001f/64.0f;
  t = __internal_fmad (t, a2, 1.995081856004762E-001f/16.0f);
  t = __internal_fmad (t, a2, 3.333382699617026E-001f/4.0f);
  t = t * a2;
  t = __internal_fmad (t, a, a_2);
  t = t + a_1;
  return t;
}




static __attribute__((__unused__)) float __internal_atanf_kernel(float a)
{
  float t4, t0, t1;

  t4 = a * a;
  t0 = -5.674867153f;
  t0 = __internal_fmad (t4, -0.823362947f, t0);
  t0 = __internal_fmad (t0, t4, -6.565555096f);
  t0 = t0 * t4;
  t0 = t0 * a;
  t1 = t4 + 11.33538818f;
  t1 = __internal_fmad (t1, t4, 28.84246826f);
  t1 = __internal_fmad (t1, t4, 19.69667053f);
  t1 = 1.0f / t1;
  a = __internal_fmad (t0, t1, a);
  return a;
}


static __attribute__((__unused__)) float __internal_tan_kernel(float a)
{
  float a2, s, t;

  a2 = a * a;
  t = __internal_fmad (4.114678393115178E-003f, a2, -8.231194034909670E-001f);
  s = a2 - 2.469348886157666E+000f;
  s = 1.0f / s;
  t = t * s;
  t = t * a2;
  t = __internal_fmad (t, a, a);
  return t;
}

static __attribute__((__unused__)) float __internal_accurate_logf(float a)
{
  float t;
  float z;
  float m;
  int ia;
  ia = __float_as_int(a);

  if ((a > 0.0f) && (a < __int_as_float(0x7f800000))) {
    int e = -127;


    if ((unsigned)ia < (unsigned)0x00800000) {
      a = a * 16777216.0f;
      e -= 24;
      ia = __float_as_int(a);
    }


    m = __int_as_float((ia & 0x807fffff) | 0x3f800000);
    e += ((unsigned)ia >> 23);
    if (m > 1.414213562f) {
      m = m * 0.5f;
      e = e + 1;
    }
    t = m - 1.0f;
    z = m + 1.0f;
    z = __fdividef (t, z);
    z = -t * z;
    z = __internal_atanhf_kernel(t, z);
    z = __internal_fmad ((float)e, 0.693147181f, z);
    return z;
  } else {

    return __logf(a);
  }
}

static __attribute__((__unused__)) float2 __internal_log_ep(float a)
{
  float2 res;
  int expo;
  float m;
  float log_hi, log_lo;
  float t_hi, t_lo;
  float f, g, u, v, q;

  volatile

  float r, s, e;
  expo = (__float_as_int(a) >> 23) & 0xff;


  if (expo == 0) {
    a *= 16777216.0f;
    expo = (__float_as_int(a) >> 23) & 0xff;
    expo -= 24;
  }

  expo -= 127;
  m = __int_as_float((__float_as_int(a) & 0x807fffff) | 0x3f800000);
  if (m > 1.414213562f) {
    m = m * 0.5f;
    expo = expo + 1;
  }






  f = m - 1.0f;
  g = m + 1.0f;
  g = 1.0f / g;
  u = 2.0f * f * g;
  v = u * u;
  q = 1.49356810919559350E-001f/64.0f;
  q = __internal_fmad (q, v, 1.99887797540072460E-001f/16.0f);
  q = __internal_fmad (q, v, 3.33333880955515580E-001f/4.0f);
  q = q * v;
  q = q * u;
  log_hi = __int_as_float(__float_as_int(u) & 0xfffff000);
  v = __int_as_float(__float_as_int(f) & 0xfffff000);
  u = 2.0f * (f - log_hi);
  f = f - v;
  u = __internal_fmad (-log_hi, v, u);
  u = __internal_fmad (-log_hi, f, u);
  u = g * u;



  r = log_hi + u;
  s = u - (r - log_hi);
  log_hi = r;
  log_lo = s;

  r = log_hi + q;
  s = ((log_hi - r) + q) + log_lo;
  log_hi = e = r + s;
  log_lo = (r - e) + s;


  t_hi = expo * 0.6931457519f;
  t_lo = expo * 1.4286067653e-6f;


  r = t_hi + log_hi;
  s = (((t_hi - r) + log_hi) + log_lo) + t_lo;
  res.y = e = r + s;
  res.x = (r - e) + s;
  return res;
}

static __attribute__((__unused__)) float __internal_accurate_log2f(float a)
{
  return 1.442695041f * __internal_accurate_logf(a);
}




static __attribute__((__unused__)) float2 __internal_dsmul (float2 x, float2 y)
{
    float2 z;


    volatile

    float up, vp, u1, u2, v1, v2, mh, ml;
    up = x.y * 4097.0f;
    u1 = (x.y - up) + up;
    u2 = x.y - u1;
    vp = y.y * 4097.0f;
    v1 = (y.y - vp) + vp;
    v2 = y.y - v1;
    mh = __fmul_rn(x.y,y.y);
    ml = (((u1 * v1 - mh) + u1 * v2) + u2 * v1) + u2 * v2;
    ml = (__fmul_rn(x.y,y.x) + __fmul_rn(x.x,y.y)) + ml;
    z.y = up = mh + ml;
    z.x = (mh - up) + ml;
# 1586 "/usr/local/cuda/bin/../include/math_functions.h" 3
    return z;
}


static unsigned int __cudart_i2opi_f [] = {
  0x3c439041,
  0xdb629599,
  0xf534ddc0,
  0xfc2757d1,
  0x4e441529,
  0xa2f9836e,
};


static __attribute__((__unused__)) float __internal_trig_reduction_kernel(float a, int *quadrant)
{
  float j;
  int q;
  if (__cuda_fabsf(a) > 48039.0f) {

    unsigned int ia = __float_as_int(a);
    unsigned int s = ia & 0x80000000;
    unsigned int result[7];
    unsigned int phi, plo;
    unsigned int hi, lo;
    unsigned int e;
    int idx;
    e = ((ia >> 23) & 0xff) - 128;
    ia = (ia << 8) | 0x80000000;

    idx = 4 - (e >> 5);
    hi = 0;



    for (q = 0; q < 6; q++) {
      plo = __cudart_i2opi_f[q] * ia;
      phi = __umulhi (__cudart_i2opi_f[q], ia);
      lo = hi + plo;
      hi = phi + (lo < plo);
      result[q] = lo;
    }
    result[q] = hi;
    e = e & 31;



    hi = result[idx+2];
    lo = result[idx+1];
    if (e) {
      q = 32 - e;
      hi = (hi << e) + (lo >> q);
      lo = (lo << e) + (result[idx] >> q);
    }
    q = hi >> 30;

    hi = (hi << 2) + (lo >> 30);
    lo = (lo << 2);
    e = (hi + (lo > 0)) > 0x80000000;
    q += e;
    if (s) q = -q;
    if (e) {
      unsigned int t;
      hi = ~hi;
      lo = -(int)lo;
      t = (lo == 0);
      hi += t;
      s = s ^ 0x80000000;
    }
    *quadrant = q;

    e = 0;
    while ((int)hi > 0) {
      hi = (hi << 1) + (lo >> 31);
      lo = (lo << 1);
      e--;
    }
    lo = hi * 0xc90fdaa2;
    hi = __umulhi(hi, 0xc90fdaa2);
    if ((int)hi > 0) {
      hi = (hi << 1) + (lo >> 31);
      lo = (lo << 1);
      e--;
    }
    hi = hi + (lo > 0);
    ia = s | (((e + 126) << 23) + (hi >> 8) + ((hi << 24) >= 0x80000000));
    return __int_as_float(ia);
  }
  q = __float2int_rn (a * 0.636619772f);
  j = (float)q;
  a = __internal_fmad (-j, 1.5703125000000000e+000f, a);


  a = __fmaf_rn (-j, 4.8382673412561417e-004f, a);




  a = __internal_fmad (-j, 6.0771005065061922e-011f, a);
  *quadrant = q;
  return a;
}
# 1698 "/usr/local/cuda/bin/../include/math_functions.h" 3
static __attribute__((__unused__)) float __internal_expf_kernel(float a, float scale)
{
  float j, z;

  j = __cuda_truncf(a * 1.442695041f);
  z = __internal_fmad (j, -0.6931457519f, a);
  z = __internal_fmad (j, -1.4286067653e-6f, z);
  z = z * 1.442695041f;
  z = __cuda_exp2f(z) * __cuda_exp2f(j + scale);
  return z;
}

static __attribute__((__unused__)) float __internal_accurate_expf(float a)
{
  float z;

  z = __internal_expf_kernel(a, 0.0f);
  if (a < -105.0f) z = 0.0f;
  if (a > 105.0f) z = __int_as_float(0x7f800000);
  return z;
}

static __attribute__((__unused__)) float __internal_accurate_exp10f(float a)
{
  float j, z;

  j = __cuda_truncf(a * 3.321928094f);
  z = __internal_fmad (j, -3.0102920532226563e-001f, a);
  z = __internal_fmad (j, -7.9034171557301747e-007f, z);
  z = z * 3.321928094f;
  z = __cuda_exp2f(z) * __cuda_exp2f(j);
  if (a < -46.0f) z = 0.0f;
  if (a > 46.0f) z = __int_as_float(0x7f800000);
  return z;
}

static __attribute__((__unused__)) float __internal_lgammaf_pos(float a)
{
  float sum;
  float s, t;

  if (a == __int_as_float(0x7f800000)) {
    return a;
  }
  if (a >= 3.0f) {
    if (a >= 7.8f) {



      s = __fdividef (1.0f, a);
      t = s * s;
      sum = 0.77783067e-3f;
      sum = __internal_fmad (sum, t, -0.2777655457e-2f);
      sum = __internal_fmad (sum, t, 0.83333273853e-1f);
      sum = __internal_fmad (sum, s, 0.918938533204672f);
      s = 0.5f * __internal_accurate_logf(a);
      t = a - 0.5f;
      s = s * t;
      t = s - a;
      s = __fadd_rn(s, sum);
      t = t + s;
      return t;
    } else {
      a = a - 3.0f;
      s = -7.488903254816711E+002f;
      s = __internal_fmad (s, a, -1.234974215949363E+004f);
      s = __internal_fmad (s, a, -4.106137688064877E+004f);
      s = __internal_fmad (s, a, -4.831066242492429E+004f);
      s = __internal_fmad (s, a, -1.430333998207429E+005f);
      t = a - 2.592509840117874E+002f;
      t = __internal_fmad (t, a, -1.077717972228532E+004f);
      t = __internal_fmad (t, a, -9.268505031444956E+004f);
      t = __internal_fmad (t, a, -2.063535768623558E+005f);
      t = __fdividef (s, t);
      t = t + a;
      return t;
    }
  } else if (a >= 1.5f) {
    a = a - 2.0f;
    t = 4.959849168282574E-005f;
    t = __internal_fmad (t, a, -2.208948403848352E-004f);
    t = __internal_fmad (t, a, 5.413142447864599E-004f);
    t = __internal_fmad (t, a, -1.204516976842832E-003f);
    t = __internal_fmad (t, a, 2.884251838546602E-003f);
    t = __internal_fmad (t, a, -7.382757963931180E-003f);
    t = __internal_fmad (t, a, 2.058131963026755E-002f);
    t = __internal_fmad (t, a, -6.735248600734503E-002f);
    t = __internal_fmad (t, a, 3.224670187176319E-001f);
    t = __internal_fmad (t, a, 4.227843368636472E-001f);
    t = t * a;
    return t;
  } else if (a >= 0.7f) {
    a = 1.0f - a;
    t = 4.588266515364258E-002f;
    t = __internal_fmad (t, a, 1.037396712740616E-001f);
    t = __internal_fmad (t, a, 1.228036339653591E-001f);
    t = __internal_fmad (t, a, 1.275242157462838E-001f);
    t = __internal_fmad (t, a, 1.432166835245778E-001f);
    t = __internal_fmad (t, a, 1.693435824224152E-001f);
    t = __internal_fmad (t, a, 2.074079329483975E-001f);
    t = __internal_fmad (t, a, 2.705875136435339E-001f);
    t = __internal_fmad (t, a, 4.006854436743395E-001f);
    t = __internal_fmad (t, a, 8.224669796332661E-001f);
    t = __internal_fmad (t, a, 5.772156651487230E-001f);
    t = t * a;
    return t;
  } else {
    t = 3.587515669447039E-003f;
    t = __internal_fmad (t, a, -5.471285428060787E-003f);
    t = __internal_fmad (t, a, -4.462712795343244E-002f);
    t = __internal_fmad (t, a, 1.673177015593242E-001f);
    t = __internal_fmad (t, a, -4.213597883575600E-002f);
    t = __internal_fmad (t, a, -6.558672843439567E-001f);
    t = __internal_fmad (t, a, 5.772153712885004E-001f);
    t = t * a;
    t = __internal_fmad (t, a, a);
    return -__internal_accurate_logf(t);
  }
}


static __attribute__((__unused__)) float __internal_sin_kernel(float x)
{
  float x2, z;

  x2 = x * x;
  z = -1.95152959e-4f;
  z = __internal_fmad (z, x2, 8.33216087e-3f);
  z = __internal_fmad (z, x2, -1.66666546e-1f);
  z = z * x2;
  z = __internal_fmad (z, x, x);
  return z;
}


static __attribute__((__unused__)) float __internal_cos_kernel(float x)
{
  float x2, z;

  x2 = x * x;
  z = 2.44331571e-5f;
  z = __internal_fmad (z, x2, -1.38873163e-3f);
  z = __internal_fmad (z, x2, 4.16666457e-2f);
  z = __internal_fmad (z, x2, -5.00000000e-1f);
  z = __internal_fmad (z, x2, 1.00000000e+0f);
  return z;
}

static __attribute__((__unused__)) float __internal_accurate_sinf(float a)
{
  float z;
  int i;

  if ((__cuda___isinff(a)) || (a == 0.0f)) {
    return __fmul_rn (a, 0.0f);
  }
  z = __internal_trig_reduction_kernel(a, &i);

  if (i & 1) {
    z = __internal_cos_kernel(z);
  } else {
    z = __internal_sin_kernel(z);
  }
  if (i & 2) {
    z = -z;
  }
  return z;
}







static __attribute__((__unused__)) float __cuda_rintf(float a)
{
  return __cuda_nearbyintf(a);
}

static __attribute__((__unused__)) float __cuda_sinf(float a)
{



  return __internal_accurate_sinf(a);

}

static __attribute__((__unused__)) float __cuda_sinpif(float a)
{
  float z;
  int i;

  if ((__cuda___isinff(a)) || (a == 0.0f)) {
    return __fmul_rn (a, 0.0f);
  }
  if (a == __cuda_floorf(a)) {
    return __int_as_float(__float_as_int(a) & 0x80000000);
  }
  i = (int)__cuda_rintf (a * 2.0f);
  z = __internal_fmad ((float)i, -0.5f, a);
  z = z * 3.141592654f;
  if (i & 1) {
    z = __internal_cos_kernel(z);
  } else {
    z = __internal_sin_kernel(z);
  }
  if (i & 2) {
    z = -z;
  }
  return z;
}

static __attribute__((__unused__)) float __cuda_cosf(float a)
{



  float z;
  int i;

  if (__cuda___isinff(a)) {
    return __fadd_rn (a, -a);
  }
  z = __internal_trig_reduction_kernel(a, &i);

  i++;
  if (i & 1) {
    z = __internal_cos_kernel(z);
  } else {
    z = __internal_sin_kernel(z);
  }
  if (i & 2) {
    z = -z;
  }
  return z;

}

static __attribute__((__unused__)) float __cuda_tanf(float a)
{



  float z;
  int i;

  if (__cuda___isinff(a)) {
    return __fadd_rn (a, -a);
  }
  z = __internal_trig_reduction_kernel(a, &i);

  z = __internal_tan_kernel(z);
  if (i & 1) {
    z = - (1.0f / z);
  }
  return z;

}

static __attribute__((__unused__)) float __cuda_log2f(float a)
{



  return __internal_accurate_log2f(a);

}

static __attribute__((__unused__)) float __cuda_expf(float a)
{



  return __internal_accurate_expf(a);

}

static __attribute__((__unused__)) float __cuda_exp10f(float a)
{



  return __internal_accurate_exp10f(a);

}

static __attribute__((__unused__)) float __cuda_coshf(float a)
{
  float z;


  if (__cuda___isnanf(a)) return a + a;

  a = __cuda_fabsf(a);
  z = __internal_expf_kernel(a, -2.0f);
  z = __internal_fmad (2.0f, z, __fdividef (0.125f, z));
  if (a >= 90.0f) {
    z = __int_as_float(0x7f800000);
  }
  return z;
}

static __attribute__((__unused__)) float __cuda_sinhf(float a)
{
  float s, z;

  s = a;
  a = __cuda_fabsf(a);
  if (a >= 1.0f) {
    z = __internal_expf_kernel(a, -2.0f);
    z = __internal_fmad (2.0f, z, -__fdividef (0.125f, z));
    if (a >= 90.0f) {
      z = __int_as_float(0x7f800000);
    }
    z = __int_as_float(__float_as_int(z) | (__float_as_int(s) & 0x80000000));
  } else {
    float a2 = s * s;

    z = 2.816951222e-6f;
    z = __internal_fmad (z, a2, 1.983615978e-4f);
    z = __internal_fmad (z, a2, 8.333350058e-3f);
    z = __internal_fmad (z, a2, 1.666666650e-1f);
    z = z * a2;
    z = __internal_fmad (z, s, s);
  }
  return z;
}

static __attribute__((__unused__)) float __cuda_tanhf(float a)
{
  float s, t;

  t = __cuda_fabsf(a);
  if (t >= 0.55f) {
    s = 1.0f - __fdividef(2.0f,(__internal_expf_kernel(2.0f * t, 0.0f)+1.0f));
    if (t >= 88.0f) {
      s = 1.0f;
    }
    s = __int_as_float(__float_as_int(s) | (__float_as_int(a) & 0x80000000));
  } else {
    float z2;
    z2 = a * a;
    t = 1.643758066599993e-2f;
    t = __internal_fmad (t, z2, -5.267181327760551e-2f);
    t = __internal_fmad (t, z2, 1.332072505223051e-1f);
    t = __internal_fmad (t, z2, -3.333294663641083e-1f);
    t = t * z2;
    s = __internal_fmad (t, a, a);
    if (a == 0.0f) {
      s = a + a;
    }
  }
  return s;
}

static __attribute__((__unused__)) float __cuda_atan2f(float a, float b)
{
  float t0, t1, fa, fb;

  fb = __cuda_fabsf(b);
  fa = __cuda_fabsf(a);
  if ((fa == 0.0f) && (fb == 0.0f)) {
    t0 = __cuda___signbitf(b) ? 3.141592654f : 0.0f;
    t0 = __int_as_float(__float_as_int(t0) | (__float_as_int(a) & 0x80000000));
  } else if ((fa == __int_as_float(0x7f800000)) && (fb == __int_as_float(0x7f800000))) {
    t0 = __cuda___signbitf(b) ? 2.356194490f : 0.785398163f;
    t0 = __int_as_float(__float_as_int(t0) | (__float_as_int(a) & 0x80000000));
  } else {


    t0 = __cuda_fminf(fa, fb);
    t1 = __cuda_fmaxf(fa, fb);
    t0 = t0 / t1;
    t0 = __internal_atanf_kernel(t0);

    if (fa > fb) t0 = 1.570796327f - t0;
    if (b < 0.0f) t0 = 3.141592654f - t0;
    t0 = __int_as_float(__float_as_int(t0) | (__float_as_int(a) & 0x80000000));
    t1 = a + b;
    if (!(t1 <= __int_as_float(0x7f800000))) {

        t0 = t1;
    }
  }
  return t0;
}

static __attribute__((__unused__)) float __cuda_atanf(float a)
{
  float t0, t1;


  t0 = __cuda_fabsf(a);
  t1 = t0;
  if (t0 > 1.0f) {
    t1 = 1.0f / t1;
  }

  t1 = __internal_atanf_kernel(t1);

  if (t0 > 1.0f) {
    t1 = 1.570796327f - t1;
  }



  {
    t1 = __int_as_float(__float_as_int(t1) | (__float_as_int(a) & 0x80000000));
  }
  return t1;
}


static __attribute__((__unused__)) float __internal_asinf_kernel(float a)
{
  float a2, t;
  a2 = a * a;
  t = 5.175137819e-002f;
  t = __internal_fmad (t, a2, 1.816697683e-002f);
  t = __internal_fmad (t, a2, 4.675685871e-002f);
  t = __internal_fmad (t, a2, 7.484657646e-002f);
  t = __internal_fmad (t, a2, 1.666701424e-001f);
  t = t * a2;
  a = __internal_fmad (t, a, a);
  return a;
}

static __attribute__((__unused__)) float __cuda_asinf(float a)
{
  float t0, t1, t2;

  t0 = __cuda_fabsf(a);
  t2 = 1.0f - t0;
  t2 = 0.5f * t2;
  t2 = __cuda_sqrtf(t2);
  t1 = t0 > 0.57f ? t2 : t0;
  t1 = __internal_asinf_kernel(t1);
  t2 = __internal_fmad (-2.0f, t1, 1.570796327f);
  if (t0 > 0.57f) {
    t1 = t2;
  }



  {
    t1 = __int_as_float(__float_as_int(t1) | (__float_as_int(a) & 0x80000000));
  }
  return t1;
}

static __attribute__((__unused__)) float __cuda_acosf(float a)
{
  float t0, t1, t2;

  t0 = __cuda_fabsf(a);
  t2 = 1.0f - t0;
  t2 = 0.5f * t2;
  t2 = __cuda_sqrtf(t2);
  t1 = t0 > 0.57f ? t2 : t0;
  t1 = __internal_asinf_kernel(t1);
  t1 = t0 > 0.57f ? 2.0f * t1 : 1.570796327f - t1;
  if (__cuda___signbitf(a)) {
    t1 = 3.141592654f - t1;
  }

  if (__cuda___isnanf(a)) {
    t1 = a + a;
  }

  return t1;
}

static __attribute__((__unused__)) float __cuda_logf(float a)
{



  return __internal_accurate_logf(a);

}

static __attribute__((__unused__)) float __cuda_log10f(float a)
{



  return 0.434294482f * __internal_accurate_logf(a);

}

static __attribute__((__unused__)) float __cuda_log1pf(float a)
{
  float t;






  if (a < -1.0f) return __int_as_float(0xffc00000);

  if (a >= -0.394f && a <= 0.65f) {

    t = a + 2.0f;
    t = __fdividef (a, t);
    t = -a * t;
    t = __internal_atanhf_kernel (a, t);
  } else {
    t = __internal_accurate_logf (1.0f + a);
  }
  return t;
}

static __attribute__((__unused__)) float __cuda_acoshf(float a)
{
  float t;



  if (a < 1.0f) return __int_as_float(0xffc00000);

  t = a - 1.0f;
  if (__cuda_fabsf(t) > 8388608.0f) {

    return 0.693147181f + __internal_accurate_logf(a);
  } else {
    t = t + __cuda_sqrtf(__fadd_rn(__fmul_rz(a, t), t));
    return __cuda_log1pf(t);
  }
}

static __attribute__((__unused__)) float __cuda_asinhf(float a)
{
  float fa, oofa, t;

  fa = __cuda_fabsf(a);
  if (fa > 8.507059173e37f) {
    t = 0.693147181f + __logf(fa);
  } else {
    oofa = 1.0f / fa;
    t =fa+__fdividef (fa,(oofa+__cuda_sqrtf(__internal_fmad(oofa,oofa,1.0f))));
    t = __cuda_log1pf(t);
  }



  {
    t = __int_as_float(__float_as_int(t) | (__float_as_int(a) & 0x80000000));
  }
  return t;
}

static __attribute__((__unused__)) float __cuda_atanhf(float a)
{
  float fa, t;

  fa = __cuda_fabsf(a);
  t = __fdividef ((2.0f * fa), (1.0f - fa));
  t = 0.5f * __cuda_log1pf(t);



  {
    t = __int_as_float(__float_as_int(t) | (__float_as_int(a) & 0x80000000));
  }
  return t;
}

static __attribute__((__unused__)) float __cuda_expm1f(float a)
{
  float t, z, j, u;

  t = __cuda_rintf (a * 1.442695041f);

  if (__cuda_fabsf(a) < 0.41f) {
    t = 0.0f;
  }
  z = __internal_fmad (-t, 0.6931457519f, a);
  z = __internal_fmad (-t, 1.4286067653e-6f, z);

  j = t;
  if (t == 128.0f) j = j - 1.0f;

  u = 1.38795078474044430E-003f;
  u = __internal_fmad (u, z, 8.38241261853264930E-003f);
  u = __internal_fmad (u, z, 4.16678317762833940E-002f);
  u = __internal_fmad (u, z, 1.66663978874356580E-001f);
  u = __internal_fmad (u, z, 4.99999940395997040E-001f);
  u = u * z;
  u = __internal_fmad (u, z, z);

  z = __cuda_exp2f (j);
  u = __internal_fmad (u, z, z - 1.0f);
  if (t == 128.0f) u = u + u;

  if (j > 128.0f) u = __int_as_float(0x7f800000);
  if (j < -25.0f) u = -1.0f;

  if (a == 0.0f) {
    u = __int_as_float(__float_as_int(a) & 0x80000000);
  }
  return u;
}

static __attribute__((__unused__)) float __cuda_hypotf(float a, float b)
{
  float v, w, s, t, fa, fb;

  fa = __cuda_fabsf(a);
  fb = __cuda_fabsf(b);
  v = s = __cuda_fmaxf(fa, fb);
  w = t = __cuda_fminf(fa, fb);
  if (v > 8.507059173e37f) {
    s = s * 0.25f;
    t = t * 0.25f;
  }
  t = __fdividef(t, s);
  t = __internal_fmad (t, t, 1.0f);
  t = v * __cuda_sqrtf(t);
  if (v == 0.0f) {
    t = v + w;
  }
  if ((!(fa <= __int_as_float(0x7f800000))) || (!(fb <= __int_as_float(0x7f800000)))) {
    t = a + b;
  }
  if (v == __int_as_float(0x7f800000)) {
    t = v + w;
  }
  return t;
}

static __attribute__((__unused__)) float __cuda_cbrtf(float a)
{
  float s, t;



  if (__cuda___isnanf(a)) return a + a;

  s = __cuda_fabsf(a);
  t = __cuda_exp2f(0.333333333f * __log2f(s));
  t = t - (t - (__fdividef (s, t * t))) * 0.333333333f;
  if (__cuda___signbitf(a)) {
    t = -t;
  }
  s = a + a;
  if (s == a) t = s;
  return t;
}

static __attribute__((__unused__)) float __cuda_rcbrtf(float a)
{
  float s, t;



  if (__cuda___isnanf(a)) return a + a;

  s = __cuda_fabsf(a);
  t = __cuda_exp2f(-0.333333333f * __log2f(s));
  t = __internal_fmad(__internal_fmad(t*t, -s*t, 1.0f), 0.333333333f*t, t);
  if (__cuda___signbitf(a)) {
    t = -t;
  }
  s = a + a;
  if (s == a) t = __fdividef (1.0f, a);
  return t;
}

static __attribute__((__unused__)) float __cuda_erff(float a)
{
  float t, r, q;

  t = __cuda_fabsf(a);
  if (t >= 1.0f) {



    q = __internal_fmad (t, 0.3275911f, 1.0f);
    q = 1.0f / q;
    r = 1.061405429f;
    r = __internal_fmad (r, q, -1.453152027f);
    r = __internal_fmad (r, q, 1.421413741f);
    r = __internal_fmad (r, q, -0.284496736f);
    r = __internal_fmad (r, q, 0.254829592f);
    r = r * q;
    q = __internal_expf_kernel(-a * a, 0.0f);
    r = __internal_fmad (-q, r, 1.0f);
    if (t >= 5.5f) {
      r = 1.0f;
    }
    a = __int_as_float (__float_as_int(r) | (__float_as_int(a) & 0x80000000));
  } else {
    t = a * a;
    r = -5.58510127926029810E-004f;
    r = __internal_fmad (r, t, 4.90688891415893070E-003f);
    r = __internal_fmad (r, t, -2.67027980930150640E-002f);
    r = __internal_fmad (r, t, 1.12799056505903940E-001f);
    r = __internal_fmad (r, t, -3.76122956138427440E-001f);
    r = __internal_fmad (r, t, 1.12837911712623450E+000f);
    a = a * r;
  }
  return a;
}

static __attribute__((__unused__)) float __cuda_erfinvf (float a)
{
  float fa, t;

  fa = __cuda_fabsf(a);
  if (fa >= 1.0f) {
    t = __cuda_rsqrtf (__int_as_float (0xffc00000));
    if (fa == 1.0f) {
      t = a * __int_as_float(0x7f800000);
    }
  } else if (fa > 0.9375f) {




    float p, q;

    t = __cuda_log1pf(-fa);
    t = __cuda_rsqrtf(-t);
    p = -1.64441567910e-1f;
    p = __internal_fmad (p, t, 6.80544246825e-1f);
    p = __internal_fmad (p, t, -1.12808139162e+0f);
    p = __internal_fmad (p, t, 6.90969348887e-1f);
    p = __internal_fmad (p, t, 1.38271964963e+0f);
    p = __internal_fmad (p, t, 1.55047000312e-1f);
    q = t + 1.38522814199e+0f;
    q = __internal_fmad (q, t, 1.55024849822e-1f);
    q = q * t;
    t = __fdividef (p, q);
    if (a < 0.0f) t = -t;
  } else if (fa > 0.75f) {




    float p, q;

    t = __internal_fmad (a, a, -0.87890625f);
    p = -7.1986748896e+0f;
    p = __internal_fmad (p, t, +1.3411974175e+1f);
    p = __internal_fmad (p, t, -5.1381573203e+0f);
    p = __internal_fmad (p, t, 4.9633374831e-1f);
    q = t -1.1436535838e+1f;
    q = __internal_fmad (q, t, 1.3568885572e+1f);
    q = __internal_fmad (q, t, -4.1747509256e+0f);
    q = __internal_fmad (q, t, 3.5327242323e-1f);
    p = __fdividef (p, q);
    t = a * p;
  } else {
    float a2;

    a2 = a * a;
    t = 6.1046168794766742E-001f;
    t = __internal_fmad (t, a2, -8.9504882462753121E-001f);
    t = __internal_fmad (t, a2, 7.0224162369928511E-001f);
    t = __internal_fmad (t, a2, -1.9993784895823222E-001f);
    t = __internal_fmad (t, a2, 1.1920613463949599E-001f);
    t = __internal_fmad (t, a2, 8.0131492246997685E-002f);
    t = __internal_fmad (t, a2, 1.2793154958377403E-001f);
    t = __internal_fmad (t, a2, 2.3200529172828793E-001f);
    t = __internal_fmad (t, a2, 8.8622695604694379E-001f);
    t = t * a;
  }
  return t;
}

static __attribute__((__unused__)) float __cuda_erfcf(float a)
{

  if (__cuda___isnanf(a)) return a + a;

  if (a <= 0.813f) {
    return 1.0f - __cuda_erff(a);
  } else {
    float p;
    float q;
    float h;
    float l;
    float t;
# 2494 "/usr/local/cuda/bin/../include/math_functions.h" 3
    t = __fdividef(1.0f, a);

    p = - 9.9910025099425892E-001f;
    p = __internal_fmad (p, t, - 2.6108451215634448E-001f);
    p = __internal_fmad (p, t, + 1.2460347155371844E-001f);
    p = __internal_fmad (p, t, + 1.3243909814778765E-001f);
    p = __internal_fmad (p, t, + 3.3477599162629441E-002f);
    q = t + 2.2542670016875404E+000f;
    q = __internal_fmad (q, t, + 2.1514433559696009E+000f);
    q = __internal_fmad (q, t, + 1.0284106806050302E+000f);
    q = __internal_fmad (q, t, + 2.6094298761636442E-001f);
    q = __internal_fmad (q, t, - 3.9951461024063317E-006f);

    p = __fdividef(p, q);
    p = p * t;


    h = __int_as_float(__float_as_int(a) & 0xfffff000);
    l = a - h;
    q = -h * h;
    q = __internal_expf_kernel(q, 0.0f);
    h = a + h;
    l = l * h;
    h = __internal_expf_kernel(-l, -1.0f);
    q = q * h;






    p = __internal_fmad (p, q, q);
    p = p * t;
    if (a > 10.055f) {
      p = 0.0f;
    }
    return p;
  }
}

static __attribute__((__unused__)) float __cuda_erfcinvf (float a)
{
  float t;

  if (__cuda___isnanf(a)) return a + a;

  if (a <= 0.0f) {
    t = __cuda_rsqrtf (__int_as_float (0xffc00000));
    if (a == 0.0f) {
      t = (1.0f - a) * __int_as_float(0x7f800000);
    }
  }
  else if (a >= 0.0625f) {
    t = __cuda_erfinvf (1.0f - a);
  }
  else {
    float p, q;
    t = __cuda_logf(a);
    t = __cuda_rsqrtf(-t);
    p = -1.64441567910e-1f;
    p = __internal_fmad (p, t, 6.80544246825e-1f);
    p = __internal_fmad (p, t, -1.12808139162e+0f);
    p = __internal_fmad (p, t, 6.90969348887e-1f);
    p = __internal_fmad (p, t, 1.38271964963e+0f);
    p = __internal_fmad (p, t, 1.55047000312e-1f);
    q = t + 1.38522814199e+0f;
    q = __internal_fmad (q, t, 1.55024849822e-1f);
    q = q * t;
    t = __fdividef (p, q);
  }
  return t;
}

static __attribute__((__unused__)) float __cuda_lgammaf(float a)
{
  float t;
  float i;
  int quot;

  if (__cuda___isnanf(a)) return a + a;

  t = __internal_lgammaf_pos(__cuda_fabsf(a));
  if (a >= 0.0f) return t;
  a = __cuda_fabsf(a);
  i = __cuda_floorf(a);
  if (a == i) return __int_as_float(0x7f800000);
  if (a < 1e-19f) return -__internal_accurate_logf(a);
  i = __cuda_rintf (2.0f * a);
  quot = (int)i;
  i = __internal_fmad (-i, 0.5f, a);
  i = i * 3.141592654f;
  if (quot & 1) {
    i = __internal_cos_kernel(i);
  } else {
    i = __internal_sin_kernel(i);
  }
  i = __cuda_fabsf(i);
  t = 1.144729886f - __internal_accurate_logf(i * a) - t;
  return t;
}

static __attribute__((__unused__)) float __cuda_ldexpf(float a, int b)
{
  float fa = __cuda_fabsf(a);

  if ((fa == 0.0f) || (fa == __int_as_float(0x7f800000)) || (b == 0)) {
    if (!(fa > 0.0f)) a = a + a;
    return a;
  } else if (__cuda_abs(b) < 126) {
    return a * __cuda_exp2f((float)b);
  } else if (__cuda_abs(b) < 252) {
    int bhalf = b / 2;
    return a * __cuda_exp2f((float)bhalf) * __cuda_exp2f((float)(b - bhalf));
  } else {
    int bquarter = b / 4;
    float t = __cuda_exp2f((float)bquarter);
    return a * t * t * t * __cuda_exp2f((float)(b - 3 * bquarter));
  }
}

static __attribute__((__unused__)) float __cuda_scalbnf(float a, int b)
{

  return __cuda_ldexpf(a, b);
}

static __attribute__((__unused__)) float __cuda_scalblnf(float a, long int b)
{
  int t;
  if (b > 2147483647L) {
    t = 2147483647;
  } else if (b < (-2147483647 - 1)) {
    t = (-2147483647 - 1);
  } else {
    t = (int)b;
  }
  return __cuda_scalbnf(a, t);
}

static __attribute__((__unused__)) float __cuda_frexpf(float a, int *b)
{
  float fa = __cuda_fabsf(a);
  unsigned int expo;
  unsigned int denorm;

  if (fa < 1.175494351e-38f) {
    a *= 16777216.0f;
    denorm = 24;
  } else {
    denorm = 0;
  }
  expo = ((__float_as_int(a) >> 23) & 0xff);
  if ((fa == 0.0f) || (expo == 0xff)) {
    expo = 0;
    a = a + a;
  } else {
    expo = expo - denorm - 126;
    a = __int_as_float(((__float_as_int(a) & 0x807fffff) | 0x3f000000));
  }
  *b = expo;
  return a;
}

static __attribute__((__unused__)) float __cuda_modff(float a, float *b)
{
  float t;
  if (__cuda___finitef(a)) {
    t = __cuda_truncf(a);
    *b = t;
    t = a - t;
    t = __int_as_float(__float_as_int(t) | (__float_as_int(a) & 0x80000000));
    return t;
  } else if (__cuda___isinff(a)) {
    *b = a;
    return __int_as_float(__float_as_int(a) & 0x80000000);
  } else {
    *b = a + a;
    return a + a;
  }
}

static __attribute__((__unused__)) float __cuda_fmodf(float a, float b)
{
  float orig_a = a;
  float orig_b = b;
  a = __cuda_fabsf(a);
  b = __cuda_fabsf(b);
  if (!((a <= __int_as_float(0x7f800000)) && (b <= __int_as_float(0x7f800000)))) {
    return orig_a + orig_b;
  }
  if ((a == __int_as_float(0x7f800000)) || (b == 0.0f)) {
    return __cuda_rsqrtf (__int_as_float (0xffc00000));
  } else if (a >= b) {


    int expoa = (a < 1.175494351e-38f) ?
        ((int)__log2f(a)) : (((__float_as_int(a) >> 23) & 0xff) - 127);
    int expob = (b < 1.175494351e-38f) ?
        ((int)__log2f(b)) : (((__float_as_int(b) >> 23) & 0xff) - 127);
    int scale = expoa - expob;
    float scaled_b = __cuda_ldexpf(b, scale);
    if (scaled_b <= 0.5f * a) {
      scaled_b *= 2.0f;
    }







    while (scaled_b >= b) {
      if (a >= scaled_b) {
        a -= scaled_b;
      }
      scaled_b *= 0.5f;
    }
    return __int_as_float (__float_as_int(a) |
                           (__float_as_int(orig_a) & 0x80000000));
  } else {
    if (!(a > 0.0f)) orig_a = orig_a + orig_a;
    return orig_a;
  }
}

static __attribute__((__unused__)) float __cuda_remainderf(float a, float b)
{

  float twoa = 0.0f;
  unsigned int quot0 = 0;
  float orig_a = a;
  float orig_b = b;

  a = __cuda_fabsf(a);
  b = __cuda_fabsf(b);
  if (!((a <= __int_as_float(0x7f800000)) && (b <= __int_as_float(0x7f800000)))) {
    return orig_a + orig_b;
  }
  if ((a == __int_as_float(0x7f800000)) || (b == 0.0f)) {
    return __cuda_rsqrtf (__int_as_float (0xffc00000));
  } else if (a >= b) {

    int expoa = (a < 1.175494351e-38f) ?
        ((int)__log2f(a)) : (((__float_as_int(a) >> 23) & 0xff) - 127);
    int expob = (b < 1.175494351e-38f) ?
        ((int)__log2f(b)) : (((__float_as_int(b) >> 23) & 0xff) - 127);
    int scale = expoa - expob;
    float scaled_b = __cuda_ldexpf(b, scale);
    if (scaled_b <= 0.5f * a) {
      scaled_b *= 2.0f;
    }
# 2756 "/usr/local/cuda/bin/../include/math_functions.h" 3
    while (scaled_b >= b) {
      quot0 = 0;
      if (a >= scaled_b) {
        twoa = __internal_fmad (a, 2.0f, -scaled_b) - scaled_b;
        a = a - scaled_b;
        quot0 = 1;
      }
      scaled_b *= 0.5f;
    }
  }


  twoa = 2.0f * a;
  if ((twoa > b) || ((twoa == b) && quot0)) {
    a -= b;
    a = __int_as_float(__float_as_int(a) | 0x80000000);
  }
# 2788 "/usr/local/cuda/bin/../include/math_functions.h" 3
  a = __int_as_float((__float_as_int(orig_a) & 0x80000000)^
                     __float_as_int(a));
  return a;
}

static __attribute__((__unused__)) float __cuda_remquof(float a, float b, int* quo)
{
  float twoa = 0.0f;
  unsigned int quot = 0;
  unsigned int sign;
  float orig_a = a;
  float orig_b = b;


  sign = 0 - (__cuda___signbitf(a) != __cuda___signbitf(b));
  a = __cuda_fabsf(a);
  b = __cuda_fabsf(b);
  if (!((a <= __int_as_float(0x7f800000)) && (b <= __int_as_float(0x7f800000)))) {
    *quo = quot;
    return orig_a + orig_b;
  }
  if ((a == __int_as_float(0x7f800000)) || (b == 0.0f)) {
    *quo = quot;
    return __cuda_rsqrtf (__int_as_float (0xffc00000));
  } else if (a >= b) {


    int expoa = (a < 1.175494351e-38f) ?
        ((int)__log2f(a)) : (((__float_as_int(a) >> 23) & 0xff) - 127);
    int expob = (b < 1.175494351e-38f) ?
        ((int)__log2f(b)) : (((__float_as_int(b) >> 23) & 0xff) - 127);
    int scale = expoa - expob;
    float scaled_b = __cuda_ldexpf(b, scale);
    if (scaled_b <= 0.5f * a) {
      scaled_b *= 2.0f;
    }
# 2844 "/usr/local/cuda/bin/../include/math_functions.h" 3
    while (scaled_b >= b) {
      quot <<= 1;
      if (a >= scaled_b) {
        twoa = (2.0f * a - scaled_b) - scaled_b;
        a -= scaled_b;
        quot += 1;
      }
      scaled_b *= 0.5f;
    }
  }


  twoa = 2.0f * a;
  if ((twoa > b) || ((twoa == b) && (quot & 1))) {
    quot++;
    a -= b;
    a = __int_as_float(__float_as_int(a) | 0x80000000);
  }
# 2879 "/usr/local/cuda/bin/../include/math_functions.h" 3
  a = __int_as_float((__float_as_int(orig_a) & 0x80000000)^
                     __float_as_int(a));
  quot = quot & (~((~0)<<3));
  quot = quot ^ sign;
  quot = quot - sign;
  *quo = quot;
  return a;
}

static __attribute__((__unused__)) float __cuda_fmaf(float a, float b, float c)
{
  return __fmaf_rn(a, b, c);
}

static __attribute__((__unused__)) float __internal_accurate_powf(float a, float b)
{
  float2 loga, prod;



  float t;


  loga = __internal_log_ep(a);


  if (__cuda_fabsf(b) > 1.0e34f) b *= 1.220703125e-4f;
  prod.y = b;
  prod.x = 0.0f;
  prod = __internal_dsmul (prod, loga);


  if (__float_as_int(prod.y) == 0x42b17218) {
    prod.y = __int_as_float(__float_as_int(prod.y) - 1);
    prod.x = prod.x + __int_as_float(0x37000000);
  }


  t = __cuda_expf(prod.y);

  if (t != __int_as_float(0x7f800000)) {



    t = __internal_fmad (t, prod.x, t);
  }
  return t;
}

static __attribute__((__unused__)) float __cuda_powif(float a, int b)
{
  unsigned int e = __cuda_abs(b);

  volatile

  float r = 1.0f;

  while (1) {
    if ((e & 1) != 0) {
      r = __fmul_rn (r, a);
    }
    e = e >> 1;
    if (e == 0) {
      r = (b < 0) ? 1.0f / r : r;
      return r;
    }
    a = __fmul_rn (a, a);
  }
}

static __attribute__((__unused__)) double __cuda_powi(double a, int b)
{
  unsigned int e = __cuda_abs(b);
  double r = 1.0;

  while (1) {
    if ((e & 1) != 0) {
      r = r * a;
    }
    e = e >> 1;
    if (e == 0) {
      return b < 0 ? 1.0 / r : r;
    }
    a = a * a;
  }
}

static __attribute__((__unused__)) float __cuda_powf(float a, float b)
{



  int bIsOddInteger;
  float t;
  if (a == 1.0f || b == 0.0f) {
    return 1.0f;
  }
  if (__cuda___isnanf(a) || __cuda___isnanf(b)) {
    return a + b;
  }
  if (a == __int_as_float(0x7f800000)) {
    return __cuda___signbitf(b) ? 0.0f : __int_as_float(0x7f800000);
  }
  if (__cuda___isinff(b)) {
    if (a == -1.0f) {
      return 1.0f;
    }
    t = (__cuda_fabsf(a) > 1.0f) ? __int_as_float(0x7f800000) : 0.0f;
    if (b < 0.0f) {
      t = 1.0f / t;
    }
    return t + t;
  }
  bIsOddInteger = __cuda_fabsf(b - (2.0f * __cuda_truncf(0.5f * b))) == 1.0f;
  if (a == 0.0f) {
    t = bIsOddInteger ? a : 0.0f;
    if (b < 0.0f) {
      t = 1.0f / t;
    }
    return t + t;
  }
  if (a == -__int_as_float(0x7f800000)) {
    t = - ((b < 0.0f) ? (1.0f / a) : a);
    if (bIsOddInteger) {
      t = __int_as_float(__float_as_int(t) ^ 0x80000000);
    }
    return t;
  }
  if ((a < 0.0f) && (b != __cuda_truncf(b))) {
    return __cuda_rsqrtf(__int_as_float(0xffc00000));
  }
  t = __cuda_fabsf(a);
  t = __internal_accurate_powf(t, b);
  if ((a < 0.0f) && bIsOddInteger) {
    t = __int_as_float(__float_as_int(t) ^ 0x80000000);
  }
  return t;

}


static __attribute__((__unused__)) float __internal_tgammaf_kernel(float a)
{
  float t;
  t = -1.05767296987211380E-003f;
  t = __internal_fmad (t, a, 7.09279059435508670E-003f);
  t = __internal_fmad (t, a, -9.65347121958557050E-003f);
  t = __internal_fmad (t, a, -4.21736613253687960E-002f);
  t = __internal_fmad (t, a, 1.66542401247154280E-001f);
  t = __internal_fmad (t, a, -4.20043267827838460E-002f);
  t = __internal_fmad (t, a, -6.55878234051332940E-001f);
  t = __internal_fmad (t, a, 5.77215696929794240E-001f);
  t = __internal_fmad (t, a, 1.00000000000000000E+000f);
  return t;
}





static __attribute__((__unused__)) float __cuda_tgammaf(float a)
{
  float s, xx, x=a;
  if (x >= 0.0f) {
    if (x > 36.0f) x = 36.0f;
    s = 1.0f;
    xx = x;
    if (x > 34.03f) {
      xx -= 1.0f;
    }
    while (xx > 1.5f) {
      xx = xx - 1.0f;
      s = s * xx;
    }
    if (x >= 0.5f) {
      xx = xx - 1.0f;
    }
    xx = __internal_tgammaf_kernel(xx);
    if (x < 0.5f) {
      xx = xx * x;
    }
    s = __fdividef(s, xx);
    if (x > 34.03f) {

      xx = x - 1.0f;
      s = s * xx;
    }
    return s;
  } else {
    if (x == __cuda_floorf(x)) {
      x = __cuda_rsqrtf (__int_as_float (0xffc00000));

      return x;

    }
    if (x < -41.1f) x = -41.1f;
    xx = x;
    if (x < -34.03f) {
      xx += 6.0f;
    }
    s = xx;
    while (xx < -0.5f) {
      xx = xx + 1.0f;
      s = s * xx;
    }
    xx = __internal_tgammaf_kernel(xx);
    s = s * xx;
    s = 1.0f / s;
    if (x < -34.03f) {
      xx = x;
      xx *= (x + 1.0f);
      xx *= (x + 2.0f);
      xx *= (x + 3.0f);
      xx *= (x + 4.0f);
      xx *= (x + 5.0f);
      xx = 1.0f / xx;
      s = s * xx;
      if ((a < -42.0f) && !(((int)a)&1)) {
        s = __int_as_float(0x80000000);
      }
    }
    return s;
  }
}

static __attribute__((__unused__)) float __cuda_roundf(float a)
{
  float fa = __cuda_fabsf(a);
  float u = __int_as_float (0x3f000000 | (__float_as_int(a) & 0x80000000));
  u = __cuda_truncf (a + u);
  if (fa > 8388608.0f) u = a;
  if (fa < 0.5f) u = __cuda_truncf (a);
  return u;
}

static __attribute__((__unused__)) long long int __internal_llroundf_kernel(float a)
{
  unsigned long long int res, t = 0LL;
  int shift;
  unsigned int ia = __float_as_int(a);

  if ((ia << 1) > 0xff000000) return 0x8000000000000000LL;
  if ((int)ia >= 0x5f000000) return 0x7fffffffffffffffLL;
  if (ia >= 0xdf000000) return 0x8000000000000000LL;
  shift = 189 - ((ia >> 23) & 0xff);
  res = ((long long int)(((ia << 8) | 0x80000000) >> 1)) << 32;
  if (shift >= 64) {
    t = res;
    res = 0;
  } else if (shift) {
    t = res << (64 - shift);
    res = res >> shift;
  }
  if (t >= 0x8000000000000000LL) {
    res++;
  }
  if ((int)ia < 0) res = (unsigned long long int)(-(long long int)res);
  return (long long int)res;
}

static __attribute__((__unused__)) long long int __cuda_llroundf(float a)
{
  return __internal_llroundf_kernel(a);
}

static __attribute__((__unused__)) long int __cuda_lroundf(float a)
{




  if (__cuda___isnanf(a)) return 0L;
  if (a >= 2147483648.0f) return 2147483647L;
  if (a <= -2147483648.0f) return (-2147483647L - 1L);

  return (long int)(__cuda_roundf(a));

}

static __attribute__((__unused__)) float __cuda_fdimf(float a, float b)
{
  float t;
  t = a - b;
  if (a <= b) {
    t = 0.0f;
  }
  return t;
}

static __attribute__((__unused__)) int __cuda_ilogbf(float a)
{
  unsigned int i;
  int expo;
  float fa;
  fa = __cuda_fabsf(a);
  i = __float_as_int(fa);
  if (i < 0x00800000) {

    expo = -118 - __clz(i);
    if (i == 0x00000000) {
      expo = -((int)((unsigned int)-1 >> 1))-1;
    }
  } else {
    expo = ((int)((i >> 23) & 0xff)) - 127;
    if ((i == 0x7f800000)) {
      expo = ((int)((unsigned int)-1 >> 1));
    }
    if ((i > 0x7f800000)) {
      expo = -((int)((unsigned int)-1 >> 1))-1;
    }
  }
  return expo;
}

static __attribute__((__unused__)) float __cuda_logbf(float a)
{
  unsigned int i;
  int expo;
  float fa, res;
  fa = __cuda_fabsf(a);
  i = __float_as_int(fa);
  if (i < 0x00800000) {

    expo = -118 - __clz(i);
    res = (float)expo;
    if (a == 0.0f) {
      res = -__int_as_float(0x7f800000);
    }
  } else {
    expo = ((int)((i >> 23) & 0xff)) - 127;
    res = (float)expo;
    if ((i >= 0x7f800000)) {

      res = a * a;
    }
  }
  return res;
}

static __attribute__((__unused__)) void __cuda_sincosf(float a, float *sptr, float *cptr)
{



  float t, s, c;
  volatile float t2, u2;
  int quadrant;
  t = __cuda_fabsf(a);
  if ((t == __int_as_float(0x7f800000)) || (t == 0.0f)) {
    s = __fmul_rn (a, 0.0f);
    c = 1.0f + s;
    *sptr = s;
    *cptr = c;
    return;
  }
  t = __internal_trig_reduction_kernel(a, &quadrant);
  u2 = __internal_cos_kernel(t);
  t2 = __internal_sin_kernel(t);
  if (quadrant & 1) {
    s = u2;
    c = t2;
  } else {
    s = t2;
    c = u2;
  }
  if (quadrant & 2) {
    s = -s;
  }
  quadrant++;
  if (quadrant & 2) {
    c = -c;
  }
  *sptr = s;
  *cptr = c;

}
# 4905 "/usr/local/cuda/bin/../include/math_functions.h" 3


extern __attribute__((__weak__)) double rsqrt(double a); double rsqrt(double a)
{
  return 1.0 / sqrt(a);
}

extern __attribute__((__weak__)) double rcbrt(double a); double rcbrt(double a)
{
  double s, t;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return 1.0 / a;
  }
  s = fabs(a);
  t = exp2(-3.3333333333333333e-1 * log2(s));
  t = ((t*t) * (-s*t) + 1.0) * (3.3333333333333333e-1*t) + t;



  if (__signbit(a)) {

    t = -t;
  }
  return t;
}

extern __attribute__((__weak__)) double sinpi(double a); double sinpi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return sin (a);
  }
  if (a == floor(a)) {
    return ((a / 1.0e308) / 1.0e308) / 1.0e308;
  }
  a = remquo (a, 0.5, &n);
  a = a * 3.1415926535897931e+0;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  return a;
}

extern __attribute__((__weak__)) double erfinv(double a); double erfinv(double a)
{
  double p, q, t, fa;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  fa = fabs(a);
  if (fa >= 1.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;
    if (fa == 1.0) {
      t = a * exp(1000.0);
    }
  } else if (fa >= 0.9375) {




    t = log1p(-fa);
    t = 1.0 / sqrt(-t);
    p = 2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q = t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
    if (a < 0.0) t = -t;
  } else if (fa >= 0.75) {




    t = a * a - .87890625;
    p = .21489185007307062000e+0;
    p = p * t - .64200071507209448655e+1;
    p = p * t + .29631331505876308123e+2;
    p = p * t - .47644367129787181803e+2;
    p = p * t + .34810057749357500873e+2;
    p = p * t - .12954198980646771502e+2;
    p = p * t + .25349389220714893917e+1;
    p = p * t - .24758242362823355486e+0;
    p = p * t + .94897362808681080020e-2;
    q = t - .12831383833953226499e+2;
    q = q * t + .41409991778428888716e+2;
    q = q * t - .53715373448862143349e+2;
    q = q * t + .33880176779595142685e+2;
    q = q * t - .11315360624238054876e+2;
    q = q * t + .20369295047216351160e+1;
    q = q * t - .18611650627372178511e+0;
    q = q * t + .67544512778850945940e-2;
    p = p / q;
    t = a * p;
  } else {




    t = a * a - .5625;
    p = - .23886240104308755900e+2;
    p = p * t + .45560204272689128170e+3;
    p = p * t - .22977467176607144887e+4;
    p = p * t + .46631433533434331287e+4;
    p = p * t - .43799652308386926161e+4;
    p = p * t + .19007153590528134753e+4;
    p = p * t - .30786872642313695280e+3;
    q = t - .83288327901936570000e+2;
    q = q * t + .92741319160935318800e+3;
    q = q * t - .35088976383877264098e+4;
    q = q * t + .59039348134843665626e+4;
    q = q * t - .48481635430048872102e+4;
    q = q * t + .18997769186453057810e+4;
    q = q * t - .28386514725366621129e+3;
    p = p / q;
    t = a * p;
  }
  return t;
}

extern __attribute__((__weak__)) double erfcinv(double a); double erfcinv(double a)
{
  double t;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  if (__isnan(a)) {
    return a + a;
  }
  if (a <= 0.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;
    if (a == 0.0) {
        t = (1.0 - a) * exp(1000.0);
    }
  }
  else if (a >= 0.0625) {
    t = erfinv (1.0 - a);
  }
  else if (a >= 1e-100) {




    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p = 2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q = t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
  }
  else {




    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p = 6.9952990607058154858e-1;
    p = p * t + 1.9507620287580568829e+0;
    p = p * t + 8.2810030904462690216e-1;
    p = p * t + 1.1279046353630280005e-1;
    p = p * t + 6.0537914739162189689e-3;
    p = p * t + 1.3714329569665128933e-4;
    p = p * t + 1.2964481560643197452e-6;
    p = p * t + 4.6156006321345332510e-9;
    p = p * t + 4.5344689563209398450e-12;
    q = t + 1.5771922386662040546e+0;
    q = q * t + 2.1238242087454993542e+0;
    q = q * t + 8.4001814918178042919e-1;
    q = q * t + 1.1311889334355782065e-1;
    q = q * t + 6.0574830550097140404e-3;
    q = q * t + 1.3715891988350205065e-4;
    q = q * t + 1.2964671850944981713e-6;
    q = q * t + 4.6156017600933592558e-9;
    q = q * t + 4.5344687377088206783e-12;
    t = p / (q * t);
  }
  return t;
}

extern __attribute__((__weak__)) float rsqrtf(float a); float rsqrtf(float a)
{
  return (float)rsqrt((double)a);
}

extern __attribute__((__weak__)) float rcbrtf(float a); float rcbrtf(float a)
{
  return (float)rcbrt((double)a);
}

extern __attribute__((__weak__)) float sinpif(float a); float sinpif(float a)
{
  return (float)sinpi((double)a);
}

extern __attribute__((__weak__)) float erfinvf(float a); float erfinvf(float a)
{
  return (float)erfinv((double)a);
}

extern __attribute__((__weak__)) float erfcinvf(float a); float erfcinvf(float a)
{
  return (float)erfcinv((double)a);
}







extern __attribute__((__weak__)) int min(int a, int b); int min(int a, int b)
{
  return a < b ? a : b;
}

extern __attribute__((__weak__)) unsigned int umin(unsigned int a, unsigned int b); unsigned int umin(unsigned int a, unsigned int b)
{
  return a < b ? a : b;
}

extern __attribute__((__weak__)) long long int llmin(long long int a, long long int b); long long int llmin(long long int a, long long int b)
{
  return a < b ? a : b;
}

extern __attribute__((__weak__)) unsigned long long int ullmin(unsigned long long int a, unsigned long long int b); unsigned long long int ullmin(unsigned long long int a, unsigned long long int b)
{
  return a < b ? a : b;
}

extern __attribute__((__weak__)) int max(int a, int b); int max(int a, int b)
{
  return a > b ? a : b;
}

extern __attribute__((__weak__)) unsigned int umax(unsigned int a, unsigned int b); unsigned int umax(unsigned int a, unsigned int b)
{
  return a > b ? a : b;
}

extern __attribute__((__weak__)) long long int llmax(long long int a, long long int b); long long int llmax(long long int a, long long int b)
{
  return a > b ? a : b;
}

extern __attribute__((__weak__)) unsigned long long int ullmax(unsigned long long int a, unsigned long long int b); unsigned long long int ullmax(unsigned long long int a, unsigned long long int b)
{
  return a > b ? a : b;
}


# 5225 "/usr/local/cuda/bin/../include/math_functions.h" 3
# 1 "/usr/local/cuda/bin/../include/math_functions_dbl_ptx1.h" 1 3
# 45 "/usr/local/cuda/bin/../include/math_functions_dbl_ptx1.h" 3
static __attribute__((__unused__)) double __cuda_fabs(double a)
{
  return (float)__cuda_fabsf((float)a);
}

static __attribute__((__unused__)) double __cuda_fmax(double a, double b)
{
  return (float)__cuda_fmaxf((float)a, (float)b);
}

static __attribute__((__unused__)) double __cuda_fmin(double a, double b)
{
  return (float)__cuda_fminf((float)a, (float)b);
}

static __attribute__((__unused__)) int __cuda___finite(double a)
{
  return __cuda___finitef((float)a);
}

static __attribute__((__unused__)) int __cuda___isinf(double a)
{
  return __cuda___isinff((float)a);
}

static __attribute__((__unused__)) int __cuda___isnan(double a)
{
  return __cuda___isnanf((float)a);
}

static __attribute__((__unused__)) int __cuda___signbit(double a)
{
  return __cuda___signbitf((float)a);
}

static __attribute__((__unused__)) double __cuda_sqrt(double a)
{
  return (double)__cuda_sqrtf((float)a);
}

static __attribute__((__unused__)) double __cuda_rsqrt(double a)
{
  return (double)__cuda_rsqrtf((float)a);
}

static __attribute__((__unused__)) double __cuda_ceil(double a)
{
  return (double)__cuda_ceilf((float)a);
}

static __attribute__((__unused__)) double __cuda_trunc(double a)
{
  return (double)__cuda_truncf((float)a);
}

static __attribute__((__unused__)) double __cuda_floor(double a)
{
  return (double)__cuda_floorf((float)a);
}

static __attribute__((__unused__)) double __cuda_copysign(double a, double b)
{
  return (double)__cuda_copysignf((float)a, (float)b);
}

static __attribute__((__unused__)) double __cuda_sin(double a)
{
  return (double)__cuda_sinf((float)a);
}

static __attribute__((__unused__)) double __cuda_sinpi(double a)
{
  return (double)__cuda_sinpif((float)a);
}

static __attribute__((__unused__)) double __cuda_cos(double a)
{
  return (double)__cuda_cosf((float)a);
}

static __attribute__((__unused__)) void __cuda_sincos(double a, double *sptr, double *cptr)
{
  float fs, fc;

  __cuda_sincosf((float)a, &fs, &fc);

  *sptr = (double)fs;
  *cptr = (double)fc;
}

static __attribute__((__unused__)) double __cuda_tan(double a)
{
  return (double)__cuda_tanf((float)a);
}

static __attribute__((__unused__)) double __cuda_exp(double a)
{
  return (double)__cuda_expf((float)a);
}

static __attribute__((__unused__)) double __cuda_exp2(double a)
{
  return (double)__cuda_exp2f((float)a);
}

static __attribute__((__unused__)) double __cuda_exp10(double a)
{
  return (double)__cuda_exp10f((float)a);
}

static __attribute__((__unused__)) double __cuda_expm1(double a)
{
  return (double)__cuda_expm1f((float)a);
}

static __attribute__((__unused__)) double __cuda_cosh(double a)
{
  return (double)__cuda_coshf((float)a);
}

static __attribute__((__unused__)) double __cuda_sinh(double a)
{
  return (double)__cuda_sinhf((float)a);
}

static __attribute__((__unused__)) double __cuda_tanh(double a)
{
  return (double)__cuda_tanhf((float)a);
}

static __attribute__((__unused__)) double __cuda_asin(double a)
{
  return (double)__cuda_asinf((float)a);
}

static __attribute__((__unused__)) double __cuda_acos(double a)
{
  return (double)__cuda_acosf((float)a);
}

static __attribute__((__unused__)) double __cuda_atan(double a)
{
  return (double)__cuda_atanf((float)a);
}

static __attribute__((__unused__)) double __cuda_atan2(double a, double b)
{
  return (double)__cuda_atan2f((float)a, (float)b);
}

static __attribute__((__unused__)) double __cuda_log(double a)
{
  return (double)__cuda_logf((float)a);
}

static __attribute__((__unused__)) double __cuda_log2(double a)
{
  return (double)__cuda_log2f((float)a);
}

static __attribute__((__unused__)) double __cuda_log10(double a)
{
  return (double)__cuda_log10f((float)a);
}

static __attribute__((__unused__)) double __cuda_log1p(double a)
{
  return (double)__cuda_log1pf((float)a);
}

static __attribute__((__unused__)) double __cuda_acosh(double a)
{
  return (double)__cuda_acoshf((float)a);
}

static __attribute__((__unused__)) double __cuda_asinh(double a)
{
  return (double)__cuda_asinhf((float)a);
}

static __attribute__((__unused__)) double __cuda_atanh(double a)
{
  return (double)__cuda_atanhf((float)a);
}

static __attribute__((__unused__)) double __cuda_hypot(double a, double b)
{
  return (double)__cuda_hypotf((float)a, (float)b);
}

static __attribute__((__unused__)) double __cuda_cbrt(double a)
{
  return (double)__cuda_cbrtf((float)a);
}

static __attribute__((__unused__)) double __cuda_rcbrt(double a)
{
  return (double)__cuda_rcbrtf((float)a);
}

static __attribute__((__unused__)) double __cuda_erf(double a)
{
  return (double)__cuda_erff((float)a);
}

static __attribute__((__unused__)) double __cuda_erfinv(double a)
{
  return (double)__cuda_erfinvf((float)a);
}

static __attribute__((__unused__)) double __cuda_erfc(double a)
{
  return (double)__cuda_erfcf((float)a);
}

static __attribute__((__unused__)) double __cuda_erfcinv(double a)
{
  return (double)__cuda_erfcinvf((float)a);
}

static __attribute__((__unused__)) double __cuda_lgamma(double a)
{
  return (double)__cuda_lgammaf((float)a);
}

static __attribute__((__unused__)) double __cuda_tgamma(double a)
{
  return (double)__cuda_tgammaf((float)a);
}

static __attribute__((__unused__)) double __cuda_ldexp(double a, int b)
{
  return (double)__cuda_ldexpf((float)a, b);
}

static __attribute__((__unused__)) double __cuda_scalbn(double a, int b)
{
  return (double)__cuda_scalbnf((float)a, b);
}

static __attribute__((__unused__)) double __cuda_scalbln(double a, long b)
{
  return (double)__cuda_scalblnf((float)a, b);
}

static __attribute__((__unused__)) double __cuda_frexp(double a, int *b)
{
  return (double)__cuda_frexpf((float)a, b);
}

static __attribute__((__unused__)) double __cuda_modf(double a, double *b)
{
  float fb;
  float fa = __cuda_modff((float)a, &fb);

  *b = (double)fb;

  return (double)fa;
}

static __attribute__((__unused__)) double __cuda_fmod(double a, double b)
{
  return (double)__cuda_fmodf((float)a, (float)b);
}

static __attribute__((__unused__)) double __cuda_remainder(double a, double b)
{
  return (double)__cuda_remainderf((float)a, (float)b);
}

static __attribute__((__unused__)) double __cuda_remquo(double a, double b, int *c)
{
  return (double)__cuda_remquof((float)a, (float)b, c);
}

static __attribute__((__unused__)) double __cuda_nextafter(double a, double b)
{
  return (double)__cuda_nextafterf((float)a, (float)b);
}

static __attribute__((__unused__)) double __cuda_nan(const char *tagp)
{
  return (double)__cuda_nanf(tagp);
}

static __attribute__((__unused__)) double __cuda_pow(double a, double b)
{
  return (double)__cuda_powf((float)a, (float)b);
}

static __attribute__((__unused__)) double __cuda_round(double a)
{
  return (double)__cuda_roundf((float)a);
}

static __attribute__((__unused__)) long __cuda_lround(double a)
{
  return __cuda_lroundf((float)a);
}

static __attribute__((__unused__)) long long __cuda_llround(double a)
{
  return __cuda_llroundf((float)a);
}

static __attribute__((__unused__)) double __cuda_rint(double a)
{
  return (double)__cuda_rintf((float)a);
}

static __attribute__((__unused__)) long __cuda_lrint(double a)
{
  return __cuda_lrintf((float)a);
}

static __attribute__((__unused__)) long long __cuda_llrint(double a)
{
  return __cuda_llrintf((float)a);
}

static __attribute__((__unused__)) double __cuda_nearbyint(double a)
{
  return (double)__cuda_nearbyintf((float)a);
}

static __attribute__((__unused__)) double __cuda_fdim(double a, double b)
{
  return (double)__cuda_fdimf((float)a, (float)b);
}

static __attribute__((__unused__)) int __cuda_ilogb(double a)
{
  return __cuda_ilogbf((float)a);
}

static __attribute__((__unused__)) double __cuda_logb(double a)
{
  return (double)__cuda_logbf((float)a);
}

static __attribute__((__unused__)) double __cuda_fma(double a, double b, double c)
{
  return (double)__cuda_fmaf((float)a, (float)b, (float)c);
}
# 5226 "/usr/local/cuda/bin/../include/math_functions.h" 2 3
# 103 "/usr/local/cuda/bin/../include/common_functions.h" 2
# 280 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 2
# 3 "/tmp/tmpxft_00005e37_00000000-1_bounding_box.cudafe1.stub.c" 2
typedef thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , int, thrust::detail::dispatch::detail::destroyer<point2d> > _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail9destroyerIS6_EEEE;




struct __T20 { _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail9destroyerIS6_EEEE __par0;int __dummy_field;};
typedef thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , unsigned int, thrust::detail::dispatch::detail::destroyer<point2d> > _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail9destroyerIS6_EEEE;




struct __T21 { _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail9destroyerIS6_EEEE __par0;int __dummy_field;};
typedef thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , int, thrust::detail::dispatch::detail::copy_constructor<point2d> > _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail16copy_constructorIS6_EEEE;




struct __T22 { _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail16copy_constructorIS6_EEEE __par0;int __dummy_field;};
typedef thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , unsigned int, thrust::detail::dispatch::detail::copy_constructor<point2d> > _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail16copy_constructorIS6_EEEE;




struct __T23 { _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail16copy_constructorIS6_EEEE __par0;int __dummy_field;};
typedef thrust::transform_iterator<bbox_transformation, thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , thrust::pair<point2d, point2d> , thrust::use_default> _ZN6thrust18transform_iteratorI19bbox_transformationNS_6detail15normal_iteratorINS_10device_ptrI7point2dEEEENS_4pairIS5_S5_EENS_11use_defaultEEE;
typedef thrust::pair<point2d, point2d> _ZN6thrust4pairI7point2dS1_EE;




struct __T24 { _ZN6thrust18transform_iteratorI19bbox_transformationNS_6detail15normal_iteratorINS_10device_ptrI7point2dEEEENS_4pairIS5_S5_EENS_11use_defaultEEE __par0;unsigned __par1; _ZN6thrust4pairI7point2dS1_EE *__par2;struct bbox_reduction __par3;int __dummy_field;};




struct __T25 { _ZN6thrust4pairI7point2dS1_EE *__par0;unsigned __par1; _ZN6thrust4pairI7point2dS1_EE *__par2;struct bbox_reduction __par3;int __dummy_field;};
static void __sti____cudaRegisterAll_47_tmpxft_00005e37_00000000_4_bounding_box_cpp1_ii_830a60e5(void) __attribute__((__constructor__));
# 58 "/tmp/tmpxft_00005e37_00000000-1_bounding_box.cudafe1.stub.c"
static void __device_stub__ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail9destroyerIS8_EEEEEEvT_( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail9destroyerIS6_EEEE & __par0){ struct __T20 *__T2331;
*(void**)(void*)&__T2331 = (void*)0;if (cudaSetupArgument((void*)(char*)&__par0, sizeof(__par0), (size_t)&__T2331->__par0) != cudaSuccess) return;{ volatile static char *__f; __f = ((char *)((void ( *)( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail9destroyerIS6_EEEE))thrust::detail::device::cuda::detail::launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , int, thrust::detail::dispatch::detail::destroyer<point2d> > > )); (void)cudaLaunch(((char *)((void ( *)( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail9destroyerIS6_EEEE))thrust::detail::device::cuda::detail::launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , int, thrust::detail::dispatch::detail::destroyer<point2d> > > ))); };}namespace thrust{
namespace detail{
namespace device{
namespace cuda{
namespace detail{

template<> void __wrapper__device_stub_launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , int, thrust::detail::dispatch::detail::destroyer<point2d> > >( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail9destroyerIS6_EEEE &__cuda_0){__device_stub__ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail9destroyerIS8_EEEEEEvT_( __cuda_0);}}}}}}
static void __device_stub__ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail9destroyerIS8_EEEEEEvT_( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail9destroyerIS6_EEEE & __par0){ struct __T21 *__T2332;
*(void**)(void*)&__T2332 = (void*)0;if (cudaSetupArgument((void*)(char*)&__par0, sizeof(__par0), (size_t)&__T2332->__par0) != cudaSuccess) return;{ volatile static char *__f; __f = ((char *)((void ( *)( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail9destroyerIS6_EEEE))thrust::detail::device::cuda::detail::launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , unsigned int, thrust::detail::dispatch::detail::destroyer<point2d> > > )); (void)cudaLaunch(((char *)((void ( *)( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail9destroyerIS6_EEEE))thrust::detail::device::cuda::detail::launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , unsigned int, thrust::detail::dispatch::detail::destroyer<point2d> > > ))); };}namespace thrust{
namespace detail{
namespace device{
namespace cuda{
namespace detail{

template<> void __wrapper__device_stub_launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , unsigned int, thrust::detail::dispatch::detail::destroyer<point2d> > >( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail9destroyerIS6_EEEE &__cuda_0){__device_stub__ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail9destroyerIS8_EEEEEEvT_( __cuda_0);}}}}}}
static void __device_stub__ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail16copy_constructorIS8_EEEEEEvT_( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail16copy_constructorIS6_EEEE & __par0){ struct __T22 *__T2333;
*(void**)(void*)&__T2333 = (void*)0;if (cudaSetupArgument((void*)(char*)&__par0, sizeof(__par0), (size_t)&__T2333->__par0) != cudaSuccess) return;{ volatile static char *__f; __f = ((char *)((void ( *)( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail16copy_constructorIS6_EEEE))thrust::detail::device::cuda::detail::launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , int, thrust::detail::dispatch::detail::copy_constructor<point2d> > > )); (void)cudaLaunch(((char *)((void ( *)( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail16copy_constructorIS6_EEEE))thrust::detail::device::cuda::detail::launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , int, thrust::detail::dispatch::detail::copy_constructor<point2d> > > ))); };}namespace thrust{
namespace detail{
namespace device{
namespace cuda{
namespace detail{

template<> void __wrapper__device_stub_launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , int, thrust::detail::dispatch::detail::copy_constructor<point2d> > >( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail16copy_constructorIS6_EEEE &__cuda_0){__device_stub__ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail16copy_constructorIS8_EEEEEEvT_( __cuda_0);}}}}}}
static void __device_stub__ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail16copy_constructorIS8_EEEEEEvT_( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail16copy_constructorIS6_EEEE & __par0){ struct __T23 *__T2334;
*(void**)(void*)&__T2334 = (void*)0;if (cudaSetupArgument((void*)(char*)&__par0, sizeof(__par0), (size_t)&__T2334->__par0) != cudaSuccess) return;{ volatile static char *__f; __f = ((char *)((void ( *)( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail16copy_constructorIS6_EEEE))thrust::detail::device::cuda::detail::launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , unsigned int, thrust::detail::dispatch::detail::copy_constructor<point2d> > > )); (void)cudaLaunch(((char *)((void ( *)( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail16copy_constructorIS6_EEEE))thrust::detail::device::cuda::detail::launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , unsigned int, thrust::detail::dispatch::detail::copy_constructor<point2d> > > ))); };}namespace thrust{
namespace detail{
namespace device{
namespace cuda{
namespace detail{

template<> void __wrapper__device_stub_launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , unsigned int, thrust::detail::dispatch::detail::copy_constructor<point2d> > >( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail16copy_constructorIS6_EEEE &__cuda_0){__device_stub__ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail16copy_constructorIS8_EEEEEEvT_( __cuda_0);}}}}}}
static void __device_stub__ZN6thrust6detail6device4cuda6detail13reduce_n_smemINS_18transform_iteratorI19bbox_transformationNS0_15normal_iteratorINS_10device_ptrI7point2dEEEENS_4pairIS9_S9_EENS_11use_defaultEEESD_14bbox_reductionEEvT_jPT0_T1_( _ZN6thrust18transform_iteratorI19bbox_transformationNS_6detail15normal_iteratorINS_10device_ptrI7point2dEEEENS_4pairIS5_S5_EENS_11use_defaultEEE & __par0, const unsigned __par1, _ZN6thrust4pairI7point2dS1_EE *__par2, struct bbox_reduction & __par3){ struct __T24 *__T2362;
*(void**)(void*)&__T2362 = (void*)0;if (cudaSetupArgument((void*)(char*)&__par0, sizeof(__par0), (size_t)&__T2362->__par0) != cudaSuccess) return;if (cudaSetupArgument((void*)(char*)&__par1, sizeof(__par1), (size_t)&__T2362->__par1) != cudaSuccess) return;if (cudaSetupArgument((void*)(char*)&__par2, sizeof(__par2), (size_t)&__T2362->__par2) != cudaSuccess) return;if (cudaSetupArgument((void*)(char*)&__par3, sizeof(__par3), (size_t)&__T2362->__par3) != cudaSuccess) return;{ volatile static char *__f; __f = ((char *)((void ( *)( _ZN6thrust18transform_iteratorI19bbox_transformationNS_6detail15normal_iteratorINS_10device_ptrI7point2dEEEENS_4pairIS5_S5_EENS_11use_defaultEEE, const unsigned, _ZN6thrust4pairI7point2dS1_EE *, struct bbox_reduction))thrust::detail::device::cuda::detail::reduce_n_smem<thrust::transform_iterator<bbox_transformation, thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , thrust::pair<point2d, point2d> , thrust::use_default> , thrust::pair<point2d, point2d> , bbox_reduction> )); (void)cudaLaunch(((char *)((void ( *)( _ZN6thrust18transform_iteratorI19bbox_transformationNS_6detail15normal_iteratorINS_10device_ptrI7point2dEEEENS_4pairIS5_S5_EENS_11use_defaultEEE, const unsigned, _ZN6thrust4pairI7point2dS1_EE *, struct bbox_reduction))thrust::detail::device::cuda::detail::reduce_n_smem<thrust::transform_iterator<bbox_transformation, thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , thrust::pair<point2d, point2d> , thrust::use_default> , thrust::pair<point2d, point2d> , bbox_reduction> ))); };}namespace thrust{
namespace detail{
namespace device{
namespace cuda{
namespace detail{

template<> void __wrapper__device_stub_reduce_n_smem<thrust::transform_iterator<bbox_transformation, thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , thrust::pair<point2d, point2d> , thrust::use_default> ,thrust::pair<point2d, point2d> ,bbox_reduction>( _ZN6thrust18transform_iteratorI19bbox_transformationNS_6detail15normal_iteratorINS_10device_ptrI7point2dEEEENS_4pairIS5_S5_EENS_11use_defaultEEE &__cuda_0,const unsigned &__cuda_1, _ZN6thrust4pairI7point2dS1_EE *&__cuda_2,struct bbox_reduction &__cuda_3){__device_stub__ZN6thrust6detail6device4cuda6detail13reduce_n_smemINS_18transform_iteratorI19bbox_transformationNS0_15normal_iteratorINS_10device_ptrI7point2dEEEENS_4pairIS9_S9_EENS_11use_defaultEEESD_14bbox_reductionEEvT_jPT0_T1_( __cuda_0,__cuda_1,__cuda_2,__cuda_3);}}}}}}
static void __device_stub__ZN6thrust6detail6device4cuda6detail13reduce_n_smemIPNS_4pairI7point2dS6_EES7_14bbox_reductionEEvT_jPT0_T1_( _ZN6thrust4pairI7point2dS1_EE *__par0, const unsigned __par1, _ZN6thrust4pairI7point2dS1_EE *__par2, struct bbox_reduction & __par3){ struct __T25 *__T2402;
*(void**)(void*)&__T2402 = (void*)0;if (cudaSetupArgument((void*)(char*)&__par0, sizeof(__par0), (size_t)&__T2402->__par0) != cudaSuccess) return;if (cudaSetupArgument((void*)(char*)&__par1, sizeof(__par1), (size_t)&__T2402->__par1) != cudaSuccess) return;if (cudaSetupArgument((void*)(char*)&__par2, sizeof(__par2), (size_t)&__T2402->__par2) != cudaSuccess) return;if (cudaSetupArgument((void*)(char*)&__par3, sizeof(__par3), (size_t)&__T2402->__par3) != cudaSuccess) return;{ volatile static char *__f; __f = ((char *)((void ( *)( _ZN6thrust4pairI7point2dS1_EE *, const unsigned, _ZN6thrust4pairI7point2dS1_EE *, struct bbox_reduction))thrust::detail::device::cuda::detail::reduce_n_smem<thrust::pair<point2d, point2d> *, thrust::pair<point2d, point2d> , bbox_reduction> )); (void)cudaLaunch(((char *)((void ( *)( _ZN6thrust4pairI7point2dS1_EE *, const unsigned, _ZN6thrust4pairI7point2dS1_EE *, struct bbox_reduction))thrust::detail::device::cuda::detail::reduce_n_smem<thrust::pair<point2d, point2d> *, thrust::pair<point2d, point2d> , bbox_reduction> ))); };}namespace thrust{
namespace detail{
namespace device{
namespace cuda{
namespace detail{

template<> void __wrapper__device_stub_reduce_n_smem< _ZN6thrust4pairI7point2dS1_EE *,thrust::pair<point2d, point2d> ,bbox_reduction>( _ZN6thrust4pairI7point2dS1_EE *&__cuda_0,const unsigned &__cuda_1, _ZN6thrust4pairI7point2dS1_EE *&__cuda_2,struct bbox_reduction &__cuda_3){__device_stub__ZN6thrust6detail6device4cuda6detail13reduce_n_smemIPNS_4pairI7point2dS6_EES7_14bbox_reductionEEvT_jPT0_T1_( __cuda_0,__cuda_1,__cuda_2,__cuda_3);}}}}}}
static void __sti____cudaRegisterAll_47_tmpxft_00005e37_00000000_4_bounding_box_cpp1_ii_830a60e5(void){__cudaFatCubinHandle = __cudaRegisterFatBinary((void*)&__fatDeviceText); atexit(__cudaUnregisterBinaryUtil);__cudaRegisterFunction(__cudaFatCubinHandle, (const char*)((void ( *)( _ZN6thrust4pairI7point2dS1_EE *, const unsigned, _ZN6thrust4pairI7point2dS1_EE *, struct bbox_reduction))thrust::detail::device::cuda::detail::reduce_n_smem<thrust::pair<point2d, point2d> *, thrust::pair<point2d, point2d> , bbox_reduction> ), (char*)"_ZN6thrust6detail6device4cuda6detail13reduce_n_smemIPNS_4pairI7point2dS6_EES7_14bbox_reductionEEvT_jPT0_T1_", "_ZN6thrust6detail6device4cuda6detail13reduce_n_smemIPNS_4pairI7point2dS6_EES7_14bbox_reductionEEvT_jPT0_T1_", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);__cudaRegisterFunction(__cudaFatCubinHandle, (const char*)((void ( *)( _ZN6thrust18transform_iteratorI19bbox_transformationNS_6detail15normal_iteratorINS_10device_ptrI7point2dEEEENS_4pairIS5_S5_EENS_11use_defaultEEE, const unsigned, _ZN6thrust4pairI7point2dS1_EE *, struct bbox_reduction))thrust::detail::device::cuda::detail::reduce_n_smem<thrust::transform_iterator<bbox_transformation, thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , thrust::pair<point2d, point2d> , thrust::use_default> , thrust::pair<point2d, point2d> , bbox_reduction> ), (char*)"_ZN6thrust6detail6device4cuda6detail13reduce_n_smemINS_18transform_iteratorI19bbox_transformationNS0_15normal_iteratorINS_10device_ptrI7point2dEEEENS_4pairIS9_S9_EENS_11use_defaultEEESD_14bbox_reductionEEvT_jPT0_T1_", "_ZN6thrust6detail6device4cuda6detail13reduce_n_smemINS_18transform_iteratorI19bbox_transformationNS0_15normal_iteratorINS_10device_ptrI7point2dEEEENS_4pairIS9_S9_EENS_11use_defaultEEESD_14bbox_reductionEEvT_jPT0_T1_", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);__cudaRegisterFunction(__cudaFatCubinHandle, (const char*)((void ( *)( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail16copy_constructorIS6_EEEE))thrust::detail::device::cuda::detail::launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , unsigned int, thrust::detail::dispatch::detail::copy_constructor<point2d> > > ), (char*)"_ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail16copy_constructorIS8_EEEEEEvT_", "_ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail16copy_constructorIS8_EEEEEEvT_", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);__cudaRegisterFunction(__cudaFatCubinHandle, (const char*)((void ( *)( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail16copy_constructorIS6_EEEE))thrust::detail::device::cuda::detail::launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , int, thrust::detail::dispatch::detail::copy_constructor<point2d> > > ), (char*)"_ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail16copy_constructorIS8_EEEEEEvT_", "_ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail16copy_constructorIS8_EEEEEEvT_", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);__cudaRegisterFunction(__cudaFatCubinHandle, (const char*)((void ( *)( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail9destroyerIS6_EEEE))thrust::detail::device::cuda::detail::launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , unsigned int, thrust::detail::dispatch::detail::destroyer<point2d> > > ), (char*)"_ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail9destroyerIS8_EEEEEEvT_", "_ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEjNS0_8dispatch6detail9destroyerIS8_EEEEEEvT_", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);__cudaRegisterFunction(__cudaFatCubinHandle, (const char*)((void ( *)( _ZN6thrust6detail6device4cuda18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail9destroyerIS6_EEEE))thrust::detail::device::cuda::detail::launch_closure_by_value<thrust::detail::device::cuda::for_each_n_closure<thrust::detail::normal_iterator<thrust::device_ptr<point2d> > , int, thrust::detail::dispatch::detail::destroyer<point2d> > > ), (char*)"_ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail9destroyerIS8_EEEEEEvT_", "_ZN6thrust6detail6device4cuda6detail23launch_closure_by_valueINS2_18for_each_n_closureINS0_15normal_iteratorINS_10device_ptrI7point2dEEEEiNS0_8dispatch6detail9destroyerIS8_EEEEEEvT_", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0);__cudaRegisterShared(__cudaFatCubinHandle, (void**)"_ZN6thrust6detail6device4cuda4smemE");}
# 1 "/tmp/tmpxft_00005e37_00000000-1_bounding_box.cudafe1.stub.c" 2
