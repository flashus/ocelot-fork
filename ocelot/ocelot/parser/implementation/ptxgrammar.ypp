/*!
	\file ptxgrammar.ypp
	\author Gregory Diamos <gregory.diamos@gatech.edu>
	\date Sunday January 18, 2009
	\brief The YACC grammar file for PTX
*/

%{
	
	#include <iostream>
	#include <ocelot/parser/interface/PTXParser.h>
	#include <FlexLexer.h>
	#include <ocelot/parser/interface/PTXLexer.h>
	#include <hydrazine/implementation/debug.h>
	#include <cassert>
	#include <cstring>

	#ifdef REPORT_BASE
	#undef REPORT_BASE
	#endif

	#define REPORT_BASE 0

	namespace ptx1_3
	{
	
	int yylex( YYSTYPE* token, YYLTYPE* location, parser::PTXLexer& lexer );
	void yyerror( YYLTYPE* location, parser::PTXLexer& lexer, 
		parser::PTXParser::State& state, char const* message );
	
	std::string yyTypeToString( int );
	
%}

%union
{
	char text[1024];
	long long int value;
	long long unsigned int uvalue;

	double doubleFloat;
	float singleFloat;
}

%parse-param {parser::PTXLexer& lexer}
%parse-param {parser::PTXParser::State& state}
%lex-param {parser::PTXLexer& lexer}
%pure-parser

%token<text> TOKEN_SPECIAL_REGISTER TOKEN_LABEL TOKEN_IDENTIFIER TOKEN_STRING
%token<text> TOKEN_INV_PREDICATE_IDENTIFIER TOKEN_PREDICATE_IDENTIFIER
%token<text> TOKEN_COMPLETE_FILE TOKEN_CLOCK

%token<text> OPCODE_COS OPCODE_SQRT OPCODE_ADD OPCODE_RSQRT OPCODE_ADDC
%token<text> OPCODE_MUL OPCODE_SAD OPCODE_SUB OPCODE_EX2 OPCODE_LG2
%token<text> OPCODE_RCP OPCODE_SIN OPCODE_REM OPCODE_MUL24 OPCODE_MAD24
%token<text> OPCODE_DIV OPCODE_ABS OPCODE_NEG OPCODE_MIN OPCODE_MAX
%token<text> OPCODE_MAD OPCODE_SET OPCODE_SETP OPCODE_SELP OPCODE_SLCT
%token<text> OPCODE_MOV OPCODE_ST OPCODE_CVT OPCODE_AND OPCODE_XOR OPCODE_OR
%token<text> OPCODE_BRA OPCODE_CALL OPCODE_RET OPCODE_EXIT OPCODE_TRAP 
%token<text> OPCODE_BRKPT OPCODE_SUBC OPCODE_TEX OPCODE_LD OPCODE_BARSYNC 
%token<text> OPCODE_ATOM OPCODE_RED OPCODE_NOT OPCODE_CNOT OPCODE_VOTE
%token<text> OPCODE_SHR OPCODE_SHL
%token<text> OPCODE_FMA OPCODE_MEMBAR OPCODE_PMEVENT

%token<value> PREPROCESSOR_INCLUDE PREPROCESSOR_DEFINE PREPROCESSOR_IF 
%token<value> PREPROCESSOR_IFDEF PREPROCESSOR_ELSE PREPROCESSOR_ENDIF 
%token<value> PREPROCESSOR_LINE PREPROCESSOR_FILE

%token<value> TOKEN_ENTRY TOKEN_EXTERN TOKEN_FILE TOKEN_VISIBLE TOKEN_LOC
%token<value> TOKEN_FUNCTION TOKEN_STRUCT TOKEN_UNION TOKEN_TARGET TOKEN_VERSION
%token<value> TOKEN_SECTION

%token<value> TOKEN_CONST TOKEN_GLOBAL TOKEN_LOCAL TOKEN_PARAM TOKEN_REG
%token<value> TOKEN_SHARED TOKEN_SREG TOKEN_TEX TOKEN_SURF TOKEN_CTA TOKEN_GL

%token<value> TOKEN_U32 TOKEN_S32 TOKEN_S8 TOKEN_S16 TOKEN_S64 TOKEN_U8 
%token<value> TOKEN_U16 TOKEN_U64 TOKEN_B8 TOKEN_B16 TOKEN_B32 TOKEN_B64 
%token<value> TOKEN_F16 TOKEN_F64 TOKEN_F32 TOKEN_PRED

%token<value> TOKEN_EQ TOKEN_NE TOKEN_LT TOKEN_LE TOKEN_GT TOKEN_GE
%token<value> TOKEN_LS TOKEN_HS TOKEN_EQU TOKEN_NEU TOKEN_LTU TOKEN_LEU
%token<value> TOKEN_GTU TOKEN_GEU TOKEN_NUM TOKEN_NAN

%token<value> TOKEN_HI TOKEN_LO TOKEN_AND TOKEN_OR TOKEN_XOR
%token<value> TOKEN_RN TOKEN_RM TOKEN_RZ TOKEN_RP TOKEN_SAT TOKEN_VOLATILE
%token<value> TOKEN_UNI TOKEN_ALIGN TOKEN_BYTE TOKEN_WIDE TOKEN_CARRY
%token<value> TOKEN_RNI TOKEN_RMI TOKEN_RZI TOKEN_RPI
%token<value> TOKEN_FTZ TOKEN_APPROX TOKEN_FULL

%token<value> TOKEN_V2 TOKEN_V4

%token<value> TOKEN_ANY TOKEN_ALL

%token<value> TOKEN_MIN TOKEN_MAX TOKEN_DEC TOKEN_INC TOKEN_ADD TOKEN_CAS
%token<value> TOKEN_EXCH

%token<value> TOKEN_1D TOKEN_2D TOKEN_3D

%token<value> TOKEN_DECIMAL_CONSTANT

%token<uvalue> TOKEN_UNSIGNED_DECIMAL_CONSTANT

%token<singleFloat> TOKEN_SINGLE_CONSTANT

%token<doubleFloat> TOKEN_DOUBLE_CONSTANT

%start statements

%%

nonEntryStatements : version | target | registerDeclaration | fileDeclaration | 
	initializableDeclaration | uninitializableDeclaration | unsupported;

nonEntryStatement : nonEntryStatements
{
	state.statementEnd( @1 );
};

statement : nonEntryStatement | entry;

statements : statement | statements statement;

version : TOKEN_VERSION TOKEN_DOUBLE_CONSTANT 
{ 
	state.version( $<doubleFloat>2, @2, ir::PTXInstruction::ptx1_3 );
};

identifier : '_' | TOKEN_IDENTIFIER | opcode;

identifierList : identifier
{
	state.identifierList( $<text>1 );
};

identifierList : identifierList ',' identifier
{
	state.identifierList2( $<text>3 );
};

decimalListSingle : TOKEN_DECIMAL_CONSTANT
{
	state.decimalListSingle( $<value>1 );
};

decimalListSingle : decimalListSingle ',' TOKEN_DECIMAL_CONSTANT
{
	state.decimalListSingle2( $<value>3 );
};

decimalList : '{' decimalList '}' ',' '{' decimalList '}';
decimalList : '{' decimalListSingle '}' ',' '{' decimalListSingle '}';

decimalInitializer : decimalList | '{' decimalList '}' | 
	'{' decimalListSingle '}' | decimalListSingle;

floatListSingle : TOKEN_DOUBLE_CONSTANT
{
	state.floatList( $<doubleFloat>1 );
};

floatListSingle : floatListSingle ',' TOKEN_DOUBLE_CONSTANT
{
	state.floatList1( $<doubleFloat>3 );
};

floatList : '{' floatList '}' ',' '{' floatList '}';
floatList : '{' floatListSingle '}' ',' '{' floatListSingle '}';

floatInitializer : floatList |  '{' floatList '}' | '{' floatListSingle '}' 
	| floatListSingle;

singleListSingle : TOKEN_SINGLE_CONSTANT
{
	state.singleList( $<singleFloat>1 );
};

singleListSingle : singleListSingle ',' TOKEN_SINGLE_CONSTANT
{
	state.singleList1( $<singleFloat>3 );
};

singleList : '{' singleList '}' ',' '{' singleList '}';
singleList : '{' singleListSingle '}' ',' '{' singleListSingle '}';

singleInitializer : singleList |  '{' singleList '}' | '{' singleListSingle '}' 
	| singleListSingle;

target : TOKEN_TARGET identifierList
{
	state.target();
};

addressSpaceIdentifier : TOKEN_REG | TOKEN_SREG | TOKEN_TEX | TOKEN_CONST 
	| TOKEN_GLOBAL | TOKEN_LOCAL | TOKEN_PARAM | TOKEN_SHARED;

addressSpace : addressSpaceIdentifier
{
	state.addressSpace( $<value>1 );
};

dataTypeId : TOKEN_U8 | TOKEN_U16 | TOKEN_U32 | TOKEN_U64 | TOKEN_S8 
	| TOKEN_S16 | TOKEN_S32 | TOKEN_S64 | TOKEN_B8 | TOKEN_B16 | TOKEN_B32 
	| TOKEN_B64 | TOKEN_F16 | TOKEN_F32 | TOKEN_F64 | TOKEN_PRED;

dataType : dataTypeId
{
	state.dataType( $<value>1 );
};

vectorToken : TOKEN_V2 | TOKEN_V4;

vectorType : vectorToken
{
	state.vectorType( $<value>1 );
};

alignment : TOKEN_ALIGN TOKEN_DECIMAL_CONSTANT { state.alignment = $<value>2; };

addressableVariablePrefix : dataType vectorType { state.alignment = 1; };
addressableVariablePrefix : vectorType dataType { state.alignment = 1; };
addressableVariablePrefix : dataType { state.alignment = 1; };
addressableVariablePrefix : alignment dataType vectorType;
addressableVariablePrefix : alignment vectorType dataType;
addressableVariablePrefix : dataType alignment vectorType;
addressableVariablePrefix : dataType vectorType alignment;
addressableVariablePrefix : vectorType dataType alignment;
addressableVariablePrefix : vectorType alignment dataType;
addressableVariablePrefix : dataType alignment;
addressableVariablePrefix : alignment dataType;

arrayDimensionSet : '[' TOKEN_DECIMAL_CONSTANT ']'
{
	state.arrayDimensionSet( $<value>2, @2, false );
};

arrayDimensionSet : arrayDimensionSet '[' TOKEN_DECIMAL_CONSTANT ']'
{
	state.arrayDimensionSet( $<value>3, @3, true );
};

arrayDimensionSet : '[' ']'
{
	state.arrayDimensionSet( );
};

arrayDimensions : /* empty string */
{
	state.arrayDimensions();
};

arrayDimensions : arrayDimensionSet;

initializer : /* empty string */;

assignment : '='
{
	state.assignment();
};

initializer : assignment decimalInitializer | assignment floatInitializer 
	| assignment singleInitializer;

registerDeclaration : TOKEN_REG dataType identifier ';'
{
	state.registerDeclaration( $<text>3, @3 );	
};

registerDeclaration : TOKEN_REG dataType identifier 
	'<' TOKEN_DECIMAL_CONSTANT '>' ';'
{
	state.registerDeclaration( $<text>3, @3, $<value>5 );	
};

fileDeclaration : TOKEN_COMPLETE_FILE
{
	state.fileDeclaration( $<text>1 );
};

initializableDeclaration : initializable addressableVariablePrefix 
	identifier arrayDimensions initializer ';'
{
	state.initializableDeclaration( $<text>3, @3, @5 );
};

entryStart : TOKEN_ENTRY identifier 
{
	state.entry( $<text>2, @1 );
};

entryMid : '{'
{
	state.entryMid( @1 );
};

entry : entryStart entryMid entryDeclarations '}'
{
	state.entryEnd( @4 );
};

instruction : basicInstruction2 | basicInstruction3 | branch | addOrSub 
	| addCOrSubC | atom | bar | brkpt | cvt | div | exit | ld | mad | mad24 
	| mov | mul24 | mul | red | ret | selp | set | setp | slct | st | tex 
	| trap | vote;

entryStatement : registerDeclaration | uninitializableDeclaration 
	| location | label;

entryDeclaration : entryStatement
{
	state.statementEnd( @1 );	
};

entryDeclaration : guard instruction
{
	state.entryDeclaration( @2 );
	state.instruction();
};

entryDeclarations : entryDeclaration;

entryDeclarations : entryDeclarations entryDeclaration;

externOrVisible : TOKEN_EXTERN
{
	state.attribute( false, true );
};

externOrVisible : TOKEN_VISIBLE
{
	state.attribute( true, false );
};

externOrVisible : /* empty string */
{
	state.attribute( false, false );
};

uninitializableAddress : TOKEN_LOCAL | TOKEN_SHARED | TOKEN_PARAM;
initializableAddress : TOKEN_CONST | TOKEN_TEX | TOKEN_GLOBAL;

uninitializable : externOrVisible uninitializableAddress
{
	state.locationAddress( $<value>2 );
};

initializable : externOrVisible initializableAddress
{
	state.locationAddress( $<value>2 );
};

opcode : OPCODE_COS | OPCODE_SQRT | OPCODE_ADD | OPCODE_RSQRT | OPCODE_ADDC
	| OPCODE_MUL | OPCODE_SAD | OPCODE_SUB | OPCODE_EX2 | OPCODE_LG2
	| OPCODE_RCP | OPCODE_SIN | OPCODE_REM | OPCODE_MUL24 | OPCODE_MAD24
	| OPCODE_DIV | OPCODE_ABS | OPCODE_NEG | OPCODE_MIN | OPCODE_MAX
	| OPCODE_MAD | OPCODE_SET | OPCODE_SETP | OPCODE_SELP | OPCODE_SLCT
	| OPCODE_MOV | OPCODE_ST | OPCODE_CVT | OPCODE_AND | OPCODE_XOR | OPCODE_OR
	| OPCODE_BRA | OPCODE_CALL | OPCODE_RET | OPCODE_EXIT | OPCODE_TRAP 
	| OPCODE_BRKPT | OPCODE_SUBC | OPCODE_TEX | OPCODE_LD | OPCODE_BARSYNC 
	| OPCODE_ATOM | OPCODE_RED | OPCODE_NOT | OPCODE_CNOT | OPCODE_VOTE
	| OPCODE_SHR | OPCODE_SHL | OPCODE_MEMBAR | OPCODE_FMA | OPCODE_PMEVENT;

uninitializableDeclaration : uninitializable addressableVariablePrefix 
	identifier arrayDimensions ';'
{
	state.uninitializableDeclaration( $<text>3 );
};

location : TOKEN_LOC TOKEN_DECIMAL_CONSTANT TOKEN_DECIMAL_CONSTANT 
	TOKEN_DECIMAL_CONSTANT
{
	state.location( $<value>2, $<value>3, $<value>4 );
};

label : TOKEN_LABEL
{
	state.label( $<text>1 );
};

labelOperand : identifier
{
	state.labelOperand( $<text>1 );
};

nonLabelOperand : identifier
{
	state.nonLabelOperand( $<text>1, @1, false );
};

nonLabelOperand : '!' identifier
{
	state.nonLabelOperand( $<text>2, @1, true );
};

baseOperand : TOKEN_DECIMAL_CONSTANT
{
	state.baseOperand( $<value>1 );
};

baseOperand : TOKEN_UNSIGNED_DECIMAL_CONSTANT
{
	state.baseOperand( $<uvalue>1 );
};

baseOperand : TOKEN_DOUBLE_CONSTANT
{
	state.baseOperand( $<doubleFloat>1 );
};

baseOperand : TOKEN_SINGLE_CONSTANT
{
	state.baseOperand( $<singleFloat>1 );
};

baseOperand : TOKEN_CLOCK
{
	state.clockOperand( $<text>1 );
};

baseOperand : TOKEN_SPECIAL_REGISTER
{
	state.specialOperand( $<text>1 );
};

operand : baseOperand | nonLabelOperand;

memoryOperand : operand;

memoryOperand : identifier '+' TOKEN_DECIMAL_CONSTANT
{
	state.memoryOperand( $<text>1, $<value>3, @1, false );
};

memoryOperand : identifier '-' TOKEN_DECIMAL_CONSTANT
{
	state.memoryOperand( $<text>1, $<value>3, @1, true );
}; 

basicInstruction2Opcode : OPCODE_ABS | OPCODE_COS | OPCODE_CNOT | OPCODE_EX2 
	| OPCODE_LG2 | OPCODE_NEG | OPCODE_NOT | OPCODE_RCP 
	| OPCODE_RSQRT | OPCODE_SIN | OPCODE_SQRT;

guard : TOKEN_PREDICATE_IDENTIFIER
{
	state.guard( $<text>1, @1, false );
};

guard : TOKEN_INV_PREDICATE_IDENTIFIER
{
	state.guard( $<text>1, @1, true );
};

guard : /* empty string */
{
	state.guard();
}

basicInstruction2 : basicInstruction2Opcode dataType operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>2, 3 );
};

basicInstruction3Opcode : OPCODE_AND | OPCODE_MAX | OPCODE_MIN | OPCODE_OR 
	| OPCODE_REM | OPCODE_SHL | OPCODE_SHR | OPCODE_XOR 
	| OPCODE_ADD | OPCODE_MUL | OPCODE_ADDC | OPCODE_SUB;

basicInstruction3 : basicInstruction3Opcode dataType operand ',' operand ',' 
	operand ';'
{
	state.instruction( $<text>1, $<value>2, 4 );
};

branchOperand : baseOperand | labelOperand;

uni : /* empty string */
{
	state.uni( false );
};

uni : TOKEN_UNI
{
	state.uni( true );
};

branch : OPCODE_BRA uni branchOperand ';'
{
	state.instruction( $<text>1, 2 );
};

branch : OPCODE_CALL branchOperand ';'
{
	state.instruction( $<text>1, 2 );
};

addModifier : TOKEN_CARRY
{
	state.carry( true );
}

addModifier : TOKEN_SAT
{
	state.carry( false );
	state.modifier( $<value>1 );
}

addOrSubOpcode : OPCODE_ADD | OPCODE_SUB;

addOrSub : addOrSubOpcode addModifier dataType operand ',' operand ',' 
	operand ';'
{
	state.instruction( $<text>1, $<value>3, 4 );
};

addCModifier : TOKEN_CARRY
{
	state.carry( true );
};

addCOrSubCOpcode : OPCODE_ADDC | OPCODE_SUBC;

addCOrSubC : addCOrSubCOpcode addCModifier dataType operand ',' operand 
	',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 4 );
};

atomicOperationId : TOKEN_AND | TOKEN_OR | TOKEN_XOR | TOKEN_CAS | TOKEN_EXCH 
	| TOKEN_ADD | TOKEN_INC | TOKEN_DEC | TOKEN_MIN | TOKEN_MAX;

atomicOperation : atomicOperationId
{
	state.atomic( $<value>1 );
};

atom : OPCODE_ATOM addressSpace atomicOperation dataType operand ',' '[' 
	memoryOperand ']' ',' operand ';'
{
	state.instruction( $<text>1, $<value>4, 4 );
};

atom : OPCODE_ATOM addressSpace atomicOperation dataType operand ',' '[' 
	memoryOperand ']' ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>4, 5 );
};

bar : OPCODE_BARSYNC operand ';'
{
	state.instruction( $<text>1, 2 );
};

brkpt : OPCODE_BRKPT ';'
{
	state.instruction( $<text>1, 1 );
};

cvtModifier1 : TOKEN_RN | TOKEN_RM | TOKEN_RP | TOKEN_RZ 
	| TOKEN_RNI | TOKEN_RMI | TOKEN_RPI | TOKEN_RZI;

cvtModifier : /* empty string */
{
};

cvtModifier : TOKEN_SAT
{
	state.modifier( $<value>1 );
};

cvtModifier : cvtModifier1
{
	state.modifier( $<value>1 );
};

cvtModifier : cvtModifier1 TOKEN_SAT
{
	state.modifier( $<value>2 );
};

cvt : OPCODE_CVT cvtModifier dataType dataType operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 3 );
	state.convert( $<value>4, @1 );
};

divModifier : TOKEN_SAT
{
	state.modifier( $<value>1 );
};

divModifier : /* empty string */
{
};

div : OPCODE_DIV divModifier dataType operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 4 );
};

exit : OPCODE_EXIT ';'
{
	state.instruction( $<text>1, 1 );
};

ldModifier : TOKEN_VOLATILE addressSpace
{
	state.volatileFlag( true );
};

ldModifier : TOKEN_VOLATILE addressSpace vectorType
{
	state.volatileFlag( true );
};

ldModifier : addressSpace vectorType
{
	state.volatileFlag( false );
};

ldModifier : addressSpace
{
	state.volatileFlag( false );		
};

ld : OPCODE_LD ldModifier dataType arrayOperand ',' '[' memoryOperand ']' ';'
{
	state.instruction( $<text>1, $<value>3, 3 );
};

hiOrLo : TOKEN_HI | TOKEN_LO;

roundHiLoWide : TOKEN_RN | TOKEN_RM | TOKEN_RP | TOKEN_RZ | hiOrLo | TOKEN_WIDE;

madModifier : /*empty string */;

madModifier : mulModifier;

mulModifier : roundHiLoWide
{
	state.modifier( $<value>1 );
};

mulModifier : TOKEN_SAT
{
	state.modifier( $<value>1 );
};

mulModifier : roundHiLoWide TOKEN_SAT
{
	state.modifier( $<value>1 );
	state.modifier( $<value>2 );
};

mad : OPCODE_MAD madModifier dataType operand ',' operand 
	',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 5 );
};

mad24Modifier : /* empty string */;

mad24Modifier : hiOrLo
{
	state.modifier( $<value>1 );
};

mad24Modifier : TOKEN_SAT
{
	state.modifier( $<value>1 );
};

mad24Modifier : hiOrLo TOKEN_SAT
{
	state.modifier( $<value>1 );
	state.modifier( $<value>2 );
};

mad24 : OPCODE_MAD24 mad24Modifier dataType operand ',' operand 
	',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 5 );
};

mov : OPCODE_MOV dataType arrayOperand ',' arrayOperand ';'
{
	state.instruction( $<text>1, $<value>2, 3 );
};

mul24Modifier : /* empty string */;

mul24Modifier : hiOrLo
{
	state.modifier( $<value>1 );
};

mul24 : OPCODE_MUL24 mul24Modifier dataType operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 4 );
};

mul : OPCODE_MUL mulModifier dataType operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 4 );
};

reductionOperationId : TOKEN_AND | TOKEN_XOR | TOKEN_OR | TOKEN_ADD | TOKEN_INC
	| TOKEN_DEC | TOKEN_MIN | TOKEN_MAX;
	
reductionOperation : reductionOperationId
{
	state.reduction( $<value>1 );
};

red : OPCODE_RED addressSpace reductionOperation dataType operand ',' 
	operand ';'
{
	state.instruction( $<text>1, $<value>4, 3 );
};

retUni : /* empty string */
{
	state.uni( false );
};

retUni : TOKEN_UNI
{
	state.uni( true );
};

ret : OPCODE_RET retUni ';'
{
	state.instruction( $<text>1, 1 );
};

comparisonId : TOKEN_EQ | TOKEN_NE | TOKEN_LT | TOKEN_LE | TOKEN_GT | TOKEN_GE
	| TOKEN_LS | TOKEN_HS | TOKEN_EQU | TOKEN_NEU | TOKEN_LTU | TOKEN_LEU
	| TOKEN_GTU | TOKEN_GEU | TOKEN_NUM | TOKEN_NAN;

comparison : comparisonId
{
	state.comparison( $<value>1 );
};

set : OPCODE_SET comparison dataType dataType operand ',' operand ',' 
	operand ';'
{
	state.instruction( $<text>1, $<value>3, 4 );
	state.convert( $<value>4, @1 );
};

boolOperatorId : TOKEN_AND | TOKEN_OR | TOKEN_XOR;

boolOperator : boolOperatorId
{
	state.boolean( $<value>1 );
};

selp : OPCODE_SELP dataType operand ',' operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>2, 5 );
};

set : OPCODE_SET comparison boolOperator dataType dataType operand ',' 
	operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>4, 5 );
	state.convert( $<value>5, @1 );
};

setp : OPCODE_SETP comparison dataType operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>3, 4 );
};

setp : OPCODE_SETP comparison boolOperator dataType operand ',' 
	operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>4, 5 );
};

setp : OPCODE_SETP comparison boolOperator dataType operand '|' 
	operand ',' operand ',' operand ',' operand ';'
{
	state.instruction( $<text>1, $<value>4, 6 );
}; 

slct : OPCODE_SLCT dataType dataType operand ',' operand ',' operand ',' 
	operand ';'
{
	state.instruction( $<text>1, $<value>2, 5 );
	state.convertC( $<value>3, @1 );
};

arrayOperand : operand;
arrayOperand : '{' identifierList '}'
{
	state.arrayOperand( @1 );
};

st : OPCODE_ST ldModifier dataType '[' memoryOperand ']' ',' arrayOperand ';'
{
	state.instruction( $<text>1, $<value>3, 3 );
};

geometryId : TOKEN_1D | TOKEN_2D | TOKEN_3D;

geometry : geometryId
{
	state.geometry( $<value>1 );
};

tex : OPCODE_TEX geometry TOKEN_V4 dataType dataType arrayOperand ',' '[' 
	operand ',' arrayOperand ']' ';'
{
	state.tex( $<value>5 );
	state.convertD( $<value>4, @1 );
};

trap : OPCODE_TRAP ';'
{
	state.instruction( $<text>1, 1 );
};

voteOperationId : TOKEN_ANY | TOKEN_ALL | TOKEN_UNI;

voteOperation : voteOperationId
{
	state.vote( $<value>1 );
};

vote : OPCODE_VOTE voteOperation TOKEN_PRED operand ',' operand ';'
{
	state.instruction( $<text>1, TOKEN_PRED, 3 );
};

unsupported: TOKEN_STRUCT
{
	state.structure( @1 );
};

unsupported: TOKEN_UNION
{
	state.aUnion( @1 );
};

unsupported: TOKEN_FUNCTION
{
	state.function( @1 );
};

%%

int yylex( YYSTYPE* token, YYLTYPE* location, parser::PTXLexer& lexer )
{
	lexer.yylval = token;
	
	int tokenValue = lexer.yylexPosition();
	location->first_line = lexer.lineno();
	location->first_column = lexer.column;
	
	report( " Lexer (" << location->first_line << "," << location->first_column 
		<< "): " << parser::PTXLexer::toString( tokenValue ) << " \"" 
		<< lexer.YYText() << "\"" );
	
	return tokenValue;
}

void yyerror( YYLTYPE* location, parser::PTXLexer& lexer, 
	parser::PTXParser::State& state, char const* message )
{

	parser::PTXParser::Exception exception;
	std::stringstream stream;
	stream << parser::PTXParser::toString( *location, state ) 
		<< "Syntax error, could not match any rule for \"" << lexer.YYText() 
		<< "\"";
	exception.message = stream.str();
	exception.error = parser::PTXParser::State::SyntaxError;
	throw exception;

}

}

