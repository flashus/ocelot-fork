#! /bin/python

################################################################################
#	\file   DebSConscript
#	\author Gregory Diamos <gregory.diamos@gatech.edu>
#   \date   Thursday March 31, 2011
#	\brief  The SCons slave build script for creating a .deb for Ocelot
################################################################################

import os, shutil, sys
Import('env') # exported by parent SConstruct

# Here's the core info for the package

DEBPATH = 'ocelot_deb'
DEBNAME = 'ocelot'
DEBVERSION = env['VERSION']
DEBMAINT = "Gregory Diamos [gregory.diamos@gatech.edu]"
DEBARCH = env['deb_arch']
DEBDEPENDS = "libboost-all-dev, flex, bison, g++"
DEBDESC = "The ocelot dynamic compiler"

DEBFILES = []

for installedFile in env['installed_files']:
	installedFilePath = installedFile[0]
	DEBFILES.append((str(installedFilePath)[1:], str(installedFilePath)))
	
# Now we specify the files to be included in the .deb
# Where they should go, and where they should be copied from.
# If you have a lot of files, you may wish to generate this 
# list in some other way.
#("usr/bin/myutility",			 "#src/myutility/myutility"),
#("etc/myutility/myutility.conf",  "#misc/myutility.conf"),
	
# This is the debian package we're going to create
debpkg = '#%s_%s-%s_%s.deb' % (DEBNAME, DEBVERSION, DEBVERSION, DEBARCH)

# and we want it to be built when we build 'debian'
env.Alias("debian", debpkg)

DEBCONTROLFILE = os.path.join(DEBPATH, "DEBIAN/control")

# This copies the necessary files into place into place.
# Fortunately, SCons creates the necessary directories for us.
for f in DEBFILES:
	# We put things in a directory named after the package
	dest = os.path.join(DEBPATH, f[0])
	# The .deb package will depend on this file
	env.Depends(debpkg, dest)
	# Copy from the the source tree.
	env.Command(dest, f[1], Copy('$TARGET','$SOURCE'))
	# The control file also depends on each source because we'd like
	# to know the total installed size of the package
	env.Depends(DEBCONTROLFILE, dest)

# Now to create the control file:

CONTROL_TEMPLATE = """
Package: %s
Priority: extra
Section: misc
Installed-Size: %s
Maintainer: %s
Architecture: %s
Version: %s-%s
Depends: %s
Description: %s

"""
env.Depends(debpkg,DEBCONTROLFILE )

# The control file should be updated when the SVN version changes
env.Depends(DEBCONTROLFILE, env.Value(DEBVERSION))

# This function creates the control file from the template and info
# specified above, and works out the final size of the package.
def make_control(target=None, source=None, env=None):
	installed_size = 0
	for i in DEBFILES:
		installed_size += os.stat(str(env.File(i[1])))[6]
	control_info = CONTROL_TEMPLATE % (
		DEBNAME, installed_size, DEBMAINT, DEBARCH, DEBVERSION,
		DEBVERSION, DEBDEPENDS, DEBDESC)
	f = open(str(target[0]), 'w')
	f.write(control_info)
	f.close()
	
# We can generate the control file by calling make_control
env.Command(DEBCONTROLFILE, None, make_control)

# And we can generate the .deb file by calling dpkg-deb
env.Command(debpkg, DEBCONTROLFILE,
	"fakeroot dpkg-deb -b %s %s" % (os.path.abspath(DEBPATH), "$TARGET"))

