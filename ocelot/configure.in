################################################################################
#	\file configure.in
#	\author Gregory Diamos
#	\date Wednesday September 10, 2008
# 	\brief Autoconf input file describing the checks that need to be performed 
#			to create a configure script for the ocelot project.
################################################################################

################################################################################
## Package specification
# Revision scheme is MajorFeatureSet.MinorFeatureSet.SVNChangelistNumber
AC_PREREQ(2.61)
AC_INIT(ocelot, 1.0.278, gregory.diamos@gatech.edu)
AM_INIT_AUTOMAKE([])
################################################################################

################################################################################
## Configure autoconf
AC_USE_SYSTEM_EXTENSIONS
AC_CONFIG_MACRO_DIR([m4])
################################################################################

################################################################################
## Package Configuration
AC_CONFIG_HEADER([configure.h])
################################################################################

################################################################################
## Checks for libraries.
AC_CHECK_LIB([boost_system-mt], [main], [], \
	AC_MSG_ERROR("libboost_system required"))
AC_CHECK_LIB([boost_filesystem-mt], [main], [], \
	AC_MSG_ERROR("libboost_filesystem required"))
AC_CHECK_LIB([boost_wserialization-mt], [main], [], \
	AC_MSG_ERROR("libboost_wserialization required"))
AC_CHECK_LIB([boost_serialization-mt], [main], [], \
	AC_MSG_ERROR("libboost_serialization required"))
AC_CHECK_LIB([GLEW], [glewInit], [], \
	AC_MSG_ERROR("libglew required"))
AC_CHECK_LIB([rt], [clock_gettime], [],\
	AC_MSG_ERROR("librt required"))
AC_CHECK_LIB([cuda], [cuInit], HAVE_CUDA_DRIVER_API=yes, \
	HAVE_CUDA_DRIVER_API=no)

gpu_default="yes"
AC_ARG_ENABLE(gpu, [  --enable-gpu=[no/yes] turn on NVIDIA GPU 
	support [default=$gpu_default]],, enable_gpu=$gpu_default)

if test "x$enable_gpu" = "xyes"; then
	if test $HAVE_CUDA_DRIVER_API = yes
	then
		AC_DEFINE(HAVE_CUDA_DRIVER_API, [1], \
			["Define to 1 if the cuda driver api is found"])
		AC_SUBST(CUDA_DRIVER_API_LIBARY, "-lcuda")
	else
		AC_DEFINE(HAVE_CUDA_DRIVER_API, [0], \
			["Define to 1 if the cuda driver api is found"])
		AC_SUBST(CUDA_DRIVER_API_LIBARY, "")
	fi
else
	AC_MSG_NOTICE(Disabled NVIDIA GPU support via libcuda)
	AC_DEFINE(HAVE_CUDA_DRIVER_API, [0], \
		["Define to 1 if the cuda driver api is found"])
	AC_SUBST(CUDA_DRIVER_API_LIBARY, "")
fi
################################################################################

################################################################################
## Checks for programs.
AC_PROG_LIBTOOL
AC_PROG_CXX
AC_PROG_CC
AM_PROG_CC_C_O
AM_PROG_LEX
AC_PROG_YACC
################################################################################

################################################################################
# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([fenv.h float.h memory.h unistd.h])
################################################################################

################################################################################
# Check for non-compiler programs
AC_CHECK_PROG(HAVE_LLVM_CONFIG, llvm-config, yes, no)

if test $HAVE_LLVM_CONFIG = yes
then
	LLVM_VERSION=$(llvm-config --version)
	if test $LLVM_VERSION = 2.7svn
	then
		AC_DEFINE(HAVE_LLVM, [1], ["Define to 1 if llvm is installed"])
		AC_SUBST(LLVM_CFLAGS, $(llvm-config --cppflags))
		AC_SUBST(LLVM_LDFLAGS, "$(llvm-config --ldflags --libs core jit native \
			asmparser instcombine | tr '\n' ' ') -rdynamic")
	else
		AC_WARN(LLVM Support Not Enabled: version $LLVM_VERSION found but \
			requires 2.7svn )
		AC_SUBST(LLVM_CFLAGS, "")
		AC_SUBST(LLVM_LDFLAGS, "")
	fi
else
	AC_SUBST(LLVM_CFLAGS, "")
	AC_SUBST(LLVM_LDFLAGS, "")
fi

################################################################################

################################################################################
# Set variables in the configure.h file
AC_DEFINE_UNQUOTED(OCELOT_LDFLAGS, ["-locelot $LLVM_LDFLAGS"], \
	["Define the ocelot linker flags"])
AC_DEFINE_UNQUOTED(OCELOT_CXXFLAGS, ["$LLVM_CFLAGS"], \
	["Define the ocelot compile flags"])
################################################################################

################################################################################
# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_INLINE
AC_TYPE_SIZE_T
AC_TYPE_UINT32_T
AC_TYPE_UINT8_T
AC_CHECK_TYPES([ptrdiff_t])
################################################################################

################################################################################
# Checks for library functions.
AC_FUNC_FSEEKO
AC_FUNC_MEMCMP
AC_FUNC_MKTIME
AC_FUNC_ALLOCA
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_SETVBUF_REVERSED
AC_FUNC_STRCOLL
AC_FUNC_STRERROR_R
AC_FUNC_STRFTIME
AC_FUNC_STRNLEN
AC_FUNC_STRTOD
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([clock_gettime getpagesize memmove memset munmap fesetround \
	floor select sqrt])
################################################################################

################################################################################
## Output generation
AC_CONFIG_FILES([Makefile])
AC_OUTPUT
################################################################################

