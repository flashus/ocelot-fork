################################################################################
#	\file configure.in
#	\author Gregory Diamos
#	\date Monday June 15, 2009
# 	\brief Autoconf input file describing the checks that need to be performed 
#			to create a configure script for the ocelot sdk2.2 regression test
#			project.
################################################################################

################################################################################
## Package specification
# Revision scheme is MajorFeatureSet.MinorFeatureSet.SVNChangelistNumber
AC_PREREQ(2.61)
AC_INIT(ocelotSdk2.2RegressionSuite, 0.1.7, gregory.diamos@gatech.edu)
AM_INIT_AUTOMAKE([])
################################################################################

################################################################################
## Configure autoconf
AC_USE_SYSTEM_EXTENSIONS
AC_CONFIG_MACRO_DIR([m4])
################################################################################

################################################################################
## Package Configuration
AC_CONFIG_HEADER([configure.h])
################################################################################

################################################################################
## Checks for libraries.
AC_CHECK_LIB([rt], [clock_gettime], [], \
	AC_MSG_ERROR("librt required"))
AC_CHECK_LIB([GL], [glIsTexture], [], \
	AC_MSG_ERROR("libGL required"))
AC_CHECK_LIB([GLEW], [glewInit], [], \
	AC_MSG_ERROR("libGLEW required"))
AC_CHECK_LIB([GLU], [gluGetString], [], \
	AC_MSG_ERROR("libGLU required"))
AC_CHECK_LIB([glut], [glutMainLoop], [], \
	AC_MSG_ERROR("libglut required"))
	
AC_CHECK_LIB([hydrazine], [main], [], \
	AC_MSG_ERROR("libhydrazine required"))
AC_CHECK_LIB([OcelotParser], [main], [], \
	AC_MSG_ERROR("libOcelotParser required"), [-lOcelotIr])	
AC_CHECK_LIB([OcelotIr], [main], [], \
	AC_MSG_ERROR("libOcelotIr required"))	
AC_CHECK_LIB([OcelotTrace], [main], [], \
	AC_MSG_ERROR("libOcelotTrace required"))	
AC_CHECK_LIB([OcelotExecutive], [main], [], \
	AC_MSG_ERROR("libOcelotExecutive required"))	
AC_CHECK_LIB([OcelotAnalysis], [main], [], \
	AC_MSG_ERROR("libOcelotAnalysis required"))	
AC_CHECK_LIB([OcelotCuda], [main], [], \
	AC_MSG_ERROR("libOcelotCuda required"))	
################################################################################

################################################################################
## Checks for programs.
AC_PROG_LIBTOOL
AC_PROG_CXX
AC_PROG_CC
AM_PROG_CC_C_O
################################################################################

################################################################################
# Checks for header files.
AC_FUNC_ALLOCA
AC_HEADER_STDC
AC_CHECK_HEADERS([float.h limits.h memory.h stdint.h stdlib.h string.h \
	sys/time.h wchar.h])
################################################################################

################################################################################
# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_TYPE_UID_T
AC_C_INLINE
AC_TYPE_INT16_T
AC_TYPE_INT32_T
AC_TYPE_INT64_T
AC_TYPE_INT8_T
AC_TYPE_MODE_T
AC_FUNC_OBSTACK
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_STRUCT_TIMEZONE
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT64_T
AC_TYPE_UINT8_T
AC_CHECK_TYPES([ptrdiff_t])
################################################################################

################################################################################
# Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_FSEEKO
AC_FUNC_MALLOC
AC_FUNC_MKTIME
AC_FUNC_REALLOC
AC_FUNC_STRCOLL
AC_FUNC_STRERROR_R
AC_FUNC_STRNLEN
AC_FUNC_STRTOD
AC_CHECK_FUNCS([atexit bzero clock_gettime floor getdelim gettimeofday \
	localtime_r mblen memchr memmove mempcpy memset modf pow putenv realpath \
	rint rpmatch select setenv sqrt stime stpcpy strcasecmp strchr strcspn \
	strdup strerror strncasecmp strndup strpbrk strrchr strspn strstr strtol \
	strtoul strtoull strtoumax strverscmp tzset])
################################################################################

###############################################################################
# Setup CUDA paths
# 
AC_ARG_WITH([cuda],
	[--with-cuda=PATH prefix where cuda is installed [default=/usr/local/cuda]])

if test -n "$with_cuda"
then
	CUDA_CFLAGS="-I$with_cuda/include"
	CUDA_LIBS="-L$with_cuda/lib -lcudart -lcublas"
	CUFFT_LIBS="-L$with_cuda/lib -lcufft"
	CUBLAS_LIBS="-L$with_cuda/lib -lcublas"
	NVCC="$with_cuda/bin/nvcc"
else
	CUDA_CFLAGS="-I/usr/local/cuda/include"
	CUDA_LIBS="-L/usr/local/cuda/lib -lcudart -lcublas"
	CUFFT_LIBS="-L/usr/local/cuda/lib -lcufft"
	CUBLAS_LIBS="-L/usr/local/cuda/lib -lcublas"
	NVCC="nvcc"
fi

AC_SUBST(CUDA_CFLAGS)
AC_SUBST(CUDA_LIBS)
AC_SUBST(CUFFT_LIBS)
AC_SUBST(CUBLAS_LIBS)
AC_SUBST(NVCC)
################################################################################

################################################################################
## Output generation
AC_CONFIG_FILES([Makefile])
AC_OUTPUT
################################################################################

